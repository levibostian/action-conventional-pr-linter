require("./sourcemap-register.js")
/******/ ;(() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ 87351: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.issue = exports.issueCommand = void 0
      const os = __importStar(__nccwpck_require__(22037))
      const utils_1 = __nccwpck_require__(5278)
      /**
       * Commands
       *
       * Command Format:
       *   ::name key=value,key=value::message
       *
       * Examples:
       *   ::warning::This is the message
       *   ::set-env name=MY_VAR::some value
       */
      function issueCommand(command, properties, message) {
        const cmd = new Command(command, properties, message)
        process.stdout.write(cmd.toString() + os.EOL)
      }
      exports.issueCommand = issueCommand
      function issue(name, message = "") {
        issueCommand(name, {}, message)
      }
      exports.issue = issue
      const CMD_STRING = "::"
      class Command {
        constructor(command, properties, message) {
          if (!command) {
            command = "missing.command"
          }
          this.command = command
          this.properties = properties
          this.message = message
        }
        toString() {
          let cmdStr = CMD_STRING + this.command
          if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += " "
            let first = true
            for (const key in this.properties) {
              if (this.properties.hasOwnProperty(key)) {
                const val = this.properties[key]
                if (val) {
                  if (first) {
                    first = false
                  } else {
                    cmdStr += ","
                  }
                  cmdStr += `${key}=${escapeProperty(val)}`
                }
              }
            }
          }
          cmdStr += `${CMD_STRING}${escapeData(this.message)}`
          return cmdStr
        }
      }
      function escapeData(s) {
        return utils_1
          .toCommandValue(s)
          .replace(/%/g, "%25")
          .replace(/\r/g, "%0D")
          .replace(/\n/g, "%0A")
      }
      function escapeProperty(s) {
        return utils_1
          .toCommandValue(s)
          .replace(/%/g, "%25")
          .replace(/\r/g, "%0D")
          .replace(/\n/g, "%0A")
          .replace(/:/g, "%3A")
          .replace(/,/g, "%2C")
      }
      //# sourceMappingURL=command.js.map

      /***/
    },

    /***/ 42186: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __awaiter =
        (this && this.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value)
                })
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value))
              } catch (e) {
                reject(e)
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value))
              } catch (e) {
                reject(e)
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected)
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next())
          })
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getIDToken =
        exports.getState =
        exports.saveState =
        exports.group =
        exports.endGroup =
        exports.startGroup =
        exports.info =
        exports.notice =
        exports.warning =
        exports.error =
        exports.debug =
        exports.isDebug =
        exports.setFailed =
        exports.setCommandEcho =
        exports.setOutput =
        exports.getBooleanInput =
        exports.getMultilineInput =
        exports.getInput =
        exports.addPath =
        exports.setSecret =
        exports.exportVariable =
        exports.ExitCode =
          void 0
      const command_1 = __nccwpck_require__(87351)
      const file_command_1 = __nccwpck_require__(717)
      const utils_1 = __nccwpck_require__(5278)
      const os = __importStar(__nccwpck_require__(22037))
      const path = __importStar(__nccwpck_require__(71017))
      const oidc_utils_1 = __nccwpck_require__(98041)
      /**
       * The code to exit an action
       */
      var ExitCode
      ;(function (ExitCode) {
        /**
         * A code indicating that the action was successful
         */
        ExitCode[(ExitCode["Success"] = 0)] = "Success"
        /**
         * A code indicating that the action was a failure
         */
        ExitCode[(ExitCode["Failure"] = 1)] = "Failure"
      })((ExitCode = exports.ExitCode || (exports.ExitCode = {})))
      //-----------------------------------------------------------------------
      // Variables
      //-----------------------------------------------------------------------
      /**
       * Sets env variable for this action and future actions in the job
       * @param name the name of the variable to set
       * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function exportVariable(name, val) {
        const convertedVal = utils_1.toCommandValue(val)
        process.env[name] = convertedVal
        const filePath = process.env["GITHUB_ENV"] || ""
        if (filePath) {
          const delimiter = "_GitHubActionsFileCommandDelimeter_"
          const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`
          file_command_1.issueCommand("ENV", commandValue)
        } else {
          command_1.issueCommand("set-env", { name }, convertedVal)
        }
      }
      exports.exportVariable = exportVariable
      /**
       * Registers a secret which will get masked from logs
       * @param secret value of the secret
       */
      function setSecret(secret) {
        command_1.issueCommand("add-mask", {}, secret)
      }
      exports.setSecret = setSecret
      /**
       * Prepends inputPath to the PATH (for this action and future actions)
       * @param inputPath
       */
      function addPath(inputPath) {
        const filePath = process.env["GITHUB_PATH"] || ""
        if (filePath) {
          file_command_1.issueCommand("PATH", inputPath)
        } else {
          command_1.issueCommand("add-path", {}, inputPath)
        }
        process.env["PATH"] = `${inputPath}${path.delimiter}${process.env["PATH"]}`
      }
      exports.addPath = addPath
      /**
       * Gets the value of an input.
       * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
       * Returns an empty string if the value is not defined.
       *
       * @param     name     name of the input to get
       * @param     options  optional. See InputOptions.
       * @returns   string
       */
      function getInput(name, options) {
        const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || ""
        if (options && options.required && !val) {
          throw new Error(`Input required and not supplied: ${name}`)
        }
        if (options && options.trimWhitespace === false) {
          return val
        }
        return val.trim()
      }
      exports.getInput = getInput
      /**
       * Gets the values of an multiline input.  Each value is also trimmed.
       *
       * @param     name     name of the input to get
       * @param     options  optional. See InputOptions.
       * @returns   string[]
       *
       */
      function getMultilineInput(name, options) {
        const inputs = getInput(name, options)
          .split("\n")
          .filter((x) => x !== "")
        return inputs
      }
      exports.getMultilineInput = getMultilineInput
      /**
       * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
       * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
       * The return value is also in boolean type.
       * ref: https://yaml.org/spec/1.2/spec.html#id2804923
       *
       * @param     name     name of the input to get
       * @param     options  optional. See InputOptions.
       * @returns   boolean
       */
      function getBooleanInput(name, options) {
        const trueValue = ["true", "True", "TRUE"]
        const falseValue = ["false", "False", "FALSE"]
        const val = getInput(name, options)
        if (trueValue.includes(val)) return true
        if (falseValue.includes(val)) return false
        throw new TypeError(
          `Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
            `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``
        )
      }
      exports.getBooleanInput = getBooleanInput
      /**
       * Sets the value of an output.
       *
       * @param     name     name of the output to set
       * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function setOutput(name, value) {
        process.stdout.write(os.EOL)
        command_1.issueCommand("set-output", { name }, value)
      }
      exports.setOutput = setOutput
      /**
       * Enables or disables the echoing of commands into stdout for the rest of the step.
       * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
       *
       */
      function setCommandEcho(enabled) {
        command_1.issue("echo", enabled ? "on" : "off")
      }
      exports.setCommandEcho = setCommandEcho
      //-----------------------------------------------------------------------
      // Results
      //-----------------------------------------------------------------------
      /**
       * Sets the action status to failed.
       * When the action exits it will be with an exit code of 1
       * @param message add error issue message
       */
      function setFailed(message) {
        process.exitCode = ExitCode.Failure
        error(message)
      }
      exports.setFailed = setFailed
      //-----------------------------------------------------------------------
      // Logging Commands
      //-----------------------------------------------------------------------
      /**
       * Gets whether Actions Step Debug is on or not
       */
      function isDebug() {
        return process.env["RUNNER_DEBUG"] === "1"
      }
      exports.isDebug = isDebug
      /**
       * Writes debug message to user log
       * @param message debug message
       */
      function debug(message) {
        command_1.issueCommand("debug", {}, message)
      }
      exports.debug = debug
      /**
       * Adds an error issue
       * @param message error issue message. Errors will be converted to string via toString()
       * @param properties optional properties to add to the annotation.
       */
      function error(message, properties = {}) {
        command_1.issueCommand(
          "error",
          utils_1.toCommandProperties(properties),
          message instanceof Error ? message.toString() : message
        )
      }
      exports.error = error
      /**
       * Adds a warning issue
       * @param message warning issue message. Errors will be converted to string via toString()
       * @param properties optional properties to add to the annotation.
       */
      function warning(message, properties = {}) {
        command_1.issueCommand(
          "warning",
          utils_1.toCommandProperties(properties),
          message instanceof Error ? message.toString() : message
        )
      }
      exports.warning = warning
      /**
       * Adds a notice issue
       * @param message notice issue message. Errors will be converted to string via toString()
       * @param properties optional properties to add to the annotation.
       */
      function notice(message, properties = {}) {
        command_1.issueCommand(
          "notice",
          utils_1.toCommandProperties(properties),
          message instanceof Error ? message.toString() : message
        )
      }
      exports.notice = notice
      /**
       * Writes info to log with console.log.
       * @param message info message
       */
      function info(message) {
        process.stdout.write(message + os.EOL)
      }
      exports.info = info
      /**
       * Begin an output group.
       *
       * Output until the next `groupEnd` will be foldable in this group
       *
       * @param name The name of the output group
       */
      function startGroup(name) {
        command_1.issue("group", name)
      }
      exports.startGroup = startGroup
      /**
       * End an output group.
       */
      function endGroup() {
        command_1.issue("endgroup")
      }
      exports.endGroup = endGroup
      /**
       * Wrap an asynchronous function call in a group.
       *
       * Returns the same type as the function itself.
       *
       * @param name The name of the group
       * @param fn The function to wrap in the group
       */
      function group(name, fn) {
        return __awaiter(this, void 0, void 0, function* () {
          startGroup(name)
          let result
          try {
            result = yield fn()
          } finally {
            endGroup()
          }
          return result
        })
      }
      exports.group = group
      //-----------------------------------------------------------------------
      // Wrapper action state
      //-----------------------------------------------------------------------
      /**
       * Saves state for current action, the state can only be retrieved by this action's post job execution.
       *
       * @param     name     name of the state to store
       * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      function saveState(name, value) {
        command_1.issueCommand("save-state", { name }, value)
      }
      exports.saveState = saveState
      /**
       * Gets the value of an state set by this action's main execution.
       *
       * @param     name     name of the state to get
       * @returns   string
       */
      function getState(name) {
        return process.env[`STATE_${name}`] || ""
      }
      exports.getState = getState
      function getIDToken(aud) {
        return __awaiter(this, void 0, void 0, function* () {
          return yield oidc_utils_1.OidcClient.getIDToken(aud)
        })
      }
      exports.getIDToken = getIDToken
      //# sourceMappingURL=core.js.map

      /***/
    },

    /***/ 717: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      // For internal use, subject to change.
      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.issueCommand = void 0
      // We use any as a valid input type
      /* eslint-disable @typescript-eslint/no-explicit-any */
      const fs = __importStar(__nccwpck_require__(57147))
      const os = __importStar(__nccwpck_require__(22037))
      const utils_1 = __nccwpck_require__(5278)
      function issueCommand(command, message) {
        const filePath = process.env[`GITHUB_${command}`]
        if (!filePath) {
          throw new Error(`Unable to find environment variable for file command ${command}`)
        }
        if (!fs.existsSync(filePath)) {
          throw new Error(`Missing file at path: ${filePath}`)
        }
        fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
          encoding: "utf8"
        })
      }
      exports.issueCommand = issueCommand
      //# sourceMappingURL=file-command.js.map

      /***/
    },

    /***/ 98041: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __awaiter =
        (this && this.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value)
                })
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value))
              } catch (e) {
                reject(e)
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value))
              } catch (e) {
                reject(e)
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected)
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next())
          })
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.OidcClient = void 0
      const http_client_1 = __nccwpck_require__(39925)
      const auth_1 = __nccwpck_require__(23702)
      const core_1 = __nccwpck_require__(42186)
      class OidcClient {
        static createHttpClient(allowRetry = true, maxRetry = 10) {
          const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
          }
          return new http_client_1.HttpClient(
            "actions/oidc-client",
            [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())],
            requestOptions
          )
        }
        static getRequestToken() {
          const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"]
          if (!token) {
            throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable")
          }
          return token
        }
        static getIDTokenUrl() {
          const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"]
          if (!runtimeUrl) {
            throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable")
          }
          return runtimeUrl
        }
        static getCall(id_token_url) {
          var _a
          return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient()
            const res = yield httpclient.getJson(id_token_url).catch((error) => {
              throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`)
            })
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value
            if (!id_token) {
              throw new Error("Response json body do not have ID Token field")
            }
            return id_token
          })
        }
        static getIDToken(audience) {
          return __awaiter(this, void 0, void 0, function* () {
            try {
              // New ID Token is requested from action service
              let id_token_url = OidcClient.getIDTokenUrl()
              if (audience) {
                const encodedAudience = encodeURIComponent(audience)
                id_token_url = `${id_token_url}&audience=${encodedAudience}`
              }
              core_1.debug(`ID token url is ${id_token_url}`)
              const id_token = yield OidcClient.getCall(id_token_url)
              core_1.setSecret(id_token)
              return id_token
            } catch (error) {
              throw new Error(`Error message: ${error.message}`)
            }
          })
        }
      }
      exports.OidcClient = OidcClient
      //# sourceMappingURL=oidc-utils.js.map

      /***/
    },

    /***/ 5278: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      // We use any as a valid input type
      /* eslint-disable @typescript-eslint/no-explicit-any */
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.toCommandProperties = exports.toCommandValue = void 0
      /**
       * Sanitizes an input into a string so it can be passed into issueCommand safely
       * @param input input to sanitize into a string
       */
      function toCommandValue(input) {
        if (input === null || input === undefined) {
          return ""
        } else if (typeof input === "string" || input instanceof String) {
          return input
        }
        return JSON.stringify(input)
      }
      exports.toCommandValue = toCommandValue
      /**
       *
       * @param annotationProperties
       * @returns The command properties to send with the actual annotation command
       * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
       */
      function toCommandProperties(annotationProperties) {
        if (!Object.keys(annotationProperties).length) {
          return {}
        }
        return {
          title: annotationProperties.title,
          file: annotationProperties.file,
          line: annotationProperties.startLine,
          endLine: annotationProperties.endLine,
          col: annotationProperties.startColumn,
          endColumn: annotationProperties.endColumn
        }
      }
      exports.toCommandProperties = toCommandProperties
      //# sourceMappingURL=utils.js.map

      /***/
    },

    /***/ 74087: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.Context = void 0
      const fs_1 = __nccwpck_require__(57147)
      const os_1 = __nccwpck_require__(22037)
      class Context {
        /**
         * Hydrate the context from the environment
         */
        constructor() {
          var _a, _b, _c
          this.payload = {}
          if (process.env.GITHUB_EVENT_PATH) {
            if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {
              this.payload = JSON.parse(
                fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" })
              )
            } else {
              const path = process.env.GITHUB_EVENT_PATH
              process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`)
            }
          }
          this.eventName = process.env.GITHUB_EVENT_NAME
          this.sha = process.env.GITHUB_SHA
          this.ref = process.env.GITHUB_REF
          this.workflow = process.env.GITHUB_WORKFLOW
          this.action = process.env.GITHUB_ACTION
          this.actor = process.env.GITHUB_ACTOR
          this.job = process.env.GITHUB_JOB
          this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10)
          this.runId = parseInt(process.env.GITHUB_RUN_ID, 10)
          this.apiUrl =
            (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0
              ? _a
              : `https://api.github.com`
          this.serverUrl =
            (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0
              ? _b
              : `https://github.com`
          this.graphqlUrl =
            (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0
              ? _c
              : `https://api.github.com/graphql`
        }
        get issue() {
          const payload = this.payload
          return Object.assign(Object.assign({}, this.repo), {
            number: (payload.issue || payload.pull_request || payload).number
          })
        }
        get repo() {
          if (process.env.GITHUB_REPOSITORY) {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/")
            return { owner, repo }
          }
          if (this.payload.repository) {
            return {
              owner: this.payload.repository.owner.login,
              repo: this.payload.repository.name
            }
          }
          throw new Error(
            "context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'"
          )
        }
      }
      exports.Context = Context
      //# sourceMappingURL=context.js.map

      /***/
    },

    /***/ 95438: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getOctokit = exports.context = void 0
      const Context = __importStar(__nccwpck_require__(74087))
      const utils_1 = __nccwpck_require__(73030)
      exports.context = new Context.Context()
      /**
       * Returns a hydrated octokit ready to use for GitHub Actions
       *
       * @param     token    the repo PAT or GITHUB_TOKEN
       * @param     options  other options to set
       */
      function getOctokit(token, options) {
        return new utils_1.GitHub(utils_1.getOctokitOptions(token, options))
      }
      exports.getOctokit = getOctokit
      //# sourceMappingURL=github.js.map

      /***/
    },

    /***/ 47914: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getApiBaseUrl = exports.getProxyAgent = exports.getAuthString = void 0
      const httpClient = __importStar(__nccwpck_require__(39925))
      function getAuthString(token, options) {
        if (!token && !options.auth) {
          throw new Error("Parameter token or opts.auth is required")
        } else if (token && options.auth) {
          throw new Error("Parameters token and opts.auth may not both be specified")
        }
        return typeof options.auth === "string" ? options.auth : `token ${token}`
      }
      exports.getAuthString = getAuthString
      function getProxyAgent(destinationUrl) {
        const hc = new httpClient.HttpClient()
        return hc.getAgent(destinationUrl)
      }
      exports.getProxyAgent = getProxyAgent
      function getApiBaseUrl() {
        return process.env["GITHUB_API_URL"] || "https://api.github.com"
      }
      exports.getApiBaseUrl = getApiBaseUrl
      //# sourceMappingURL=utils.js.map

      /***/
    },

    /***/ 73030: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getOctokitOptions = exports.GitHub = exports.context = void 0
      const Context = __importStar(__nccwpck_require__(74087))
      const Utils = __importStar(__nccwpck_require__(47914))
      // octokit + plugins
      const core_1 = __nccwpck_require__(76762)
      const plugin_rest_endpoint_methods_1 = __nccwpck_require__(83044)
      const plugin_paginate_rest_1 = __nccwpck_require__(64193)
      exports.context = new Context.Context()
      const baseUrl = Utils.getApiBaseUrl()
      const defaults = {
        baseUrl,
        request: {
          agent: Utils.getProxyAgent(baseUrl)
        }
      }
      exports.GitHub = core_1.Octokit.plugin(
        plugin_rest_endpoint_methods_1.restEndpointMethods,
        plugin_paginate_rest_1.paginateRest
      ).defaults(defaults)
      /**
       * Convience function to correctly format Octokit Options to pass into the constructor.
       *
       * @param     token    the repo PAT or GITHUB_TOKEN
       * @param     options  other options to set
       */
      function getOctokitOptions(token, options) {
        const opts = Object.assign({}, options || {}) // Shallow clone - don't mutate the object provided by the caller
        // Auth
        const auth = Utils.getAuthString(token, opts)
        if (auth) {
          opts.auth = auth
        }
        return opts
      }
      exports.getOctokitOptions = getOctokitOptions
      //# sourceMappingURL=utils.js.map

      /***/
    },

    /***/ 23702: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      class BasicCredentialHandler {
        constructor(username, password) {
          this.username = username
          this.password = password
        }
        prepareRequest(options) {
          options.headers["Authorization"] =
            "Basic " + Buffer.from(this.username + ":" + this.password).toString("base64")
        }
        // This handler cannot handle 401
        canHandleAuthentication(response) {
          return false
        }
        handleAuthentication(httpClient, requestInfo, objs) {
          return null
        }
      }
      exports.BasicCredentialHandler = BasicCredentialHandler
      class BearerCredentialHandler {
        constructor(token) {
          this.token = token
        }
        // currently implements pre-authorization
        // TODO: support preAuth = false where it hooks on 401
        prepareRequest(options) {
          options.headers["Authorization"] = "Bearer " + this.token
        }
        // This handler cannot handle 401
        canHandleAuthentication(response) {
          return false
        }
        handleAuthentication(httpClient, requestInfo, objs) {
          return null
        }
      }
      exports.BearerCredentialHandler = BearerCredentialHandler
      class PersonalAccessTokenCredentialHandler {
        constructor(token) {
          this.token = token
        }
        // currently implements pre-authorization
        // TODO: support preAuth = false where it hooks on 401
        prepareRequest(options) {
          options.headers["Authorization"] =
            "Basic " + Buffer.from("PAT:" + this.token).toString("base64")
        }
        // This handler cannot handle 401
        canHandleAuthentication(response) {
          return false
        }
        handleAuthentication(httpClient, requestInfo, objs) {
          return null
        }
      }
      exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler

      /***/
    },

    /***/ 39925: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      const http = __nccwpck_require__(13685)
      const https = __nccwpck_require__(95687)
      const pm = __nccwpck_require__(16443)
      let tunnel
      var HttpCodes
      ;(function (HttpCodes) {
        HttpCodes[(HttpCodes["OK"] = 200)] = "OK"
        HttpCodes[(HttpCodes["MultipleChoices"] = 300)] = "MultipleChoices"
        HttpCodes[(HttpCodes["MovedPermanently"] = 301)] = "MovedPermanently"
        HttpCodes[(HttpCodes["ResourceMoved"] = 302)] = "ResourceMoved"
        HttpCodes[(HttpCodes["SeeOther"] = 303)] = "SeeOther"
        HttpCodes[(HttpCodes["NotModified"] = 304)] = "NotModified"
        HttpCodes[(HttpCodes["UseProxy"] = 305)] = "UseProxy"
        HttpCodes[(HttpCodes["SwitchProxy"] = 306)] = "SwitchProxy"
        HttpCodes[(HttpCodes["TemporaryRedirect"] = 307)] = "TemporaryRedirect"
        HttpCodes[(HttpCodes["PermanentRedirect"] = 308)] = "PermanentRedirect"
        HttpCodes[(HttpCodes["BadRequest"] = 400)] = "BadRequest"
        HttpCodes[(HttpCodes["Unauthorized"] = 401)] = "Unauthorized"
        HttpCodes[(HttpCodes["PaymentRequired"] = 402)] = "PaymentRequired"
        HttpCodes[(HttpCodes["Forbidden"] = 403)] = "Forbidden"
        HttpCodes[(HttpCodes["NotFound"] = 404)] = "NotFound"
        HttpCodes[(HttpCodes["MethodNotAllowed"] = 405)] = "MethodNotAllowed"
        HttpCodes[(HttpCodes["NotAcceptable"] = 406)] = "NotAcceptable"
        HttpCodes[(HttpCodes["ProxyAuthenticationRequired"] = 407)] = "ProxyAuthenticationRequired"
        HttpCodes[(HttpCodes["RequestTimeout"] = 408)] = "RequestTimeout"
        HttpCodes[(HttpCodes["Conflict"] = 409)] = "Conflict"
        HttpCodes[(HttpCodes["Gone"] = 410)] = "Gone"
        HttpCodes[(HttpCodes["TooManyRequests"] = 429)] = "TooManyRequests"
        HttpCodes[(HttpCodes["InternalServerError"] = 500)] = "InternalServerError"
        HttpCodes[(HttpCodes["NotImplemented"] = 501)] = "NotImplemented"
        HttpCodes[(HttpCodes["BadGateway"] = 502)] = "BadGateway"
        HttpCodes[(HttpCodes["ServiceUnavailable"] = 503)] = "ServiceUnavailable"
        HttpCodes[(HttpCodes["GatewayTimeout"] = 504)] = "GatewayTimeout"
      })((HttpCodes = exports.HttpCodes || (exports.HttpCodes = {})))
      var Headers
      ;(function (Headers) {
        Headers["Accept"] = "accept"
        Headers["ContentType"] = "content-type"
      })((Headers = exports.Headers || (exports.Headers = {})))
      var MediaTypes
      ;(function (MediaTypes) {
        MediaTypes["ApplicationJson"] = "application/json"
      })((MediaTypes = exports.MediaTypes || (exports.MediaTypes = {})))
      /**
       * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
       * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
       */
      function getProxyUrl(serverUrl) {
        let proxyUrl = pm.getProxyUrl(new URL(serverUrl))
        return proxyUrl ? proxyUrl.href : ""
      }
      exports.getProxyUrl = getProxyUrl
      const HttpRedirectCodes = [
        HttpCodes.MovedPermanently,
        HttpCodes.ResourceMoved,
        HttpCodes.SeeOther,
        HttpCodes.TemporaryRedirect,
        HttpCodes.PermanentRedirect
      ]
      const HttpResponseRetryCodes = [
        HttpCodes.BadGateway,
        HttpCodes.ServiceUnavailable,
        HttpCodes.GatewayTimeout
      ]
      const RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"]
      const ExponentialBackoffCeiling = 10
      const ExponentialBackoffTimeSlice = 5
      class HttpClientError extends Error {
        constructor(message, statusCode) {
          super(message)
          this.name = "HttpClientError"
          this.statusCode = statusCode
          Object.setPrototypeOf(this, HttpClientError.prototype)
        }
      }
      exports.HttpClientError = HttpClientError
      class HttpClientResponse {
        constructor(message) {
          this.message = message
        }
        readBody() {
          return new Promise(async (resolve, reject) => {
            let output = Buffer.alloc(0)
            this.message.on("data", (chunk) => {
              output = Buffer.concat([output, chunk])
            })
            this.message.on("end", () => {
              resolve(output.toString())
            })
          })
        }
      }
      exports.HttpClientResponse = HttpClientResponse
      function isHttps(requestUrl) {
        let parsedUrl = new URL(requestUrl)
        return parsedUrl.protocol === "https:"
      }
      exports.isHttps = isHttps
      class HttpClient {
        constructor(userAgent, handlers, requestOptions) {
          this._ignoreSslError = false
          this._allowRedirects = true
          this._allowRedirectDowngrade = false
          this._maxRedirects = 50
          this._allowRetries = false
          this._maxRetries = 1
          this._keepAlive = false
          this._disposed = false
          this.userAgent = userAgent
          this.handlers = handlers || []
          this.requestOptions = requestOptions
          if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
              this._ignoreSslError = requestOptions.ignoreSslError
            }
            this._socketTimeout = requestOptions.socketTimeout
            if (requestOptions.allowRedirects != null) {
              this._allowRedirects = requestOptions.allowRedirects
            }
            if (requestOptions.allowRedirectDowngrade != null) {
              this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade
            }
            if (requestOptions.maxRedirects != null) {
              this._maxRedirects = Math.max(requestOptions.maxRedirects, 0)
            }
            if (requestOptions.keepAlive != null) {
              this._keepAlive = requestOptions.keepAlive
            }
            if (requestOptions.allowRetries != null) {
              this._allowRetries = requestOptions.allowRetries
            }
            if (requestOptions.maxRetries != null) {
              this._maxRetries = requestOptions.maxRetries
            }
          }
        }
        options(requestUrl, additionalHeaders) {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {})
        }
        get(requestUrl, additionalHeaders) {
          return this.request("GET", requestUrl, null, additionalHeaders || {})
        }
        del(requestUrl, additionalHeaders) {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {})
        }
        post(requestUrl, data, additionalHeaders) {
          return this.request("POST", requestUrl, data, additionalHeaders || {})
        }
        patch(requestUrl, data, additionalHeaders) {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {})
        }
        put(requestUrl, data, additionalHeaders) {
          return this.request("PUT", requestUrl, data, additionalHeaders || {})
        }
        head(requestUrl, additionalHeaders) {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {})
        }
        sendStream(verb, requestUrl, stream, additionalHeaders) {
          return this.request(verb, requestUrl, stream, additionalHeaders)
        }
        /**
         * Gets a typed object from an endpoint
         * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
         */
        async getJson(requestUrl, additionalHeaders = {}) {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          let res = await this.get(requestUrl, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        }
        async postJson(requestUrl, obj, additionalHeaders = {}) {
          let data = JSON.stringify(obj, null, 2)
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.ContentType,
            MediaTypes.ApplicationJson
          )
          let res = await this.post(requestUrl, data, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        }
        async putJson(requestUrl, obj, additionalHeaders = {}) {
          let data = JSON.stringify(obj, null, 2)
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.ContentType,
            MediaTypes.ApplicationJson
          )
          let res = await this.put(requestUrl, data, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        }
        async patchJson(requestUrl, obj, additionalHeaders = {}) {
          let data = JSON.stringify(obj, null, 2)
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.Accept,
            MediaTypes.ApplicationJson
          )
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers.ContentType,
            MediaTypes.ApplicationJson
          )
          let res = await this.patch(requestUrl, data, additionalHeaders)
          return this._processResponse(res, this.requestOptions)
        }
        /**
         * Makes a raw http request.
         * All other methods such as get, post, patch, and request ultimately call this.
         * Prefer get, del, post and patch
         */
        async request(verb, requestUrl, data, headers) {
          if (this._disposed) {
            throw new Error("Client has already been disposed.")
          }
          let parsedUrl = new URL(requestUrl)
          let info = this._prepareRequest(verb, parsedUrl, headers)
          // Only perform retries on reads since writes may not be idempotent.
          let maxTries =
            this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1 ? this._maxRetries + 1 : 1
          let numTries = 0
          let response
          while (numTries < maxTries) {
            response = await this.requestRaw(info, data)
            // Check if it's an authentication challenge
            if (
              response &&
              response.message &&
              response.message.statusCode === HttpCodes.Unauthorized
            ) {
              let authenticationHandler
              for (let i = 0; i < this.handlers.length; i++) {
                if (this.handlers[i].canHandleAuthentication(response)) {
                  authenticationHandler = this.handlers[i]
                  break
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info, data)
              } else {
                // We have received an unauthorized response but have no handlers to handle it.
                // Let the response return to the caller.
                return response
              }
            }
            let redirectsRemaining = this._maxRedirects
            while (
              HttpRedirectCodes.indexOf(response.message.statusCode) != -1 &&
              this._allowRedirects &&
              redirectsRemaining > 0
            ) {
              const redirectUrl = response.message.headers["location"]
              if (!redirectUrl) {
                // if there's no location to redirect to, we won't
                break
              }
              let parsedRedirectUrl = new URL(redirectUrl)
              if (
                parsedUrl.protocol == "https:" &&
                parsedUrl.protocol != parsedRedirectUrl.protocol &&
                !this._allowRedirectDowngrade
              ) {
                throw new Error(
                  "Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true."
                )
              }
              // we need to finish reading the response before reassigning response
              // which will leak the open socket.
              await response.readBody()
              // strip authorization header if redirected to a different hostname
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (let header in headers) {
                  // header names are case insensitive
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header]
                  }
                }
              }
              // let's make the request with the new redirectUrl
              info = this._prepareRequest(verb, parsedRedirectUrl, headers)
              response = await this.requestRaw(info, data)
              redirectsRemaining--
            }
            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {
              // If not a retry code, return immediately instead of retrying
              return response
            }
            numTries += 1
            if (numTries < maxTries) {
              await response.readBody()
              await this._performExponentialBackoff(numTries)
            }
          }
          return response
        }
        /**
         * Needs to be called if keepAlive is set to true in request options.
         */
        dispose() {
          if (this._agent) {
            this._agent.destroy()
          }
          this._disposed = true
        }
        /**
         * Raw request.
         * @param info
         * @param data
         */
        requestRaw(info, data) {
          return new Promise((resolve, reject) => {
            let callbackForResult = function (err, res) {
              if (err) {
                reject(err)
              }
              resolve(res)
            }
            this.requestRawWithCallback(info, data, callbackForResult)
          })
        }
        /**
         * Raw request with callback.
         * @param info
         * @param data
         * @param onResult
         */
        requestRawWithCallback(info, data, onResult) {
          let socket
          if (typeof data === "string") {
            info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8")
          }
          let callbackCalled = false
          let handleResult = (err, res) => {
            if (!callbackCalled) {
              callbackCalled = true
              onResult(err, res)
            }
          }
          let req = info.httpModule.request(info.options, (msg) => {
            let res = new HttpClientResponse(msg)
            handleResult(null, res)
          })
          req.on("socket", (sock) => {
            socket = sock
          })
          // If we ever get disconnected, we want the socket to timeout eventually
          req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
              socket.end()
            }
            handleResult(new Error("Request timeout: " + info.options.path), null)
          })
          req.on("error", function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err, null)
          })
          if (data && typeof data === "string") {
            req.write(data, "utf8")
          }
          if (data && typeof data !== "string") {
            data.on("close", function () {
              req.end()
            })
            data.pipe(req)
          } else {
            req.end()
          }
        }
        /**
         * Gets an http agent. This function is useful when you need an http agent that handles
         * routing through a proxy server - depending upon the url and proxy environment variables.
         * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
         */
        getAgent(serverUrl) {
          let parsedUrl = new URL(serverUrl)
          return this._getAgent(parsedUrl)
        }
        _prepareRequest(method, requestUrl, headers) {
          const info = {}
          info.parsedUrl = requestUrl
          const usingSsl = info.parsedUrl.protocol === "https:"
          info.httpModule = usingSsl ? https : http
          const defaultPort = usingSsl ? 443 : 80
          info.options = {}
          info.options.host = info.parsedUrl.hostname
          info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort
          info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "")
          info.options.method = method
          info.options.headers = this._mergeHeaders(headers)
          if (this.userAgent != null) {
            info.options.headers["user-agent"] = this.userAgent
          }
          info.options.agent = this._getAgent(info.parsedUrl)
          // gives handlers an opportunity to participate
          if (this.handlers) {
            this.handlers.forEach((handler) => {
              handler.prepareRequest(info.options)
            })
          }
          return info
        }
        _mergeHeaders(headers) {
          const lowercaseKeys = (obj) =>
            Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {})
          if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign(
              {},
              lowercaseKeys(this.requestOptions.headers),
              lowercaseKeys(headers)
            )
          }
          return lowercaseKeys(headers || {})
        }
        _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
          const lowercaseKeys = (obj) =>
            Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {})
          let clientHeader
          if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header]
          }
          return additionalHeaders[header] || clientHeader || _default
        }
        _getAgent(parsedUrl) {
          let agent
          let proxyUrl = pm.getProxyUrl(parsedUrl)
          let useProxy = proxyUrl && proxyUrl.hostname
          if (this._keepAlive && useProxy) {
            agent = this._proxyAgent
          }
          if (this._keepAlive && !useProxy) {
            agent = this._agent
          }
          // if agent is already assigned use that agent.
          if (!!agent) {
            return agent
          }
          const usingSsl = parsedUrl.protocol === "https:"
          let maxSockets = 100
          if (!!this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets
          }
          if (useProxy) {
            // If using proxy, need tunnel
            if (!tunnel) {
              tunnel = __nccwpck_require__(74294)
            }
            const agentOptions = {
              maxSockets: maxSockets,
              keepAlive: this._keepAlive,
              proxy: {
                ...((proxyUrl.username || proxyUrl.password) && {
                  proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                }),
                host: proxyUrl.hostname,
                port: proxyUrl.port
              }
            }
            let tunnelAgent
            const overHttps = proxyUrl.protocol === "https:"
            if (usingSsl) {
              tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp
            } else {
              tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp
            }
            agent = tunnelAgent(agentOptions)
            this._proxyAgent = agent
          }
          // if reusing agent across request and tunneling agent isn't assigned create a new agent
          if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets }
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options)
            this._agent = agent
          }
          // if not using private agent and tunnel agent isn't setup then use global agent
          if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent
          }
          if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
              rejectUnauthorized: false
            })
          }
          return agent
        }
        _performExponentialBackoff(retryNumber) {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber)
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber)
          return new Promise((resolve) => setTimeout(() => resolve(), ms))
        }
        static dateTimeDeserializer(key, value) {
          if (typeof value === "string") {
            let a = new Date(value)
            if (!isNaN(a.valueOf())) {
              return a
            }
          }
          return value
        }
        async _processResponse(res, options) {
          return new Promise(async (resolve, reject) => {
            const statusCode = res.message.statusCode
            const response = {
              statusCode: statusCode,
              result: null,
              headers: {}
            }
            // not found leads to null obj returned
            if (statusCode == HttpCodes.NotFound) {
              resolve(response)
            }
            let obj
            let contents
            // get the result from the body
            try {
              contents = await res.readBody()
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, HttpClient.dateTimeDeserializer)
                } else {
                  obj = JSON.parse(contents)
                }
                response.result = obj
              }
              response.headers = res.message.headers
            } catch (err) {
              // Invalid resource (contents not json);  leaving result obj null
            }
            // note that 3xx redirects are handled by the http layer.
            if (statusCode > 299) {
              let msg
              // if exception/error in body, attempt to get better error
              if (obj && obj.message) {
                msg = obj.message
              } else if (contents && contents.length > 0) {
                // it may be the case that the exception is in the body message as string
                msg = contents
              } else {
                msg = "Failed request: (" + statusCode + ")"
              }
              let err = new HttpClientError(msg, statusCode)
              err.result = response.result
              reject(err)
            } else {
              resolve(response)
            }
          })
        }
      }
      exports.HttpClient = HttpClient

      /***/
    },

    /***/ 16443: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      function getProxyUrl(reqUrl) {
        let usingSsl = reqUrl.protocol === "https:"
        let proxyUrl
        if (checkBypass(reqUrl)) {
          return proxyUrl
        }
        let proxyVar
        if (usingSsl) {
          proxyVar = process.env["https_proxy"] || process.env["HTTPS_PROXY"]
        } else {
          proxyVar = process.env["http_proxy"] || process.env["HTTP_PROXY"]
        }
        if (proxyVar) {
          proxyUrl = new URL(proxyVar)
        }
        return proxyUrl
      }
      exports.getProxyUrl = getProxyUrl
      function checkBypass(reqUrl) {
        if (!reqUrl.hostname) {
          return false
        }
        let noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || ""
        if (!noProxy) {
          return false
        }
        // Determine the request port
        let reqPort
        if (reqUrl.port) {
          reqPort = Number(reqUrl.port)
        } else if (reqUrl.protocol === "http:") {
          reqPort = 80
        } else if (reqUrl.protocol === "https:") {
          reqPort = 443
        }
        // Format the request hostname and hostname with port
        let upperReqHosts = [reqUrl.hostname.toUpperCase()]
        if (typeof reqPort === "number") {
          upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`)
        }
        // Compare request host against noproxy
        for (let upperNoProxyItem of noProxy
          .split(",")
          .map((x) => x.trim().toUpperCase())
          .filter((x) => x)) {
          if (upperReqHosts.some((x) => x === upperNoProxyItem)) {
            return true
          }
        }
        return false
      }
      exports.checkBypass = checkBypass

      /***/
    },

    /***/ 45211: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.codeFrameColumns = codeFrameColumns
      exports["default"] = _default

      var _highlight = __nccwpck_require__(36860)

      let deprecationWarningShown = false

      function getDefs(chalk) {
        return {
          gutter: chalk.grey,
          marker: chalk.red.bold,
          message: chalk.red.bold
        }
      }

      const NEWLINE = /\r\n|[\n\r\u2028\u2029]/

      function getMarkerLines(loc, source, opts) {
        const startLoc = Object.assign(
          {
            column: 0,
            line: -1
          },
          loc.start
        )
        const endLoc = Object.assign({}, startLoc, loc.end)
        const { linesAbove = 2, linesBelow = 3 } = opts || {}
        const startLine = startLoc.line
        const startColumn = startLoc.column
        const endLine = endLoc.line
        const endColumn = endLoc.column
        let start = Math.max(startLine - (linesAbove + 1), 0)
        let end = Math.min(source.length, endLine + linesBelow)

        if (startLine === -1) {
          start = 0
        }

        if (endLine === -1) {
          end = source.length
        }

        const lineDiff = endLine - startLine
        const markerLines = {}

        if (lineDiff) {
          for (let i = 0; i <= lineDiff; i++) {
            const lineNumber = i + startLine

            if (!startColumn) {
              markerLines[lineNumber] = true
            } else if (i === 0) {
              const sourceLength = source[lineNumber - 1].length
              markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1]
            } else if (i === lineDiff) {
              markerLines[lineNumber] = [0, endColumn]
            } else {
              const sourceLength = source[lineNumber - i].length
              markerLines[lineNumber] = [0, sourceLength]
            }
          }
        } else {
          if (startColumn === endColumn) {
            if (startColumn) {
              markerLines[startLine] = [startColumn, 0]
            } else {
              markerLines[startLine] = true
            }
          } else {
            markerLines[startLine] = [startColumn, endColumn - startColumn]
          }
        }

        return {
          start,
          end,
          markerLines
        }
      }

      function codeFrameColumns(rawLines, loc, opts = {}) {
        const highlighted =
          (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts)
        const chalk = (0, _highlight.getChalk)(opts)
        const defs = getDefs(chalk)

        const maybeHighlight = (chalkFn, string) => {
          return highlighted ? chalkFn(string) : string
        }

        const lines = rawLines.split(NEWLINE)
        const { start, end, markerLines } = getMarkerLines(loc, lines, opts)
        const hasColumns = loc.start && typeof loc.start.column === "number"
        const numberMaxWidth = String(end).length
        const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines
        let frame = highlightedLines
          .split(NEWLINE, end)
          .slice(start, end)
          .map((line, index) => {
            const number = start + 1 + index
            const paddedNumber = ` ${number}`.slice(-numberMaxWidth)
            const gutter = ` ${paddedNumber} |`
            const hasMarker = markerLines[number]
            const lastMarkerLine = !markerLines[number + 1]

            if (hasMarker) {
              let markerLine = ""

              if (Array.isArray(hasMarker)) {
                const markerSpacing = line
                  .slice(0, Math.max(hasMarker[0] - 1, 0))
                  .replace(/[^\t]/g, " ")
                const numberOfMarkers = hasMarker[1] || 1
                markerLine = [
                  "\n ",
                  maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")),
                  " ",
                  markerSpacing,
                  maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)
                ].join("")

                if (lastMarkerLine && opts.message) {
                  markerLine += " " + maybeHighlight(defs.message, opts.message)
                }
              }

              return [
                maybeHighlight(defs.marker, ">"),
                maybeHighlight(defs.gutter, gutter),
                line.length > 0 ? ` ${line}` : "",
                markerLine
              ].join("")
            } else {
              return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`
            }
          })
          .join("\n")

        if (opts.message && !hasColumns) {
          frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}\n${frame}`
        }

        if (highlighted) {
          return chalk.reset(frame)
        } else {
          return frame
        }
      }

      function _default(rawLines, lineNumber, colNumber, opts = {}) {
        if (!deprecationWarningShown) {
          deprecationWarningShown = true
          const message =
            "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`."

          if (process.emitWarning) {
            process.emitWarning(message, "DeprecationWarning")
          } else {
            const deprecationError = new Error(message)
            deprecationError.name = "DeprecationWarning"
            console.warn(new Error(message))
          }
        }

        colNumber = Math.max(colNumber, 0)
        const location = {
          start: {
            column: colNumber,
            line: lineNumber
          }
        }
        return codeFrameColumns(rawLines, location, opts)
      }

      /***/
    },

    /***/ 66396: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.isIdentifierChar = isIdentifierChar
      exports.isIdentifierName = isIdentifierName
      exports.isIdentifierStart = isIdentifierStart
      let nonASCIIidentifierStartChars =
        "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc"
      let nonASCIIidentifierChars =
        "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f"
      const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]")
      const nonASCIIidentifier = new RegExp(
        "[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]"
      )
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null
      const astralIdentifierStartCodes = [
        0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6,
        37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2,
        1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43,
        2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3,
        2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50,
        14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1,
        3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17,
        2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0,
        19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60,
        42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95,
        7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18,
        0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921,
        103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47,
        17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8,
        8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84,
        2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2,
        4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24,
        2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196,
        60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2,
        0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0,
        2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541,
        1507, 4938
      ]
      const astralIdentifierCodes = [
        509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370,
        1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13,
        2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2,
        6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8,
        28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0,
        2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17,
        9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3,
        19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706,
        45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0,
        23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110,
        6, 6, 9, 4759, 9, 787719, 239
      ]

      function isInAstralSet(code, set) {
        let pos = 0x10000

        for (let i = 0, length = set.length; i < length; i += 2) {
          pos += set[i]
          if (pos > code) return false
          pos += set[i + 1]
          if (pos >= code) return true
        }

        return false
      }

      function isIdentifierStart(code) {
        if (code < 65) return code === 36
        if (code <= 90) return true
        if (code < 97) return code === 95
        if (code <= 122) return true

        if (code <= 0xffff) {
          return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))
        }

        return isInAstralSet(code, astralIdentifierStartCodes)
      }

      function isIdentifierChar(code) {
        if (code < 48) return code === 36
        if (code < 58) return true
        if (code < 65) return false
        if (code <= 90) return true
        if (code < 97) return code === 95
        if (code <= 122) return true

        if (code <= 0xffff) {
          return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
        }

        return (
          isInAstralSet(code, astralIdentifierStartCodes) ||
          isInAstralSet(code, astralIdentifierCodes)
        )
      }

      function isIdentifierName(name) {
        let isFirst = true

        for (let i = 0; i < name.length; i++) {
          let cp = name.charCodeAt(i)

          if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {
            const trail = name.charCodeAt(++i)

            if ((trail & 0xfc00) === 0xdc00) {
              cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff)
            }
          }

          if (isFirst) {
            isFirst = false

            if (!isIdentifierStart(cp)) {
              return false
            }
          } else if (!isIdentifierChar(cp)) {
            return false
          }
        }

        return !isFirst
      }

      /***/
    },

    /***/ 86607: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      Object.defineProperty(exports, "isIdentifierChar", {
        enumerable: true,
        get: function () {
          return _identifier.isIdentifierChar
        }
      })
      Object.defineProperty(exports, "isIdentifierName", {
        enumerable: true,
        get: function () {
          return _identifier.isIdentifierName
        }
      })
      Object.defineProperty(exports, "isIdentifierStart", {
        enumerable: true,
        get: function () {
          return _identifier.isIdentifierStart
        }
      })
      Object.defineProperty(exports, "isKeyword", {
        enumerable: true,
        get: function () {
          return _keyword.isKeyword
        }
      })
      Object.defineProperty(exports, "isReservedWord", {
        enumerable: true,
        get: function () {
          return _keyword.isReservedWord
        }
      })
      Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
        enumerable: true,
        get: function () {
          return _keyword.isStrictBindOnlyReservedWord
        }
      })
      Object.defineProperty(exports, "isStrictBindReservedWord", {
        enumerable: true,
        get: function () {
          return _keyword.isStrictBindReservedWord
        }
      })
      Object.defineProperty(exports, "isStrictReservedWord", {
        enumerable: true,
        get: function () {
          return _keyword.isStrictReservedWord
        }
      })

      var _identifier = __nccwpck_require__(66396)

      var _keyword = __nccwpck_require__(47249)

      /***/
    },

    /***/ 47249: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.isKeyword = isKeyword
      exports.isReservedWord = isReservedWord
      exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord
      exports.isStrictBindReservedWord = isStrictBindReservedWord
      exports.isStrictReservedWord = isStrictReservedWord
      const reservedWords = {
        keyword: [
          "break",
          "case",
          "catch",
          "continue",
          "debugger",
          "default",
          "do",
          "else",
          "finally",
          "for",
          "function",
          "if",
          "return",
          "switch",
          "throw",
          "try",
          "var",
          "const",
          "while",
          "with",
          "new",
          "this",
          "super",
          "class",
          "extends",
          "export",
          "import",
          "null",
          "true",
          "false",
          "in",
          "instanceof",
          "typeof",
          "void",
          "delete"
        ],
        strict: [
          "implements",
          "interface",
          "let",
          "package",
          "private",
          "protected",
          "public",
          "static",
          "yield"
        ],
        strictBind: ["eval", "arguments"]
      }
      const keywords = new Set(reservedWords.keyword)
      const reservedWordsStrictSet = new Set(reservedWords.strict)
      const reservedWordsStrictBindSet = new Set(reservedWords.strictBind)

      function isReservedWord(word, inModule) {
        return (inModule && word === "await") || word === "enum"
      }

      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word)
      }

      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word)
      }

      function isStrictBindReservedWord(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)
      }

      function isKeyword(word) {
        return keywords.has(word)
      }

      /***/
    },

    /***/ 36860: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports["default"] = highlight
      exports.getChalk = getChalk
      exports.shouldHighlight = shouldHighlight

      var _jsTokens = __nccwpck_require__(51531)

      var _helperValidatorIdentifier = __nccwpck_require__(86607)

      var _chalk = __nccwpck_require__(77658)

      const sometimesKeywords = new Set(["as", "async", "from", "get", "of", "set"])

      function getDefs(chalk) {
        return {
          keyword: chalk.cyan,
          capitalized: chalk.yellow,
          jsxIdentifier: chalk.yellow,
          punctuator: chalk.yellow,
          number: chalk.magenta,
          string: chalk.green,
          regex: chalk.magenta,
          comment: chalk.grey,
          invalid: chalk.white.bgRed.bold
        }
      }

      const NEWLINE = /\r\n|[\n\r\u2028\u2029]/
      const BRACKET = /^[()[\]{}]$/
      let tokenize
      {
        const JSX_TAG = /^[a-z][\w-]*$/i

        const getTokenType = function (token, offset, text) {
          if (token.type === "name") {
            if (
              (0, _helperValidatorIdentifier.isKeyword)(token.value) ||
              (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) ||
              sometimesKeywords.has(token.value)
            ) {
              return "keyword"
            }

            if (
              JSX_TAG.test(token.value) &&
              (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")
            ) {
              return "jsxIdentifier"
            }

            if (token.value[0] !== token.value[0].toLowerCase()) {
              return "capitalized"
            }
          }

          if (token.type === "punctuator" && BRACKET.test(token.value)) {
            return "bracket"
          }

          if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
            return "punctuator"
          }

          return token.type
        }

        tokenize = function* (text) {
          let match

          while ((match = _jsTokens.default.exec(text))) {
            const token = _jsTokens.matchToToken(match)

            yield {
              type: getTokenType(token, match.index, text),
              value: token.value
            }
          }
        }
      }

      function highlightTokens(defs, text) {
        let highlighted = ""

        for (const { type, value } of tokenize(text)) {
          const colorize = defs[type]

          if (colorize) {
            highlighted += value
              .split(NEWLINE)
              .map((str) => colorize(str))
              .join("\n")
          } else {
            highlighted += value
          }
        }

        return highlighted
      }

      function shouldHighlight(options) {
        return !!_chalk.supportsColor || options.forceColor
      }

      function getChalk(options) {
        return options.forceColor
          ? new _chalk.constructor({
              enabled: true,
              level: 1
            })
          : _chalk
      }

      function highlight(code, options = {}) {
        if (code !== "" && shouldHighlight(options)) {
          const chalk = getChalk(options)
          const defs = getDefs(chalk)
          return highlightTokens(defs, code)
        } else {
          return code
        }
      }

      /***/
    },

    /***/ 96538: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      /* module decorator */ module = __nccwpck_require__.nmd(module)

      const colorConvert = __nccwpck_require__(5458)

      const wrapAnsi16 = (fn, offset) =>
        function () {
          const code = fn.apply(colorConvert, arguments)
          return `\u001B[${code + offset}m`
        }

      const wrapAnsi256 = (fn, offset) =>
        function () {
          const code = fn.apply(colorConvert, arguments)
          return `\u001B[${38 + offset};5;${code}m`
        }

      const wrapAnsi16m = (fn, offset) =>
        function () {
          const rgb = fn.apply(colorConvert, arguments)
          return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`
        }

      function assembleStyles() {
        const codes = new Map()
        const styles = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],

            // Bright color
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],

            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        }

        // Fix humans
        styles.color.grey = styles.color.gray

        for (const groupName of Object.keys(styles)) {
          const group = styles[groupName]

          for (const styleName of Object.keys(group)) {
            const style = group[styleName]

            styles[styleName] = {
              open: `\u001B[${style[0]}m`,
              close: `\u001B[${style[1]}m`
            }

            group[styleName] = styles[styleName]

            codes.set(style[0], style[1])
          }

          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          })

          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          })
        }

        const ansi2ansi = (n) => n
        const rgb2rgb = (r, g, b) => [r, g, b]

        styles.color.close = "\u001B[39m"
        styles.bgColor.close = "\u001B[49m"

        styles.color.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 0)
        }
        styles.color.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 0)
        }
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0)
        }

        styles.bgColor.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 10)
        }
        styles.bgColor.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 10)
        }
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10)
        }

        for (let key of Object.keys(colorConvert)) {
          if (typeof colorConvert[key] !== "object") {
            continue
          }

          const suite = colorConvert[key]

          if (key === "ansi16") {
            key = "ansi"
          }

          if ("ansi16" in suite) {
            styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0)
            styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10)
          }

          if ("ansi256" in suite) {
            styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0)
            styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10)
          }

          if ("rgb" in suite) {
            styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0)
            styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10)
          }
        }

        return styles
      }

      // Make the export immutable
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      })

      /***/
    },

    /***/ 77658: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const escapeStringRegexp = __nccwpck_require__(25898)
      const ansiStyles = __nccwpck_require__(96538)
      const stdoutColor = __nccwpck_require__(95317).stdout

      const template = __nccwpck_require__(72558)

      const isSimpleWindowsTerm =
        process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm")

      // `supportsColor.level` → `ansiStyles.color[name]` mapping
      const levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"]

      // `color-convert` models to exclude from the Chalk API due to conflicts and such
      const skipModels = new Set(["gray"])

      const styles = Object.create(null)

      function applyOptions(obj, options) {
        options = options || {}

        // Detect level if not set manually
        const scLevel = stdoutColor ? stdoutColor.level : 0
        obj.level = options.level === undefined ? scLevel : options.level
        obj.enabled = "enabled" in options ? options.enabled : obj.level > 0
      }

      function Chalk(options) {
        // We check for this.template here since calling `chalk.constructor()`
        // by itself will have a `this` of a previously constructed chalk object
        if (!this || !(this instanceof Chalk) || this.template) {
          const chalk = {}
          applyOptions(chalk, options)

          chalk.template = function () {
            const args = [].slice.call(arguments)
            return chalkTag.apply(null, [chalk.template].concat(args))
          }

          Object.setPrototypeOf(chalk, Chalk.prototype)
          Object.setPrototypeOf(chalk.template, chalk)

          chalk.template.constructor = Chalk

          return chalk.template
        }

        applyOptions(this, options)
      }

      // Use bright blue on Windows as the normal blue color is illegible
      if (isSimpleWindowsTerm) {
        ansiStyles.blue.open = "\u001B[94m"
      }

      for (const key of Object.keys(ansiStyles)) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g")

        styles[key] = {
          get() {
            const codes = ansiStyles[key]
            return build.call(
              this,
              this._styles ? this._styles.concat(codes) : [codes],
              this._empty,
              key
            )
          }
        }
      }

      styles.visible = {
        get() {
          return build.call(this, this._styles || [], true, "visible")
        }
      }

      ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g")
      for (const model of Object.keys(ansiStyles.color.ansi)) {
        if (skipModels.has(model)) {
          continue
        }

        styles[model] = {
          get() {
            const level = this.level
            return function () {
              const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments)
              const codes = {
                open,
                close: ansiStyles.color.close,
                closeRe: ansiStyles.color.closeRe
              }
              return build.call(
                this,
                this._styles ? this._styles.concat(codes) : [codes],
                this._empty,
                model
              )
            }
          }
        }
      }

      ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g")
      for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
        if (skipModels.has(model)) {
          continue
        }

        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1)
        styles[bgModel] = {
          get() {
            const level = this.level
            return function () {
              const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments)
              const codes = {
                open,
                close: ansiStyles.bgColor.close,
                closeRe: ansiStyles.bgColor.closeRe
              }
              return build.call(
                this,
                this._styles ? this._styles.concat(codes) : [codes],
                this._empty,
                model
              )
            }
          }
        }
      }

      const proto = Object.defineProperties(() => {}, styles)

      function build(_styles, _empty, key) {
        const builder = function () {
          return applyStyle.apply(builder, arguments)
        }

        builder._styles = _styles
        builder._empty = _empty

        const self = this

        Object.defineProperty(builder, "level", {
          enumerable: true,
          get() {
            return self.level
          },
          set(level) {
            self.level = level
          }
        })

        Object.defineProperty(builder, "enabled", {
          enumerable: true,
          get() {
            return self.enabled
          },
          set(enabled) {
            self.enabled = enabled
          }
        })

        // See below for fix regarding invisible grey/dim combination on Windows
        builder.hasGrey = this.hasGrey || key === "gray" || key === "grey"

        // `__proto__` is used because we must return a function, but there is
        // no way to create a function with a different prototype
        builder.__proto__ = proto // eslint-disable-line no-proto

        return builder
      }

      function applyStyle() {
        // Support varags, but simply cast to string in case there's only one arg
        const args = arguments
        const argsLen = args.length
        let str = String(arguments[0])

        if (argsLen === 0) {
          return ""
        }

        if (argsLen > 1) {
          // Don't slice `arguments`, it prevents V8 optimizations
          for (let a = 1; a < argsLen; a++) {
            str += " " + args[a]
          }
        }

        if (!this.enabled || this.level <= 0 || !str) {
          return this._empty ? "" : str
        }

        // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
        // see https://github.com/chalk/chalk/issues/58
        // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
        const originalDim = ansiStyles.dim.open
        if (isSimpleWindowsTerm && this.hasGrey) {
          ansiStyles.dim.open = ""
        }

        for (const code of this._styles.slice().reverse()) {
          // Replace any instances already present with a re-opening code
          // otherwise only the part of the string until said closing code
          // will be colored, and the rest will simply be 'plain'.
          str = code.open + str.replace(code.closeRe, code.open) + code.close

          // Close the styling before a linebreak and reopen
          // after next line to fix a bleed issue on macOS
          // https://github.com/chalk/chalk/pull/92
          str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`)
        }

        // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
        ansiStyles.dim.open = originalDim

        return str
      }

      function chalkTag(chalk, strings) {
        if (!Array.isArray(strings)) {
          // If chalk() was called by itself or with a string,
          // return the string itself as a string.
          return [].slice.call(arguments, 1).join(" ")
        }

        const args = [].slice.call(arguments, 2)
        const parts = [strings.raw[0]]

        for (let i = 1; i < strings.length; i++) {
          parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"))
          parts.push(String(strings.raw[i]))
        }

        return template(chalk, parts.join(""))
      }

      Object.defineProperties(Chalk.prototype, styles)

      module.exports = Chalk() // eslint-disable-line new-cap
      module.exports.supportsColor = stdoutColor
      module.exports["default"] = module.exports // For TypeScript

      /***/
    },

    /***/ 72558: /***/ (module) => {
      "use strict"

      const TEMPLATE_REGEX =
        /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi
      const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g
      const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/
      const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi

      const ESCAPES = new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "\t"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\u001B"],
        ["a", "\u0007"]
      ])

      function unescape(c) {
        if ((c[0] === "u" && c.length === 5) || (c[0] === "x" && c.length === 3)) {
          return String.fromCharCode(parseInt(c.slice(1), 16))
        }

        return ESCAPES.get(c) || c
      }

      function parseArguments(name, args) {
        const results = []
        const chunks = args.trim().split(/\s*,\s*/g)
        let matches

        for (const chunk of chunks) {
          if (!isNaN(chunk)) {
            results.push(Number(chunk))
          } else if ((matches = chunk.match(STRING_REGEX))) {
            results.push(
              matches[2].replace(ESCAPE_REGEX, (m, escape, chr) =>
                escape ? unescape(escape) : chr
              )
            )
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`)
          }
        }

        return results
      }

      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0

        const results = []
        let matches

        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1]

          if (matches[2]) {
            const args = parseArguments(name, matches[2])
            results.push([name].concat(args))
          } else {
            results.push([name])
          }
        }

        return results
      }

      function buildStyle(chalk, styles) {
        const enabled = {}

        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1)
          }
        }

        let current = chalk
        for (const styleName of Object.keys(enabled)) {
          if (Array.isArray(enabled[styleName])) {
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`)
            }

            if (enabled[styleName].length > 0) {
              current = current[styleName].apply(current, enabled[styleName])
            } else {
              current = current[styleName]
            }
          }
        }

        return current
      }

      module.exports = (chalk, tmp) => {
        const styles = []
        const chunks = []
        let chunk = []

        // eslint-disable-next-line max-params
        tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
          if (escapeChar) {
            chunk.push(unescape(escapeChar))
          } else if (style) {
            const str = chunk.join("")
            chunk = []
            chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str))
            styles.push({ inverse, styles: parseStyle(style) })
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal")
            }

            chunks.push(buildStyle(chalk, styles)(chunk.join("")))
            chunk = []
            styles.pop()
          } else {
            chunk.push(chr)
          }
        })

        chunks.push(chunk.join(""))

        if (styles.length > 0) {
          const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${
            styles.length === 1 ? "" : "s"
          } (\`}\`)`
          throw new Error(errMsg)
        }

        return chunks.join("")
      }

      /***/
    },

    /***/ 70591: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      /* MIT license */
      var cssKeywords = __nccwpck_require__(92780)

      // NOTE: conversions should only return primitive values (i.e. arrays, or
      //       values that give correct `typeof` results).
      //       do not use box values types (i.e. Number(), String(), etc.)

      var reverseKeywords = {}
      for (var key in cssKeywords) {
        if (cssKeywords.hasOwnProperty(key)) {
          reverseKeywords[cssKeywords[key]] = key
        }
      }

      var convert = (module.exports = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      })

      // hide .channels and .labels properties
      for (var model in convert) {
        if (convert.hasOwnProperty(model)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model)
          }

          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model)
          }

          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model)
          }

          var channels = convert[model].channels
          var labels = convert[model].labels
          delete convert[model].channels
          delete convert[model].labels
          Object.defineProperty(convert[model], "channels", { value: channels })
          Object.defineProperty(convert[model], "labels", { value: labels })
        }
      }

      convert.rgb.hsl = function (rgb) {
        var r = rgb[0] / 255
        var g = rgb[1] / 255
        var b = rgb[2] / 255
        var min = Math.min(r, g, b)
        var max = Math.max(r, g, b)
        var delta = max - min
        var h
        var s
        var l

        if (max === min) {
          h = 0
        } else if (r === max) {
          h = (g - b) / delta
        } else if (g === max) {
          h = 2 + (b - r) / delta
        } else if (b === max) {
          h = 4 + (r - g) / delta
        }

        h = Math.min(h * 60, 360)

        if (h < 0) {
          h += 360
        }

        l = (min + max) / 2

        if (max === min) {
          s = 0
        } else if (l <= 0.5) {
          s = delta / (max + min)
        } else {
          s = delta / (2 - max - min)
        }

        return [h, s * 100, l * 100]
      }

      convert.rgb.hsv = function (rgb) {
        var rdif
        var gdif
        var bdif
        var h
        var s

        var r = rgb[0] / 255
        var g = rgb[1] / 255
        var b = rgb[2] / 255
        var v = Math.max(r, g, b)
        var diff = v - Math.min(r, g, b)
        var diffc = function (c) {
          return (v - c) / 6 / diff + 1 / 2
        }

        if (diff === 0) {
          h = s = 0
        } else {
          s = diff / v
          rdif = diffc(r)
          gdif = diffc(g)
          bdif = diffc(b)

          if (r === v) {
            h = bdif - gdif
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif
          }
          if (h < 0) {
            h += 1
          } else if (h > 1) {
            h -= 1
          }
        }

        return [h * 360, s * 100, v * 100]
      }

      convert.rgb.hwb = function (rgb) {
        var r = rgb[0]
        var g = rgb[1]
        var b = rgb[2]
        var h = convert.rgb.hsl(rgb)[0]
        var w = (1 / 255) * Math.min(r, Math.min(g, b))

        b = 1 - (1 / 255) * Math.max(r, Math.max(g, b))

        return [h, w * 100, b * 100]
      }

      convert.rgb.cmyk = function (rgb) {
        var r = rgb[0] / 255
        var g = rgb[1] / 255
        var b = rgb[2] / 255
        var c
        var m
        var y
        var k

        k = Math.min(1 - r, 1 - g, 1 - b)
        c = (1 - r - k) / (1 - k) || 0
        m = (1 - g - k) / (1 - k) || 0
        y = (1 - b - k) / (1 - k) || 0

        return [c * 100, m * 100, y * 100, k * 100]
      }

      /**
       * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
       * */
      function comparativeDistance(x, y) {
        return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2)
      }

      convert.rgb.keyword = function (rgb) {
        var reversed = reverseKeywords[rgb]
        if (reversed) {
          return reversed
        }

        var currentClosestDistance = Infinity
        var currentClosestKeyword

        for (var keyword in cssKeywords) {
          if (cssKeywords.hasOwnProperty(keyword)) {
            var value = cssKeywords[keyword]

            // Compute comparative distance
            var distance = comparativeDistance(rgb, value)

            // Check if its less, if so set as closest
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance
              currentClosestKeyword = keyword
            }
          }
        }

        return currentClosestKeyword
      }

      convert.keyword.rgb = function (keyword) {
        return cssKeywords[keyword]
      }

      convert.rgb.xyz = function (rgb) {
        var r = rgb[0] / 255
        var g = rgb[1] / 255
        var b = rgb[2] / 255

        // assume sRGB
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92

        var x = r * 0.4124 + g * 0.3576 + b * 0.1805
        var y = r * 0.2126 + g * 0.7152 + b * 0.0722
        var z = r * 0.0193 + g * 0.1192 + b * 0.9505

        return [x * 100, y * 100, z * 100]
      }

      convert.rgb.lab = function (rgb) {
        var xyz = convert.rgb.xyz(rgb)
        var x = xyz[0]
        var y = xyz[1]
        var z = xyz[2]
        var l
        var a
        var b

        x /= 95.047
        y /= 100
        z /= 108.883

        x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116
        y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116
        z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116

        l = 116 * y - 16
        a = 500 * (x - y)
        b = 200 * (y - z)

        return [l, a, b]
      }

      convert.hsl.rgb = function (hsl) {
        var h = hsl[0] / 360
        var s = hsl[1] / 100
        var l = hsl[2] / 100
        var t1
        var t2
        var t3
        var rgb
        var val

        if (s === 0) {
          val = l * 255
          return [val, val, val]
        }

        if (l < 0.5) {
          t2 = l * (1 + s)
        } else {
          t2 = l + s - l * s
        }

        t1 = 2 * l - t2

        rgb = [0, 0, 0]
        for (var i = 0; i < 3; i++) {
          t3 = h + (1 / 3) * -(i - 1)
          if (t3 < 0) {
            t3++
          }
          if (t3 > 1) {
            t3--
          }

          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3
          } else if (2 * t3 < 1) {
            val = t2
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6
          } else {
            val = t1
          }

          rgb[i] = val * 255
        }

        return rgb
      }

      convert.hsl.hsv = function (hsl) {
        var h = hsl[0]
        var s = hsl[1] / 100
        var l = hsl[2] / 100
        var smin = s
        var lmin = Math.max(l, 0.01)
        var sv
        var v

        l *= 2
        s *= l <= 1 ? l : 2 - l
        smin *= lmin <= 1 ? lmin : 2 - lmin
        v = (l + s) / 2
        sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s)

        return [h, sv * 100, v * 100]
      }

      convert.hsv.rgb = function (hsv) {
        var h = hsv[0] / 60
        var s = hsv[1] / 100
        var v = hsv[2] / 100
        var hi = Math.floor(h) % 6

        var f = h - Math.floor(h)
        var p = 255 * v * (1 - s)
        var q = 255 * v * (1 - s * f)
        var t = 255 * v * (1 - s * (1 - f))
        v *= 255

        switch (hi) {
          case 0:
            return [v, t, p]
          case 1:
            return [q, v, p]
          case 2:
            return [p, v, t]
          case 3:
            return [p, q, v]
          case 4:
            return [t, p, v]
          case 5:
            return [v, p, q]
        }
      }

      convert.hsv.hsl = function (hsv) {
        var h = hsv[0]
        var s = hsv[1] / 100
        var v = hsv[2] / 100
        var vmin = Math.max(v, 0.01)
        var lmin
        var sl
        var l

        l = (2 - s) * v
        lmin = (2 - s) * vmin
        sl = s * vmin
        sl /= lmin <= 1 ? lmin : 2 - lmin
        sl = sl || 0
        l /= 2

        return [h, sl * 100, l * 100]
      }

      // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
      convert.hwb.rgb = function (hwb) {
        var h = hwb[0] / 360
        var wh = hwb[1] / 100
        var bl = hwb[2] / 100
        var ratio = wh + bl
        var i
        var v
        var f
        var n

        // wh + bl cant be > 1
        if (ratio > 1) {
          wh /= ratio
          bl /= ratio
        }

        i = Math.floor(6 * h)
        v = 1 - bl
        f = 6 * h - i

        if ((i & 0x01) !== 0) {
          f = 1 - f
        }

        n = wh + f * (v - wh) // linear interpolation

        var r
        var g
        var b
        switch (i) {
          default:
          case 6:
          case 0:
            r = v
            g = n
            b = wh
            break
          case 1:
            r = n
            g = v
            b = wh
            break
          case 2:
            r = wh
            g = v
            b = n
            break
          case 3:
            r = wh
            g = n
            b = v
            break
          case 4:
            r = n
            g = wh
            b = v
            break
          case 5:
            r = v
            g = wh
            b = n
            break
        }

        return [r * 255, g * 255, b * 255]
      }

      convert.cmyk.rgb = function (cmyk) {
        var c = cmyk[0] / 100
        var m = cmyk[1] / 100
        var y = cmyk[2] / 100
        var k = cmyk[3] / 100
        var r
        var g
        var b

        r = 1 - Math.min(1, c * (1 - k) + k)
        g = 1 - Math.min(1, m * (1 - k) + k)
        b = 1 - Math.min(1, y * (1 - k) + k)

        return [r * 255, g * 255, b * 255]
      }

      convert.xyz.rgb = function (xyz) {
        var x = xyz[0] / 100
        var y = xyz[1] / 100
        var z = xyz[2] / 100
        var r
        var g
        var b

        r = x * 3.2406 + y * -1.5372 + z * -0.4986
        g = x * -0.9689 + y * 1.8758 + z * 0.0415
        b = x * 0.0557 + y * -0.204 + z * 1.057

        // assume sRGB
        r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92

        g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92

        b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92

        r = Math.min(Math.max(0, r), 1)
        g = Math.min(Math.max(0, g), 1)
        b = Math.min(Math.max(0, b), 1)

        return [r * 255, g * 255, b * 255]
      }

      convert.xyz.lab = function (xyz) {
        var x = xyz[0]
        var y = xyz[1]
        var z = xyz[2]
        var l
        var a
        var b

        x /= 95.047
        y /= 100
        z /= 108.883

        x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116
        y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116
        z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116

        l = 116 * y - 16
        a = 500 * (x - y)
        b = 200 * (y - z)

        return [l, a, b]
      }

      convert.lab.xyz = function (lab) {
        var l = lab[0]
        var a = lab[1]
        var b = lab[2]
        var x
        var y
        var z

        y = (l + 16) / 116
        x = a / 500 + y
        z = y - b / 200

        var y2 = Math.pow(y, 3)
        var x2 = Math.pow(x, 3)
        var z2 = Math.pow(z, 3)
        y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787
        x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787
        z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787

        x *= 95.047
        y *= 100
        z *= 108.883

        return [x, y, z]
      }

      convert.lab.lch = function (lab) {
        var l = lab[0]
        var a = lab[1]
        var b = lab[2]
        var hr
        var h
        var c

        hr = Math.atan2(b, a)
        h = (hr * 360) / 2 / Math.PI

        if (h < 0) {
          h += 360
        }

        c = Math.sqrt(a * a + b * b)

        return [l, c, h]
      }

      convert.lch.lab = function (lch) {
        var l = lch[0]
        var c = lch[1]
        var h = lch[2]
        var a
        var b
        var hr

        hr = (h / 360) * 2 * Math.PI
        a = c * Math.cos(hr)
        b = c * Math.sin(hr)

        return [l, a, b]
      }

      convert.rgb.ansi16 = function (args) {
        var r = args[0]
        var g = args[1]
        var b = args[2]
        var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2] // hsv -> ansi16 optimization

        value = Math.round(value / 50)

        if (value === 0) {
          return 30
        }

        var ansi =
          30 + ((Math.round(b / 255) << 2) | (Math.round(g / 255) << 1) | Math.round(r / 255))

        if (value === 2) {
          ansi += 60
        }

        return ansi
      }

      convert.hsv.ansi16 = function (args) {
        // optimization here; we already know the value and don't need to get
        // it converted for us.
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2])
      }

      convert.rgb.ansi256 = function (args) {
        var r = args[0]
        var g = args[1]
        var b = args[2]

        // we use the extended greyscale palette here, with the exception of
        // black and white. normal palette only has 4 greyscale shades.
        if (r === g && g === b) {
          if (r < 8) {
            return 16
          }

          if (r > 248) {
            return 231
          }

          return Math.round(((r - 8) / 247) * 24) + 232
        }

        var ansi =
          16 +
          36 * Math.round((r / 255) * 5) +
          6 * Math.round((g / 255) * 5) +
          Math.round((b / 255) * 5)

        return ansi
      }

      convert.ansi16.rgb = function (args) {
        var color = args % 10

        // handle greyscale
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5
          }

          color = (color / 10.5) * 255

          return [color, color, color]
        }

        var mult = (~~(args > 50) + 1) * 0.5
        var r = (color & 1) * mult * 255
        var g = ((color >> 1) & 1) * mult * 255
        var b = ((color >> 2) & 1) * mult * 255

        return [r, g, b]
      }

      convert.ansi256.rgb = function (args) {
        // handle greyscale
        if (args >= 232) {
          var c = (args - 232) * 10 + 8
          return [c, c, c]
        }

        args -= 16

        var rem
        var r = (Math.floor(args / 36) / 5) * 255
        var g = (Math.floor((rem = args % 36) / 6) / 5) * 255
        var b = ((rem % 6) / 5) * 255

        return [r, g, b]
      }

      convert.rgb.hex = function (args) {
        var integer =
          ((Math.round(args[0]) & 0xff) << 16) +
          ((Math.round(args[1]) & 0xff) << 8) +
          (Math.round(args[2]) & 0xff)

        var string = integer.toString(16).toUpperCase()
        return "000000".substring(string.length) + string
      }

      convert.hex.rgb = function (args) {
        var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i)
        if (!match) {
          return [0, 0, 0]
        }

        var colorString = match[0]

        if (match[0].length === 3) {
          colorString = colorString
            .split("")
            .map(function (char) {
              return char + char
            })
            .join("")
        }

        var integer = parseInt(colorString, 16)
        var r = (integer >> 16) & 0xff
        var g = (integer >> 8) & 0xff
        var b = integer & 0xff

        return [r, g, b]
      }

      convert.rgb.hcg = function (rgb) {
        var r = rgb[0] / 255
        var g = rgb[1] / 255
        var b = rgb[2] / 255
        var max = Math.max(Math.max(r, g), b)
        var min = Math.min(Math.min(r, g), b)
        var chroma = max - min
        var grayscale
        var hue

        if (chroma < 1) {
          grayscale = min / (1 - chroma)
        } else {
          grayscale = 0
        }

        if (chroma <= 0) {
          hue = 0
        } else if (max === r) {
          hue = ((g - b) / chroma) % 6
        } else if (max === g) {
          hue = 2 + (b - r) / chroma
        } else {
          hue = 4 + (r - g) / chroma + 4
        }

        hue /= 6
        hue %= 1

        return [hue * 360, chroma * 100, grayscale * 100]
      }

      convert.hsl.hcg = function (hsl) {
        var s = hsl[1] / 100
        var l = hsl[2] / 100
        var c = 1
        var f = 0

        if (l < 0.5) {
          c = 2.0 * s * l
        } else {
          c = 2.0 * s * (1.0 - l)
        }

        if (c < 1.0) {
          f = (l - 0.5 * c) / (1.0 - c)
        }

        return [hsl[0], c * 100, f * 100]
      }

      convert.hsv.hcg = function (hsv) {
        var s = hsv[1] / 100
        var v = hsv[2] / 100

        var c = s * v
        var f = 0

        if (c < 1.0) {
          f = (v - c) / (1 - c)
        }

        return [hsv[0], c * 100, f * 100]
      }

      convert.hcg.rgb = function (hcg) {
        var h = hcg[0] / 360
        var c = hcg[1] / 100
        var g = hcg[2] / 100

        if (c === 0.0) {
          return [g * 255, g * 255, g * 255]
        }

        var pure = [0, 0, 0]
        var hi = (h % 1) * 6
        var v = hi % 1
        var w = 1 - v
        var mg = 0

        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1
            pure[1] = v
            pure[2] = 0
            break
          case 1:
            pure[0] = w
            pure[1] = 1
            pure[2] = 0
            break
          case 2:
            pure[0] = 0
            pure[1] = 1
            pure[2] = v
            break
          case 3:
            pure[0] = 0
            pure[1] = w
            pure[2] = 1
            break
          case 4:
            pure[0] = v
            pure[1] = 0
            pure[2] = 1
            break
          default:
            pure[0] = 1
            pure[1] = 0
            pure[2] = w
        }

        mg = (1.0 - c) * g

        return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255]
      }

      convert.hcg.hsv = function (hcg) {
        var c = hcg[1] / 100
        var g = hcg[2] / 100

        var v = c + g * (1.0 - c)
        var f = 0

        if (v > 0.0) {
          f = c / v
        }

        return [hcg[0], f * 100, v * 100]
      }

      convert.hcg.hsl = function (hcg) {
        var c = hcg[1] / 100
        var g = hcg[2] / 100

        var l = g * (1.0 - c) + 0.5 * c
        var s = 0

        if (l > 0.0 && l < 0.5) {
          s = c / (2 * l)
        } else if (l >= 0.5 && l < 1.0) {
          s = c / (2 * (1 - l))
        }

        return [hcg[0], s * 100, l * 100]
      }

      convert.hcg.hwb = function (hcg) {
        var c = hcg[1] / 100
        var g = hcg[2] / 100
        var v = c + g * (1.0 - c)
        return [hcg[0], (v - c) * 100, (1 - v) * 100]
      }

      convert.hwb.hcg = function (hwb) {
        var w = hwb[1] / 100
        var b = hwb[2] / 100
        var v = 1 - b
        var c = v - w
        var g = 0

        if (c < 1) {
          g = (v - c) / (1 - c)
        }

        return [hwb[0], c * 100, g * 100]
      }

      convert.apple.rgb = function (apple) {
        return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255]
      }

      convert.rgb.apple = function (rgb) {
        return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535]
      }

      convert.gray.rgb = function (args) {
        return [(args[0] / 100) * 255, (args[0] / 100) * 255, (args[0] / 100) * 255]
      }

      convert.gray.hsl = convert.gray.hsv = function (args) {
        return [0, 0, args[0]]
      }

      convert.gray.hwb = function (gray) {
        return [0, 100, gray[0]]
      }

      convert.gray.cmyk = function (gray) {
        return [0, 0, 0, gray[0]]
      }

      convert.gray.lab = function (gray) {
        return [gray[0], 0, 0]
      }

      convert.gray.hex = function (gray) {
        var val = Math.round((gray[0] / 100) * 255) & 0xff
        var integer = (val << 16) + (val << 8) + val

        var string = integer.toString(16).toUpperCase()
        return "000000".substring(string.length) + string
      }

      convert.rgb.gray = function (rgb) {
        var val = (rgb[0] + rgb[1] + rgb[2]) / 3
        return [(val / 255) * 100]
      }

      /***/
    },

    /***/ 5458: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var conversions = __nccwpck_require__(70591)
      var route = __nccwpck_require__(69769)

      var convert = {}

      var models = Object.keys(conversions)

      function wrapRaw(fn) {
        var wrappedFn = function (args) {
          if (args === undefined || args === null) {
            return args
          }

          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments)
          }

          return fn(args)
        }

        // preserve .conversion property if there is one
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion
        }

        return wrappedFn
      }

      function wrapRounded(fn) {
        var wrappedFn = function (args) {
          if (args === undefined || args === null) {
            return args
          }

          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments)
          }

          var result = fn(args)

          // we're assuming the result is an array here.
          // see notice in conversions.js; don't use box types
          // in conversion functions.
          if (typeof result === "object") {
            for (var len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i])
            }
          }

          return result
        }

        // preserve .conversion property if there is one
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion
        }

        return wrappedFn
      }

      models.forEach(function (fromModel) {
        convert[fromModel] = {}

        Object.defineProperty(convert[fromModel], "channels", {
          value: conversions[fromModel].channels
        })
        Object.defineProperty(convert[fromModel], "labels", {
          value: conversions[fromModel].labels
        })

        var routes = route(fromModel)
        var routeModels = Object.keys(routes)

        routeModels.forEach(function (toModel) {
          var fn = routes[toModel]

          convert[fromModel][toModel] = wrapRounded(fn)
          convert[fromModel][toModel].raw = wrapRaw(fn)
        })
      })

      module.exports = convert

      /***/
    },

    /***/ 69769: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var conversions = __nccwpck_require__(70591)

      /*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

      function buildGraph() {
        var graph = {}
        // https://jsperf.com/object-keys-vs-for-in-with-closure/3
        var models = Object.keys(conversions)

        for (var len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          }
        }

        return graph
      }

      // https://en.wikipedia.org/wiki/Breadth-first_search
      function deriveBFS(fromModel) {
        var graph = buildGraph()
        var queue = [fromModel] // unshift -> queue -> pop

        graph[fromModel].distance = 0

        while (queue.length) {
          var current = queue.pop()
          var adjacents = Object.keys(conversions[current])

          for (var len = adjacents.length, i = 0; i < len; i++) {
            var adjacent = adjacents[i]
            var node = graph[adjacent]

            if (node.distance === -1) {
              node.distance = graph[current].distance + 1
              node.parent = current
              queue.unshift(adjacent)
            }
          }
        }

        return graph
      }

      function link(from, to) {
        return function (args) {
          return to(from(args))
        }
      }

      function wrapConversion(toModel, graph) {
        var path = [graph[toModel].parent, toModel]
        var fn = conversions[graph[toModel].parent][toModel]

        var cur = graph[toModel].parent
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent)
          fn = link(conversions[graph[cur].parent][cur], fn)
          cur = graph[cur].parent
        }

        fn.conversion = path
        return fn
      }

      module.exports = function (fromModel) {
        var graph = deriveBFS(fromModel)
        var conversion = {}

        var models = Object.keys(graph)
        for (var len = models.length, i = 0; i < len; i++) {
          var toModel = models[i]
          var node = graph[toModel]

          if (node.parent === null) {
            // no possible conversion, or this node is the source model.
            continue
          }

          conversion[toModel] = wrapConversion(toModel, graph)
        }

        return conversion
      }

      /***/
    },

    /***/ 92780: /***/ (module) => {
      "use strict"

      module.exports = {
        aliceblue: [240, 248, 255],
        antiquewhite: [250, 235, 215],
        aqua: [0, 255, 255],
        aquamarine: [127, 255, 212],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        bisque: [255, 228, 196],
        black: [0, 0, 0],
        blanchedalmond: [255, 235, 205],
        blue: [0, 0, 255],
        blueviolet: [138, 43, 226],
        brown: [165, 42, 42],
        burlywood: [222, 184, 135],
        cadetblue: [95, 158, 160],
        chartreuse: [127, 255, 0],
        chocolate: [210, 105, 30],
        coral: [255, 127, 80],
        cornflowerblue: [100, 149, 237],
        cornsilk: [255, 248, 220],
        crimson: [220, 20, 60],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgoldenrod: [184, 134, 11],
        darkgray: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkgrey: [169, 169, 169],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkseagreen: [143, 188, 143],
        darkslateblue: [72, 61, 139],
        darkslategray: [47, 79, 79],
        darkslategrey: [47, 79, 79],
        darkturquoise: [0, 206, 209],
        darkviolet: [148, 0, 211],
        deeppink: [255, 20, 147],
        deepskyblue: [0, 191, 255],
        dimgray: [105, 105, 105],
        dimgrey: [105, 105, 105],
        dodgerblue: [30, 144, 255],
        firebrick: [178, 34, 34],
        floralwhite: [255, 250, 240],
        forestgreen: [34, 139, 34],
        fuchsia: [255, 0, 255],
        gainsboro: [220, 220, 220],
        ghostwhite: [248, 248, 255],
        gold: [255, 215, 0],
        goldenrod: [218, 165, 32],
        gray: [128, 128, 128],
        green: [0, 128, 0],
        greenyellow: [173, 255, 47],
        grey: [128, 128, 128],
        honeydew: [240, 255, 240],
        hotpink: [255, 105, 180],
        indianred: [205, 92, 92],
        indigo: [75, 0, 130],
        ivory: [255, 255, 240],
        khaki: [240, 230, 140],
        lavender: [230, 230, 250],
        lavenderblush: [255, 240, 245],
        lawngreen: [124, 252, 0],
        lemonchiffon: [255, 250, 205],
        lightblue: [173, 216, 230],
        lightcoral: [240, 128, 128],
        lightcyan: [224, 255, 255],
        lightgoldenrodyellow: [250, 250, 210],
        lightgray: [211, 211, 211],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightsalmon: [255, 160, 122],
        lightseagreen: [32, 178, 170],
        lightskyblue: [135, 206, 250],
        lightslategray: [119, 136, 153],
        lightslategrey: [119, 136, 153],
        lightsteelblue: [176, 196, 222],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        limegreen: [50, 205, 50],
        linen: [250, 240, 230],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        mediumaquamarine: [102, 205, 170],
        mediumblue: [0, 0, 205],
        mediumorchid: [186, 85, 211],
        mediumpurple: [147, 112, 219],
        mediumseagreen: [60, 179, 113],
        mediumslateblue: [123, 104, 238],
        mediumspringgreen: [0, 250, 154],
        mediumturquoise: [72, 209, 204],
        mediumvioletred: [199, 21, 133],
        midnightblue: [25, 25, 112],
        mintcream: [245, 255, 250],
        mistyrose: [255, 228, 225],
        moccasin: [255, 228, 181],
        navajowhite: [255, 222, 173],
        navy: [0, 0, 128],
        oldlace: [253, 245, 230],
        olive: [128, 128, 0],
        olivedrab: [107, 142, 35],
        orange: [255, 165, 0],
        orangered: [255, 69, 0],
        orchid: [218, 112, 214],
        palegoldenrod: [238, 232, 170],
        palegreen: [152, 251, 152],
        paleturquoise: [175, 238, 238],
        palevioletred: [219, 112, 147],
        papayawhip: [255, 239, 213],
        peachpuff: [255, 218, 185],
        peru: [205, 133, 63],
        pink: [255, 192, 203],
        plum: [221, 160, 221],
        powderblue: [176, 224, 230],
        purple: [128, 0, 128],
        rebeccapurple: [102, 51, 153],
        red: [255, 0, 0],
        rosybrown: [188, 143, 143],
        royalblue: [65, 105, 225],
        saddlebrown: [139, 69, 19],
        salmon: [250, 128, 114],
        sandybrown: [244, 164, 96],
        seagreen: [46, 139, 87],
        seashell: [255, 245, 238],
        sienna: [160, 82, 45],
        silver: [192, 192, 192],
        skyblue: [135, 206, 235],
        slateblue: [106, 90, 205],
        slategray: [112, 128, 144],
        slategrey: [112, 128, 144],
        snow: [255, 250, 250],
        springgreen: [0, 255, 127],
        steelblue: [70, 130, 180],
        tan: [210, 180, 140],
        teal: [0, 128, 128],
        thistle: [216, 191, 216],
        tomato: [255, 99, 71],
        turquoise: [64, 224, 208],
        violet: [238, 130, 238],
        wheat: [245, 222, 179],
        white: [255, 255, 255],
        whitesmoke: [245, 245, 245],
        yellow: [255, 255, 0],
        yellowgreen: [154, 205, 50]
      }

      /***/
    },

    /***/ 25898: /***/ (module) => {
      "use strict"

      var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g

      module.exports = function (str) {
        if (typeof str !== "string") {
          throw new TypeError("Expected a string")
        }

        return str.replace(matchOperatorsRe, "\\$&")
      }

      /***/
    },

    /***/ 33226: /***/ (module) => {
      "use strict"

      module.exports = (flag, argv) => {
        argv = argv || process.argv
        const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--"
        const pos = argv.indexOf(prefix + flag)
        const terminatorPos = argv.indexOf("--")
        return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos)
      }

      /***/
    },

    /***/ 95317: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const os = __nccwpck_require__(22037)
      const hasFlag = __nccwpck_require__(33226)

      const env = process.env

      let forceColor
      if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
        forceColor = false
      } else if (
        hasFlag("color") ||
        hasFlag("colors") ||
        hasFlag("color=true") ||
        hasFlag("color=always")
      ) {
        forceColor = true
      }
      if ("FORCE_COLOR" in env) {
        forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0
      }

      function translateLevel(level) {
        if (level === 0) {
          return false
        }

        return {
          level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3
        }
      }

      function supportsColor(stream) {
        if (forceColor === false) {
          return 0
        }

        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3
        }

        if (hasFlag("color=256")) {
          return 2
        }

        if (stream && !stream.isTTY && forceColor !== true) {
          return 0
        }

        const min = forceColor ? 1 : 0

        if (process.platform === "win32") {
          // Node.js 7.5.0 is the first version of Node.js to include a patch to
          // libuv that enables 256 color output on Windows. Anything earlier and it
          // won't work. However, here we target Node.js 8 at minimum as it is an LTS
          // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
          // release that supports 256 colors. Windows 10 build 14931 is the first release
          // that supports 16m/TrueColor.
          const osRelease = os.release().split(".")
          if (
            Number(process.versions.node.split(".")[0]) >= 8 &&
            Number(osRelease[0]) >= 10 &&
            Number(osRelease[2]) >= 10586
          ) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2
          }

          return 1
        }

        if ("CI" in env) {
          if (
            ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) ||
            env.CI_NAME === "codeship"
          ) {
            return 1
          }

          return min
        }

        if ("TEAMCITY_VERSION" in env) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0
        }

        if (env.COLORTERM === "truecolor") {
          return 3
        }

        if ("TERM_PROGRAM" in env) {
          const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10)

          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version >= 3 ? 3 : 2
            case "Apple_Terminal":
              return 2
            // No default
          }
        }

        if (/-256(color)?$/i.test(env.TERM)) {
          return 2
        }

        if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
          return 1
        }

        if ("COLORTERM" in env) {
          return 1
        }

        if (env.TERM === "dumb") {
          return min
        }

        return min
      }

      function getSupportLevel(stream) {
        const level = supportsColor(stream)
        return translateLevel(level)
      }

      module.exports = {
        supportsColor: getSupportLevel,
        stdout: getSupportLevel(process.stdout),
        stderr: getSupportLevel(process.stderr)
      }

      /***/
    },

    /***/ 55635: /***/ (module) => {
      module.exports = {
        parserPreset: "conventional-changelog-conventionalcommits",
        rules: {
          "body-leading-blank": [1, "always"],
          "body-max-line-length": [2, "always", 100],
          "footer-leading-blank": [1, "always"],
          "footer-max-line-length": [2, "always", 100],
          "header-max-length": [2, "always", 100],
          "subject-case": [
            2,
            "never",
            ["sentence-case", "start-case", "pascal-case", "upper-case"]
          ],
          "subject-empty": [2, "never"],
          "subject-full-stop": [2, "never", "."],
          "type-case": [2, "always", "lower-case"],
          "type-empty": [2, "never"],
          "type-enum": [
            2,
            "always",
            [
              "build",
              "chore",
              "ci",
              "docs",
              "feat",
              "fix",
              "perf",
              "refactor",
              "revert",
              "style",
              "test"
            ]
          ]
        },
        prompt: {
          questions: {
            type: {
              description: "Select the type of change that you're committing",
              enum: {
                feat: {
                  description: "A new feature",
                  title: "Features",
                  emoji: "✨"
                },
                fix: {
                  description: "A bug fix",
                  title: "Bug Fixes",
                  emoji: "🐛"
                },
                docs: {
                  description: "Documentation only changes",
                  title: "Documentation",
                  emoji: "📚"
                },
                style: {
                  description:
                    "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)",
                  title: "Styles",
                  emoji: "💎"
                },
                refactor: {
                  description: "A code change that neither fixes a bug nor adds a feature",
                  title: "Code Refactoring",
                  emoji: "📦"
                },
                perf: {
                  description: "A code change that improves performance",
                  title: "Performance Improvements",
                  emoji: "🚀"
                },
                test: {
                  description: "Adding missing tests or correcting existing tests",
                  title: "Tests",
                  emoji: "🚨"
                },
                build: {
                  description:
                    "Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)",
                  title: "Builds",
                  emoji: "🛠"
                },
                ci: {
                  description:
                    "Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)",
                  title: "Continuous Integrations",
                  emoji: "⚙️"
                },
                chore: {
                  description: "Other changes that don't modify src or test files",
                  title: "Chores",
                  emoji: "♻️"
                },
                revert: {
                  description: "Reverts a previous commit",
                  title: "Reverts",
                  emoji: "🗑"
                }
              }
            },
            scope: {
              description: "What is the scope of this change (e.g. component or file name)"
            },
            subject: {
              description: "Write a short, imperative tense description of the change"
            },
            body: {
              description: "Provide a longer description of the change"
            },
            isBreaking: {
              description: "Are there any breaking changes?"
            },
            breakingBody: {
              description:
                "A BREAKING CHANGE commit requires a body. Please enter a longer description of the commit itself"
            },
            breaking: {
              description: "Describe the breaking changes"
            },
            isIssueAffected: {
              description: "Does this change affect any open issues?"
            },
            issuesBody: {
              description:
                "If issues are closed, the commit requires a body. Please enter a longer description of the commit itself"
            },
            issues: {
              description: 'Add issue references (e.g. "fix #123", "re #123".)'
            }
          }
        }
      }

      /***/
    },

    /***/ 72763: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.formatErrors = void 0
      /**
       * Formats an array of schema validation errors.
       * @param errors An array of error messages to format.
       * @returns Formatted error message
       * Based on https://github.com/eslint/eslint/blob/master/lib/shared/config-validator.js#L237-L261
       */
      function formatErrors(errors) {
        return errors
          .map((error) => {
            if (error.keyword === "additionalProperties" && "additionalProperty" in error.params) {
              const formattedPropertyPath = error.dataPath.length
                ? `${error.dataPath.slice(1)}.${error.params.additionalProperty}`
                : error.params.additionalProperty
              return `Unexpected top-level property "${formattedPropertyPath}"`
            }
            if (error.keyword === "type") {
              const formattedField = error.dataPath.slice(1)
              if (!formattedField) {
                return `Config has the wrong type - ${error.message}`
              }
              return `Property "${formattedField}" has the wrong type - ${error.message}`
            }
            const field =
              (error.dataPath[0] === "." ? error.dataPath.slice(1) : error.dataPath) || "Config"
            if (error.keyword === "typeof") {
              return `"${field}" should be a ${error.schema}. Value: ${JSON.stringify(error.data)}`
            }
            return `"${field}" ${error.message}. Value: ${JSON.stringify(error.data)}`
          })
          .map((message) => `\t- ${message}.\n`)
          .join("")
      }
      exports.formatErrors = formatErrors
      //# sourceMappingURL=formatErrors.js.map

      /***/
    },

    /***/ 13271: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.validateConfig = void 0
      const ajv_1 = __importDefault(__nccwpck_require__(64941))
      const commitlint_schema_json_1 = __importDefault(__nccwpck_require__(19706))
      const formatErrors_1 = __nccwpck_require__(72763)
      const TYPE_OF = ["undefined", "string", "number", "object", "function", "boolean", "symbol"]
      function validateConfig(source, config) {
        const ajv = new ajv_1.default({
          meta: false,
          useDefaults: true,
          validateSchema: false,
          missingRefs: "ignore",
          verbose: true,
          schemaId: "auto"
        })
        ajv.addKeyword("typeof", {
          validate: function typeOfFunc(schema, data) {
            return typeof data === schema
          },
          metaSchema: { type: "string", enum: TYPE_OF },
          schema: true
        })
        const validate = ajv.compile(commitlint_schema_json_1.default)
        const isValid = validate(config)
        if (!isValid && validate.errors && validate.errors.length) {
          throw new Error(
            `Commitlint configuration in ${source} is invalid:\n${(0, formatErrors_1.formatErrors)(
              validate.errors
            )}`
          )
        }
      }
      exports.validateConfig = validateConfig
      //# sourceMappingURL=validate.js.map

      /***/
    },

    /***/ 78445: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const to_case_1 = __importDefault(__nccwpck_require__(12390))
      exports["default"] = ensureCase
      function ensureCase(raw = "", target = "lowercase") {
        // We delete any content together with quotes because he can contains proper names (example `refactor: `Eslint` configuration`).
        // We need trim string because content with quotes can be at the beginning or end of a line
        const input = String(raw)
          .replace(/`.*?`|".*?"|'.*?'/g, "")
          .trim()
        const transformed = (0, to_case_1.default)(input, target)
        if (transformed === "" || transformed.match(/^\d/)) {
          return true
        }
        return transformed === input
      }
      //# sourceMappingURL=case.js.map

      /***/
    },

    /***/ 79691: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports["default"] = (value, enums = []) => {
        if (value === undefined) {
          return false
        }
        if (!Array.isArray(enums)) {
          return false
        }
        return enums.indexOf(value) > -1
      }
      //# sourceMappingURL=enum.js.map

      /***/
    },

    /***/ 35573: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.toCase =
        exports.notEmpty =
        exports.minLength =
        exports.maxLineLength =
        exports.maxLength =
        exports["enum"] =
        exports["case"] =
          void 0
      const case_1 = __importDefault(__nccwpck_require__(78445))
      exports["case"] = case_1.default
      const enum_1 = __importDefault(__nccwpck_require__(79691))
      exports["enum"] = enum_1.default
      const max_length_1 = __importDefault(__nccwpck_require__(8893))
      exports.maxLength = max_length_1.default
      const max_line_length_1 = __importDefault(__nccwpck_require__(76066))
      exports.maxLineLength = max_line_length_1.default
      const min_length_1 = __importDefault(__nccwpck_require__(32310))
      exports.minLength = min_length_1.default
      const not_empty_1 = __importDefault(__nccwpck_require__(69081))
      exports.notEmpty = not_empty_1.default
      const to_case_1 = __importDefault(__nccwpck_require__(12390))
      exports.toCase = to_case_1.default
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 8893: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports["default"] = (value, max) => typeof value === "string" && value.length <= max
      //# sourceMappingURL=max-length.js.map

      /***/
    },

    /***/ 76066: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const max_length_1 = __importDefault(__nccwpck_require__(8893))
      exports["default"] = (value, max) =>
        typeof value === "string" &&
        value.split(/\r?\n/).every((line) => (0, max_length_1.default)(line, max))
      //# sourceMappingURL=max-line-length.js.map

      /***/
    },

    /***/ 32310: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports["default"] = (value, min) => typeof value === "string" && value.length >= min
      //# sourceMappingURL=min-length.js.map

      /***/
    },

    /***/ 69081: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports["default"] = (value) => typeof value === "string" && value.length > 0
      //# sourceMappingURL=not-empty.js.map

      /***/
    },

    /***/ 12390: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const camelCase_1 = __importDefault(__nccwpck_require__(45769))
      const kebabCase_1 = __importDefault(__nccwpck_require__(35852))
      const snakeCase_1 = __importDefault(__nccwpck_require__(31419))
      const upperFirst_1 = __importDefault(__nccwpck_require__(72598))
      const startCase_1 = __importDefault(__nccwpck_require__(69274))
      function toCase(input, target) {
        switch (target) {
          case "camel-case":
            return (0, camelCase_1.default)(input)
          case "kebab-case":
            return (0, kebabCase_1.default)(input)
          case "snake-case":
            return (0, snakeCase_1.default)(input)
          case "pascal-case":
            return (0, upperFirst_1.default)((0, camelCase_1.default)(input))
          case "start-case":
            return (0, startCase_1.default)(input)
          case "upper-case":
          case "uppercase":
            return input.toUpperCase()
          case "sentence-case":
          case "sentencecase":
            return (0, upperFirst_1.default)(input)
          case "lower-case":
          case "lowercase":
          case "lowerCase": // Backwards compat config-angular v4
            return input.toLowerCase()
          default:
            throw new TypeError(`to-case: Unknown target case "${target}"`)
        }
      }
      exports["default"] = toCase
      //# sourceMappingURL=to-case.js.map

      /***/
    },

    /***/ 20795: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.execute = void 0
      exports["default"] = execute
      async function execute(rule) {
        if (!Array.isArray(rule)) {
          return null
        }
        const [name, config] = rule
        const fn = executable(config) ? config : async () => config
        return [name, await fn()]
      }
      exports.execute = execute
      function executable(config) {
        return typeof config === "function"
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 99125: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.wildcards = void 0
      const semver = __importStar(__nccwpck_require__(11383))
      const isSemver = (c) => {
        const firstLine = c.split("\n").shift()
        if (typeof firstLine !== "string") {
          return false
        }
        const stripped = firstLine.replace(/^chore(\([^)]+\))?:/, "").trim()
        return semver.valid(stripped) !== null
      }
      const test = (r) => r.test.bind(r)
      exports.wildcards = [
        test(/^((Merge pull request)|(Merge (.*?) into (.*?)|(Merge branch (.*?)))(?:\r?\n)*$)/m),
        test(/^(Merge tag (.*?))(?:\r?\n)*$/m),
        test(/^(R|r)evert (.*)/),
        test(/^(fixup|squash)!/),
        isSemver,
        test(/^(Merged (.*?)(in|into) (.*)|Merged PR (.*): (.*))/),
        test(/^Merge remote-tracking branch(\s*)(.*)/),
        test(/^Automatic merge(.*)/),
        test(/^Auto-merged (.*?) into (.*)/)
      ]
      //# sourceMappingURL=defaults.js.map

      /***/
    },

    /***/ 86871: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __exportStar =
        (this && this.__exportStar) ||
        function (m, exports) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p))
              __createBinding(exports, m, p)
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports["default"] = void 0
      __exportStar(__nccwpck_require__(24925), exports)
      var is_ignored_1 = __nccwpck_require__(24925)
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function () {
          return __importDefault(is_ignored_1).default
        }
      })
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 24925: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      const defaults_1 = __nccwpck_require__(99125)
      function isIgnored(commit = "", opts = {}) {
        const ignores = typeof opts.ignores === "undefined" ? [] : opts.ignores
        if (!Array.isArray(ignores)) {
          throw new Error(
            `ignores must be of type array, received ${ignores} of type ${typeof ignores}`
          )
        }
        const invalids = ignores.filter((c) => typeof c !== "function")
        if (invalids.length > 0) {
          throw new Error(
            `ignores must be array of type function, received items of type: ${invalids
              .map((i) => typeof i)
              .join(", ")}`
          )
        }
        const base = opts.defaults === false ? [] : defaults_1.wildcards
        return [...base, ...ignores].some((w) => w(commit))
      }
      exports["default"] = isIgnored
      //# sourceMappingURL=is-ignored.js.map

      /***/
    },

    /***/ 68560: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.buildCommitMesage = void 0
      const buildCommitMesage = ({ header, body, footer }) => {
        let message = header
        message = body ? `${message}\n\n${body}` : message
        message = footer ? `${message}\n\n${footer}` : message
        return message
      }
      exports.buildCommitMesage = buildCommitMesage
      //# sourceMappingURL=commit-message.js.map

      /***/
    },

    /***/ 9152: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const util_1 = __importDefault(__nccwpck_require__(73837))
      const is_ignored_1 = __importDefault(__nccwpck_require__(86871))
      const parse_1 = __importDefault(__nccwpck_require__(75635))
      const rules_1 = __importDefault(__nccwpck_require__(23383))
      const commit_message_1 = __nccwpck_require__(68560)
      const types_1 = __nccwpck_require__(63534)
      async function lint(message, rawRulesConfig, rawOpts) {
        const opts = rawOpts ? rawOpts : { defaultIgnores: undefined, ignores: undefined }
        const rulesConfig = rawRulesConfig || {}
        // Found a wildcard match, skip
        if (
          (0, is_ignored_1.default)(message, {
            defaults: opts.defaultIgnores,
            ignores: opts.ignores
          })
        ) {
          return {
            valid: true,
            errors: [],
            warnings: [],
            input: message
          }
        }
        // Parse the commit message
        const parsed =
          message === ""
            ? { header: null, body: null, footer: null }
            : await (0, parse_1.default)(message, undefined, opts.parserOpts)
        if (parsed.header === null && parsed.body === null && parsed.footer === null) {
          // Commit is empty, skip
          return {
            valid: true,
            errors: [],
            warnings: [],
            input: message
          }
        }
        const allRules = new Map(Object.entries(rules_1.default))
        if (opts.plugins) {
          Object.values(opts.plugins).forEach((plugin) => {
            if (plugin.rules) {
              Object.keys(plugin.rules).forEach((ruleKey) =>
                allRules.set(ruleKey, plugin.rules[ruleKey])
              )
            }
          })
        }
        // Find invalid rules configs
        const missing = Object.keys(rulesConfig).filter(
          (name) => typeof allRules.get(name) !== "function"
        )
        if (missing.length > 0) {
          const names = [...allRules.keys()]
          throw new RangeError(
            `Found invalid rule names: ${missing.join(
              ", "
            )}. Supported rule names are: ${names.join(", ")}`
          )
        }
        const invalid = Object.entries(rulesConfig)
          .map(([name, config]) => {
            if (!Array.isArray(config)) {
              return new Error(
                `config for rule ${name} must be array, received ${util_1.default.inspect(
                  config
                )} of type ${typeof config}`
              )
            }
            const [level] = config
            if (level === types_1.RuleConfigSeverity.Disabled && config.length === 1) {
              return null
            }
            const [, when] = config
            if (typeof level !== "number" || isNaN(level)) {
              return new Error(
                `level for rule ${name} must be number, received ${util_1.default.inspect(
                  level
                )} of type ${typeof level}`
              )
            }
            if (config.length < 2 || config.length > 3) {
              return new Error(
                `config for rule ${name} must be 2 or 3 items long, received ${util_1.default.inspect(
                  config
                )} of length ${config.length}`
              )
            }
            if (level < 0 || level > 2) {
              return new RangeError(
                `level for rule ${name} must be between 0 and 2, received ${util_1.default.inspect(
                  level
                )}`
              )
            }
            if (typeof when !== "string") {
              return new Error(
                `condition for rule ${name} must be string, received ${util_1.default.inspect(
                  when
                )} of type ${typeof when}`
              )
            }
            if (when !== "never" && when !== "always") {
              return new Error(
                `condition for rule ${name} must be "always" or "never", received ${util_1.default.inspect(
                  when
                )}`
              )
            }
            return null
          })
          .filter((item) => item instanceof Error)
        if (invalid.length > 0) {
          throw new Error(invalid.map((i) => i.message).join("\n"))
        }
        // Validate against all rules
        const pendingResults = Object.entries(rulesConfig)
          // Level 0 rules are ignored
          .filter(([, config]) => !!config && config.length && config[0] > 0)
          .map(async (entry) => {
            const [name, config] = entry
            const [level, when, value] = config //
            const rule = allRules.get(name)
            if (!rule) {
              throw new Error(`Could not find rule implementation for ${name}`)
            }
            const executableRule = rule
            const [valid, message] = await executableRule(parsed, when, value)
            return {
              level,
              valid,
              name,
              message
            }
          })
        const results = (await Promise.all(pendingResults)).filter((result) => result !== null)
        const errors = results.filter((result) => result.level === 2 && !result.valid)
        const warnings = results.filter((result) => result.level === 1 && !result.valid)
        const valid = errors.length === 0
        return {
          valid,
          errors,
          warnings,
          input: (0, commit_message_1.buildCommitMesage)(parsed)
        }
      }
      exports["default"] = lint
      //# sourceMappingURL=lint.js.map

      /***/
    },

    /***/ 36791: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const execute_rule_1 = __importDefault(__nccwpck_require__(20795))
      const resolve_extends_1 = __importDefault(__nccwpck_require__(9243))
      const config_validator_1 = __nccwpck_require__(13271)
      const isPlainObject_1 = __importDefault(__nccwpck_require__(46169))
      const merge_1 = __importDefault(__nccwpck_require__(80481))
      const uniq_1 = __importDefault(__nccwpck_require__(89482))
      const path_1 = __importDefault(__nccwpck_require__(71017))
      const resolve_from_1 = __importDefault(__nccwpck_require__(30295))
      const load_config_1 = __nccwpck_require__(32741)
      const load_parser_opts_1 = __nccwpck_require__(69449)
      const load_plugin_1 = __importDefault(__nccwpck_require__(32710))
      async function load(seed = {}, options = {}) {
        const cwd = typeof options.cwd === "undefined" ? process.cwd() : options.cwd
        const loaded = await (0, load_config_1.loadConfig)(cwd, options.file)
        const base = loaded && loaded.filepath ? path_1.default.dirname(loaded.filepath) : cwd
        let config = {}
        if (loaded) {
          ;(0, config_validator_1.validateConfig)(loaded.filepath || "", loaded.config)
          config = loaded.config
        }
        // Merge passed config with file based options
        config = (0, merge_1.default)(
          {
            extends: [],
            plugins: [],
            rules: {}
          },
          config,
          seed
        )
        // Resolve parserPreset key
        if (typeof config.parserPreset === "string") {
          const resolvedParserPreset = (0, resolve_from_1.default)(base, config.parserPreset)
          config.parserPreset = {
            name: config.parserPreset,
            path: resolvedParserPreset,
            parserOpts: require(resolvedParserPreset)
          }
        }
        // Resolve extends key
        const extended = (0, resolve_extends_1.default)(config, {
          prefix: "commitlint-config",
          cwd: base,
          parserPreset: config.parserPreset
        })
        if (!extended.formatter || typeof extended.formatter !== "string") {
          extended.formatter = "@commitlint/format"
        }
        let plugins = {}
        if (Array.isArray(extended.plugins)) {
          ;(0, uniq_1.default)(extended.plugins || []).forEach((plugin) => {
            if (typeof plugin === "string") {
              plugins = (0, load_plugin_1.default)(plugins, plugin, process.env.DEBUG === "true")
            } else {
              plugins.local = plugin
            }
          })
        }
        const rules = (
          await Promise.all(
            Object.entries(extended.rules || {}).map((entry) => (0, execute_rule_1.default)(entry))
          )
        ).reduce((registry, item) => {
          // type of `item` can be null, but Object.entries always returns key pair
          const [key, value] = item
          registry[key] = value
          return registry
        }, {})
        const helpUrl =
          typeof extended.helpUrl === "string"
            ? extended.helpUrl
            : typeof config.helpUrl === "string"
            ? config.helpUrl
            : "https://github.com/conventional-changelog/commitlint/#what-is-commitlint"
        const prompt =
          extended.prompt && (0, isPlainObject_1.default)(extended.prompt) ? extended.prompt : {}
        return {
          extends: Array.isArray(extended.extends)
            ? extended.extends
            : typeof extended.extends === "string"
            ? [extended.extends]
            : [],
          // Resolve config-relative formatter module
          formatter: resolve_from_1.default.silent(base, extended.formatter) || extended.formatter,
          // Resolve parser-opts from preset
          parserPreset: await (0, load_parser_opts_1.loadParserOpts)(extended.parserPreset),
          ignores: extended.ignores,
          defaultIgnores: extended.defaultIgnores,
          plugins: plugins,
          rules: rules,
          helpUrl: helpUrl,
          prompt
        }
      }
      exports["default"] = load
      //# sourceMappingURL=load.js.map

      /***/
    },

    /***/ 32741: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.loadConfig = void 0
      const cosmiconfig_1 = __nccwpck_require__(4066)
      const cosmiconfig_typescript_loader_1 = __importDefault(__nccwpck_require__(75999))
      const path_1 = __importDefault(__nccwpck_require__(71017))
      async function loadConfig(cwd, configPath) {
        const moduleName = "commitlint"
        const explorer = (0, cosmiconfig_1.cosmiconfig)(moduleName, {
          searchPlaces: [
            // cosmiconfig overrides default searchPlaces if any new search place is added (For e.g. `*.ts` files),
            // we need to manually merge default searchPlaces from https://github.com/davidtheclark/cosmiconfig#searchplaces
            "package.json",
            `.${moduleName}rc`,
            `.${moduleName}rc.json`,
            `.${moduleName}rc.yaml`,
            `.${moduleName}rc.yml`,
            `.${moduleName}rc.js`,
            `.${moduleName}rc.cjs`,
            `${moduleName}.config.js`,
            `${moduleName}.config.cjs`,
            // files supported by TypescriptLoader
            `.${moduleName}rc.ts`,
            `${moduleName}.config.ts`
          ],
          loaders: {
            ".ts": (0, cosmiconfig_typescript_loader_1.default)()
          }
        })
        const explicitPath = configPath ? path_1.default.resolve(cwd, configPath) : undefined
        const explore = explicitPath ? explorer.load : explorer.search
        const searchPath = explicitPath ? explicitPath : cwd
        const local = await explore(searchPath)
        if (local) {
          return local
        }
        return null
      }
      exports.loadConfig = loadConfig
      //# sourceMappingURL=load-config.js.map

      /***/
    },

    /***/ 69449: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.loadParserOpts = void 0
      function isObjectLike(obj) {
        return Boolean(obj) && typeof obj === "object" // typeof null === 'object'
      }
      function isParserOptsFunction(obj) {
        return typeof obj.parserOpts === "function"
      }
      async function loadParserOpts(pendingParser) {
        if (typeof pendingParser === "function") {
          return loadParserOpts(pendingParser())
        }
        if (!pendingParser || typeof pendingParser !== "object") {
          return undefined
        }
        // Await for the module, loaded with require
        const parser = await pendingParser
        // exit early, no opts to resolve
        if (!parser.parserOpts) {
          return parser
        }
        // Pull nested parserOpts, might happen if overwritten with a module in main config
        if (typeof parser.parserOpts === "object") {
          // Await parser opts if applicable
          parser.parserOpts = await parser.parserOpts
          if (isObjectLike(parser.parserOpts) && isObjectLike(parser.parserOpts.parserOpts)) {
            parser.parserOpts = parser.parserOpts.parserOpts
          }
          return parser
        }
        // Create parser opts from factory
        if (
          isParserOptsFunction(parser) &&
          typeof parser.name === "string" &&
          parser.name.startsWith("conventional-changelog-")
        ) {
          return new Promise((resolve) => {
            const result = parser.parserOpts((_, opts) => {
              resolve(
                Object.assign(Object.assign({}, parser), {
                  parserOpts: opts === null || opts === void 0 ? void 0 : opts.parserOpts
                })
              )
            })
            // If result has data or a promise, the parser doesn't support factory-init
            // due to https://github.com/nodejs/promises-debugging/issues/16 it just quits, so let's use this fallback
            if (result) {
              Promise.resolve(result).then((opts) => {
                resolve(
                  Object.assign(Object.assign({}, parser), {
                    parserOpts: opts === null || opts === void 0 ? void 0 : opts.parserOpts
                  })
                )
              })
            }
            return
          })
        }
        return parser
      }
      exports.loadParserOpts = loadParserOpts
      //# sourceMappingURL=load-parser-opts.js.map

      /***/
    },

    /***/ 32710: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const path_1 = __importDefault(__nccwpck_require__(71017))
      const chalk_1 = __importDefault(__nccwpck_require__(78818))
      const plugin_naming_1 = __nccwpck_require__(80719)
      const plugin_errors_1 = __nccwpck_require__(28970)
      function loadPlugin(plugins, pluginName, debug = false) {
        const longName = (0, plugin_naming_1.normalizePackageName)(pluginName)
        const shortName = (0, plugin_naming_1.getShorthandName)(longName)
        let plugin = null
        if (pluginName.match(/\s+/u)) {
          throw new plugin_errors_1.WhitespacePluginError(pluginName, {
            pluginName: longName
          })
        }
        const pluginKey = longName === pluginName ? shortName : pluginName
        if (!plugins[pluginKey]) {
          try {
            plugin = require(longName)
          } catch (pluginLoadErr) {
            try {
              // Check whether the plugin exists
              require.resolve(longName)
            } catch (error) {
              // If the plugin can't be resolved, display the missing plugin error (usually a config or install error)
              console.error(chalk_1.default.red(`Failed to load plugin ${longName}.`))
              const message =
                (error === null || error === void 0 ? void 0 : error.message) ||
                "Unknown error occurred"
              throw new plugin_errors_1.MissingPluginError(pluginName, message, {
                pluginName: longName,
                commitlintPath: path_1.default.resolve(__dirname, "../..")
              })
            }
            // Otherwise, the plugin exists and is throwing on module load for some reason, so print the stack trace.
            throw pluginLoadErr
          }
          // This step is costly, so skip if debug is disabled
          if (debug) {
            const resolvedPath = require.resolve(longName)
            let version = null
            try {
              version = require(`${longName}/package.json`).version
            } catch (e) {
              // Do nothing
            }
            const loadedPluginAndVersion = version
              ? `${longName}@${version}`
              : `${longName}, version unknown`
            console.log(
              chalk_1.default.blue(
                `Loaded plugin ${pluginName} (${loadedPluginAndVersion}) (from ${resolvedPath})`
              )
            )
          }
          plugins[pluginKey] = plugin
        }
        return plugins
      }
      exports["default"] = loadPlugin
      //# sourceMappingURL=load-plugin.js.map

      /***/
    },

    /***/ 28970: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.MissingPluginError = exports.WhitespacePluginError = void 0
      class WhitespacePluginError extends Error {
        constructor(pluginName, data = {}) {
          super(`Whitespace found in plugin name '${pluginName}'`)
          this.__proto__ = Error
          this.messageTemplate = "whitespace-found"
          this.messageData = {}
          this.messageData = data
          Object.setPrototypeOf(this, WhitespacePluginError.prototype)
        }
      }
      exports.WhitespacePluginError = WhitespacePluginError
      class MissingPluginError extends Error {
        constructor(pluginName, errorMessage = "", data = {}) {
          super(`Failed to load plugin ${pluginName}: ${errorMessage}`)
          this.__proto__ = Error
          this.messageTemplate = "plugin-missing"
          this.messageData = data
          Object.setPrototypeOf(this, MissingPluginError.prototype)
        }
      }
      exports.MissingPluginError = MissingPluginError
      //# sourceMappingURL=plugin-errors.js.map

      /***/
    },

    /***/ 80719: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getNamespaceFromTerm =
        exports.getShorthandName =
        exports.normalizePackageName =
          void 0
      const path_1 = __importDefault(__nccwpck_require__(71017))
      // largely adapted from eslint's plugin system
      const NAMESPACE_REGEX = /^@.*\//iu
      // In eslint this is a parameter - we don't need to support the extra options
      const prefix = "commitlint-plugin"
      // Replace Windows with posix style paths
      function convertPathToPosix(filepath) {
        const normalizedFilepath = path_1.default.normalize(filepath)
        const posixFilepath = normalizedFilepath.replace(/\\/gu, "/")
        return posixFilepath
      }
      /**
       * Brings package name to correct format based on prefix
       * @param {string} name The name of the package.
       * @returns {string} Normalized name of the package
       * @private
       */
      function normalizePackageName(name) {
        let normalizedName = name
        /**
         * On Windows, name can come in with Windows slashes instead of Unix slashes.
         * Normalize to Unix first to avoid errors later on.
         * https://github.com/eslint/eslint/issues/5644
         */
        if (normalizedName.indexOf("\\") > -1) {
          normalizedName = convertPathToPosix(normalizedName)
        }
        if (normalizedName.charAt(0) === "@") {
          /**
           * it's a scoped package
           * package name is the prefix, or just a username
           */
          const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${prefix})?)?$`, "u"),
            scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`, "u")
          if (scopedPackageShortcutRegex.test(normalizedName)) {
            normalizedName = normalizedName.replace(scopedPackageShortcutRegex, `$1/${prefix}`)
          } else if (!scopedPackageNameRegex.test(normalizedName.split("/")[1])) {
            /**
             * for scoped packages, insert the prefix after the first / unless
             * the path is already @scope/eslint or @scope/eslint-xxx-yyy
             */
            normalizedName = normalizedName.replace(/^@([^/]+)\/(.*)$/u, `@$1/${prefix}-$2`)
          }
        } else if (normalizedName.indexOf(`${prefix}-`) !== 0) {
          normalizedName = `${prefix}-${normalizedName}`
        }
        return normalizedName
      }
      exports.normalizePackageName = normalizePackageName
      /**
       * Removes the prefix from a fullname.
       * @param {string} fullname The term which may have the prefix.
       * @returns {string} The term without prefix.
       */
      function getShorthandName(fullname) {
        if (fullname[0] === "@") {
          let matchResult = new RegExp(`^(@[^/]+)/${prefix}$`, "u").exec(fullname)
          if (matchResult) {
            return matchResult[1]
          }
          matchResult = new RegExp(`^(@[^/]+)/${prefix}-(.+)$`, "u").exec(fullname)
          if (matchResult) {
            return `${matchResult[1]}/${matchResult[2]}`
          }
        } else if (fullname.startsWith(`${prefix}-`)) {
          return fullname.slice(prefix.length + 1)
        }
        return fullname
      }
      exports.getShorthandName = getShorthandName
      /**
       * Gets the scope (namespace) of a term.
       * @param {string} term The term which may have the namespace.
       * @returns {string} The namepace of the term if it has one.
       */
      function getNamespaceFromTerm(term) {
        const match = term.match(NAMESPACE_REGEX)
        return match ? match[0] : ""
      }
      exports.getNamespaceFromTerm = getNamespaceFromTerm
      //# sourceMappingURL=plugin-naming.js.map

      /***/
    },

    /***/ 30295: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const Module = __nccwpck_require__(98188)
      const fs = __nccwpck_require__(57147)

      const resolveFrom = (fromDirectory, moduleId, silent) => {
        if (typeof fromDirectory !== "string") {
          throw new TypeError(
            `Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDirectory}\``
          )
        }

        if (typeof moduleId !== "string") {
          throw new TypeError(
            `Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``
          )
        }

        try {
          fromDirectory = fs.realpathSync(fromDirectory)
        } catch (error) {
          if (error.code === "ENOENT") {
            fromDirectory = path.resolve(fromDirectory)
          } else if (silent) {
            return
          } else {
            throw error
          }
        }

        const fromFile = path.join(fromDirectory, "noop.js")

        const resolveFileName = () =>
          Module._resolveFilename(moduleId, {
            id: fromFile,
            filename: fromFile,
            paths: Module._nodeModulePaths(fromDirectory)
          })

        if (silent) {
          try {
            return resolveFileName()
          } catch (error) {
            return
          }
        }

        return resolveFileName()
      }

      module.exports = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId)
      module.exports.silent = (fromDirectory, moduleId) =>
        resolveFrom(fromDirectory, moduleId, true)

      /***/
    },

    /***/ 33384: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports["default"] = message
      function message(input = []) {
        return input.filter(Boolean).join(" ")
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 75635: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      const { sync } = __nccwpck_require__(41655)
      const defaultChangelogOpts = __nccwpck_require__(18143)
      async function parse(message, parser = sync, parserOpts) {
        const defaultOpts = (await defaultChangelogOpts).parserOpts
        const opts = Object.assign(Object.assign({}, defaultOpts), parserOpts || {})
        const parsed = parser(message, opts)
        parsed.raw = message
        return parsed
      }
      exports["default"] = parse
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 9243: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __rest =
        (this && this.__rest) ||
        function (s, e) {
          var t = {}
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p]
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]]
            }
          return t
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const path_1 = __importDefault(__nccwpck_require__(71017))
      __nccwpck_require__(51429)
      const resolve_from_1 = __importDefault(__nccwpck_require__(60439))
      const mergeWith_1 = __importDefault(__nccwpck_require__(98911))
      const config_validator_1 = __nccwpck_require__(13271)
      const importFresh = __nccwpck_require__(52714)
      function resolveExtends(config = {}, context = {}) {
        const { extends: e } = config
        const extended = loadExtends(config, context)
        extended.push(config)
        return extended.reduce(
          (r, _a) => {
            var { extends: _ } = _a,
              c = __rest(_a, ["extends"])
            return (0, mergeWith_1.default)(r, c, (objValue, srcValue, key) => {
              if (key === "plugins") {
                if (Array.isArray(objValue)) {
                  return objValue.concat(srcValue)
                }
              } else if (Array.isArray(objValue)) {
                return srcValue
              }
            })
          },
          e ? { extends: e } : {}
        )
      }
      exports["default"] = resolveExtends
      function loadExtends(config = {}, context = {}) {
        const { extends: e } = config
        const ext = e ? (Array.isArray(e) ? e : [e]) : []
        return ext.reduce((configs, raw) => {
          const load = context.require || require
          const resolved = resolveConfig(raw, context)
          const c = load(resolved)
          const cwd = path_1.default.dirname(resolved)
          const ctx = Object.assign(Object.assign({}, context), { cwd })
          // Resolve parser preset if none was present before
          if (
            !context.parserPreset &&
            typeof c === "object" &&
            typeof c.parserPreset === "string"
          ) {
            const resolvedParserPreset = (0, resolve_from_1.default)(cwd, c.parserPreset)
            const parserPreset = {
              name: c.parserPreset,
              path: `./${path_1.default.relative(process.cwd(), resolvedParserPreset)}`
                .split(path_1.default.sep)
                .join("/"),
              parserOpts: require(resolvedParserPreset)
            }
            ctx.parserPreset = parserPreset
            config.parserPreset = parserPreset
          }
          ;(0, config_validator_1.validateConfig)(resolved, config)
          return [...configs, ...loadExtends(c, ctx), c]
        }, [])
      }
      function getId(raw = "", prefix = "") {
        const first = raw.charAt(0)
        const scoped = first === "@"
        const relative = first === "."
        const absolute = path_1.default.isAbsolute(raw)
        if (scoped) {
          return raw.includes("/") ? raw : [raw, prefix].filter(String).join("/")
        }
        return relative || absolute ? raw : [prefix, raw].filter(String).join("-")
      }
      function resolveConfig(raw, context = {}) {
        const resolve = context.resolve || resolveId
        const id = getId(raw, context.prefix)
        try {
          return resolve(id, context)
        } catch (err) {
          const legacy = getId(raw, "conventional-changelog-lint-config")
          const resolved = resolve(legacy, context)
          console.warn(
            `Resolving ${raw} to legacy config ${legacy}. To silence this warning raise an issue at 'npm repo ${legacy}' to rename to ${id}.`
          )
          return resolved
        }
      }
      function resolveId(id, context = {}) {
        const cwd = context.cwd || process.cwd()
        const localPath = resolveFromSilent(cwd, id)
        if (typeof localPath === "string") {
          return localPath
        }
        const resolveGlobal = context.resolveGlobal || resolveGlobalSilent
        const globalPath = resolveGlobal(id)
        if (typeof globalPath === "string") {
          return globalPath
        }
        const err = new Error(`Cannot find module "${id}" from "${cwd}"`)
        err.code = "MODULE_NOT_FOUND"
        throw err
      }
      function resolveFromSilent(cwd, id) {
        try {
          return (0, resolve_from_1.default)(cwd, id)
        } catch (err) {}
      }
      function resolveGlobalSilent(id) {
        try {
          const resolveGlobal = importFresh("resolve-global")
          return resolveGlobal(id)
        } catch (err) {}
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 60439: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const Module = __nccwpck_require__(98188)
      const fs = __nccwpck_require__(57147)

      const resolveFrom = (fromDirectory, moduleId, silent) => {
        if (typeof fromDirectory !== "string") {
          throw new TypeError(
            `Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDirectory}\``
          )
        }

        if (typeof moduleId !== "string") {
          throw new TypeError(
            `Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``
          )
        }

        try {
          fromDirectory = fs.realpathSync(fromDirectory)
        } catch (error) {
          if (error.code === "ENOENT") {
            fromDirectory = path.resolve(fromDirectory)
          } else if (silent) {
            return
          } else {
            throw error
          }
        }

        const fromFile = path.join(fromDirectory, "noop.js")

        const resolveFileName = () =>
          Module._resolveFilename(moduleId, {
            id: fromFile,
            filename: fromFile,
            paths: Module._nodeModulePaths(fromDirectory)
          })

        if (silent) {
          try {
            return resolveFileName()
          } catch (error) {
            return
          }
        }

        return resolveFileName()
      }

      module.exports = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId)
      module.exports.silent = (fromDirectory, moduleId) =>
        resolveFrom(fromDirectory, moduleId, true)

      /***/
    },

    /***/ 98175: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.bodyCase = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const negated = (when) => when === "never"
      const bodyCase = (parsed, when = "always", value = []) => {
        const { body } = parsed
        if (!body) {
          return [true]
        }
        const checks = (Array.isArray(value) ? value : [value]).map((check) => {
          if (typeof check === "string") {
            return {
              when: "always",
              case: check
            }
          }
          return check
        })
        const result = checks.some((check) => {
          const r = (0, ensure_1.case)(body, check.case)
          return negated(check.when) ? !r : r
        })
        const list = checks.map((c) => c.case).join(", ")
        return [
          negated(when) ? !result : result,
          (0, message_1.default)([`body must`, negated(when) ? `not` : null, `be ${list}`])
        ]
      }
      exports.bodyCase = bodyCase
      //# sourceMappingURL=body-case.js.map

      /***/
    },

    /***/ 66098: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.bodyEmpty = void 0
      const ensure = __importStar(__nccwpck_require__(35573))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const bodyEmpty = (parsed, when = "always") => {
        const negated = when === "never"
        const notEmpty = ensure.notEmpty(parsed.body || "")
        return [
          negated ? notEmpty : !notEmpty,
          (0, message_1.default)(["body", negated ? "may not" : "must", "be empty"])
        ]
      }
      exports.bodyEmpty = bodyEmpty
      //# sourceMappingURL=body-empty.js.map

      /***/
    },

    /***/ 32465: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.bodyFullStop = void 0
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const bodyFullStop = (parsed, when = "always", value = ".") => {
        const input = parsed.body
        if (!input) {
          return [true]
        }
        const negated = when === "never"
        const hasStop = input[input.length - 1] === value
        return [
          negated ? !hasStop : hasStop,
          (0, message_1.default)(["body", negated ? "may not" : "must", "end with full stop"])
        ]
      }
      exports.bodyFullStop = bodyFullStop
      //# sourceMappingURL=body-full-stop.js.map

      /***/
    },

    /***/ 19368: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.bodyLeadingBlank = void 0
      const to_lines_1 = __importDefault(__nccwpck_require__(54727))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const bodyLeadingBlank = (parsed, when) => {
        // Flunk if no body is found
        if (!parsed.body) {
          return [true]
        }
        const negated = when === "never"
        const [leading] = (0, to_lines_1.default)(parsed.raw).slice(1)
        // Check if the first line of body is empty
        const succeeds = leading === ""
        return [
          negated ? !succeeds : succeeds,
          (0, message_1.default)(["body", negated ? "may not" : "must", "have leading blank line"])
        ]
      }
      exports.bodyLeadingBlank = bodyLeadingBlank
      //# sourceMappingURL=body-leading-blank.js.map

      /***/
    },

    /***/ 41564: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.bodyMaxLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const bodyMaxLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.body
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.maxLength)(input, value),
          `body must not be longer than ${value} characters`
        ]
      }
      exports.bodyMaxLength = bodyMaxLength
      //# sourceMappingURL=body-max-length.js.map

      /***/
    },

    /***/ 79893: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.bodyMaxLineLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const bodyMaxLineLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.body
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.maxLineLength)(input, value),
          `body's lines must not be longer than ${value} characters`
        ]
      }
      exports.bodyMaxLineLength = bodyMaxLineLength
      //# sourceMappingURL=body-max-line-length.js.map

      /***/
    },

    /***/ 59222: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.bodyMinLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const bodyMinLength = (parsed, _when = undefined, value = 0) => {
        if (!parsed.body) {
          return [true]
        }
        return [
          (0, ensure_1.minLength)(parsed.body, value),
          `body must not be shorter than ${value} characters`
        ]
      }
      exports.bodyMinLength = bodyMinLength
      //# sourceMappingURL=body-min-length.js.map

      /***/
    },

    /***/ 28: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.footerEmpty = void 0
      const ensure = __importStar(__nccwpck_require__(35573))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const footerEmpty = (parsed, when = "always") => {
        const negated = when === "never"
        const notEmpty = ensure.notEmpty(parsed.footer || "")
        return [
          negated ? notEmpty : !notEmpty,
          (0, message_1.default)(["footer", negated ? "may not" : "must", "be empty"])
        ]
      }
      exports.footerEmpty = footerEmpty
      //# sourceMappingURL=footer-empty.js.map

      /***/
    },

    /***/ 67578: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.footerLeadingBlank = void 0
      const to_lines_1 = __importDefault(__nccwpck_require__(54727))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const footerLeadingBlank = (parsed, when = "always") => {
        // Flunk if no footer is found
        if (!parsed.footer) {
          return [true]
        }
        const negated = when === "never"
        const rawLines = (0, to_lines_1.default)(parsed.raw)
        const bodyLines = parsed.body ? (0, to_lines_1.default)(parsed.body) : []
        const bodyOffset = bodyLines.length > 0 ? rawLines.indexOf(bodyLines[0]) : 1
        const [leading] = rawLines.slice(bodyLines.length + bodyOffset)
        // Check if the first line of footer is empty
        const succeeds = leading === ""
        return [
          negated ? !succeeds : succeeds,
          (0, message_1.default)([
            "footer",
            negated ? "may not" : "must",
            "have leading blank line"
          ])
        ]
      }
      exports.footerLeadingBlank = footerLeadingBlank
      //# sourceMappingURL=footer-leading-blank.js.map

      /***/
    },

    /***/ 11150: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.footerMaxLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const footerMaxLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.footer
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.maxLength)(input, value),
          `footer must not be longer than ${value} characters`
        ]
      }
      exports.footerMaxLength = footerMaxLength
      //# sourceMappingURL=footer-max-length.js.map

      /***/
    },

    /***/ 37089: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.footerMaxLineLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const footerMaxLineLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.footer
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.maxLineLength)(input, value),
          `footer's lines must not be longer than ${value} characters`
        ]
      }
      exports.footerMaxLineLength = footerMaxLineLength
      //# sourceMappingURL=footer-max-line-length.js.map

      /***/
    },

    /***/ 73900: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.footerMinLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const footerMinLength = (parsed, _when = undefined, value = 0) => {
        if (!parsed.footer) {
          return [true]
        }
        return [
          (0, ensure_1.minLength)(parsed.footer, value),
          `footer must not be shorter than ${value} characters`
        ]
      }
      exports.footerMinLength = footerMinLength
      //# sourceMappingURL=footer-min-length.js.map

      /***/
    },

    /***/ 28629: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.headerCase = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const negated = (when) => when === "never"
      const headerCase = (parsed, when = "always", value = []) => {
        const { header } = parsed
        if (typeof header !== "string" || !header.match(/^[a-z]/i)) {
          return [true]
        }
        const checks = (Array.isArray(value) ? value : [value]).map((check) => {
          if (typeof check === "string") {
            return {
              when: "always",
              case: check
            }
          }
          return check
        })
        const result = checks.some((check) => {
          const r = (0, ensure_1.case)(header, check.case)
          return negated(check.when) ? !r : r
        })
        const list = checks.map((c) => c.case).join(", ")
        return [
          negated(when) ? !result : result,
          (0, message_1.default)([`header must`, negated(when) ? `not` : null, `be ${list}`])
        ]
      }
      exports.headerCase = headerCase
      //# sourceMappingURL=header-case.js.map

      /***/
    },

    /***/ 71423: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.headerFullStop = void 0
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const headerFullStop = (parsed, when = "always", value = ".") => {
        const { header } = parsed
        const negated = when === "never"
        const hasStop = header[header.length - 1] === value
        return [
          negated ? !hasStop : hasStop,
          (0, message_1.default)(["header", negated ? "may not" : "must", "end with full stop"])
        ]
      }
      exports.headerFullStop = headerFullStop
      //# sourceMappingURL=header-full-stop.js.map

      /***/
    },

    /***/ 76540: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.headerMaxLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const headerMaxLength = (parsed, _when = undefined, value = 0) => {
        return [
          (0, ensure_1.maxLength)(parsed.header, value),
          `header must not be longer than ${value} characters, current length is ${parsed.header.length}`
        ]
      }
      exports.headerMaxLength = headerMaxLength
      //# sourceMappingURL=header-max-length.js.map

      /***/
    },

    /***/ 9764: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.headerMinLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const headerMinLength = (parsed, _when = undefined, value = 0) => {
        return [
          (0, ensure_1.minLength)(parsed.header, value),
          `header must not be shorter than ${value} characters, current length is ${parsed.header.length}`
        ]
      }
      exports.headerMinLength = headerMinLength
      //# sourceMappingURL=header-min-length.js.map

      /***/
    },

    /***/ 23383: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      const body_case_1 = __nccwpck_require__(98175)
      const body_empty_1 = __nccwpck_require__(66098)
      const body_full_stop_1 = __nccwpck_require__(32465)
      const body_leading_blank_1 = __nccwpck_require__(19368)
      const body_max_length_1 = __nccwpck_require__(41564)
      const body_max_line_length_1 = __nccwpck_require__(79893)
      const body_min_length_1 = __nccwpck_require__(59222)
      const footer_empty_1 = __nccwpck_require__(28)
      const footer_leading_blank_1 = __nccwpck_require__(67578)
      const footer_max_length_1 = __nccwpck_require__(11150)
      const footer_max_line_length_1 = __nccwpck_require__(37089)
      const footer_min_length_1 = __nccwpck_require__(73900)
      const header_case_1 = __nccwpck_require__(28629)
      const header_full_stop_1 = __nccwpck_require__(71423)
      const header_max_length_1 = __nccwpck_require__(76540)
      const header_min_length_1 = __nccwpck_require__(9764)
      const references_empty_1 = __nccwpck_require__(46839)
      const scope_case_1 = __nccwpck_require__(99605)
      const scope_empty_1 = __nccwpck_require__(85701)
      const scope_enum_1 = __nccwpck_require__(84072)
      const scope_max_length_1 = __nccwpck_require__(51203)
      const scope_min_length_1 = __nccwpck_require__(47227)
      const signed_off_by_1 = __nccwpck_require__(19933)
      const subject_case_1 = __nccwpck_require__(45645)
      const subject_empty_1 = __nccwpck_require__(74882)
      const subject_full_stop_1 = __nccwpck_require__(18109)
      const subject_max_length_1 = __nccwpck_require__(1227)
      const subject_min_length_1 = __nccwpck_require__(91991)
      const subject_exclamation_mark_1 = __nccwpck_require__(79870)
      const trailer_exists_1 = __nccwpck_require__(80391)
      const type_case_1 = __nccwpck_require__(72006)
      const type_empty_1 = __nccwpck_require__(75480)
      const type_enum_1 = __nccwpck_require__(8656)
      const type_max_length_1 = __nccwpck_require__(3161)
      const type_min_length_1 = __nccwpck_require__(70074)
      exports["default"] = {
        "body-case": body_case_1.bodyCase,
        "body-empty": body_empty_1.bodyEmpty,
        "body-full-stop": body_full_stop_1.bodyFullStop,
        "body-leading-blank": body_leading_blank_1.bodyLeadingBlank,
        "body-max-length": body_max_length_1.bodyMaxLength,
        "body-max-line-length": body_max_line_length_1.bodyMaxLineLength,
        "body-min-length": body_min_length_1.bodyMinLength,
        "footer-empty": footer_empty_1.footerEmpty,
        "footer-leading-blank": footer_leading_blank_1.footerLeadingBlank,
        "footer-max-length": footer_max_length_1.footerMaxLength,
        "footer-max-line-length": footer_max_line_length_1.footerMaxLineLength,
        "footer-min-length": footer_min_length_1.footerMinLength,
        "header-case": header_case_1.headerCase,
        "header-full-stop": header_full_stop_1.headerFullStop,
        "header-max-length": header_max_length_1.headerMaxLength,
        "header-min-length": header_min_length_1.headerMinLength,
        "references-empty": references_empty_1.referencesEmpty,
        "scope-case": scope_case_1.scopeCase,
        "scope-empty": scope_empty_1.scopeEmpty,
        "scope-enum": scope_enum_1.scopeEnum,
        "scope-max-length": scope_max_length_1.scopeMaxLength,
        "scope-min-length": scope_min_length_1.scopeMinLength,
        "signed-off-by": signed_off_by_1.signedOffBy,
        "subject-case": subject_case_1.subjectCase,
        "subject-empty": subject_empty_1.subjectEmpty,
        "subject-full-stop": subject_full_stop_1.subjectFullStop,
        "subject-max-length": subject_max_length_1.subjectMaxLength,
        "subject-min-length": subject_min_length_1.subjectMinLength,
        "subject-exclamation-mark": subject_exclamation_mark_1.subjectExclamationMark,
        "trailer-exists": trailer_exists_1.trailerExists,
        "type-case": type_case_1.typeCase,
        "type-empty": type_empty_1.typeEmpty,
        "type-enum": type_enum_1.typeEnum,
        "type-max-length": type_max_length_1.typeMaxLength,
        "type-min-length": type_min_length_1.typeMinLength
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 46839: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.referencesEmpty = void 0
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const referencesEmpty = (parsed, when = "never") => {
        const negated = when === "always"
        const notEmpty = parsed.references.length > 0
        return [
          negated ? !notEmpty : notEmpty,
          (0, message_1.default)(["references", negated ? "must" : "may not", "be empty"])
        ]
      }
      exports.referencesEmpty = referencesEmpty
      //# sourceMappingURL=references-empty.js.map

      /***/
    },

    /***/ 99605: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.scopeCase = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const negated = (when) => when === "never"
      const scopeCase = (parsed, when = "always", value = []) => {
        const { scope } = parsed
        if (!scope) {
          return [true]
        }
        const checks = (Array.isArray(value) ? value : [value]).map((check) => {
          if (typeof check === "string") {
            return {
              when: "always",
              case: check
            }
          }
          return check
        })
        // Scopes may contain slash or comma delimiters to separate them and mark them as individual segments.
        // This means that each of these segments should be tested separately with `ensure`.
        const delimiters = /\/|\\|,/g
        const scopeSegments = scope.split(delimiters)
        const result = checks.some((check) => {
          const r = scopeSegments.every(
            (segment) => delimiters.test(segment) || (0, ensure_1.case)(segment, check.case)
          )
          return negated(check.when) ? !r : r
        })
        const list = checks.map((c) => c.case).join(", ")
        return [
          negated(when) ? !result : result,
          (0, message_1.default)([`scope must`, negated(when) ? `not` : null, `be ${list}`])
        ]
      }
      exports.scopeCase = scopeCase
      //# sourceMappingURL=scope-case.js.map

      /***/
    },

    /***/ 85701: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.scopeEmpty = void 0
      const ensure = __importStar(__nccwpck_require__(35573))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const scopeEmpty = (parsed, when = "never") => {
        const negated = when === "always"
        const notEmpty = ensure.notEmpty(parsed.scope || "")
        return [
          negated ? !notEmpty : notEmpty,
          (0, message_1.default)(["scope", negated ? "must" : "may not", "be empty"])
        ]
      }
      exports.scopeEmpty = scopeEmpty
      //# sourceMappingURL=scope-empty.js.map

      /***/
    },

    /***/ 84072: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.scopeEnum = void 0
      const ensure = __importStar(__nccwpck_require__(35573))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const scopeEnum = (parsed, when = "always", value = []) => {
        if (!parsed.scope) {
          return [true, ""]
        }
        // Scopes may contain slash or comma delimiters to separate them and mark them as individual segments.
        // This means that each of these segments should be tested separately with `ensure`.
        const delimiters = /\/|\\|,/g
        const scopeSegments = parsed.scope.split(delimiters)
        const negated = when === "never"
        const result =
          value.length === 0 || scopeSegments.every((scope) => ensure.enum(scope, value))
        return [
          negated ? !result : result,
          (0, message_1.default)([
            `scope must`,
            negated ? `not` : null,
            `be one of [${value.join(", ")}]`
          ])
        ]
      }
      exports.scopeEnum = scopeEnum
      //# sourceMappingURL=scope-enum.js.map

      /***/
    },

    /***/ 51203: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.scopeMaxLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const scopeMaxLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.scope
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.maxLength)(input, value),
          `scope must not be longer than ${value} characters`
        ]
      }
      exports.scopeMaxLength = scopeMaxLength
      //# sourceMappingURL=scope-max-length.js.map

      /***/
    },

    /***/ 47227: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.scopeMinLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const scopeMinLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.scope
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.minLength)(input, value),
          `scope must not be shorter than ${value} characters`
        ]
      }
      exports.scopeMinLength = scopeMinLength
      //# sourceMappingURL=scope-min-length.js.map

      /***/
    },

    /***/ 19933: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.signedOffBy = void 0
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const to_lines_1 = __importDefault(__nccwpck_require__(54727))
      const signedOffBy = (parsed, when = "always", value = "") => {
        const lines = (0, to_lines_1.default)(parsed.raw).filter(
          (ln) =>
            // skip comments
            !ln.startsWith("#") &&
            // ignore empty lines
            Boolean(ln)
        )
        const last = lines[lines.length - 1]
        const negated = when === "never"
        const hasSignedOffBy = last.startsWith(value)
        return [
          negated ? !hasSignedOffBy : hasSignedOffBy,
          (0, message_1.default)(["message", negated ? "must not" : "must", "be signed off"])
        ]
      }
      exports.signedOffBy = signedOffBy
      //# sourceMappingURL=signed-off-by.js.map

      /***/
    },

    /***/ 45645: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.subjectCase = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const negated = (when) => when === "never"
      const subjectCase = (parsed, when = "always", value = []) => {
        const { subject } = parsed
        if (typeof subject !== "string" || !subject.match(/^[a-z]/i)) {
          return [true]
        }
        const checks = (Array.isArray(value) ? value : [value]).map((check) => {
          if (typeof check === "string") {
            return {
              when: "always",
              case: check
            }
          }
          return check
        })
        const result = checks.some((check) => {
          const r = (0, ensure_1.case)(subject, check.case)
          return negated(check.when) ? !r : r
        })
        const list = checks.map((c) => c.case).join(", ")
        return [
          negated(when) ? !result : result,
          (0, message_1.default)([`subject must`, negated(when) ? `not` : null, `be ${list}`])
        ]
      }
      exports.subjectCase = subjectCase
      //# sourceMappingURL=subject-case.js.map

      /***/
    },

    /***/ 74882: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.subjectEmpty = void 0
      const ensure = __importStar(__nccwpck_require__(35573))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const subjectEmpty = (parsed, when = "always") => {
        const negated = when === "never"
        const notEmpty = ensure.notEmpty(parsed.subject || "")
        return [
          negated ? notEmpty : !notEmpty,
          (0, message_1.default)(["subject", negated ? "may not" : "must", "be empty"])
        ]
      }
      exports.subjectEmpty = subjectEmpty
      //# sourceMappingURL=subject-empty.js.map

      /***/
    },

    /***/ 79870: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.subjectExclamationMark = void 0
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const subjectExclamationMark = (parsed, when = "always") => {
        const input = parsed.header
        if (!input) {
          return [true, ""]
        }
        const negated = when === "never"
        const hasExclamationMark = /!:/.test(input)
        return [
          negated ? !hasExclamationMark : hasExclamationMark,
          (0, message_1.default)([
            "subject",
            negated ? "must not" : "must",
            "have an exclamation mark in the subject to identify a breaking change"
          ])
        ]
      }
      exports.subjectExclamationMark = subjectExclamationMark
      //# sourceMappingURL=subject-exclamation-mark.js.map

      /***/
    },

    /***/ 18109: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.subjectFullStop = void 0
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const subjectFullStop = (parsed, when = "always", value = ".") => {
        const input = parsed.subject
        if (!input) {
          return [true]
        }
        const negated = when === "never"
        const hasStop = input[input.length - 1] === value
        return [
          negated ? !hasStop : hasStop,
          (0, message_1.default)(["subject", negated ? "may not" : "must", "end with full stop"])
        ]
      }
      exports.subjectFullStop = subjectFullStop
      //# sourceMappingURL=subject-full-stop.js.map

      /***/
    },

    /***/ 1227: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.subjectMaxLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const subjectMaxLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.subject
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.maxLength)(input, value),
          `subject must not be longer than ${value} characters`
        ]
      }
      exports.subjectMaxLength = subjectMaxLength
      //# sourceMappingURL=subject-max-length.js.map

      /***/
    },

    /***/ 91991: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.subjectMinLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const subjectMinLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.subject
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.minLength)(input, value),
          `subject must not be shorter than ${value} characters`
        ]
      }
      exports.subjectMinLength = subjectMinLength
      //# sourceMappingURL=subject-min-length.js.map

      /***/
    },

    /***/ 80391: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.trailerExists = void 0
      const execa_1 = __importDefault(__nccwpck_require__(55447))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const to_lines_1 = __importDefault(__nccwpck_require__(54727))
      const trailerExists = (parsed, when = "always", value = "") => {
        const trailers = execa_1.default.sync("git", ["interpret-trailers", "--parse"], {
          input: parsed.raw
        }).stdout
        const matches = (0, to_lines_1.default)(trailers).filter((ln) =>
          ln.startsWith(value)
        ).length
        const negated = when === "never"
        const hasTrailer = matches > 0
        return [
          negated ? !hasTrailer : hasTrailer,
          (0, message_1.default)([
            "message",
            negated ? "must not" : "must",
            "have `" + value + "` trailer"
          ])
        ]
      }
      exports.trailerExists = trailerExists
      //# sourceMappingURL=trailer-exists.js.map

      /***/
    },

    /***/ 72006: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.typeCase = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const negated = (when) => when === "never"
      const typeCase = (parsed, when = "always", value = []) => {
        const { type } = parsed
        if (!type) {
          return [true]
        }
        const checks = (Array.isArray(value) ? value : [value]).map((check) => {
          if (typeof check === "string") {
            return {
              when: "always",
              case: check
            }
          }
          return check
        })
        const result = checks.some((check) => {
          const r = (0, ensure_1.case)(type, check.case)
          return negated(check.when) ? !r : r
        })
        const list = checks.map((c) => c.case).join(", ")
        return [
          negated(when) ? !result : result,
          (0, message_1.default)([`type must`, negated(when) ? `not` : null, `be ${list}`])
        ]
      }
      exports.typeCase = typeCase
      //# sourceMappingURL=type-case.js.map

      /***/
    },

    /***/ 75480: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.typeEmpty = void 0
      const ensure = __importStar(__nccwpck_require__(35573))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const typeEmpty = (parsed, when = "always") => {
        const negated = when === "never"
        const notEmpty = ensure.notEmpty(parsed.type || "")
        return [
          negated ? notEmpty : !notEmpty,
          (0, message_1.default)(["type", negated ? "may not" : "must", "be empty"])
        ]
      }
      exports.typeEmpty = typeEmpty
      //# sourceMappingURL=type-empty.js.map

      /***/
    },

    /***/ 8656: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.typeEnum = void 0
      const ensure = __importStar(__nccwpck_require__(35573))
      const message_1 = __importDefault(__nccwpck_require__(33384))
      const typeEnum = (parsed, when = "always", value = []) => {
        const { type: input } = parsed
        if (!input) {
          return [true]
        }
        const negated = when === "never"
        const result = ensure.enum(input, value)
        return [
          negated ? !result : result,
          (0, message_1.default)([
            `type must`,
            negated ? `not` : null,
            `be one of [${value.join(", ")}]`
          ])
        ]
      }
      exports.typeEnum = typeEnum
      //# sourceMappingURL=type-enum.js.map

      /***/
    },

    /***/ 3161: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.typeMaxLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const typeMaxLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.type
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.maxLength)(input, value),
          `type must not be longer than ${value} characters`
        ]
      }
      exports.typeMaxLength = typeMaxLength
      //# sourceMappingURL=type-max-length.js.map

      /***/
    },

    /***/ 70074: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.typeMinLength = void 0
      const ensure_1 = __nccwpck_require__(35573)
      const typeMinLength = (parsed, _when = undefined, value = 0) => {
        const input = parsed.type
        if (!input) {
          return [true]
        }
        return [
          (0, ensure_1.minLength)(input, value),
          `type must not be shorter than ${value} characters`
        ]
      }
      exports.typeMinLength = typeMinLength
      //# sourceMappingURL=type-min-length.js.map

      /***/
    },

    /***/ 54727: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      function toLines(input) {
        if (typeof input !== "string") {
          return []
        }
        return input.split(/(?:\r?\n)/)
      }
      exports["default"] = toLines
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 51305: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      //# sourceMappingURL=ensure.js.map

      /***/
    },

    /***/ 42562: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      //# sourceMappingURL=format.js.map

      /***/
    },

    /***/ 63534: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __exportStar =
        (this && this.__exportStar) ||
        function (m, exports) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p))
              __createBinding(exports, m, p)
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      __exportStar(__nccwpck_require__(51305), exports)
      __exportStar(__nccwpck_require__(42562), exports)
      __exportStar(__nccwpck_require__(13429), exports)
      __exportStar(__nccwpck_require__(91204), exports)
      __exportStar(__nccwpck_require__(78486), exports)
      __exportStar(__nccwpck_require__(52850), exports)
      __exportStar(__nccwpck_require__(26310), exports)
      __exportStar(__nccwpck_require__(99931), exports)
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 13429: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      //# sourceMappingURL=is-ignored.js.map

      /***/
    },

    /***/ 91204: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      //# sourceMappingURL=lint.js.map

      /***/
    },

    /***/ 78486: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      //# sourceMappingURL=load.js.map

      /***/
    },

    /***/ 52850: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      //# sourceMappingURL=parse.js.map

      /***/
    },

    /***/ 26310: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      //# sourceMappingURL=prompt.js.map

      /***/
    },

    /***/ 99931: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.RuleConfigQuality = exports.RuleConfigSeverity = void 0
      /**
       * Rules always have a severity.
       * Severity indicates what to do if the rule is found to be broken
       * 0 - Disable this rule
       * 1 - Warn for violations
       * 2 - Error for violations
       */
      var RuleConfigSeverity
      ;(function (RuleConfigSeverity) {
        RuleConfigSeverity[(RuleConfigSeverity["Disabled"] = 0)] = "Disabled"
        RuleConfigSeverity[(RuleConfigSeverity["Warning"] = 1)] = "Warning"
        RuleConfigSeverity[(RuleConfigSeverity["Error"] = 2)] = "Error"
      })((RuleConfigSeverity = exports.RuleConfigSeverity || (exports.RuleConfigSeverity = {})))
      var RuleConfigQuality
      ;(function (RuleConfigQuality) {
        RuleConfigQuality[(RuleConfigQuality["User"] = 0)] = "User"
        RuleConfigQuality[(RuleConfigQuality["Qualified"] = 1)] = "Qualified"
      })((RuleConfigQuality = exports.RuleConfigQuality || (exports.RuleConfigQuality = {})))
      //# sourceMappingURL=rules.js.map

      /***/
    },

    /***/ 36279: /***/ (__unused_webpack_module, exports) => {
      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      /**
       * A data structure which is a combination of an array and a set. Adding a new
       * member is O(1), testing for membership is O(1), and finding the index of an
       * element is O(1). Removing elements from the set is not supported. Only
       * strings are supported for membership.
       */
      class ArraySet {
        constructor() {
          this._array = []
          this._set = new Map()
        }

        /**
         * Static method for creating ArraySet instances from an existing array.
         */
        static fromArray(aArray, aAllowDuplicates) {
          const set = new ArraySet()
          for (let i = 0, len = aArray.length; i < len; i++) {
            set.add(aArray[i], aAllowDuplicates)
          }
          return set
        }

        /**
         * Return how many unique items are in this ArraySet. If duplicates have been
         * added, than those do not count towards the size.
         *
         * @returns Number
         */
        size() {
          return this._set.size
        }

        /**
         * Add the given string to this set.
         *
         * @param String aStr
         */
        add(aStr, aAllowDuplicates) {
          const isDuplicate = this.has(aStr)
          const idx = this._array.length
          if (!isDuplicate || aAllowDuplicates) {
            this._array.push(aStr)
          }
          if (!isDuplicate) {
            this._set.set(aStr, idx)
          }
        }

        /**
         * Is the given string a member of this set?
         *
         * @param String aStr
         */
        has(aStr) {
          return this._set.has(aStr)
        }

        /**
         * What is the index of the given string in the array?
         *
         * @param String aStr
         */
        indexOf(aStr) {
          const idx = this._set.get(aStr)
          if (idx >= 0) {
            return idx
          }
          throw new Error('"' + aStr + '" is not in the set.')
        }

        /**
         * What is the element at the given index?
         *
         * @param Number aIdx
         */
        at(aIdx) {
          if (aIdx >= 0 && aIdx < this._array.length) {
            return this._array[aIdx]
          }
          throw new Error("No element indexed by " + aIdx)
        }

        /**
         * Returns the array representation of this set (which has the proper indices
         * indicated by indexOf). Note that this is a copy of the internal array used
         * for storing the members so that no one can mess with internal state.
         */
        toArray() {
          return this._array.slice()
        }
      }
      exports.I = ArraySet

      /***/
    },

    /***/ 93231: /***/ (__unused_webpack_module, exports) => {
      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      exports.GREATEST_LOWER_BOUND = 1
      exports.LEAST_UPPER_BOUND = 2

      /**
       * Recursive implementation of binary search.
       *
       * @param aLow Indices here and lower do not contain the needle.
       * @param aHigh Indices here and higher do not contain the needle.
       * @param aNeedle The element being searched for.
       * @param aHaystack The non-empty array being searched.
       * @param aCompare Function which takes two elements and returns -1, 0, or 1.
       * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
       *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       */
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        // This function terminates when one of the following is true:
        //
        //   1. We find the exact element we are looking for.
        //
        //   2. We did not find the exact element, but we can return the index of
        //      the next-closest element.
        //
        //   3. We did not find the exact element, and there is no next-closest
        //      element than the one we are searching for, so we return -1.
        const mid = Math.floor((aHigh - aLow) / 2) + aLow
        const cmp = aCompare(aNeedle, aHaystack[mid], true)
        if (cmp === 0) {
          // Found the element we are looking for.
          return mid
        } else if (cmp > 0) {
          // Our needle is greater than aHaystack[mid].
          if (aHigh - mid > 1) {
            // The element is in the upper half.
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias)
          }

          // The exact needle element was not found in this haystack. Determine if
          // we are in termination case (3) or (2) and return the appropriate thing.
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1
          }
          return mid
        }

        // Our needle is less than aHaystack[mid].
        if (mid - aLow > 1) {
          // The element is in the lower half.
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias)
        }

        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid
        }
        return aLow < 0 ? -1 : aLow
      }

      /**
       * This is an implementation of binary search which will always try and return
       * the index of the closest element if there is no exact hit. This is because
       * mappings between original and generated line/col pairs are single points,
       * and there is an implicit region between each of them, so a miss just means
       * that you aren't on the very start of a region.
       *
       * @param aNeedle The element you are looking for.
       * @param aHaystack The array that is being searched.
       * @param aCompare A function which takes the needle and an element in the
       *     array and returns -1, 0, or 1 depending on whether the needle is less
       *     than, equal to, or greater than the element, respectively.
       * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
       *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
       */
      exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1
        }

        let index = recursiveSearch(
          -1,
          aHaystack.length,
          aNeedle,
          aHaystack,
          aCompare,
          aBias || exports.GREATEST_LOWER_BOUND
        )
        if (index < 0) {
          return -1
        }

        // We have found either the exact element, or the next-closest element than
        // the one we are searching for. However, there may be more than one such
        // element. Make sure we always return the smallest of these.
        while (index - 1 >= 0) {
          if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
            break
          }
          --index
        }

        return index
      }

      /***/
    },

    /***/ 42690: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      // Node version of reading a wasm file into an array buffer.
      const fs = __nccwpck_require__(57147)
      const path = __nccwpck_require__(71017)

      module.exports = function readWasm() {
        return new Promise((resolve, reject) => {
          const wasmPath = __nccwpck_require__.ab + "mappings.wasm"
          fs.readFile(__nccwpck_require__.ab + "mappings.wasm", null, (error, data) => {
            if (error) {
              reject(error)
              return
            }

            resolve(data.buffer)
          })
        })
      }
      module.exports.sync = function readWasmSync() {
        const wasmPath = __nccwpck_require__.ab + "mappings.wasm"
        return fs.readFileSync(__nccwpck_require__.ab + "mappings.wasm").buffer
      }

      module.exports.initialize = (_) => {
        console.debug("SourceMapConsumer.initialize is a no-op when running in node.js")
      }

      /***/
    },

    /***/ 26514: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      var __webpack_unused_export__
      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      const util = __nccwpck_require__(1650)
      const binarySearch = __nccwpck_require__(93231)
      const ArraySet = __nccwpck_require__(36279) /* .ArraySet */.I
      const readWasm = __nccwpck_require__(42690)
      const wasm = __nccwpck_require__(84734)

      const INTERNAL = Symbol("smcInternal")

      class SourceMapConsumer {
        constructor(aSourceMap, aSourceMapURL) {
          if (aSourceMap === INTERNAL) return this
          return _factory(aSourceMap, aSourceMapURL)
        }

        static initialize(opts) {
          readWasm.initialize(opts["lib/mappings.wasm"])
        }

        static fromSourceMap(aSourceMap, aSourceMapURL) {
          return _factoryBSM(aSourceMap, aSourceMapURL)
        }

        /**
         * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`
         * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async
         * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait
         * for `f` to complete, call `destroy` on the consumer, and return `f`'s return
         * value.
         *
         * You must not use the consumer after `f` completes!
         *
         * By using `with`, you do not have to remember to manually call `destroy` on
         * the consumer, since it will be called automatically once `f` completes.
         *
         * ```js
         * const xSquared = await SourceMapConsumer.with(
         *   myRawSourceMap,
         *   null,
         *   async function (consumer) {
         *     // Use `consumer` inside here and don't worry about remembering
         *     // to call `destroy`.
         *
         *     const x = await whatever(consumer);
         *     return x * x;
         *   }
         * );
         *
         * // You may not use that `consumer` anymore out here; it has
         * // been destroyed. But you can use `xSquared`.
         * console.log(xSquared);
         * ```
         */
        static async with(rawSourceMap, sourceMapUrl, f) {
          // Note: The `acorn` version that `webpack` currently depends on doesn't
          // support `async` functions, and the nodes that we support don't all have
          // `.finally`. Therefore, this is written a bit more convolutedly than it
          // should really be.

          let consumer = null
          try {
            consumer = new SourceMapConsumer(rawSourceMap, sourceMapUrl)
            return await f(consumer)
          } finally {
            if (consumer) {
              consumer.destroy()
            }
          }
        }

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        _parseMappings(aStr, aSourceRoot) {
          throw new Error("Subclasses must implement _parseMappings")
        }

        /**
         * Iterate over each mapping between an original source/line/column and a
         * generated line/column in this source map.
         *
         * @param Function aCallback
         *        The function that is called with each mapping.
         * @param Object aContext
         *        Optional. If specified, this object will be the value of `this` every
         *        time that `aCallback` is called.
         * @param aOrder
         *        Either `SourceMapConsumer.GENERATED_ORDER` or
         *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
         *        iterate over the mappings sorted by the generated file's line/column
         *        order or the original's source/line/column order, respectively. Defaults to
         *        `SourceMapConsumer.GENERATED_ORDER`.
         */
        eachMapping(aCallback, aContext, aOrder) {
          throw new Error("Subclasses must implement eachMapping")
        }

        /**
         * Returns all generated line and column information for the original source,
         * line, and column provided. If no column is provided, returns all mappings
         * corresponding to a either the line we are searching for or the next
         * closest line that has any mappings. Otherwise, returns all mappings
         * corresponding to the given line and either the column we are searching for
         * or the next closest column that has any offsets.
         *
         * The only argument is an object with the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.  The line number is 1-based.
         *   - column: Optional. the column number in the original source.
         *    The column number is 0-based.
         *
         * and an array of objects is returned, each with the following properties:
         *
         *   - line: The line number in the generated source, or null.  The
         *    line number is 1-based.
         *   - column: The column number in the generated source, or null.
         *    The column number is 0-based.
         */
        allGeneratedPositionsFor(aArgs) {
          throw new Error("Subclasses must implement allGeneratedPositionsFor")
        }

        destroy() {
          throw new Error("Subclasses must implement destroy")
        }
      }

      /**
       * The version of the source mapping spec that we are consuming.
       */
      SourceMapConsumer.prototype._version = 3
      SourceMapConsumer.GENERATED_ORDER = 1
      SourceMapConsumer.ORIGINAL_ORDER = 2

      SourceMapConsumer.GREATEST_LOWER_BOUND = 1
      SourceMapConsumer.LEAST_UPPER_BOUND = 2

      exports.SourceMapConsumer = SourceMapConsumer

      /**
       * A BasicSourceMapConsumer instance represents a parsed source map which we can
       * query for information about the original file positions by giving it a file
       * position in the generated source.
       *
       * The first parameter is the raw source map (either as a JSON string, or
       * already parsed to an object). According to the spec, source maps have the
       * following attributes:
       *
       *   - version: Which version of the source map spec this map is following.
       *   - sources: An array of URLs to the original source files.
       *   - names: An array of identifiers which can be referenced by individual mappings.
       *   - sourceRoot: Optional. The URL root from which all sources are relative.
       *   - sourcesContent: Optional. An array of contents of the original source files.
       *   - mappings: A string of base64 VLQs which contain the actual mappings.
       *   - file: Optional. The generated file this source map is associated with.
       *
       * Here is an example source map, taken from the source map spec[0]:
       *
       *     {
       *       version : 3,
       *       file: "out.js",
       *       sourceRoot : "",
       *       sources: ["foo.js", "bar.js"],
       *       names: ["src", "maps", "are", "fun"],
       *       mappings: "AA,AB;;ABCDE;"
       *     }
       *
       * The second parameter, if given, is a string whose value is the URL
       * at which the source map was found.  This URL is used to compute the
       * sources array.
       *
       * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
       */
      class BasicSourceMapConsumer extends SourceMapConsumer {
        constructor(aSourceMap, aSourceMapURL) {
          super(INTERNAL)
          let sourceMap = aSourceMap
          if (typeof aSourceMap === "string") {
            sourceMap = util.parseSourceMapInput(aSourceMap)
          }

          const version = util.getArg(sourceMap, "version")
          let sources = util.getArg(sourceMap, "sources")
          // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
          // requires the array) to play nice here.
          const names = util.getArg(sourceMap, "names", [])
          let sourceRoot = util.getArg(sourceMap, "sourceRoot", null)
          const sourcesContent = util.getArg(sourceMap, "sourcesContent", null)
          const mappings = util.getArg(sourceMap, "mappings")
          const file = util.getArg(sourceMap, "file", null)

          // Once again, Sass deviates from the spec and supplies the version as a
          // string rather than a number, so we use loose equality checking here.
          if (version != this._version) {
            throw new Error("Unsupported version: " + version)
          }

          if (sourceRoot) {
            sourceRoot = util.normalize(sourceRoot)
          }

          sources = sources
            .map(String)
            // Some source maps produce relative source paths like "./foo.js" instead of
            // "foo.js".  Normalize these first so that future comparisons will succeed.
            // See bugzil.la/1090768.
            .map(util.normalize)
            // Always ensure that absolute sources are internally stored relative to
            // the source root, if the source root is absolute. Not doing this would
            // be particularly problematic when the source root is a prefix of the
            // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
            .map(function (source) {
              return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
                ? util.relative(sourceRoot, source)
                : source
            })

          // Pass `true` below to allow duplicate names and sources. While source maps
          // are intended to be compressed and deduplicated, the TypeScript compiler
          // sometimes generates source maps with duplicates in them. See Github issue
          // #72 and bugzil.la/889492.
          this._names = ArraySet.fromArray(names.map(String), true)
          this._sources = ArraySet.fromArray(sources, true)

          this._absoluteSources = this._sources.toArray().map(function (s) {
            return util.computeSourceURL(sourceRoot, s, aSourceMapURL)
          })

          this.sourceRoot = sourceRoot
          this.sourcesContent = sourcesContent
          this._mappings = mappings
          this._sourceMapURL = aSourceMapURL
          this.file = file

          this._computedColumnSpans = false
          this._mappingsPtr = 0
          this._wasm = null

          const w = wasm.sync()
          this._wasm = w
        }

        /**
         * Utility function to find the index of a source.  Returns -1 if not
         * found.
         */
        _findSourceIndex(aSource) {
          let relativeSource = aSource
          if (this.sourceRoot != null) {
            relativeSource = util.relative(this.sourceRoot, relativeSource)
          }

          if (this._sources.has(relativeSource)) {
            return this._sources.indexOf(relativeSource)
          }

          // Maybe aSource is an absolute URL as returned by |sources|.  In
          // this case we can't simply undo the transform.
          for (let i = 0; i < this._absoluteSources.length; ++i) {
            if (this._absoluteSources[i] == aSource) {
              return i
            }
          }

          return -1
        }

        /**
         * Create a BasicSourceMapConsumer from a SourceMapGenerator.
         *
         * @param SourceMapGenerator aSourceMap
         *        The source map that will be consumed.
         * @param String aSourceMapURL
         *        The URL at which the source map can be found (optional)
         * @returns BasicSourceMapConsumer
         */
        static fromSourceMap(aSourceMap, aSourceMapURL) {
          return new BasicSourceMapConsumer(aSourceMap.toString())
        }

        get sources() {
          return this._absoluteSources.slice()
        }

        _getMappingsPtr() {
          if (this._mappingsPtr === 0) {
            this._parseMappings(this._mappings, this.sourceRoot)
          }

          return this._mappingsPtr
        }

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        _parseMappings(aStr, aSourceRoot) {
          const size = aStr.length

          const mappingsBufPtr = this._wasm.exports.allocate_mappings(size)
          const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size)
          for (let i = 0; i < size; i++) {
            mappingsBuf[i] = aStr.charCodeAt(i)
          }

          const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr)

          if (!mappingsPtr) {
            const error = this._wasm.exports.get_last_error()
            let msg = `Error parsing mappings (code ${error}): `

            // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.
            switch (error) {
              case 1:
                msg += "the mappings contained a negative line, column, source index, or name index"
                break
              case 2:
                msg += "the mappings contained a number larger than 2**32"
                break
              case 3:
                msg += "reached EOF while in the middle of parsing a VLQ"
                break
              case 4:
                msg += "invalid base 64 character while parsing a VLQ"
                break
              default:
                msg += "unknown error code"
                break
            }

            throw new Error(msg)
          }

          this._mappingsPtr = mappingsPtr
        }

        eachMapping(aCallback, aContext, aOrder) {
          const context = aContext || null
          const order = aOrder || SourceMapConsumer.GENERATED_ORDER
          const sourceRoot = this.sourceRoot

          this._wasm.withMappingCallback(
            (mapping) => {
              if (mapping.source !== null) {
                mapping.source = this._sources.at(mapping.source)
                mapping.source = util.computeSourceURL(
                  sourceRoot,
                  mapping.source,
                  this._sourceMapURL
                )

                if (mapping.name !== null) {
                  mapping.name = this._names.at(mapping.name)
                }
              }

              aCallback.call(context, mapping)
            },
            () => {
              switch (order) {
                case SourceMapConsumer.GENERATED_ORDER:
                  this._wasm.exports.by_generated_location(this._getMappingsPtr())
                  break
                case SourceMapConsumer.ORIGINAL_ORDER:
                  this._wasm.exports.by_original_location(this._getMappingsPtr())
                  break
                default:
                  throw new Error("Unknown order of iteration.")
              }
            }
          )
        }

        allGeneratedPositionsFor(aArgs) {
          let source = util.getArg(aArgs, "source")
          const originalLine = util.getArg(aArgs, "line")
          const originalColumn = aArgs.column || 0

          source = this._findSourceIndex(source)
          if (source < 0) {
            return []
          }

          if (originalLine < 1) {
            throw new Error("Line numbers must be >= 1")
          }

          if (originalColumn < 0) {
            throw new Error("Column numbers must be >= 0")
          }

          const mappings = []

          this._wasm.withMappingCallback(
            (m) => {
              let lastColumn = m.lastGeneratedColumn
              if (this._computedColumnSpans && lastColumn === null) {
                lastColumn = Infinity
              }
              mappings.push({
                line: m.generatedLine,
                column: m.generatedColumn,
                lastColumn
              })
            },
            () => {
              this._wasm.exports.all_generated_locations_for(
                this._getMappingsPtr(),
                source,
                originalLine - 1,
                "column" in aArgs,
                originalColumn
              )
            }
          )

          return mappings
        }

        destroy() {
          if (this._mappingsPtr !== 0) {
            this._wasm.exports.free_mappings(this._mappingsPtr)
            this._mappingsPtr = 0
          }
        }

        /**
         * Compute the last column for each generated mapping. The last column is
         * inclusive.
         */
        computeColumnSpans() {
          if (this._computedColumnSpans) {
            return
          }

          this._wasm.exports.compute_column_spans(this._getMappingsPtr())
          this._computedColumnSpans = true
        }

        /**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.  The line number
         *     is 1-based.
         *   - column: The column number in the generated source.  The column
         *     number is 0-based.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.  The
         *     line number is 1-based.
         *   - column: The column number in the original source, or null.  The
         *     column number is 0-based.
         *   - name: The original identifier, or null.
         */
        originalPositionFor(aArgs) {
          const needle = {
            generatedLine: util.getArg(aArgs, "line"),
            generatedColumn: util.getArg(aArgs, "column")
          }

          if (needle.generatedLine < 1) {
            throw new Error("Line numbers must be >= 1")
          }

          if (needle.generatedColumn < 0) {
            throw new Error("Column numbers must be >= 0")
          }

          let bias = util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
          if (bias == null) {
            bias = SourceMapConsumer.GREATEST_LOWER_BOUND
          }

          let mapping
          this._wasm.withMappingCallback(
            (m) => (mapping = m),
            () => {
              this._wasm.exports.original_location_for(
                this._getMappingsPtr(),
                needle.generatedLine - 1,
                needle.generatedColumn,
                bias
              )
            }
          )

          if (mapping) {
            if (mapping.generatedLine === needle.generatedLine) {
              let source = util.getArg(mapping, "source", null)
              if (source !== null) {
                source = this._sources.at(source)
                source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL)
              }

              let name = util.getArg(mapping, "name", null)
              if (name !== null) {
                name = this._names.at(name)
              }

              return {
                source,
                line: util.getArg(mapping, "originalLine", null),
                column: util.getArg(mapping, "originalColumn", null),
                name
              }
            }
          }

          return {
            source: null,
            line: null,
            column: null,
            name: null
          }
        }

        /**
         * Return true if we have the source content for every source in the source
         * map, false otherwise.
         */
        hasContentsOfAllSources() {
          if (!this.sourcesContent) {
            return false
          }
          return (
            this.sourcesContent.length >= this._sources.size() &&
            !this.sourcesContent.some(function (sc) {
              return sc == null
            })
          )
        }

        /**
         * Returns the original source content. The only argument is the url of the
         * original source file. Returns null if no original source content is
         * available.
         */
        sourceContentFor(aSource, nullOnMissing) {
          if (!this.sourcesContent) {
            return null
          }

          const index = this._findSourceIndex(aSource)
          if (index >= 0) {
            return this.sourcesContent[index]
          }

          let relativeSource = aSource
          if (this.sourceRoot != null) {
            relativeSource = util.relative(this.sourceRoot, relativeSource)
          }

          let url
          if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
            // XXX: file:// URIs and absolute paths lead to unexpected behavior for
            // many users. We can help them out when they expect file:// URIs to
            // behave like it would if they were running a local HTTP server. See
            // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
            const fileUriAbsPath = relativeSource.replace(/^file:\/\//, "")
            if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
              return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
            }

            if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
              return this.sourcesContent[this._sources.indexOf("/" + relativeSource)]
            }
          }

          // This function is used recursively from
          // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
          // don't want to throw if we can't find the source - we just want to
          // return null, so we provide a flag to exit gracefully.
          if (nullOnMissing) {
            return null
          }

          throw new Error('"' + relativeSource + '" is not in the SourceMap.')
        }

        /**
         * Returns the generated line and column information for the original source,
         * line, and column positions provided. The only argument is an object with
         * the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.  The line number
         *     is 1-based.
         *   - column: The column number in the original source.  The column
         *     number is 0-based.
         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
         *     closest element that is smaller than or greater than the one we are
         *     searching for, respectively, if the exact element cannot be found.
         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
         *
         * and an object is returned with the following properties:
         *
         *   - line: The line number in the generated source, or null.  The
         *     line number is 1-based.
         *   - column: The column number in the generated source, or null.
         *     The column number is 0-based.
         */
        generatedPositionFor(aArgs) {
          let source = util.getArg(aArgs, "source")
          source = this._findSourceIndex(source)
          if (source < 0) {
            return {
              line: null,
              column: null,
              lastColumn: null
            }
          }

          const needle = {
            source,
            originalLine: util.getArg(aArgs, "line"),
            originalColumn: util.getArg(aArgs, "column")
          }

          if (needle.originalLine < 1) {
            throw new Error("Line numbers must be >= 1")
          }

          if (needle.originalColumn < 0) {
            throw new Error("Column numbers must be >= 0")
          }

          let bias = util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
          if (bias == null) {
            bias = SourceMapConsumer.GREATEST_LOWER_BOUND
          }

          let mapping
          this._wasm.withMappingCallback(
            (m) => (mapping = m),
            () => {
              this._wasm.exports.generated_location_for(
                this._getMappingsPtr(),
                needle.source,
                needle.originalLine - 1,
                needle.originalColumn,
                bias
              )
            }
          )

          if (mapping) {
            if (mapping.source === needle.source) {
              let lastColumn = mapping.lastGeneratedColumn
              if (this._computedColumnSpans && lastColumn === null) {
                lastColumn = Infinity
              }
              return {
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn
              }
            }
          }

          return {
            line: null,
            column: null,
            lastColumn: null
          }
        }
      }

      BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer
      __webpack_unused_export__ = BasicSourceMapConsumer

      /**
       * An IndexedSourceMapConsumer instance represents a parsed source map which
       * we can query for information. It differs from BasicSourceMapConsumer in
       * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
       * input.
       *
       * The first parameter is a raw source map (either as a JSON string, or already
       * parsed to an object). According to the spec for indexed source maps, they
       * have the following attributes:
       *
       *   - version: Which version of the source map spec this map is following.
       *   - file: Optional. The generated file this source map is associated with.
       *   - sections: A list of section definitions.
       *
       * Each value under the "sections" field has two fields:
       *   - offset: The offset into the original specified at which this section
       *       begins to apply, defined as an object with a "line" and "column"
       *       field.
       *   - map: A source map definition. This source map could also be indexed,
       *       but doesn't have to be.
       *
       * Instead of the "map" field, it's also possible to have a "url" field
       * specifying a URL to retrieve a source map from, but that's currently
       * unsupported.
       *
       * Here's an example source map, taken from the source map spec[0], but
       * modified to omit a section which uses the "url" field.
       *
       *  {
       *    version : 3,
       *    file: "app.js",
       *    sections: [{
       *      offset: {line:100, column:10},
       *      map: {
       *        version : 3,
       *        file: "section.js",
       *        sources: ["foo.js", "bar.js"],
       *        names: ["src", "maps", "are", "fun"],
       *        mappings: "AAAA,E;;ABCDE;"
       *      }
       *    }],
       *  }
       *
       * The second parameter, if given, is a string whose value is the URL
       * at which the source map was found.  This URL is used to compute the
       * sources array.
       *
       * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
       */
      class IndexedSourceMapConsumer extends SourceMapConsumer {
        constructor(aSourceMap, aSourceMapURL) {
          super(INTERNAL)
          let sourceMap = aSourceMap
          if (typeof aSourceMap === "string") {
            sourceMap = util.parseSourceMapInput(aSourceMap)
          }

          const version = util.getArg(sourceMap, "version")
          const sections = util.getArg(sourceMap, "sections")

          if (version != this._version) {
            throw new Error("Unsupported version: " + version)
          }

          this._sources = new ArraySet()
          this._names = new ArraySet()
          this.__generatedMappings = null
          this.__originalMappings = null
          this.__generatedMappingsUnsorted = null
          this.__originalMappingsUnsorted = null

          let lastOffset = {
            line: -1,
            column: 0
          }
          this._sections = sections.map((s) => {
            if (s.url) {
              // The url field will require support for asynchronicity.
              // See https://github.com/mozilla/source-map/issues/16
              throw new Error("Support for url field in sections not implemented.")
            }
            const offset = util.getArg(s, "offset")
            const offsetLine = util.getArg(offset, "line")
            const offsetColumn = util.getArg(offset, "column")

            if (
              offsetLine < lastOffset.line ||
              (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)
            ) {
              throw new Error("Section offsets must be ordered and non-overlapping.")
            }
            lastOffset = offset

            const consumer = new SourceMapConsumer(util.getArg(s, "map"), aSourceMapURL)
            return {
              generatedOffset: {
                // The offset fields are 0-based, but we use 1-based indices when
                // encoding/decoding from VLQ.
                generatedLine: offsetLine + 1,
                generatedColumn: offsetColumn + 1
              },
              consumer
            }
          })
        }

        // `__generatedMappings` and `__originalMappings` are arrays that hold the
        // parsed mapping coordinates from the source map's "mappings" attribute. They
        // are lazily instantiated, accessed via the `_generatedMappings` and
        // `_originalMappings` getters respectively, and we only parse the mappings
        // and create these arrays once queried for a source location. We jump through
        // these hoops because there can be many thousands of mappings, and parsing
        // them is expensive, so we only want to do it if we must.
        //
        // Each object in the arrays is of the form:
        //
        //     {
        //       generatedLine: The line number in the generated code,
        //       generatedColumn: The column number in the generated code,
        //       source: The path to the original source file that generated this
        //               chunk of code,
        //       originalLine: The line number in the original source that
        //                     corresponds to this chunk of generated code,
        //       originalColumn: The column number in the original source that
        //                       corresponds to this chunk of generated code,
        //       name: The name of the original symbol which generated this chunk of
        //             code.
        //     }
        //
        // All properties except for `generatedLine` and `generatedColumn` can be
        // `null`.
        //
        // `_generatedMappings` is ordered by the generated positions.
        //
        // `_originalMappings` is ordered by the original positions.
        get _generatedMappings() {
          if (!this.__generatedMappings) {
            this._sortGeneratedMappings()
          }

          return this.__generatedMappings
        }

        get _originalMappings() {
          if (!this.__originalMappings) {
            this._sortOriginalMappings()
          }

          return this.__originalMappings
        }

        get _generatedMappingsUnsorted() {
          if (!this.__generatedMappingsUnsorted) {
            this._parseMappings(this._mappings, this.sourceRoot)
          }

          return this.__generatedMappingsUnsorted
        }

        get _originalMappingsUnsorted() {
          if (!this.__originalMappingsUnsorted) {
            this._parseMappings(this._mappings, this.sourceRoot)
          }

          return this.__originalMappingsUnsorted
        }

        _sortGeneratedMappings() {
          const mappings = this._generatedMappingsUnsorted
          mappings.sort(util.compareByGeneratedPositionsDeflated)
          this.__generatedMappings = mappings
        }

        _sortOriginalMappings() {
          const mappings = this._originalMappingsUnsorted
          mappings.sort(util.compareByOriginalPositions)
          this.__originalMappings = mappings
        }

        /**
         * The list of original sources.
         */
        get sources() {
          const sources = []
          for (let i = 0; i < this._sections.length; i++) {
            for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {
              sources.push(this._sections[i].consumer.sources[j])
            }
          }
          return sources
        }

        /**
         * Returns the original source, line, and column information for the generated
         * source's line and column positions provided. The only argument is an object
         * with the following properties:
         *
         *   - line: The line number in the generated source.  The line number
         *     is 1-based.
         *   - column: The column number in the generated source.  The column
         *     number is 0-based.
         *
         * and an object is returned with the following properties:
         *
         *   - source: The original source file, or null.
         *   - line: The line number in the original source, or null.  The
         *     line number is 1-based.
         *   - column: The column number in the original source, or null.  The
         *     column number is 0-based.
         *   - name: The original identifier, or null.
         */
        originalPositionFor(aArgs) {
          const needle = {
            generatedLine: util.getArg(aArgs, "line"),
            generatedColumn: util.getArg(aArgs, "column")
          }

          // Find the section containing the generated position we're trying to map
          // to an original position.
          const sectionIndex = binarySearch.search(
            needle,
            this._sections,
            function (aNeedle, section) {
              const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine
              if (cmp) {
                return cmp
              }

              return aNeedle.generatedColumn - section.generatedOffset.generatedColumn
            }
          )
          const section = this._sections[sectionIndex]

          if (!section) {
            return {
              source: null,
              line: null,
              column: null,
              name: null
            }
          }

          return section.consumer.originalPositionFor({
            line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
            column:
              needle.generatedColumn -
              (section.generatedOffset.generatedLine === needle.generatedLine
                ? section.generatedOffset.generatedColumn - 1
                : 0),
            bias: aArgs.bias
          })
        }

        /**
         * Return true if we have the source content for every source in the source
         * map, false otherwise.
         */
        hasContentsOfAllSources() {
          return this._sections.every(function (s) {
            return s.consumer.hasContentsOfAllSources()
          })
        }

        /**
         * Returns the original source content. The only argument is the url of the
         * original source file. Returns null if no original source content is
         * available.
         */
        sourceContentFor(aSource, nullOnMissing) {
          for (let i = 0; i < this._sections.length; i++) {
            const section = this._sections[i]

            const content = section.consumer.sourceContentFor(aSource, true)
            if (content) {
              return content
            }
          }
          if (nullOnMissing) {
            return null
          }
          throw new Error('"' + aSource + '" is not in the SourceMap.')
        }

        /**
         * Returns the generated line and column information for the original source,
         * line, and column positions provided. The only argument is an object with
         * the following properties:
         *
         *   - source: The filename of the original source.
         *   - line: The line number in the original source.  The line number
         *     is 1-based.
         *   - column: The column number in the original source.  The column
         *     number is 0-based.
         *
         * and an object is returned with the following properties:
         *
         *   - line: The line number in the generated source, or null.  The
         *     line number is 1-based.
         *   - column: The column number in the generated source, or null.
         *     The column number is 0-based.
         */
        generatedPositionFor(aArgs) {
          for (let i = 0; i < this._sections.length; i++) {
            const section = this._sections[i]

            // Only consider this section if the requested source is in the list of
            // sources of the consumer.
            if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
              continue
            }
            const generatedPosition = section.consumer.generatedPositionFor(aArgs)
            if (generatedPosition) {
              const ret = {
                line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                column:
                  generatedPosition.column +
                  (section.generatedOffset.generatedLine === generatedPosition.line
                    ? section.generatedOffset.generatedColumn - 1
                    : 0)
              }
              return ret
            }
          }

          return {
            line: null,
            column: null
          }
        }

        /**
         * Parse the mappings in a string in to a data structure which we can easily
         * query (the ordered arrays in the `this.__generatedMappings` and
         * `this.__originalMappings` properties).
         */
        _parseMappings(aStr, aSourceRoot) {
          const generatedMappings = (this.__generatedMappingsUnsorted = [])
          const originalMappings = (this.__originalMappingsUnsorted = [])
          for (let i = 0; i < this._sections.length; i++) {
            const section = this._sections[i]

            const sectionMappings = []
            section.consumer.eachMapping((m) => sectionMappings.push(m))

            for (let j = 0; j < sectionMappings.length; j++) {
              const mapping = sectionMappings[j]

              // TODO: test if null is correct here.  The original code used
              // `source`, which would actually have gotten used as null because
              // var's get hoisted.
              // See: https://github.com/mozilla/source-map/issues/333
              let source = util.computeSourceURL(
                section.consumer.sourceRoot,
                null,
                this._sourceMapURL
              )
              this._sources.add(source)
              source = this._sources.indexOf(source)

              let name = null
              if (mapping.name) {
                this._names.add(mapping.name)
                name = this._names.indexOf(mapping.name)
              }

              // The mappings coming from the consumer for the section have
              // generated positions relative to the start of the section, so we
              // need to offset them to be relative to the start of the concatenated
              // generated file.
              const adjustedMapping = {
                source,
                generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                generatedColumn:
                  mapping.generatedColumn +
                  (section.generatedOffset.generatedLine === mapping.generatedLine
                    ? section.generatedOffset.generatedColumn - 1
                    : 0),
                originalLine: mapping.originalLine,
                originalColumn: mapping.originalColumn,
                name
              }

              generatedMappings.push(adjustedMapping)
              if (typeof adjustedMapping.originalLine === "number") {
                originalMappings.push(adjustedMapping)
              }
            }
          }
        }

        eachMapping(aCallback, aContext, aOrder) {
          const context = aContext || null
          const order = aOrder || SourceMapConsumer.GENERATED_ORDER

          let mappings
          switch (order) {
            case SourceMapConsumer.GENERATED_ORDER:
              mappings = this._generatedMappings
              break
            case SourceMapConsumer.ORIGINAL_ORDER:
              mappings = this._originalMappings
              break
            default:
              throw new Error("Unknown order of iteration.")
          }

          const sourceRoot = this.sourceRoot
          mappings
            .map(function (mapping) {
              let source = null
              if (mapping.source !== null) {
                source = this._sources.at(mapping.source)
                source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL)
              }
              return {
                source,
                generatedLine: mapping.generatedLine,
                generatedColumn: mapping.generatedColumn,
                originalLine: mapping.originalLine,
                originalColumn: mapping.originalColumn,
                name: mapping.name === null ? null : this._names.at(mapping.name)
              }
            }, this)
            .forEach(aCallback, context)
        }

        /**
         * Find the mapping that best matches the hypothetical "needle" mapping that
         * we are searching for in the given "haystack" of mappings.
         */
        _findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
          // To return the position we are searching for, we must first find the
          // mapping for the given position and then return the opposite position it
          // points to. Because the mappings are sorted, we can use binary search to
          // find the best mapping.

          if (aNeedle[aLineName] <= 0) {
            throw new TypeError(
              "Line must be greater than or equal to 1, got " + aNeedle[aLineName]
            )
          }
          if (aNeedle[aColumnName] < 0) {
            throw new TypeError(
              "Column must be greater than or equal to 0, got " + aNeedle[aColumnName]
            )
          }

          return binarySearch.search(aNeedle, aMappings, aComparator, aBias)
        }

        allGeneratedPositionsFor(aArgs) {
          const line = util.getArg(aArgs, "line")

          // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
          // returns the index of the closest mapping less than the needle. By
          // setting needle.originalColumn to 0, we thus find the last mapping for
          // the given line, provided such a mapping exists.
          const needle = {
            source: util.getArg(aArgs, "source"),
            originalLine: line,
            originalColumn: util.getArg(aArgs, "column", 0)
          }

          needle.source = this._findSourceIndex(needle.source)
          if (needle.source < 0) {
            return []
          }

          if (needle.originalLine < 1) {
            throw new Error("Line numbers must be >= 1")
          }

          if (needle.originalColumn < 0) {
            throw new Error("Column numbers must be >= 0")
          }

          const mappings = []

          let index = this._findMapping(
            needle,
            this._originalMappings,
            "originalLine",
            "originalColumn",
            util.compareByOriginalPositions,
            binarySearch.LEAST_UPPER_BOUND
          )
          if (index >= 0) {
            let mapping = this._originalMappings[index]

            if (aArgs.column === undefined) {
              const originalLine = mapping.originalLine

              // Iterate until either we run out of mappings, or we run into
              // a mapping for a different line than the one we found. Since
              // mappings are sorted, this is guaranteed to find all mappings for
              // the line we found.
              while (mapping && mapping.originalLine === originalLine) {
                let lastColumn = mapping.lastGeneratedColumn
                if (this._computedColumnSpans && lastColumn === null) {
                  lastColumn = Infinity
                }
                mappings.push({
                  line: util.getArg(mapping, "generatedLine", null),
                  column: util.getArg(mapping, "generatedColumn", null),
                  lastColumn
                })

                mapping = this._originalMappings[++index]
              }
            } else {
              const originalColumn = mapping.originalColumn

              // Iterate until either we run out of mappings, or we run into
              // a mapping for a different line than the one we were searching for.
              // Since mappings are sorted, this is guaranteed to find all mappings for
              // the line we are searching for.
              while (
                mapping &&
                mapping.originalLine === line &&
                mapping.originalColumn == originalColumn
              ) {
                let lastColumn = mapping.lastGeneratedColumn
                if (this._computedColumnSpans && lastColumn === null) {
                  lastColumn = Infinity
                }
                mappings.push({
                  line: util.getArg(mapping, "generatedLine", null),
                  column: util.getArg(mapping, "generatedColumn", null),
                  lastColumn
                })

                mapping = this._originalMappings[++index]
              }
            }
          }

          return mappings
        }

        destroy() {
          for (let i = 0; i < this._sections.length; i++) {
            this._sections[i].consumer.destroy()
          }
        }
      }
      __webpack_unused_export__ = IndexedSourceMapConsumer

      /*
       * Cheat to get around inter-twingled classes.  `factory()` can be at the end
       * where it has access to non-hoisted classes, but it gets hoisted itself.
       */
      function _factory(aSourceMap, aSourceMapURL) {
        let sourceMap = aSourceMap
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap)
        }

        const consumer =
          sourceMap.sections != null
            ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
            : new BasicSourceMapConsumer(sourceMap, aSourceMapURL)
        return consumer
      }

      function _factoryBSM(aSourceMap, aSourceMapURL) {
        return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL)
      }

      /***/
    },

    /***/ 1650: /***/ (__unused_webpack_module, exports) => {
      /* -*- Mode: js; js-indent-level: 2; -*- */
      /*
       * Copyright 2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE or:
       * http://opensource.org/licenses/BSD-3-Clause
       */

      /**
       * This is a helper function for getting values from parameter/options
       * objects.
       *
       * @param args The object we are extracting values from
       * @param name The name of the property we are getting.
       * @param defaultValue An optional value to return if the property is missing
       * from the object. If this is not specified and the property is missing, an
       * error will be thrown.
       */
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName]
        } else if (arguments.length === 3) {
          return aDefaultValue
        }
        throw new Error('"' + aName + '" is a required argument.')
      }
      exports.getArg = getArg

      const urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/
      const dataUrlRegexp = /^data:.+\,.+$/

      function urlParse(aUrl) {
        const match = aUrl.match(urlRegexp)
        if (!match) {
          return null
        }
        return {
          scheme: match[1],
          auth: match[2],
          host: match[3],
          port: match[4],
          path: match[5]
        }
      }
      exports.urlParse = urlParse

      function urlGenerate(aParsedUrl) {
        let url = ""
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ":"
        }
        url += "//"
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + "@"
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path
        }
        return url
      }
      exports.urlGenerate = urlGenerate

      const MAX_CACHED_INPUTS = 32

      /**
       * Takes some function `f(input) -> result` and returns a memoized version of
       * `f`.
       *
       * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
       * memoization is a dumb-simple, linear least-recently-used cache.
       */
      function lruMemoize(f) {
        const cache = []

        return function (input) {
          for (let i = 0; i < cache.length; i++) {
            if (cache[i].input === input) {
              const temp = cache[0]
              cache[0] = cache[i]
              cache[i] = temp
              return cache[0].result
            }
          }

          const result = f(input)

          cache.unshift({
            input,
            result
          })

          if (cache.length > MAX_CACHED_INPUTS) {
            cache.pop()
          }

          return result
        }
      }

      /**
       * Normalizes a path, or the path portion of a URL:
       *
       * - Replaces consecutive slashes with one slash.
       * - Removes unnecessary '.' parts.
       * - Removes unnecessary '<dir>/..' parts.
       *
       * Based on code in the Node.js 'path' core module.
       *
       * @param aPath The path or url to normalize.
       */
      const normalize = lruMemoize(function normalize(aPath) {
        let path = aPath
        const url = urlParse(aPath)
        if (url) {
          if (!url.path) {
            return aPath
          }
          path = url.path
        }
        const isAbsolute = exports.isAbsolute(path)

        // Split the path into parts between `/` characters. This is much faster than
        // using `.split(/\/+/g)`.
        const parts = []
        let start = 0
        let i = 0
        while (true) {
          start = i
          i = path.indexOf("/", start)
          if (i === -1) {
            parts.push(path.slice(start))
            break
          } else {
            parts.push(path.slice(start, i))
            while (i < path.length && path[i] === "/") {
              i++
            }
          }
        }

        let up = 0
        for (i = parts.length - 1; i >= 0; i--) {
          const part = parts[i]
          if (part === ".") {
            parts.splice(i, 1)
          } else if (part === "..") {
            up++
          } else if (up > 0) {
            if (part === "") {
              // The first part is blank if the path is absolute. Trying to go
              // above the root is a no-op. Therefore we can remove all '..' parts
              // directly after the root.
              parts.splice(i + 1, up)
              up = 0
            } else {
              parts.splice(i, 2)
              up--
            }
          }
        }
        path = parts.join("/")

        if (path === "") {
          path = isAbsolute ? "/" : "."
        }

        if (url) {
          url.path = path
          return urlGenerate(url)
        }
        return path
      })
      exports.normalize = normalize

      /**
       * Joins two paths/URLs.
       *
       * @param aRoot The root path or URL.
       * @param aPath The path or URL to be joined with the root.
       *
       * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
       *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
       *   first.
       * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
       *   is updated with the result and aRoot is returned. Otherwise the result
       *   is returned.
       *   - If aPath is absolute, the result is aPath.
       *   - Otherwise the two paths are joined with a slash.
       * - Joining for example 'http://' and 'www.example.com' is also supported.
       */
      function join(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = "."
        }
        if (aPath === "") {
          aPath = "."
        }
        const aPathUrl = urlParse(aPath)
        const aRootUrl = urlParse(aRoot)
        if (aRootUrl) {
          aRoot = aRootUrl.path || "/"
        }

        // `join(foo, '//www.example.org')`
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme
          }
          return urlGenerate(aPathUrl)
        }

        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath
        }

        // `join('http://', 'www.example.com')`
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath
          return urlGenerate(aRootUrl)
        }

        const joined =
          aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath)

        if (aRootUrl) {
          aRootUrl.path = joined
          return urlGenerate(aRootUrl)
        }
        return joined
      }
      exports.join = join

      exports.isAbsolute = function (aPath) {
        return aPath.charAt(0) === "/" || urlRegexp.test(aPath)
      }

      /**
       * Make a path relative to a URL or another path.
       *
       * @param aRoot The root path or URL.
       * @param aPath The path or URL to be made relative to aRoot.
       */
      function relative(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = "."
        }

        aRoot = aRoot.replace(/\/$/, "")

        // It is possible for the path to be above the root. In this case, simply
        // checking whether the root is a prefix of the path won't work. Instead, we
        // need to remove components from the root one by one, until either we find
        // a prefix that fits, or we run out of components to remove.
        let level = 0
        while (aPath.indexOf(aRoot + "/") !== 0) {
          const index = aRoot.lastIndexOf("/")
          if (index < 0) {
            return aPath
          }

          // If the only part of the root that is left is the scheme (i.e. http://,
          // file:///, etc.), one or more slashes (/), or simply nothing at all, we
          // have exhausted all components, so the path is not relative to the root.
          aRoot = aRoot.slice(0, index)
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath
          }

          ++level
        }

        // Make sure we add a "../" for each component we removed from the root.
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1)
      }
      exports.relative = relative

      const supportsNullProto = (function () {
        const obj = Object.create(null)
        return !("__proto__" in obj)
      })()

      function identity(s) {
        return s
      }

      /**
       * Because behavior goes wacky when you set `__proto__` on objects, we
       * have to prefix all the strings in our set with an arbitrary character.
       *
       * See https://github.com/mozilla/source-map/pull/31 and
       * https://github.com/mozilla/source-map/issues/30
       *
       * @param String aStr
       */
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return "$" + aStr
        }

        return aStr
      }
      exports.toSetString = supportsNullProto ? identity : toSetString

      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1)
        }

        return aStr
      }
      exports.fromSetString = supportsNullProto ? identity : fromSetString

      function isProtoString(s) {
        if (!s) {
          return false
        }

        const length = s.length

        if (length < 9 /* "__proto__".length */) {
          return false
        }

        /* eslint-disable no-multi-spaces */
        if (
          s.charCodeAt(length - 1) !== 95 /* '_' */ ||
          s.charCodeAt(length - 2) !== 95 /* '_' */ ||
          s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
          s.charCodeAt(length - 4) !== 116 /* 't' */ ||
          s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
          s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
          s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
          s.charCodeAt(length - 8) !== 95 /* '_' */ ||
          s.charCodeAt(length - 9) !== 95 /* '_' */
        ) {
          return false
        }
        /* eslint-enable no-multi-spaces */

        for (let i = length - 10; i >= 0; i--) {
          if (s.charCodeAt(i) !== 36 /* '$' */) {
            return false
          }
        }

        return true
      }

      /**
       * Comparator between two mappings where the original positions are compared.
       *
       * Optionally pass in `true` as `onlyCompareGenerated` to consider two
       * mappings with the same original source/line/column, but different generated
       * line and column the same. Useful when searching for a mapping with a
       * stubbed out mapping.
       */
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        let cmp = strcmp(mappingA.source, mappingB.source)
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.originalLine - mappingB.originalLine
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.originalColumn - mappingB.originalColumn
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp
        }

        cmp = mappingA.generatedColumn - mappingB.generatedColumn
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.generatedLine - mappingB.generatedLine
        if (cmp !== 0) {
          return cmp
        }

        return strcmp(mappingA.name, mappingB.name)
      }
      exports.compareByOriginalPositions = compareByOriginalPositions

      /**
       * Comparator between two mappings with deflated source and name indices where
       * the generated positions are compared.
       *
       * Optionally pass in `true` as `onlyCompareGenerated` to consider two
       * mappings with the same generated line and column, but different
       * source/name/original line and column the same. Useful when searching for a
       * mapping with a stubbed out mapping.
       */
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        let cmp = mappingA.generatedLine - mappingB.generatedLine
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.generatedColumn - mappingB.generatedColumn
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp
        }

        cmp = strcmp(mappingA.source, mappingB.source)
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.originalLine - mappingB.originalLine
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.originalColumn - mappingB.originalColumn
        if (cmp !== 0) {
          return cmp
        }

        return strcmp(mappingA.name, mappingB.name)
      }
      exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated

      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0
        }

        if (aStr1 === null) {
          return 1 // aStr2 !== null
        }

        if (aStr2 === null) {
          return -1 // aStr1 !== null
        }

        if (aStr1 > aStr2) {
          return 1
        }

        return -1
      }

      /**
       * Comparator between two mappings with inflated source and name strings where
       * the generated positions are compared.
       */
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        let cmp = mappingA.generatedLine - mappingB.generatedLine
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.generatedColumn - mappingB.generatedColumn
        if (cmp !== 0) {
          return cmp
        }

        cmp = strcmp(mappingA.source, mappingB.source)
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.originalLine - mappingB.originalLine
        if (cmp !== 0) {
          return cmp
        }

        cmp = mappingA.originalColumn - mappingB.originalColumn
        if (cmp !== 0) {
          return cmp
        }

        return strcmp(mappingA.name, mappingB.name)
      }
      exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated

      /**
       * Strip any JSON XSSI avoidance prefix from the string (as documented
       * in the source maps specification), and then parse the string as
       * JSON.
       */
      function parseSourceMapInput(str) {
        return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""))
      }
      exports.parseSourceMapInput = parseSourceMapInput

      /**
       * Compute the URL of a source given the the source root, the source's
       * URL, and the source map's URL.
       */
      function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || ""

        if (sourceRoot) {
          // This follows what Chrome does.
          if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
            sourceRoot += "/"
          }
          // The spec says:
          //   Line 4: An optional source root, useful for relocating source
          //   files on a server or removing repeated values in the
          //   “sources” entry.  This value is prepended to the individual
          //   entries in the “source” field.
          sourceURL = sourceRoot + sourceURL
        }

        // Historically, SourceMapConsumer did not take the sourceMapURL as
        // a parameter.  This mode is still somewhat supported, which is why
        // this code block is conditional.  However, it's preferable to pass
        // the source map URL to SourceMapConsumer, so that this function
        // can implement the source URL resolution algorithm as outlined in
        // the spec.  This block is basically the equivalent of:
        //    new URL(sourceURL, sourceMapURL).toString()
        // ... except it avoids using URL, which wasn't available in the
        // older releases of node still supported by this library.
        //
        // The spec says:
        //   If the sources are not absolute URLs after prepending of the
        //   “sourceRoot”, the sources are resolved relative to the
        //   SourceMap (like resolving script src in a html document).
        if (sourceMapURL) {
          const parsed = urlParse(sourceMapURL)
          if (!parsed) {
            throw new Error("sourceMapURL could not be parsed")
          }
          if (parsed.path) {
            // Strip the last path component, but keep the "/".
            const index = parsed.path.lastIndexOf("/")
            if (index >= 0) {
              parsed.path = parsed.path.substring(0, index + 1)
            }
          }
          sourceURL = join(urlGenerate(parsed), sourceURL)
        }

        return normalize(sourceURL)
      }
      exports.computeSourceURL = computeSourceURL

      /***/
    },

    /***/ 84734: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const readWasm = __nccwpck_require__(42690)

      /**
       * Provide the JIT with a nice shape / hidden class.
       */
      function Mapping() {
        this.generatedLine = 0
        this.generatedColumn = 0
        this.lastGeneratedColumn = null
        this.source = null
        this.originalLine = null
        this.originalColumn = null
        this.name = null
      }

      let cachedWasm = null
      let cachedWasmSync = null

      module.exports = async function wasm() {
        if (cachedWasm) {
          return cachedWasm
        }

        // At every step of the way, if a sync load already succeeded, abort and return
        // the sync-loaded module.
        cachedWasm = async () => {
          try {
            const callbackStack = []

            const buffer = await readWasm()
            if (cachedWasmSync) return cachedWasmSync
            const Wasm = await WebAssembly.instantiate(buffer, getImportObject({ callbackStack }))
            if (cachedWasmSync) return cachedWasmSync

            cachedWasmSync = {
              exports: Wasm.instance.exports,
              withMappingCallback: (mappingCallback, f) => {
                callbackStack.push(mappingCallback)
                try {
                  f()
                } finally {
                  callbackStack.pop()
                }
              }
            }
          } catch (e) {
            if (cachedWasmSync) return cachedWasmSync
            cachedWasm = null
            throw e
          }
          return cachedWasmSync
        }

        return cachedWasm
      }

      module.exports.sync = function wasmSync() {
        if (cachedWasmSync) {
          return cachedWasmSync
        }

        const callbackStack = []

        try {
          const cachedWasmBuffer = readWasm.sync()
          const wasmModule = new WebAssembly.Module(cachedWasmBuffer)
          const Wasm = new WebAssembly.Instance(wasmModule, getImportObject({ callbackStack }))

          cachedWasmSync = {
            exports: Wasm.exports,
            withMappingCallback: (mappingCallback, f) => {
              callbackStack.push(mappingCallback)
              try {
                f()
              } finally {
                callbackStack.pop()
              }
            }
          }
        } catch (e) {
          cachedWasmSync = null
          throw e
        }

        return cachedWasmSync
      }

      function getImportObject({ callbackStack }) {
        return {
          env: {
            mapping_callback(
              generatedLine,
              generatedColumn,

              hasLastGeneratedColumn,
              lastGeneratedColumn,

              hasOriginal,
              source,
              originalLine,
              originalColumn,

              hasName,
              name
            ) {
              const mapping = new Mapping()
              // JS uses 1-based line numbers, wasm uses 0-based.
              mapping.generatedLine = generatedLine + 1
              mapping.generatedColumn = generatedColumn

              if (hasLastGeneratedColumn) {
                // JS uses inclusive last generated column, wasm uses exclusive.
                mapping.lastGeneratedColumn = lastGeneratedColumn - 1
              }

              if (hasOriginal) {
                mapping.source = source
                // JS uses 1-based line numbers, wasm uses 0-based.
                mapping.originalLine = originalLine + 1
                mapping.originalColumn = originalColumn

                if (hasName) {
                  mapping.name = name
                }
              }

              callbackStack[callbackStack.length - 1](mapping)
            },

            start_all_generated_locations_for() {
              console.time("all_generated_locations_for")
            },
            end_all_generated_locations_for() {
              console.timeEnd("all_generated_locations_for")
            },

            start_compute_column_spans() {
              console.time("compute_column_spans")
            },
            end_compute_column_spans() {
              console.timeEnd("compute_column_spans")
            },

            start_generated_location_for() {
              console.time("generated_location_for")
            },
            end_generated_location_for() {
              console.timeEnd("generated_location_for")
            },

            start_original_location_for() {
              console.time("original_location_for")
            },
            end_original_location_for() {
              console.timeEnd("original_location_for")
            },

            start_parse_mappings() {
              console.time("parse_mappings")
            },
            end_parse_mappings() {
              console.timeEnd("parse_mappings")
            },

            start_sort_by_generated_location() {
              console.time("sort_by_generated_location")
            },
            end_sort_by_generated_location() {
              console.timeEnd("sort_by_generated_location")
            },

            start_sort_by_original_location() {
              console.time("sort_by_original_location")
            },
            end_sort_by_original_location() {
              console.timeEnd("sort_by_original_location")
            }
          }
        }
      }

      /***/
    },

    /***/ 10462: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      /*
       * Copyright 2009-2011 Mozilla Foundation and contributors
       * Licensed under the New BSD license. See LICENSE.txt or:
       * http://opensource.org/licenses/BSD-3-Clause
       */
      exports.SourceMapConsumer = __nccwpck_require__(26514).SourceMapConsumer

      /***/
    },

    /***/ 99964: /***/ (module, exports, __nccwpck_require__) => {
      /* module decorator */ module = __nccwpck_require__.nmd(module)
      var SourceMapConsumer = __nccwpck_require__(10462).SourceMapConsumer
      var path = __nccwpck_require__(71017)
      var util = __nccwpck_require__(73837)

      var fs
      try {
        fs = __nccwpck_require__(57147)
        if (!fs.existsSync || !fs.readFileSync) {
          // fs doesn't have all methods we need
          fs = null
        }
      } catch (err) {
        /* nop */
      }

      /**
       * Requires a module which is protected against bundler minification.
       *
       * @param {NodeModule} mod
       * @param {string} request
       */
      function dynamicRequire(mod, request) {
        return mod.require(request)
      }

      /**
       * @typedef {{
       *   enabled: boolean;
       *   originalValue: any;
       *   installedValue: any;
       * }} HookState
       * Used for installing and uninstalling hooks
       */

      // Increment this if the format of sharedData changes in a breaking way.
      var sharedDataVersion = 1

      /**
       * @template T
       * @param {T} defaults
       * @returns {T}
       */
      function initializeSharedData(defaults) {
        var sharedDataKey = "source-map-support/sharedData"
        if (typeof Symbol !== "undefined") {
          sharedDataKey = Symbol.for(sharedDataKey)
        }
        var sharedData = this[sharedDataKey]
        if (!sharedData) {
          sharedData = { version: sharedDataVersion }
          if (Object.defineProperty) {
            Object.defineProperty(this, sharedDataKey, { value: sharedData })
          } else {
            this[sharedDataKey] = sharedData
          }
        }
        if (sharedDataVersion !== sharedData.version) {
          throw new Error("Multiple incompatible instances of source-map-support were loaded")
        }
        for (var key in defaults) {
          if (!(key in sharedData)) {
            sharedData[key] = defaults[key]
          }
        }
        return sharedData
      }

      // If multiple instances of source-map-support are loaded into the same
      // context, they shouldn't overwrite each other.  By storing handlers, caches,
      // and other state on a shared object, different instances of
      // source-map-support can work together in a limited way. This does require
      // that future versions of source-map-support continue to support the fields on
      // this object. If this internal contract ever needs to be broken, increment
      // sharedDataVersion. (This version number is not the same as any of the
      // package's version numbers, which should reflect the *external* API of
      // source-map-support.)
      var sharedData = initializeSharedData({
        // Only install once if called multiple times
        // Remember how the environment looked before installation so we can restore if able
        /** @type {HookState} */
        errorPrepareStackTraceHook: undefined,
        /** @type {HookState} */
        processEmitHook: undefined,
        /** @type {HookState} */
        moduleResolveFilenameHook: undefined,

        /** @type {Array<(request: string, parent: any, isMain: boolean, options: any, redirectedRequest: string) => void>} */
        onConflictingLibraryRedirectArr: [],

        // If true, the caches are reset before a stack trace formatting operation
        emptyCacheBetweenOperations: false,

        // Maps a file path to a string containing the file contents
        fileContentsCache: {},

        // Maps a file path to a source map for that file
        sourceMapCache: {},

        // Priority list of retrieve handlers
        retrieveFileHandlers: [],
        retrieveMapHandlers: [],

        // Priority list of internally-implemented handlers.
        // When resetting state, we must keep these.
        internalRetrieveFileHandlers: [],
        internalRetrieveMapHandlers: []
      })

      // Supports {browser, node, auto}
      var environment = "auto"

      // Regex for detecting source maps
      var reSourceMap = /^data:application\/json[^,]+base64,/

      function isInBrowser() {
        if (environment === "browser") return true
        if (environment === "node") return false
        return (
          typeof window !== "undefined" &&
          typeof XMLHttpRequest === "function" &&
          !(window.require && window.module && window.process && window.process.type === "renderer")
        )
      }

      function hasGlobalProcessEventEmitter() {
        return typeof process === "object" && process !== null && typeof process.on === "function"
      }

      function handlerExec(list, internalList) {
        return function (arg) {
          for (var i = 0; i < list.length; i++) {
            var ret = list[i](arg)
            if (ret) {
              return ret
            }
          }
          for (var i = 0; i < internalList.length; i++) {
            var ret = internalList[i](arg)
            if (ret) {
              return ret
            }
          }
          return null
        }
      }

      var retrieveFile = handlerExec(
        sharedData.retrieveFileHandlers,
        sharedData.internalRetrieveFileHandlers
      )

      sharedData.internalRetrieveFileHandlers.push(function (path) {
        // Trim the path to make sure there is no extra whitespace.
        path = path.trim()
        if (/^file:/.test(path)) {
          // existsSync/readFileSync can't handle file protocol, but once stripped, it works
          path = path.replace(/file:\/\/\/(\w:)?/, function (protocol, drive) {
            return drive
              ? "" // file:///C:/dir/file -> C:/dir/file
              : "/" // file:///root-dir/file -> /root-dir/file
          })
        }
        if (path in sharedData.fileContentsCache) {
          return sharedData.fileContentsCache[path]
        }

        var contents = ""
        try {
          if (!fs) {
            // Use SJAX if we are in the browser
            var xhr = new XMLHttpRequest()
            xhr.open("GET", path, /** async */ false)
            xhr.send(null)
            if (xhr.readyState === 4 && xhr.status === 200) {
              contents = xhr.responseText
            }
          } else if (fs.existsSync(path)) {
            // Otherwise, use the filesystem
            contents = fs.readFileSync(path, "utf8")
          }
        } catch (er) {
          /* ignore any errors */
        }

        return (sharedData.fileContentsCache[path] = contents)
      })

      // Support URLs relative to a directory, but be careful about a protocol prefix
      // in case we are in the browser (i.e. directories may start with "http://" or "file:///")
      function supportRelativeURL(file, url) {
        if (!file) return url
        var dir = path.dirname(file)
        var match = /^\w+:\/\/[^\/]*/.exec(dir)
        var protocol = match ? match[0] : ""
        var startPath = dir.slice(protocol.length)
        if (protocol && /^\/\w\:/.test(startPath)) {
          // handle file:///C:/ paths
          protocol += "/"
          return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, "/")
        }
        return protocol + path.resolve(dir.slice(protocol.length), url)
      }

      function retrieveSourceMapURL(source) {
        var fileData

        if (isInBrowser()) {
          try {
            var xhr = new XMLHttpRequest()
            xhr.open("GET", source, false)
            xhr.send(null)
            fileData = xhr.readyState === 4 ? xhr.responseText : null

            // Support providing a sourceMappingURL via the SourceMap header
            var sourceMapHeader =
              xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap")
            if (sourceMapHeader) {
              return sourceMapHeader
            }
          } catch (e) {}
        }

        // Get the URL of the source map
        fileData = retrieveFile(source)
        var re =
          /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/gm
        // Keep executing the search to find the *last* sourceMappingURL to avoid
        // picking up sourceMappingURLs from comments, strings, etc.
        var lastMatch, match
        while ((match = re.exec(fileData))) lastMatch = match
        if (!lastMatch) return null
        return lastMatch[1]
      }

      // Can be overridden by the retrieveSourceMap option to install. Takes a
      // generated source filename; returns a {map, optional url} object, or null if
      // there is no source map.  The map field may be either a string or the parsed
      // JSON object (ie, it must be a valid argument to the SourceMapConsumer
      // constructor).
      var retrieveSourceMap = handlerExec(
        sharedData.retrieveMapHandlers,
        sharedData.internalRetrieveMapHandlers
      )
      sharedData.internalRetrieveMapHandlers.push(function (source) {
        var sourceMappingURL = retrieveSourceMapURL(source)
        if (!sourceMappingURL) return null

        // Read the contents of the source map
        var sourceMapData
        if (reSourceMap.test(sourceMappingURL)) {
          // Support source map URL as a data url
          var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1)
          sourceMapData = Buffer.from(rawData, "base64").toString()
          sourceMappingURL = source
        } else {
          // Support source map URLs relative to the source URL
          sourceMappingURL = supportRelativeURL(source, sourceMappingURL)
          sourceMapData = retrieveFile(sourceMappingURL)
        }

        if (!sourceMapData) {
          return null
        }

        return {
          url: sourceMappingURL,
          map: sourceMapData
        }
      })

      function mapSourcePosition(position) {
        var sourceMap = sharedData.sourceMapCache[position.source]
        if (!sourceMap) {
          // Call the (overrideable) retrieveSourceMap function to get the source map.
          var urlAndMap = retrieveSourceMap(position.source)
          if (urlAndMap) {
            sourceMap = sharedData.sourceMapCache[position.source] = {
              url: urlAndMap.url,
              map: new SourceMapConsumer(urlAndMap.map)
            }

            // Load all sources stored inline with the source map into the file cache
            // to pretend like they are already loaded. They may not exist on disk.
            if (sourceMap.map.sourcesContent) {
              sourceMap.map.sources.forEach(function (source, i) {
                var contents = sourceMap.map.sourcesContent[i]
                if (contents) {
                  var url = supportRelativeURL(sourceMap.url, source)
                  sharedData.fileContentsCache[url] = contents
                }
              })
            }
          } else {
            sourceMap = sharedData.sourceMapCache[position.source] = {
              url: null,
              map: null
            }
          }
        }

        // Resolve the source URL relative to the URL of the source map
        if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === "function") {
          var originalPosition = sourceMap.map.originalPositionFor(position)

          // Only return the original position if a matching line was found. If no
          // matching line is found then we return position instead, which will cause
          // the stack trace to print the path and line for the compiled file. It is
          // better to give a precise location in the compiled file than a vague
          // location in the original file.
          if (originalPosition.source !== null) {
            originalPosition.source = supportRelativeURL(sourceMap.url, originalPosition.source)
            return originalPosition
          }
        }

        return position
      }

      // Parses code generated by FormatEvalOrigin(), a function inside V8:
      // https://code.google.com/p/v8/source/browse/trunk/src/messages.js
      function mapEvalOrigin(origin) {
        // Most eval() calls are in this format
        var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin)
        if (match) {
          var position = mapSourcePosition({
            source: match[2],
            line: +match[3],
            column: match[4] - 1
          })
          return (
            "eval at " +
            match[1] +
            " (" +
            position.source +
            ":" +
            position.line +
            ":" +
            (position.column + 1) +
            ")"
          )
        }

        // Parse nested eval() calls using recursion
        match = /^eval at ([^(]+) \((.+)\)$/.exec(origin)
        if (match) {
          return "eval at " + match[1] + " (" + mapEvalOrigin(match[2]) + ")"
        }

        // Make sure we still return useful information if we didn't find anything
        return origin
      }

      // This is copied almost verbatim from the V8 source code at
      // https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The
      // implementation of wrapCallSite() used to just forward to the actual source
      // code of CallSite.prototype.toString but unfortunately a new release of V8
      // did something to the prototype chain and broke the shim. The only fix I
      // could find was copy/paste.
      function CallSiteToString() {
        var fileName
        var fileLocation = ""
        if (this.isNative()) {
          fileLocation = "native"
        } else {
          fileName = this.getScriptNameOrSourceURL()
          if (!fileName && this.isEval()) {
            fileLocation = this.getEvalOrigin()
            fileLocation += ", " // Expecting source position to follow.
          }

          if (fileName) {
            fileLocation += fileName
          } else {
            // Source code does not originate from a file and is not native, but we
            // can still get the source position inside the source string, e.g. in
            // an eval string.
            fileLocation += "<anonymous>"
          }
          var lineNumber = this.getLineNumber()
          if (lineNumber != null) {
            fileLocation += ":" + lineNumber
            var columnNumber = this.getColumnNumber()
            if (columnNumber) {
              fileLocation += ":" + columnNumber
            }
          }
        }

        var line = ""
        var isAsync = this.isAsync ? this.isAsync() : false
        if (isAsync) {
          line += "async "
          var isPromiseAll = this.isPromiseAll ? this.isPromiseAll() : false
          var isPromiseAny = this.isPromiseAny ? this.isPromiseAny() : false
          if (isPromiseAny || isPromiseAll) {
            line += isPromiseAll ? "Promise.all (index " : "Promise.any (index "
            var promiseIndex = this.getPromiseIndex()
            line += promiseIndex + ")"
          }
        }
        var functionName = this.getFunctionName()
        var addSuffix = true
        var isConstructor = this.isConstructor()
        var isMethodCall = !(this.isToplevel() || isConstructor)
        if (isMethodCall) {
          var typeName = this.getTypeName()
          // Fixes shim to be backward compatable with Node v0 to v4
          if (typeName === "[object Object]") {
            typeName = "null"
          }
          var methodName = this.getMethodName()
          if (functionName) {
            if (typeName && functionName.indexOf(typeName) != 0) {
              line += typeName + "."
            }
            line += functionName
            if (
              methodName &&
              functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1
            ) {
              line += " [as " + methodName + "]"
            }
          } else {
            line += typeName + "." + (methodName || "<anonymous>")
          }
        } else if (isConstructor) {
          line += "new " + (functionName || "<anonymous>")
        } else if (functionName) {
          line += functionName
        } else {
          line += fileLocation
          addSuffix = false
        }
        if (addSuffix) {
          line += " (" + fileLocation + ")"
        }
        return line
      }

      function cloneCallSite(frame) {
        var object = {}
        Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function (name) {
          object[name] = /^(?:is|get)/.test(name)
            ? function () {
                return frame[name].call(frame)
              }
            : frame[name]
        })
        object.toString = CallSiteToString
        return object
      }

      function wrapCallSite(frame, state) {
        // provides interface backward compatibility
        if (state === undefined) {
          state = { nextPosition: null, curPosition: null }
        }
        if (frame.isNative()) {
          state.curPosition = null
          return frame
        }

        // Most call sites will return the source file from getFileName(), but code
        // passed to eval() ending in "//# sourceURL=..." will return the source file
        // from getScriptNameOrSourceURL() instead
        var source = frame.getFileName() || frame.getScriptNameOrSourceURL()
        if (source) {
          var line = frame.getLineNumber()
          var column = frame.getColumnNumber() - 1

          // Fix position in Node where some (internal) code is prepended.
          // See https://github.com/evanw/node-source-map-support/issues/36
          // Header removed in node at ^10.16 || >=11.11.0
          // v11 is not an LTS candidate, we can just test the one version with it.
          // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11
          var noHeader =
            /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/
          var headerLength = noHeader.test(process.version) ? 0 : 62
          if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
            column -= headerLength
          }

          var position = mapSourcePosition({
            source: source,
            line: line,
            column: column
          })
          state.curPosition = position
          frame = cloneCallSite(frame)
          var originalFunctionName = frame.getFunctionName
          frame.getFunctionName = function () {
            if (state.nextPosition == null) {
              return originalFunctionName()
            }
            return state.nextPosition.name || originalFunctionName()
          }
          frame.getFileName = function () {
            return position.source
          }
          frame.getLineNumber = function () {
            return position.line
          }
          frame.getColumnNumber = function () {
            return position.column + 1
          }
          frame.getScriptNameOrSourceURL = function () {
            return position.source
          }
          return frame
        }

        // Code called using eval() needs special handling
        var origin = frame.isEval() && frame.getEvalOrigin()
        if (origin) {
          origin = mapEvalOrigin(origin)
          frame = cloneCallSite(frame)
          frame.getEvalOrigin = function () {
            return origin
          }
          return frame
        }

        // If we get here then we were unable to change the source position
        return frame
      }

      var kIsNodeError = undefined
      try {
        // Get a deliberate ERR_INVALID_ARG_TYPE
        // TODO is there a better way to reliably get an instance of NodeError?
        path.resolve(123)
      } catch (e) {
        const symbols = Object.getOwnPropertySymbols(e)
        const symbol = symbols.find(function (s) {
          return s.toString().indexOf("kIsNodeError") >= 0
        })
        if (symbol) kIsNodeError = symbol
      }

      const ErrorPrototypeToString = (err) => Error.prototype.toString.call(err)

      /** @param {HookState} hookState */
      function createPrepareStackTrace(hookState) {
        return prepareStackTrace

        // This function is part of the V8 stack trace API, for more info see:
        // https://v8.dev/docs/stack-trace-api
        function prepareStackTrace(error, stack) {
          if (!hookState.enabled) return hookState.originalValue.apply(this, arguments)

          if (sharedData.emptyCacheBetweenOperations) {
            sharedData.fileContentsCache = {}
            sharedData.sourceMapCache = {}
          }

          // node gives its own errors special treatment.  Mimic that behavior
          // https://github.com/nodejs/node/blob/3cbaabc4622df1b4009b9d026a1a970bdbae6e89/lib/internal/errors.js#L118-L128
          // https://github.com/nodejs/node/pull/39182
          var errorString
          if (kIsNodeError) {
            if (kIsNodeError in error) {
              errorString = `${error.name} [${error.code}]: ${error.message}`
            } else {
              errorString = ErrorPrototypeToString(error)
            }
          } else {
            var name = error.name || "Error"
            var message = error.message || ""
            errorString = name + ": " + message
          }

          var state = { nextPosition: null, curPosition: null }
          var processedStack = []
          for (var i = stack.length - 1; i >= 0; i--) {
            processedStack.push("\n    at " + wrapCallSite(stack[i], state))
            state.nextPosition = state.curPosition
          }
          state.curPosition = state.nextPosition = null
          return errorString + processedStack.reverse().join("")
        }
      }

      // Generate position and snippet of original source with pointer
      function getErrorSource(error) {
        var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack)
        if (match) {
          var source = match[1]
          var line = +match[2]
          var column = +match[3]

          // Support the inline sourceContents inside the source map
          var contents = sharedData.fileContentsCache[source]

          // Support files on disk
          if (!contents && fs && fs.existsSync(source)) {
            try {
              contents = fs.readFileSync(source, "utf8")
            } catch (er) {
              contents = ""
            }
          }

          // Format the line from the original source code like node does
          if (contents) {
            var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1]
            if (code) {
              return source + ":" + line + "\n" + code + "\n" + new Array(column).join(" ") + "^"
            }
          }
        }
        return null
      }

      function printFatalErrorUponExit(error) {
        var source = getErrorSource(error)

        // Ensure error is printed synchronously and not truncated
        if (process.stderr._handle && process.stderr._handle.setBlocking) {
          process.stderr._handle.setBlocking(true)
        }

        if (source) {
          console.error(source)
        }

        // Matches node's behavior for colorized output
        console.error(
          util.inspect(error, {
            customInspect: false,
            colors: process.stderr.isTTY
          })
        )
      }

      function shimEmitUncaughtException() {
        const originalValue = process.emit
        var hook = (sharedData.processEmitHook = {
          enabled: true,
          originalValue,
          installedValue: undefined
        })
        var isTerminatingDueToFatalException = false
        var fatalException

        process.emit = sharedData.processEmitHook.installedValue = function (type) {
          const hadListeners = originalValue.apply(this, arguments)
          if (hook.enabled) {
            if (type === "uncaughtException" && !hadListeners) {
              isTerminatingDueToFatalException = true
              fatalException = arguments[1]
              process.exit(1)
            }
            if (type === "exit" && isTerminatingDueToFatalException) {
              printFatalErrorUponExit(fatalException)
            }
          }
          return hadListeners
        }
      }

      var originalRetrieveFileHandlers = sharedData.retrieveFileHandlers.slice(0)
      var originalRetrieveMapHandlers = sharedData.retrieveMapHandlers.slice(0)

      exports.wrapCallSite = wrapCallSite
      exports.getErrorSource = getErrorSource
      exports.mapSourcePosition = mapSourcePosition
      exports.retrieveSourceMap = retrieveSourceMap

      exports.install = function (options) {
        options = options || {}

        if (options.environment) {
          environment = options.environment
          if (["node", "browser", "auto"].indexOf(environment) === -1) {
            throw new Error(
              "environment " +
                environment +
                " was unknown. Available options are {auto, browser, node}"
            )
          }
        }

        // Use dynamicRequire to avoid including in browser bundles
        var Module = dynamicRequire(module, "module")

        // Redirect subsequent imports of "source-map-support"
        // to this package
        const { redirectConflictingLibrary = true, onConflictingLibraryRedirect } = options
        if (redirectConflictingLibrary) {
          if (!sharedData.moduleResolveFilenameHook) {
            const originalValue = Module._resolveFilename
            const moduleResolveFilenameHook = (sharedData.moduleResolveFilenameHook = {
              enabled: true,
              originalValue,
              installedValue: undefined
            })
            Module._resolveFilename = sharedData.moduleResolveFilenameHook.installedValue =
              function (request, parent, isMain, options) {
                if (moduleResolveFilenameHook.enabled) {
                  // Match all source-map-support entrypoints: source-map-support, source-map-support/register
                  let requestRedirect
                  if (request === "source-map-support") {
                    requestRedirect = "./"
                  } else if (request === "source-map-support/register") {
                    requestRedirect = "./register"
                  }

                  if (requestRedirect !== undefined) {
                    const newRequest = __nccwpck_require__.ab + "register.js"
                    for (const cb of sharedData.onConflictingLibraryRedirectArr) {
                      cb(request, parent, isMain, options, __nccwpck_require__.ab + "register.js")
                    }
                    request = __nccwpck_require__.ab + "register.js"
                  }
                }

                return originalValue.call(
                  this,
                  __nccwpck_require__.ab + "register.js",
                  parent,
                  isMain,
                  options
                )
              }
          }
          if (onConflictingLibraryRedirect) {
            sharedData.onConflictingLibraryRedirectArr.push(onConflictingLibraryRedirect)
          }
        }

        // Allow sources to be found by methods other than reading the files
        // directly from disk.
        if (options.retrieveFile) {
          if (options.overrideRetrieveFile) {
            sharedData.retrieveFileHandlers.length = 0
          }

          sharedData.retrieveFileHandlers.unshift(options.retrieveFile)
        }

        // Allow source maps to be found by methods other than reading the files
        // directly from disk.
        if (options.retrieveSourceMap) {
          if (options.overrideRetrieveSourceMap) {
            sharedData.retrieveMapHandlers.length = 0
          }

          sharedData.retrieveMapHandlers.unshift(options.retrieveSourceMap)
        }

        // Support runtime transpilers that include inline source maps
        if (options.hookRequire && !isInBrowser()) {
          var $compile = Module.prototype._compile

          if (!$compile.__sourceMapSupport) {
            Module.prototype._compile = function (content, filename) {
              sharedData.fileContentsCache[filename] = content
              sharedData.sourceMapCache[filename] = undefined
              return $compile.call(this, content, filename)
            }

            Module.prototype._compile.__sourceMapSupport = true
          }
        }

        // Configure options
        if (!sharedData.emptyCacheBetweenOperations) {
          sharedData.emptyCacheBetweenOperations =
            "emptyCacheBetweenOperations" in options ? options.emptyCacheBetweenOperations : false
        }

        // Install the error reformatter
        if (!sharedData.errorPrepareStackTraceHook) {
          const originalValue = Error.prepareStackTrace
          sharedData.errorPrepareStackTraceHook = {
            enabled: true,
            originalValue,
            installedValue: undefined
          }
          Error.prepareStackTrace = sharedData.errorPrepareStackTraceHook.installedValue =
            createPrepareStackTrace(sharedData.errorPrepareStackTraceHook)
        }

        if (!sharedData.processEmitHook) {
          var installHandler =
            "handleUncaughtExceptions" in options ? options.handleUncaughtExceptions : true

          // Do not override 'uncaughtException' with our own handler in Node.js
          // Worker threads. Workers pass the error to the main thread as an event,
          // rather than printing something to stderr and exiting.
          try {
            // We need to use `dynamicRequire` because `require` on it's own will be optimized by WebPack/Browserify.
            var worker_threads = dynamicRequire(module, "worker_threads")
            if (worker_threads.isMainThread === false) {
              installHandler = false
            }
          } catch (e) {}

          // Provide the option to not install the uncaught exception handler. This is
          // to support other uncaught exception handlers (in test frameworks, for
          // example). If this handler is not installed and there are no other uncaught
          // exception handlers, uncaught exceptions will be caught by node's built-in
          // exception handler and the process will still be terminated. However, the
          // generated JavaScript code will be shown above the stack trace instead of
          // the original source code.
          if (installHandler && hasGlobalProcessEventEmitter()) {
            shimEmitUncaughtException()
          }
        }
      }

      exports.uninstall = function () {
        if (sharedData.processEmitHook) {
          // Disable behavior
          sharedData.processEmitHook.enabled = false
          // If possible, remove our hook function.  May not be possible if subsequent third-party hooks have wrapped around us.
          if (process.emit === sharedData.processEmitHook.installedValue) {
            process.emit = sharedData.processEmitHook.originalValue
          }
          sharedData.processEmitHook = undefined
        }
        if (sharedData.errorPrepareStackTraceHook) {
          // Disable behavior
          sharedData.errorPrepareStackTraceHook.enabled = false
          // If possible or necessary, remove our hook function.
          // In vanilla environments, prepareStackTrace is `undefined`.
          // We cannot delegate to `undefined` the way we can to a function w/`.apply()`; our only option is to remove the function.
          // If we are the *first* hook installed, and another was installed on top of us, we have no choice but to remove both.
          if (
            Error.prepareStackTrace === sharedData.errorPrepareStackTraceHook.installedValue ||
            typeof sharedData.errorPrepareStackTraceHook.originalValue !== "function"
          ) {
            Error.prepareStackTrace = sharedData.errorPrepareStackTraceHook.originalValue
          }
          sharedData.errorPrepareStackTraceHook = undefined
        }
        if (sharedData.moduleResolveFilenameHook) {
          // Disable behavior
          sharedData.moduleResolveFilenameHook.enabled = false
          // If possible, remove our hook function.  May not be possible if subsequent third-party hooks have wrapped around us.
          var Module = dynamicRequire(module, "module")
          if (Module._resolveFilename === sharedData.moduleResolveFilenameHook.installedValue) {
            Module._resolveFilename = sharedData.moduleResolveFilenameHook.originalValue
          }
          sharedData.moduleResolveFilenameHook = undefined
        }
        sharedData.onConflictingLibraryRedirectArr.length = 0
      }

      exports.resetRetrieveHandlers = function () {
        sharedData.retrieveFileHandlers.length = 0
        sharedData.retrieveMapHandlers.length = 0
      }

      /***/
    },

    /***/ 40334: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      const REGEX_IS_INSTALLATION_LEGACY = /^v1\./
      const REGEX_IS_INSTALLATION = /^ghs_/
      const REGEX_IS_USER_TO_SERVER = /^ghu_/
      async function auth(token) {
        const isApp = token.split(/\./).length === 3
        const isInstallation =
          REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token)
        const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token)
        const tokenType = isApp
          ? "app"
          : isInstallation
          ? "installation"
          : isUserToServer
          ? "user-to-server"
          : "oauth"
        return {
          type: "token",
          token: token,
          tokenType
        }
      }

      /**
       * Prefix token for usage in the Authorization header
       *
       * @param token OAuth token or JSON Web Token
       */
      function withAuthorizationPrefix(token) {
        if (token.split(/\./).length === 3) {
          return `bearer ${token}`
        }

        return `token ${token}`
      }

      async function hook(token, request, route, parameters) {
        const endpoint = request.endpoint.merge(route, parameters)
        endpoint.headers.authorization = withAuthorizationPrefix(token)
        return request(endpoint)
      }

      const createTokenAuth = function createTokenAuth(token) {
        if (!token) {
          throw new Error("[@octokit/auth-token] No token passed to createTokenAuth")
        }

        if (typeof token !== "string") {
          throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string")
        }

        token = token.replace(/^(token|bearer) +/i, "")
        return Object.assign(auth.bind(null, token), {
          hook: hook.bind(null, token)
        })
      }

      exports.createTokenAuth = createTokenAuth
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 76762: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      var universalUserAgent = __nccwpck_require__(45030)
      var beforeAfterHook = __nccwpck_require__(83682)
      var request = __nccwpck_require__(36234)
      var graphql = __nccwpck_require__(88467)
      var authToken = __nccwpck_require__(40334)

      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {}
        var target = {}
        var sourceKeys = Object.keys(source)
        var key, i

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i]
          if (excluded.indexOf(key) >= 0) continue
          target[key] = source[key]
        }

        return target
      }

      function _objectWithoutProperties(source, excluded) {
        if (source == null) return {}

        var target = _objectWithoutPropertiesLoose(source, excluded)

        var key, i

        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source)

          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
          }
        }

        return target
      }

      const VERSION = "3.5.1"

      const _excluded = ["authStrategy"]
      class Octokit {
        constructor(options = {}) {
          const hook = new beforeAfterHook.Collection()
          const requestDefaults = {
            baseUrl: request.request.endpoint.DEFAULTS.baseUrl,
            headers: {},
            request: Object.assign({}, options.request, {
              // @ts-ignore internal usage only, no need to type
              hook: hook.bind(null, "request")
            }),
            mediaType: {
              previews: [],
              format: ""
            }
          } // prepend default user agent with `options.userAgent` if set

          requestDefaults.headers["user-agent"] = [
            options.userAgent,
            `octokit-core.js/${VERSION} ${universalUserAgent.getUserAgent()}`
          ]
            .filter(Boolean)
            .join(" ")

          if (options.baseUrl) {
            requestDefaults.baseUrl = options.baseUrl
          }

          if (options.previews) {
            requestDefaults.mediaType.previews = options.previews
          }

          if (options.timeZone) {
            requestDefaults.headers["time-zone"] = options.timeZone
          }

          this.request = request.request.defaults(requestDefaults)
          this.graphql = graphql.withCustomRequest(this.request).defaults(requestDefaults)
          this.log = Object.assign(
            {
              debug: () => {},
              info: () => {},
              warn: console.warn.bind(console),
              error: console.error.bind(console)
            },
            options.log
          )
          this.hook = hook // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance
          //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.
          // (2) If only `options.auth` is set, use the default token authentication strategy.
          // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.
          // TODO: type `options.auth` based on `options.authStrategy`.

          if (!options.authStrategy) {
            if (!options.auth) {
              // (1)
              this.auth = async () => ({
                type: "unauthenticated"
              })
            } else {
              // (2)
              const auth = authToken.createTokenAuth(options.auth) // @ts-ignore  ¯\_(ツ)_/¯

              hook.wrap("request", auth.hook)
              this.auth = auth
            }
          } else {
            const { authStrategy } = options,
              otherOptions = _objectWithoutProperties(options, _excluded)

            const auth = authStrategy(
              Object.assign(
                {
                  request: this.request,
                  log: this.log,
                  // we pass the current octokit instance as well as its constructor options
                  // to allow for authentication strategies that return a new octokit instance
                  // that shares the same internal state as the current one. The original
                  // requirement for this was the "event-octokit" authentication strategy
                  // of https://github.com/probot/octokit-auth-probot.
                  octokit: this,
                  octokitOptions: otherOptions
                },
                options.auth
              )
            ) // @ts-ignore  ¯\_(ツ)_/¯

            hook.wrap("request", auth.hook)
            this.auth = auth
          } // apply plugins
          // https://stackoverflow.com/a/16345172

          const classConstructor = this.constructor
          classConstructor.plugins.forEach((plugin) => {
            Object.assign(this, plugin(this, options))
          })
        }

        static defaults(defaults) {
          const OctokitWithDefaults = class extends this {
            constructor(...args) {
              const options = args[0] || {}

              if (typeof defaults === "function") {
                super(defaults(options))
                return
              }

              super(
                Object.assign(
                  {},
                  defaults,
                  options,
                  options.userAgent && defaults.userAgent
                    ? {
                        userAgent: `${options.userAgent} ${defaults.userAgent}`
                      }
                    : null
                )
              )
            }
          }
          return OctokitWithDefaults
        }
        /**
         * Attach a plugin (or many) to your Octokit instance.
         *
         * @example
         * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
         */

        static plugin(...newPlugins) {
          var _a

          const currentPlugins = this.plugins
          const NewOctokit =
            ((_a = class extends this {}),
            (_a.plugins = currentPlugins.concat(
              newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
            )),
            _a)
          return NewOctokit
        }
      }
      Octokit.VERSION = VERSION
      Octokit.plugins = []

      exports.Octokit = Octokit
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 59440: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      var isPlainObject = __nccwpck_require__(63287)
      var universalUserAgent = __nccwpck_require__(45030)

      function lowercaseKeys(object) {
        if (!object) {
          return {}
        }

        return Object.keys(object).reduce((newObj, key) => {
          newObj[key.toLowerCase()] = object[key]
          return newObj
        }, {})
      }

      function mergeDeep(defaults, options) {
        const result = Object.assign({}, defaults)
        Object.keys(options).forEach((key) => {
          if (isPlainObject.isPlainObject(options[key])) {
            if (!(key in defaults))
              Object.assign(result, {
                [key]: options[key]
              })
            else result[key] = mergeDeep(defaults[key], options[key])
          } else {
            Object.assign(result, {
              [key]: options[key]
            })
          }
        })
        return result
      }

      function removeUndefinedProperties(obj) {
        for (const key in obj) {
          if (obj[key] === undefined) {
            delete obj[key]
          }
        }

        return obj
      }

      function merge(defaults, route, options) {
        if (typeof route === "string") {
          let [method, url] = route.split(" ")
          options = Object.assign(
            url
              ? {
                  method,
                  url
                }
              : {
                  url: method
                },
            options
          )
        } else {
          options = Object.assign({}, route)
        } // lowercase header names before merging with defaults to avoid duplicates

        options.headers = lowercaseKeys(options.headers) // remove properties with undefined values before merging

        removeUndefinedProperties(options)
        removeUndefinedProperties(options.headers)
        const mergedOptions = mergeDeep(defaults || {}, options) // mediaType.previews arrays are merged, instead of overwritten

        if (defaults && defaults.mediaType.previews.length) {
          mergedOptions.mediaType.previews = defaults.mediaType.previews
            .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))
            .concat(mergedOptions.mediaType.previews)
        }

        mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) =>
          preview.replace(/-preview/, "")
        )
        return mergedOptions
      }

      function addQueryParameters(url, parameters) {
        const separator = /\?/.test(url) ? "&" : "?"
        const names = Object.keys(parameters)

        if (names.length === 0) {
          return url
        }

        return (
          url +
          separator +
          names
            .map((name) => {
              if (name === "q") {
                return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+")
              }

              return `${name}=${encodeURIComponent(parameters[name])}`
            })
            .join("&")
        )
      }

      const urlVariableRegex = /\{[^}]+\}/g

      function removeNonChars(variableName) {
        return variableName.replace(/^\W+|\W+$/g, "").split(/,/)
      }

      function extractUrlVariableNames(url) {
        const matches = url.match(urlVariableRegex)

        if (!matches) {
          return []
        }

        return matches.map(removeNonChars).reduce((a, b) => a.concat(b), [])
      }

      function omit(object, keysToOmit) {
        return Object.keys(object)
          .filter((option) => !keysToOmit.includes(option))
          .reduce((obj, key) => {
            obj[key] = object[key]
            return obj
          }, {})
      }

      // Based on https://github.com/bramstein/url-template, licensed under BSD
      // TODO: create separate package.
      //
      // Copyright (c) 2012-2014, Bram Stein
      // All rights reserved.
      // Redistribution and use in source and binary forms, with or without
      // modification, are permitted provided that the following conditions
      // are met:
      //  1. Redistributions of source code must retain the above copyright
      //     notice, this list of conditions and the following disclaimer.
      //  2. Redistributions in binary form must reproduce the above copyright
      //     notice, this list of conditions and the following disclaimer in the
      //     documentation and/or other materials provided with the distribution.
      //  3. The name of the author may not be used to endorse or promote products
      //     derived from this software without specific prior written permission.
      // THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
      // WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      // MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
      // EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
      // INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      // BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
      // OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      // NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      // EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

      /* istanbul ignore file */
      function encodeReserved(str) {
        return str
          .split(/(%[0-9A-Fa-f]{2})/g)
          .map(function (part) {
            if (!/%[0-9A-Fa-f]/.test(part)) {
              part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]")
            }

            return part
          })
          .join("")
      }

      function encodeUnreserved(str) {
        return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
          return "%" + c.charCodeAt(0).toString(16).toUpperCase()
        })
      }

      function encodeValue(operator, value, key) {
        value =
          operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value)

        if (key) {
          return encodeUnreserved(key) + "=" + value
        } else {
          return value
        }
      }

      function isDefined(value) {
        return value !== undefined && value !== null
      }

      function isKeyOperator(operator) {
        return operator === ";" || operator === "&" || operator === "?"
      }

      function getValues(context, operator, key, modifier) {
        var value = context[key],
          result = []

        if (isDefined(value) && value !== "") {
          if (
            typeof value === "string" ||
            typeof value === "number" ||
            typeof value === "boolean"
          ) {
            value = value.toString()

            if (modifier && modifier !== "*") {
              value = value.substring(0, parseInt(modifier, 10))
            }

            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""))
          } else {
            if (modifier === "*") {
              if (Array.isArray(value)) {
                value.filter(isDefined).forEach(function (value) {
                  result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""))
                })
              } else {
                Object.keys(value).forEach(function (k) {
                  if (isDefined(value[k])) {
                    result.push(encodeValue(operator, value[k], k))
                  }
                })
              }
            } else {
              const tmp = []

              if (Array.isArray(value)) {
                value.filter(isDefined).forEach(function (value) {
                  tmp.push(encodeValue(operator, value))
                })
              } else {
                Object.keys(value).forEach(function (k) {
                  if (isDefined(value[k])) {
                    tmp.push(encodeUnreserved(k))
                    tmp.push(encodeValue(operator, value[k].toString()))
                  }
                })
              }

              if (isKeyOperator(operator)) {
                result.push(encodeUnreserved(key) + "=" + tmp.join(","))
              } else if (tmp.length !== 0) {
                result.push(tmp.join(","))
              }
            }
          }
        } else {
          if (operator === ";") {
            if (isDefined(value)) {
              result.push(encodeUnreserved(key))
            }
          } else if (value === "" && (operator === "&" || operator === "?")) {
            result.push(encodeUnreserved(key) + "=")
          } else if (value === "") {
            result.push("")
          }
        }

        return result
      }

      function parseUrl(template) {
        return {
          expand: expand.bind(null, template)
        }
      }

      function expand(template, context) {
        var operators = ["+", "#", ".", "/", ";", "?", "&"]
        return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
          if (expression) {
            let operator = ""
            const values = []

            if (operators.indexOf(expression.charAt(0)) !== -1) {
              operator = expression.charAt(0)
              expression = expression.substr(1)
            }

            expression.split(/,/g).forEach(function (variable) {
              var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable)
              values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]))
            })

            if (operator && operator !== "+") {
              var separator = ","

              if (operator === "?") {
                separator = "&"
              } else if (operator !== "#") {
                separator = operator
              }

              return (values.length !== 0 ? operator : "") + values.join(separator)
            } else {
              return values.join(",")
            }
          } else {
            return encodeReserved(literal)
          }
        })
      }

      function parse(options) {
        // https://fetch.spec.whatwg.org/#methods
        let method = options.method.toUpperCase() // replace :varname with {varname} to make it RFC 6570 compatible

        let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}")
        let headers = Object.assign({}, options.headers)
        let body
        let parameters = omit(options, [
          "method",
          "baseUrl",
          "url",
          "headers",
          "request",
          "mediaType"
        ]) // extract variable names from URL to calculate remaining variables later

        const urlVariableNames = extractUrlVariableNames(url)
        url = parseUrl(url).expand(parameters)

        if (!/^http/.test(url)) {
          url = options.baseUrl + url
        }

        const omittedParameters = Object.keys(options)
          .filter((option) => urlVariableNames.includes(option))
          .concat("baseUrl")
        const remainingParameters = omit(parameters, omittedParameters)
        const isBinaryRequest = /application\/octet-stream/i.test(headers.accept)

        if (!isBinaryRequest) {
          if (options.mediaType.format) {
            // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw
            headers.accept = headers.accept
              .split(/,/)
              .map((preview) =>
                preview.replace(
                  /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
                  `application/vnd$1$2.${options.mediaType.format}`
                )
              )
              .join(",")
          }

          if (options.mediaType.previews.length) {
            const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || []
            headers.accept = previewsFromAcceptHeader
              .concat(options.mediaType.previews)
              .map((preview) => {
                const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json"
                return `application/vnd.github.${preview}-preview${format}`
              })
              .join(",")
          }
        } // for GET/HEAD requests, set URL query parameters from remaining parameters
        // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters

        if (["GET", "HEAD"].includes(method)) {
          url = addQueryParameters(url, remainingParameters)
        } else {
          if ("data" in remainingParameters) {
            body = remainingParameters.data
          } else {
            if (Object.keys(remainingParameters).length) {
              body = remainingParameters
            } else {
              headers["content-length"] = 0
            }
          }
        } // default content-type for JSON if body is set

        if (!headers["content-type"] && typeof body !== "undefined") {
          headers["content-type"] = "application/json; charset=utf-8"
        } // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.
        // fetch does not allow to set `content-length` header, but we can set body to an empty string

        if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
          body = ""
        } // Only return body/request keys if present

        return Object.assign(
          {
            method,
            url,
            headers
          },
          typeof body !== "undefined"
            ? {
                body
              }
            : null,
          options.request
            ? {
                request: options.request
              }
            : null
        )
      }

      function endpointWithDefaults(defaults, route, options) {
        return parse(merge(defaults, route, options))
      }

      function withDefaults(oldDefaults, newDefaults) {
        const DEFAULTS = merge(oldDefaults, newDefaults)
        const endpoint = endpointWithDefaults.bind(null, DEFAULTS)
        return Object.assign(endpoint, {
          DEFAULTS,
          defaults: withDefaults.bind(null, DEFAULTS),
          merge: merge.bind(null, DEFAULTS),
          parse
        })
      }

      const VERSION = "6.0.12"

      const userAgent = `octokit-endpoint.js/${VERSION} ${universalUserAgent.getUserAgent()}` // DEFAULTS has all properties set that EndpointOptions has, except url.
      // So we use RequestParameters and add method as additional required property.

      const DEFAULTS = {
        method: "GET",
        baseUrl: "https://api.github.com",
        headers: {
          accept: "application/vnd.github.v3+json",
          "user-agent": userAgent
        },
        mediaType: {
          format: "",
          previews: []
        }
      }

      const endpoint = withDefaults(null, DEFAULTS)

      exports.endpoint = endpoint
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 88467: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      var request = __nccwpck_require__(36234)
      var universalUserAgent = __nccwpck_require__(45030)

      const VERSION = "4.8.0"

      function _buildMessageForResponseErrors(data) {
        return (
          `Request failed due to following response errors:\n` +
          data.errors.map((e) => ` - ${e.message}`).join("\n")
        )
      }

      class GraphqlResponseError extends Error {
        constructor(request, headers, response) {
          super(_buildMessageForResponseErrors(response))
          this.request = request
          this.headers = headers
          this.response = response
          this.name = "GraphqlResponseError" // Expose the errors and response data in their shorthand properties.

          this.errors = response.errors
          this.data = response.data // Maintains proper stack trace (only available on V8)

          /* istanbul ignore next */

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor)
          }
        }
      }

      const NON_VARIABLE_OPTIONS = [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "query",
        "mediaType"
      ]
      const FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"]
      const GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/
      function graphql(request, query, options) {
        if (options) {
          if (typeof query === "string" && "query" in options) {
            return Promise.reject(
              new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
            )
          }

          for (const key in options) {
            if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue
            return Promise.reject(
              new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`)
            )
          }
        }

        const parsedOptions =
          typeof query === "string"
            ? Object.assign(
                {
                  query
                },
                options
              )
            : query
        const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
          if (NON_VARIABLE_OPTIONS.includes(key)) {
            result[key] = parsedOptions[key]
            return result
          }

          if (!result.variables) {
            result.variables = {}
          }

          result.variables[key] = parsedOptions[key]
          return result
        }, {}) // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix
        // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451

        const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl

        if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
          requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql")
        }

        return request(requestOptions).then((response) => {
          if (response.data.errors) {
            const headers = {}

            for (const key of Object.keys(response.headers)) {
              headers[key] = response.headers[key]
            }

            throw new GraphqlResponseError(requestOptions, headers, response.data)
          }

          return response.data.data
        })
      }

      function withDefaults(request$1, newDefaults) {
        const newRequest = request$1.defaults(newDefaults)

        const newApi = (query, options) => {
          return graphql(newRequest, query, options)
        }

        return Object.assign(newApi, {
          defaults: withDefaults.bind(null, newRequest),
          endpoint: request.request.endpoint
        })
      }

      const graphql$1 = withDefaults(request.request, {
        headers: {
          "user-agent": `octokit-graphql.js/${VERSION} ${universalUserAgent.getUserAgent()}`
        },
        method: "POST",
        url: "/graphql"
      })
      function withCustomRequest(customRequest) {
        return withDefaults(customRequest, {
          method: "POST",
          url: "/graphql"
        })
      }

      exports.GraphqlResponseError = GraphqlResponseError
      exports.graphql = graphql$1
      exports.withCustomRequest = withCustomRequest
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 64193: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      const VERSION = "2.17.0"

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object)

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object)

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable
            })
          }

          keys.push.apply(keys, symbols)
        }

        return keys
      }

      function _objectSpread2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {}

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key])
            })
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))
            })
          }
        }

        return target
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }

        return obj
      }

      /**
       * Some “list” response that can be paginated have a different response structure
       *
       * They have a `total_count` key in the response (search also has `incomplete_results`,
       * /installation/repositories also has `repository_selection`), as well as a key with
       * the list of the items which name varies from endpoint to endpoint.
       *
       * Octokit normalizes these responses so that paginated results are always returned following
       * the same structure. One challenge is that if the list response has only one page, no Link
       * header is provided, so this header alone is not sufficient to check wether a response is
       * paginated or not.
       *
       * We check if a "total_count" key is present in the response data, but also make sure that
       * a "url" property is not, as the "Get the combined status for a specific ref" endpoint would
       * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref
       */
      function normalizePaginatedListResponse(response) {
        // endpoints can respond with 204 if repository is empty
        if (!response.data) {
          return _objectSpread2(
            _objectSpread2({}, response),
            {},
            {
              data: []
            }
          )
        }

        const responseNeedsNormalization =
          "total_count" in response.data && !("url" in response.data)
        if (!responseNeedsNormalization) return response // keep the additional properties intact as there is currently no other way
        // to retrieve the same information.

        const incompleteResults = response.data.incomplete_results
        const repositorySelection = response.data.repository_selection
        const totalCount = response.data.total_count
        delete response.data.incomplete_results
        delete response.data.repository_selection
        delete response.data.total_count
        const namespaceKey = Object.keys(response.data)[0]
        const data = response.data[namespaceKey]
        response.data = data

        if (typeof incompleteResults !== "undefined") {
          response.data.incomplete_results = incompleteResults
        }

        if (typeof repositorySelection !== "undefined") {
          response.data.repository_selection = repositorySelection
        }

        response.data.total_count = totalCount
        return response
      }

      function iterator(octokit, route, parameters) {
        const options =
          typeof route === "function"
            ? route.endpoint(parameters)
            : octokit.request.endpoint(route, parameters)
        const requestMethod = typeof route === "function" ? route : octokit.request
        const method = options.method
        const headers = options.headers
        let url = options.url
        return {
          [Symbol.asyncIterator]: () => ({
            async next() {
              if (!url)
                return {
                  done: true
                }

              try {
                const response = await requestMethod({
                  method,
                  url,
                  headers
                })
                const normalizedResponse = normalizePaginatedListResponse(response) // `response.headers.link` format:
                // '<https://api.github.com/users/aseemk/followers?page=2>; rel="next", <https://api.github.com/users/aseemk/followers?page=2>; rel="last"'
                // sets `url` to undefined if "next" URL is not present or `link` header is not set

                url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) ||
                  [])[1]
                return {
                  value: normalizedResponse
                }
              } catch (error) {
                if (error.status !== 409) throw error
                url = ""
                return {
                  value: {
                    status: 200,
                    headers: {},
                    data: []
                  }
                }
              }
            }
          })
        }
      }

      function paginate(octokit, route, parameters, mapFn) {
        if (typeof parameters === "function") {
          mapFn = parameters
          parameters = undefined
        }

        return gather(
          octokit,
          [],
          iterator(octokit, route, parameters)[Symbol.asyncIterator](),
          mapFn
        )
      }

      function gather(octokit, results, iterator, mapFn) {
        return iterator.next().then((result) => {
          if (result.done) {
            return results
          }

          let earlyExit = false

          function done() {
            earlyExit = true
          }

          results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data)

          if (earlyExit) {
            return results
          }

          return gather(octokit, results, iterator, mapFn)
        })
      }

      const composePaginateRest = Object.assign(paginate, {
        iterator
      })

      const paginatingEndpoints = [
        "GET /app/hook/deliveries",
        "GET /app/installations",
        "GET /applications/grants",
        "GET /authorizations",
        "GET /enterprises/{enterprise}/actions/permissions/organizations",
        "GET /enterprises/{enterprise}/actions/runner-groups",
        "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
        "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
        "GET /enterprises/{enterprise}/actions/runners",
        "GET /enterprises/{enterprise}/actions/runners/downloads",
        "GET /events",
        "GET /gists",
        "GET /gists/public",
        "GET /gists/starred",
        "GET /gists/{gist_id}/comments",
        "GET /gists/{gist_id}/commits",
        "GET /gists/{gist_id}/forks",
        "GET /installation/repositories",
        "GET /issues",
        "GET /marketplace_listing/plans",
        "GET /marketplace_listing/plans/{plan_id}/accounts",
        "GET /marketplace_listing/stubbed/plans",
        "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
        "GET /networks/{owner}/{repo}/events",
        "GET /notifications",
        "GET /organizations",
        "GET /orgs/{org}/actions/permissions/repositories",
        "GET /orgs/{org}/actions/runner-groups",
        "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
        "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
        "GET /orgs/{org}/actions/runners",
        "GET /orgs/{org}/actions/runners/downloads",
        "GET /orgs/{org}/actions/secrets",
        "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
        "GET /orgs/{org}/blocks",
        "GET /orgs/{org}/credential-authorizations",
        "GET /orgs/{org}/events",
        "GET /orgs/{org}/failed_invitations",
        "GET /orgs/{org}/hooks",
        "GET /orgs/{org}/hooks/{hook_id}/deliveries",
        "GET /orgs/{org}/installations",
        "GET /orgs/{org}/invitations",
        "GET /orgs/{org}/invitations/{invitation_id}/teams",
        "GET /orgs/{org}/issues",
        "GET /orgs/{org}/members",
        "GET /orgs/{org}/migrations",
        "GET /orgs/{org}/migrations/{migration_id}/repositories",
        "GET /orgs/{org}/outside_collaborators",
        "GET /orgs/{org}/packages",
        "GET /orgs/{org}/projects",
        "GET /orgs/{org}/public_members",
        "GET /orgs/{org}/repos",
        "GET /orgs/{org}/secret-scanning/alerts",
        "GET /orgs/{org}/team-sync/groups",
        "GET /orgs/{org}/teams",
        "GET /orgs/{org}/teams/{team_slug}/discussions",
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "GET /orgs/{org}/teams/{team_slug}/invitations",
        "GET /orgs/{org}/teams/{team_slug}/members",
        "GET /orgs/{org}/teams/{team_slug}/projects",
        "GET /orgs/{org}/teams/{team_slug}/repos",
        "GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
        "GET /orgs/{org}/teams/{team_slug}/teams",
        "GET /projects/columns/{column_id}/cards",
        "GET /projects/{project_id}/collaborators",
        "GET /projects/{project_id}/columns",
        "GET /repos/{owner}/{repo}/actions/artifacts",
        "GET /repos/{owner}/{repo}/actions/runners",
        "GET /repos/{owner}/{repo}/actions/runners/downloads",
        "GET /repos/{owner}/{repo}/actions/runs",
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        "GET /repos/{owner}/{repo}/actions/secrets",
        "GET /repos/{owner}/{repo}/actions/workflows",
        "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        "GET /repos/{owner}/{repo}/assignees",
        "GET /repos/{owner}/{repo}/autolinks",
        "GET /repos/{owner}/{repo}/branches",
        "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
        "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
        "GET /repos/{owner}/{repo}/code-scanning/alerts",
        "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        "GET /repos/{owner}/{repo}/code-scanning/analyses",
        "GET /repos/{owner}/{repo}/collaborators",
        "GET /repos/{owner}/{repo}/comments",
        "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "GET /repos/{owner}/{repo}/commits",
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
        "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
        "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
        "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
        "GET /repos/{owner}/{repo}/contributors",
        "GET /repos/{owner}/{repo}/deployments",
        "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "GET /repos/{owner}/{repo}/events",
        "GET /repos/{owner}/{repo}/forks",
        "GET /repos/{owner}/{repo}/git/matching-refs/{ref}",
        "GET /repos/{owner}/{repo}/hooks",
        "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
        "GET /repos/{owner}/{repo}/invitations",
        "GET /repos/{owner}/{repo}/issues",
        "GET /repos/{owner}/{repo}/issues/comments",
        "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "GET /repos/{owner}/{repo}/issues/events",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
        "GET /repos/{owner}/{repo}/keys",
        "GET /repos/{owner}/{repo}/labels",
        "GET /repos/{owner}/{repo}/milestones",
        "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        "GET /repos/{owner}/{repo}/notifications",
        "GET /repos/{owner}/{repo}/pages/builds",
        "GET /repos/{owner}/{repo}/projects",
        "GET /repos/{owner}/{repo}/pulls",
        "GET /repos/{owner}/{repo}/pulls/comments",
        "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        "GET /repos/{owner}/{repo}/releases",
        "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
        "GET /repos/{owner}/{repo}/secret-scanning/alerts",
        "GET /repos/{owner}/{repo}/stargazers",
        "GET /repos/{owner}/{repo}/subscribers",
        "GET /repos/{owner}/{repo}/tags",
        "GET /repos/{owner}/{repo}/teams",
        "GET /repositories",
        "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
        "GET /scim/v2/enterprises/{enterprise}/Groups",
        "GET /scim/v2/enterprises/{enterprise}/Users",
        "GET /scim/v2/organizations/{org}/Users",
        "GET /search/code",
        "GET /search/commits",
        "GET /search/issues",
        "GET /search/labels",
        "GET /search/repositories",
        "GET /search/topics",
        "GET /search/users",
        "GET /teams/{team_id}/discussions",
        "GET /teams/{team_id}/discussions/{discussion_number}/comments",
        "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
        "GET /teams/{team_id}/invitations",
        "GET /teams/{team_id}/members",
        "GET /teams/{team_id}/projects",
        "GET /teams/{team_id}/repos",
        "GET /teams/{team_id}/team-sync/group-mappings",
        "GET /teams/{team_id}/teams",
        "GET /user/blocks",
        "GET /user/emails",
        "GET /user/followers",
        "GET /user/following",
        "GET /user/gpg_keys",
        "GET /user/installations",
        "GET /user/installations/{installation_id}/repositories",
        "GET /user/issues",
        "GET /user/keys",
        "GET /user/marketplace_purchases",
        "GET /user/marketplace_purchases/stubbed",
        "GET /user/memberships/orgs",
        "GET /user/migrations",
        "GET /user/migrations/{migration_id}/repositories",
        "GET /user/orgs",
        "GET /user/packages",
        "GET /user/public_emails",
        "GET /user/repos",
        "GET /user/repository_invitations",
        "GET /user/starred",
        "GET /user/subscriptions",
        "GET /user/teams",
        "GET /users",
        "GET /users/{username}/events",
        "GET /users/{username}/events/orgs/{org}",
        "GET /users/{username}/events/public",
        "GET /users/{username}/followers",
        "GET /users/{username}/following",
        "GET /users/{username}/gists",
        "GET /users/{username}/gpg_keys",
        "GET /users/{username}/keys",
        "GET /users/{username}/orgs",
        "GET /users/{username}/packages",
        "GET /users/{username}/projects",
        "GET /users/{username}/received_events",
        "GET /users/{username}/received_events/public",
        "GET /users/{username}/repos",
        "GET /users/{username}/starred",
        "GET /users/{username}/subscriptions"
      ]

      function isPaginatingEndpoint(arg) {
        if (typeof arg === "string") {
          return paginatingEndpoints.includes(arg)
        } else {
          return false
        }
      }

      /**
       * @param octokit Octokit instance
       * @param options Options passed to Octokit constructor
       */

      function paginateRest(octokit) {
        return {
          paginate: Object.assign(paginate.bind(null, octokit), {
            iterator: iterator.bind(null, octokit)
          })
        }
      }
      paginateRest.VERSION = VERSION

      exports.composePaginateRest = composePaginateRest
      exports.isPaginatingEndpoint = isPaginatingEndpoint
      exports.paginateRest = paginateRest
      exports.paginatingEndpoints = paginatingEndpoints
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 83044: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object)

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object)

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable
            })
          }

          keys.push.apply(keys, symbols)
        }

        return keys
      }

      function _objectSpread2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {}

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key])
            })
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))
            })
          }
        }

        return target
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }

        return obj
      }

      const Endpoints = {
        actions: {
          addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
          ],
          approveWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],
          cancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],
          createOrUpdateEnvironmentSecret: [
            "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
          ],
          createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
          createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
          createRegistrationTokenForOrg: ["POST /orgs/{org}/actions/runners/registration-token"],
          createRegistrationTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/registration-token"
          ],
          createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
          createRemoveTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/remove-token"],
          createWorkflowDispatch: [
            "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
          ],
          deleteArtifact: ["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
          deleteEnvironmentSecret: [
            "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
          ],
          deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
          deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
          deleteSelfHostedRunnerFromOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}"],
          deleteSelfHostedRunnerFromRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
          ],
          deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
          deleteWorkflowRunLogs: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
          disableSelectedRepositoryGithubActionsOrganization: [
            "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
          ],
          disableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],
          downloadArtifact: [
            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
          ],
          downloadJobLogsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],
          downloadWorkflowRunAttemptLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
          ],
          downloadWorkflowRunLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
          enableSelectedRepositoryGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
          ],
          enableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],
          getAllowedActionsOrganization: ["GET /orgs/{org}/actions/permissions/selected-actions"],
          getAllowedActionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
          ],
          getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
          getEnvironmentPublicKey: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
          ],
          getEnvironmentSecret: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
          ],
          getGithubActionsPermissionsOrganization: ["GET /orgs/{org}/actions/permissions"],
          getGithubActionsPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions"],
          getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
          getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
          getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
          getPendingDeploymentsForRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
          ],
          getRepoPermissions: [
            "GET /repos/{owner}/{repo}/actions/permissions",
            {},
            {
              renamed: ["actions", "getGithubActionsPermissionsRepository"]
            }
          ],
          getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
          getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
          getReviewsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],
          getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
          getSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],
          getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
          getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
          getWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
          ],
          getWorkflowRunUsage: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],
          getWorkflowUsage: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],
          listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
          listEnvironmentSecrets: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
          ],
          listJobsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],
          listJobsForWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
          ],
          listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
          listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
          listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
          listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
          listRunnerApplicationsForRepo: ["GET /repos/{owner}/{repo}/actions/runners/downloads"],
          listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
          ],
          listSelectedRepositoriesEnabledGithubActionsOrganization: [
            "GET /orgs/{org}/actions/permissions/repositories"
          ],
          listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
          listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
          listWorkflowRunArtifacts: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],
          listWorkflowRuns: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],
          listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
          removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
          ],
          reviewPendingDeploymentsForRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
          ],
          setAllowedActionsOrganization: ["PUT /orgs/{org}/actions/permissions/selected-actions"],
          setAllowedActionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
          ],
          setGithubActionsPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions"],
          setGithubActionsPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions"],
          setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
          ],
          setSelectedRepositoriesEnabledGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories"
          ]
        },
        activity: {
          checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
          deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
          deleteThreadSubscription: ["DELETE /notifications/threads/{thread_id}/subscription"],
          getFeeds: ["GET /feeds"],
          getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
          getThread: ["GET /notifications/threads/{thread_id}"],
          getThreadSubscriptionForAuthenticatedUser: [
            "GET /notifications/threads/{thread_id}/subscription"
          ],
          listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
          listNotificationsForAuthenticatedUser: ["GET /notifications"],
          listOrgEventsForAuthenticatedUser: ["GET /users/{username}/events/orgs/{org}"],
          listPublicEvents: ["GET /events"],
          listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
          listPublicEventsForUser: ["GET /users/{username}/events/public"],
          listPublicOrgEvents: ["GET /orgs/{org}/events"],
          listReceivedEventsForUser: ["GET /users/{username}/received_events"],
          listReceivedPublicEventsForUser: ["GET /users/{username}/received_events/public"],
          listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
          listRepoNotificationsForAuthenticatedUser: ["GET /repos/{owner}/{repo}/notifications"],
          listReposStarredByAuthenticatedUser: ["GET /user/starred"],
          listReposStarredByUser: ["GET /users/{username}/starred"],
          listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
          listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
          listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
          listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
          markNotificationsAsRead: ["PUT /notifications"],
          markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
          markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
          setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
          setThreadSubscription: ["PUT /notifications/threads/{thread_id}/subscription"],
          starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
          unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
        },
        apps: {
          addRepoToInstallation: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            {
              renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"]
            }
          ],
          addRepoToInstallationForAuthenticatedUser: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}"
          ],
          checkToken: ["POST /applications/{client_id}/token"],
          createContentAttachment: [
            "POST /content_references/{content_reference_id}/attachments",
            {
              mediaType: {
                previews: ["corsair"]
              }
            }
          ],
          createContentAttachmentForRepo: [
            "POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments",
            {
              mediaType: {
                previews: ["corsair"]
              }
            }
          ],
          createFromManifest: ["POST /app-manifests/{code}/conversions"],
          createInstallationAccessToken: [
            "POST /app/installations/{installation_id}/access_tokens"
          ],
          deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
          deleteInstallation: ["DELETE /app/installations/{installation_id}"],
          deleteToken: ["DELETE /applications/{client_id}/token"],
          getAuthenticated: ["GET /app"],
          getBySlug: ["GET /apps/{app_slug}"],
          getInstallation: ["GET /app/installations/{installation_id}"],
          getOrgInstallation: ["GET /orgs/{org}/installation"],
          getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
          getSubscriptionPlanForAccount: ["GET /marketplace_listing/accounts/{account_id}"],
          getSubscriptionPlanForAccountStubbed: [
            "GET /marketplace_listing/stubbed/accounts/{account_id}"
          ],
          getUserInstallation: ["GET /users/{username}/installation"],
          getWebhookConfigForApp: ["GET /app/hook/config"],
          getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
          listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
          listAccountsForPlanStubbed: ["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],
          listInstallationReposForAuthenticatedUser: [
            "GET /user/installations/{installation_id}/repositories"
          ],
          listInstallations: ["GET /app/installations"],
          listInstallationsForAuthenticatedUser: ["GET /user/installations"],
          listPlans: ["GET /marketplace_listing/plans"],
          listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
          listReposAccessibleToInstallation: ["GET /installation/repositories"],
          listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
          listSubscriptionsForAuthenticatedUserStubbed: ["GET /user/marketplace_purchases/stubbed"],
          listWebhookDeliveries: ["GET /app/hook/deliveries"],
          redeliverWebhookDelivery: ["POST /app/hook/deliveries/{delivery_id}/attempts"],
          removeRepoFromInstallation: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            {
              renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"]
            }
          ],
          removeRepoFromInstallationForAuthenticatedUser: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
          ],
          resetToken: ["PATCH /applications/{client_id}/token"],
          revokeInstallationAccessToken: ["DELETE /installation/token"],
          scopeToken: ["POST /applications/{client_id}/token/scoped"],
          suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
          unsuspendInstallation: ["DELETE /app/installations/{installation_id}/suspended"],
          updateWebhookConfigForApp: ["PATCH /app/hook/config"]
        },
        billing: {
          getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
          getGithubActionsBillingUser: ["GET /users/{username}/settings/billing/actions"],
          getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
          getGithubPackagesBillingUser: ["GET /users/{username}/settings/billing/packages"],
          getSharedStorageBillingOrg: ["GET /orgs/{org}/settings/billing/shared-storage"],
          getSharedStorageBillingUser: ["GET /users/{username}/settings/billing/shared-storage"]
        },
        checks: {
          create: ["POST /repos/{owner}/{repo}/check-runs"],
          createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
          get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
          getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
          listAnnotations: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],
          listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
          listForSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],
          listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
          rerequestRun: ["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],
          rerequestSuite: ["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],
          setSuitesPreferences: ["PATCH /repos/{owner}/{repo}/check-suites/preferences"],
          update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
        },
        codeScanning: {
          deleteAnalysis: [
            "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
          ],
          getAlert: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
            {},
            {
              renamedParameters: {
                alert_id: "alert_number"
              }
            }
          ],
          getAnalysis: ["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],
          getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
          listAlertInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
          ],
          listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
          listAlertsInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
            {},
            {
              renamed: ["codeScanning", "listAlertInstances"]
            }
          ],
          listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
          updateAlert: ["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],
          uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
        },
        codesOfConduct: {
          getAllCodesOfConduct: ["GET /codes_of_conduct"],
          getConductCode: ["GET /codes_of_conduct/{key}"]
        },
        emojis: {
          get: ["GET /emojis"]
        },
        enterpriseAdmin: {
          disableSelectedOrganizationGithubActionsEnterprise: [
            "DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
          ],
          enableSelectedOrganizationGithubActionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
          ],
          getAllowedActionsEnterprise: [
            "GET /enterprises/{enterprise}/actions/permissions/selected-actions"
          ],
          getGithubActionsPermissionsEnterprise: [
            "GET /enterprises/{enterprise}/actions/permissions"
          ],
          listSelectedOrganizationsEnabledGithubActionsEnterprise: [
            "GET /enterprises/{enterprise}/actions/permissions/organizations"
          ],
          setAllowedActionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions/selected-actions"
          ],
          setGithubActionsPermissionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions"
          ],
          setSelectedOrganizationsEnabledGithubActionsEnterprise: [
            "PUT /enterprises/{enterprise}/actions/permissions/organizations"
          ]
        },
        gists: {
          checkIsStarred: ["GET /gists/{gist_id}/star"],
          create: ["POST /gists"],
          createComment: ["POST /gists/{gist_id}/comments"],
          delete: ["DELETE /gists/{gist_id}"],
          deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
          fork: ["POST /gists/{gist_id}/forks"],
          get: ["GET /gists/{gist_id}"],
          getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
          getRevision: ["GET /gists/{gist_id}/{sha}"],
          list: ["GET /gists"],
          listComments: ["GET /gists/{gist_id}/comments"],
          listCommits: ["GET /gists/{gist_id}/commits"],
          listForUser: ["GET /users/{username}/gists"],
          listForks: ["GET /gists/{gist_id}/forks"],
          listPublic: ["GET /gists/public"],
          listStarred: ["GET /gists/starred"],
          star: ["PUT /gists/{gist_id}/star"],
          unstar: ["DELETE /gists/{gist_id}/star"],
          update: ["PATCH /gists/{gist_id}"],
          updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
        },
        git: {
          createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
          createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
          createRef: ["POST /repos/{owner}/{repo}/git/refs"],
          createTag: ["POST /repos/{owner}/{repo}/git/tags"],
          createTree: ["POST /repos/{owner}/{repo}/git/trees"],
          deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
          getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
          getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
          getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
          getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
          getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
          listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
          updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
        },
        gitignore: {
          getAllTemplates: ["GET /gitignore/templates"],
          getTemplate: ["GET /gitignore/templates/{name}"]
        },
        interactions: {
          getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
          getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
          getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
          getRestrictionsForYourPublicRepos: [
            "GET /user/interaction-limits",
            {},
            {
              renamed: ["interactions", "getRestrictionsForAuthenticatedUser"]
            }
          ],
          removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
          removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
          removeRestrictionsForRepo: ["DELETE /repos/{owner}/{repo}/interaction-limits"],
          removeRestrictionsForYourPublicRepos: [
            "DELETE /user/interaction-limits",
            {},
            {
              renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"]
            }
          ],
          setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
          setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
          setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
          setRestrictionsForYourPublicRepos: [
            "PUT /user/interaction-limits",
            {},
            {
              renamed: ["interactions", "setRestrictionsForAuthenticatedUser"]
            }
          ]
        },
        issues: {
          addAssignees: ["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
          addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
          checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
          create: ["POST /repos/{owner}/{repo}/issues"],
          createComment: ["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],
          createLabel: ["POST /repos/{owner}/{repo}/labels"],
          createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
          deleteComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],
          deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
          deleteMilestone: ["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],
          get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
          getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
          getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
          getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
          getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
          list: ["GET /issues"],
          listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
          listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
          listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
          listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
          listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
          listEventsForTimeline: ["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],
          listForAuthenticatedUser: ["GET /user/issues"],
          listForOrg: ["GET /orgs/{org}/issues"],
          listForRepo: ["GET /repos/{owner}/{repo}/issues"],
          listLabelsForMilestone: [
            "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
          ],
          listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
          listLabelsOnIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],
          listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
          lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
          removeAllLabels: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],
          removeAssignees: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
          removeLabel: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],
          setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
          unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
          update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
          updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
          updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
          updateMilestone: ["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]
        },
        licenses: {
          get: ["GET /licenses/{license}"],
          getAllCommonlyUsed: ["GET /licenses"],
          getForRepo: ["GET /repos/{owner}/{repo}/license"]
        },
        markdown: {
          render: ["POST /markdown"],
          renderRaw: [
            "POST /markdown/raw",
            {
              headers: {
                "content-type": "text/plain; charset=utf-8"
              }
            }
          ]
        },
        meta: {
          get: ["GET /meta"],
          getOctocat: ["GET /octocat"],
          getZen: ["GET /zen"],
          root: ["GET /"]
        },
        migrations: {
          cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
          deleteArchiveForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/archive"],
          deleteArchiveForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/archive"],
          downloadArchiveForOrg: ["GET /orgs/{org}/migrations/{migration_id}/archive"],
          getArchiveForAuthenticatedUser: ["GET /user/migrations/{migration_id}/archive"],
          getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
          getImportStatus: ["GET /repos/{owner}/{repo}/import"],
          getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
          getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
          getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
          listForAuthenticatedUser: ["GET /user/migrations"],
          listForOrg: ["GET /orgs/{org}/migrations"],
          listReposForAuthenticatedUser: ["GET /user/migrations/{migration_id}/repositories"],
          listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
          listReposForUser: [
            "GET /user/migrations/{migration_id}/repositories",
            {},
            {
              renamed: ["migrations", "listReposForAuthenticatedUser"]
            }
          ],
          mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
          setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
          startForAuthenticatedUser: ["POST /user/migrations"],
          startForOrg: ["POST /orgs/{org}/migrations"],
          startImport: ["PUT /repos/{owner}/{repo}/import"],
          unlockRepoForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
          ],
          unlockRepoForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],
          updateImport: ["PATCH /repos/{owner}/{repo}/import"]
        },
        orgs: {
          blockUser: ["PUT /orgs/{org}/blocks/{username}"],
          cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
          checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
          checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
          checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
          convertMemberToOutsideCollaborator: ["PUT /orgs/{org}/outside_collaborators/{username}"],
          createInvitation: ["POST /orgs/{org}/invitations"],
          createWebhook: ["POST /orgs/{org}/hooks"],
          deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
          get: ["GET /orgs/{org}"],
          getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
          getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
          getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
          getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
          getWebhookDelivery: ["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],
          list: ["GET /organizations"],
          listAppInstallations: ["GET /orgs/{org}/installations"],
          listBlockedUsers: ["GET /orgs/{org}/blocks"],
          listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
          listForAuthenticatedUser: ["GET /user/orgs"],
          listForUser: ["GET /users/{username}/orgs"],
          listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
          listMembers: ["GET /orgs/{org}/members"],
          listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
          listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
          listPendingInvitations: ["GET /orgs/{org}/invitations"],
          listPublicMembers: ["GET /orgs/{org}/public_members"],
          listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
          listWebhooks: ["GET /orgs/{org}/hooks"],
          pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
          redeliverWebhookDelivery: [
            "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
          ],
          removeMember: ["DELETE /orgs/{org}/members/{username}"],
          removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
          removeOutsideCollaborator: ["DELETE /orgs/{org}/outside_collaborators/{username}"],
          removePublicMembershipForAuthenticatedUser: [
            "DELETE /orgs/{org}/public_members/{username}"
          ],
          setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
          setPublicMembershipForAuthenticatedUser: ["PUT /orgs/{org}/public_members/{username}"],
          unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
          update: ["PATCH /orgs/{org}"],
          updateMembershipForAuthenticatedUser: ["PATCH /user/memberships/orgs/{org}"],
          updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
          updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
        },
        packages: {
          deletePackageForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}"
          ],
          deletePackageForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],
          deletePackageForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}"],
          deletePackageVersionForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
          ],
          deletePackageVersionForOrg: [
            "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
          ],
          deletePackageVersionForUser: [
            "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
          ],
          getAllPackageVersionsForAPackageOwnedByAnOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
            {},
            {
              renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"]
            }
          ],
          getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions",
            {},
            {
              renamed: ["packages", "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]
            }
          ],
          getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions"
          ],
          getAllPackageVersionsForPackageOwnedByOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
          ],
          getAllPackageVersionsForPackageOwnedByUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions"
          ],
          getPackageForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}"],
          getPackageForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}"],
          getPackageForUser: ["GET /users/{username}/packages/{package_type}/{package_name}"],
          getPackageVersionForAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
          ],
          getPackageVersionForOrganization: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
          ],
          getPackageVersionForUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
          ],
          listPackagesForAuthenticatedUser: ["GET /user/packages"],
          listPackagesForOrganization: ["GET /orgs/{org}/packages"],
          listPackagesForUser: ["GET /users/{username}/packages"],
          restorePackageForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/restore{?token}"
          ],
          restorePackageForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
          ],
          restorePackageForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
          ],
          restorePackageVersionForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
          ],
          restorePackageVersionForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
          ],
          restorePackageVersionForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
          ]
        },
        projects: {
          addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
          createCard: ["POST /projects/columns/{column_id}/cards"],
          createColumn: ["POST /projects/{project_id}/columns"],
          createForAuthenticatedUser: ["POST /user/projects"],
          createForOrg: ["POST /orgs/{org}/projects"],
          createForRepo: ["POST /repos/{owner}/{repo}/projects"],
          delete: ["DELETE /projects/{project_id}"],
          deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
          deleteColumn: ["DELETE /projects/columns/{column_id}"],
          get: ["GET /projects/{project_id}"],
          getCard: ["GET /projects/columns/cards/{card_id}"],
          getColumn: ["GET /projects/columns/{column_id}"],
          getPermissionForUser: ["GET /projects/{project_id}/collaborators/{username}/permission"],
          listCards: ["GET /projects/columns/{column_id}/cards"],
          listCollaborators: ["GET /projects/{project_id}/collaborators"],
          listColumns: ["GET /projects/{project_id}/columns"],
          listForOrg: ["GET /orgs/{org}/projects"],
          listForRepo: ["GET /repos/{owner}/{repo}/projects"],
          listForUser: ["GET /users/{username}/projects"],
          moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
          moveColumn: ["POST /projects/columns/{column_id}/moves"],
          removeCollaborator: ["DELETE /projects/{project_id}/collaborators/{username}"],
          update: ["PATCH /projects/{project_id}"],
          updateCard: ["PATCH /projects/columns/cards/{card_id}"],
          updateColumn: ["PATCH /projects/columns/{column_id}"]
        },
        pulls: {
          checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
          create: ["POST /repos/{owner}/{repo}/pulls"],
          createReplyForReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
          ],
          createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
          createReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
          deletePendingReview: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
          ],
          deleteReviewComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
          dismissReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
          ],
          get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
          getReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
          getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
          list: ["GET /repos/{owner}/{repo}/pulls"],
          listCommentsForReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
          ],
          listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
          listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
          listRequestedReviewers: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
          ],
          listReviewComments: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
          listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
          listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
          merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
          removeRequestedReviewers: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
          ],
          requestReviewers: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
          submitReview: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
          ],
          update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
          updateBranch: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],
          updateReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
          updateReviewComment: ["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]
        },
        rateLimit: {
          get: ["GET /rate_limit"]
        },
        reactions: {
          createForCommitComment: ["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
          createForIssue: ["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
          createForIssueComment: [
            "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
          ],
          createForPullRequestReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
          ],
          createForRelease: ["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],
          createForTeamDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
          ],
          createForTeamDiscussionInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
          ],
          deleteForCommitComment: [
            "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
          ],
          deleteForIssue: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
          ],
          deleteForIssueComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
          ],
          deleteForPullRequestComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
          ],
          deleteForTeamDiscussion: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
          ],
          deleteForTeamDiscussionComment: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
          ],
          listForCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
          listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
          listForIssueComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
          listForPullRequestReviewComment: [
            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
          ],
          listForTeamDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
          ],
          listForTeamDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
          ]
        },
        repos: {
          acceptInvitation: [
            "PATCH /user/repository_invitations/{invitation_id}",
            {},
            {
              renamed: ["repos", "acceptInvitationForAuthenticatedUser"]
            }
          ],
          acceptInvitationForAuthenticatedUser: [
            "PATCH /user/repository_invitations/{invitation_id}"
          ],
          addAppAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            {
              mapToData: "apps"
            }
          ],
          addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
          addStatusCheckContexts: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            {
              mapToData: "contexts"
            }
          ],
          addTeamAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            {
              mapToData: "teams"
            }
          ],
          addUserAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            {
              mapToData: "users"
            }
          ],
          checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
          checkVulnerabilityAlerts: ["GET /repos/{owner}/{repo}/vulnerability-alerts"],
          compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
          compareCommitsWithBasehead: ["GET /repos/{owner}/{repo}/compare/{basehead}"],
          createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
          createCommitComment: ["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
          createCommitSignatureProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
          ],
          createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
          createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
          createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
          createDeploymentStatus: [
            "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
          ],
          createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
          createForAuthenticatedUser: ["POST /user/repos"],
          createFork: ["POST /repos/{owner}/{repo}/forks"],
          createInOrg: ["POST /orgs/{org}/repos"],
          createOrUpdateEnvironment: ["PUT /repos/{owner}/{repo}/environments/{environment_name}"],
          createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
          createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
          createRelease: ["POST /repos/{owner}/{repo}/releases"],
          createUsingTemplate: ["POST /repos/{template_owner}/{template_repo}/generate"],
          createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
          declineInvitation: [
            "DELETE /user/repository_invitations/{invitation_id}",
            {},
            {
              renamed: ["repos", "declineInvitationForAuthenticatedUser"]
            }
          ],
          declineInvitationForAuthenticatedUser: [
            "DELETE /user/repository_invitations/{invitation_id}"
          ],
          delete: ["DELETE /repos/{owner}/{repo}"],
          deleteAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
          ],
          deleteAdminBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
          ],
          deleteAnEnvironment: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],
          deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
          deleteBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],
          deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
          deleteCommitSignatureProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
          ],
          deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
          deleteDeployment: ["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],
          deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
          deleteInvitation: ["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],
          deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
          deletePullRequestReviewProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
          ],
          deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
          deleteReleaseAsset: ["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],
          deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
          disableAutomatedSecurityFixes: ["DELETE /repos/{owner}/{repo}/automated-security-fixes"],
          disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
          disableVulnerabilityAlerts: ["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],
          downloadArchive: [
            "GET /repos/{owner}/{repo}/zipball/{ref}",
            {},
            {
              renamed: ["repos", "downloadZipballArchive"]
            }
          ],
          downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
          downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
          enableAutomatedSecurityFixes: ["PUT /repos/{owner}/{repo}/automated-security-fixes"],
          enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
          enableVulnerabilityAlerts: ["PUT /repos/{owner}/{repo}/vulnerability-alerts"],
          generateReleaseNotes: ["POST /repos/{owner}/{repo}/releases/generate-notes"],
          get: ["GET /repos/{owner}/{repo}"],
          getAccessRestrictions: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
          ],
          getAdminBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
          ],
          getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
          getAllStatusCheckContexts: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
          ],
          getAllTopics: [
            "GET /repos/{owner}/{repo}/topics",
            {
              mediaType: {
                previews: ["mercy"]
              }
            }
          ],
          getAppsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
          ],
          getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
          getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
          getBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection"],
          getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
          getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
          getCollaboratorPermissionLevel: [
            "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
          ],
          getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
          getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
          getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
          getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
          getCommitSignatureProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
          ],
          getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
          getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
          getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
          getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
          getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
          getDeploymentStatus: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
          ],
          getEnvironment: ["GET /repos/{owner}/{repo}/environments/{environment_name}"],
          getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
          getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
          getPages: ["GET /repos/{owner}/{repo}/pages"],
          getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
          getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
          getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
          getPullRequestReviewProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
          ],
          getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
          getReadme: ["GET /repos/{owner}/{repo}/readme"],
          getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
          getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
          getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
          getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
          getStatusChecksProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
          ],
          getTeamsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
          ],
          getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
          getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
          getUsersWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
          ],
          getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
          getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
          getWebhookConfigForRepo: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],
          getWebhookDelivery: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
          ],
          listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
          listBranches: ["GET /repos/{owner}/{repo}/branches"],
          listBranchesForHeadCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
          ],
          listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
          listCommentsForCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
          listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
          listCommitStatusesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],
          listCommits: ["GET /repos/{owner}/{repo}/commits"],
          listContributors: ["GET /repos/{owner}/{repo}/contributors"],
          listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
          listDeploymentStatuses: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
          ],
          listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
          listForAuthenticatedUser: ["GET /user/repos"],
          listForOrg: ["GET /orgs/{org}/repos"],
          listForUser: ["GET /users/{username}/repos"],
          listForks: ["GET /repos/{owner}/{repo}/forks"],
          listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
          listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
          listLanguages: ["GET /repos/{owner}/{repo}/languages"],
          listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
          listPublic: ["GET /repositories"],
          listPullRequestsAssociatedWithCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
          ],
          listReleaseAssets: ["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],
          listReleases: ["GET /repos/{owner}/{repo}/releases"],
          listTags: ["GET /repos/{owner}/{repo}/tags"],
          listTeams: ["GET /repos/{owner}/{repo}/teams"],
          listWebhookDeliveries: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],
          listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
          merge: ["POST /repos/{owner}/{repo}/merges"],
          mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
          pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
          redeliverWebhookDelivery: [
            "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
          ],
          removeAppAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            {
              mapToData: "apps"
            }
          ],
          removeCollaborator: ["DELETE /repos/{owner}/{repo}/collaborators/{username}"],
          removeStatusCheckContexts: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            {
              mapToData: "contexts"
            }
          ],
          removeStatusCheckProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
          ],
          removeTeamAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            {
              mapToData: "teams"
            }
          ],
          removeUserAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            {
              mapToData: "users"
            }
          ],
          renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
          replaceAllTopics: [
            "PUT /repos/{owner}/{repo}/topics",
            {
              mediaType: {
                previews: ["mercy"]
              }
            }
          ],
          requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
          setAdminBranchProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
          ],
          setAppAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            {
              mapToData: "apps"
            }
          ],
          setStatusCheckContexts: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            {
              mapToData: "contexts"
            }
          ],
          setTeamAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            {
              mapToData: "teams"
            }
          ],
          setUserAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            {
              mapToData: "users"
            }
          ],
          testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
          transfer: ["POST /repos/{owner}/{repo}/transfer"],
          update: ["PATCH /repos/{owner}/{repo}"],
          updateBranchProtection: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],
          updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
          updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
          updateInvitation: ["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],
          updatePullRequestReviewProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
          ],
          updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
          updateReleaseAsset: ["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],
          updateStatusCheckPotection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
            {},
            {
              renamed: ["repos", "updateStatusCheckProtection"]
            }
          ],
          updateStatusCheckProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
          ],
          updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
          updateWebhookConfigForRepo: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],
          uploadReleaseAsset: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
            {
              baseUrl: "https://uploads.github.com"
            }
          ]
        },
        search: {
          code: ["GET /search/code"],
          commits: ["GET /search/commits"],
          issuesAndPullRequests: ["GET /search/issues"],
          labels: ["GET /search/labels"],
          repos: ["GET /search/repositories"],
          topics: [
            "GET /search/topics",
            {
              mediaType: {
                previews: ["mercy"]
              }
            }
          ],
          users: ["GET /search/users"]
        },
        secretScanning: {
          getAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],
          listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
          listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
          updateAlert: ["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]
        },
        teams: {
          addOrUpdateMembershipForUserInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
          ],
          addOrUpdateProjectPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
          ],
          addOrUpdateRepoPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
          ],
          checkPermissionsForProjectInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
          ],
          checkPermissionsForRepoInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
          create: ["POST /orgs/{org}/teams"],
          createDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
          ],
          createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
          deleteDiscussionCommentInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
          ],
          deleteDiscussionInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
          ],
          deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
          getByName: ["GET /orgs/{org}/teams/{team_slug}"],
          getDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
          ],
          getDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
          getMembershipForUserInOrg: ["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],
          list: ["GET /orgs/{org}/teams"],
          listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
          listDiscussionCommentsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
          ],
          listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
          listForAuthenticatedUser: ["GET /user/teams"],
          listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
          listPendingInvitationsInOrg: ["GET /orgs/{org}/teams/{team_slug}/invitations"],
          listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
          listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
          removeMembershipForUserInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
          ],
          removeProjectInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
          removeRepoInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
          updateDiscussionCommentInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
          ],
          updateDiscussionInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
          ],
          updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
        },
        users: {
          addEmailForAuthenticated: [
            "POST /user/emails",
            {},
            {
              renamed: ["users", "addEmailForAuthenticatedUser"]
            }
          ],
          addEmailForAuthenticatedUser: ["POST /user/emails"],
          block: ["PUT /user/blocks/{username}"],
          checkBlocked: ["GET /user/blocks/{username}"],
          checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
          checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
          createGpgKeyForAuthenticated: [
            "POST /user/gpg_keys",
            {},
            {
              renamed: ["users", "createGpgKeyForAuthenticatedUser"]
            }
          ],
          createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
          createPublicSshKeyForAuthenticated: [
            "POST /user/keys",
            {},
            {
              renamed: ["users", "createPublicSshKeyForAuthenticatedUser"]
            }
          ],
          createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
          deleteEmailForAuthenticated: [
            "DELETE /user/emails",
            {},
            {
              renamed: ["users", "deleteEmailForAuthenticatedUser"]
            }
          ],
          deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
          deleteGpgKeyForAuthenticated: [
            "DELETE /user/gpg_keys/{gpg_key_id}",
            {},
            {
              renamed: ["users", "deleteGpgKeyForAuthenticatedUser"]
            }
          ],
          deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
          deletePublicSshKeyForAuthenticated: [
            "DELETE /user/keys/{key_id}",
            {},
            {
              renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"]
            }
          ],
          deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
          follow: ["PUT /user/following/{username}"],
          getAuthenticated: ["GET /user"],
          getByUsername: ["GET /users/{username}"],
          getContextForUser: ["GET /users/{username}/hovercard"],
          getGpgKeyForAuthenticated: [
            "GET /user/gpg_keys/{gpg_key_id}",
            {},
            {
              renamed: ["users", "getGpgKeyForAuthenticatedUser"]
            }
          ],
          getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
          getPublicSshKeyForAuthenticated: [
            "GET /user/keys/{key_id}",
            {},
            {
              renamed: ["users", "getPublicSshKeyForAuthenticatedUser"]
            }
          ],
          getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
          list: ["GET /users"],
          listBlockedByAuthenticated: [
            "GET /user/blocks",
            {},
            {
              renamed: ["users", "listBlockedByAuthenticatedUser"]
            }
          ],
          listBlockedByAuthenticatedUser: ["GET /user/blocks"],
          listEmailsForAuthenticated: [
            "GET /user/emails",
            {},
            {
              renamed: ["users", "listEmailsForAuthenticatedUser"]
            }
          ],
          listEmailsForAuthenticatedUser: ["GET /user/emails"],
          listFollowedByAuthenticated: [
            "GET /user/following",
            {},
            {
              renamed: ["users", "listFollowedByAuthenticatedUser"]
            }
          ],
          listFollowedByAuthenticatedUser: ["GET /user/following"],
          listFollowersForAuthenticatedUser: ["GET /user/followers"],
          listFollowersForUser: ["GET /users/{username}/followers"],
          listFollowingForUser: ["GET /users/{username}/following"],
          listGpgKeysForAuthenticated: [
            "GET /user/gpg_keys",
            {},
            {
              renamed: ["users", "listGpgKeysForAuthenticatedUser"]
            }
          ],
          listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
          listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
          listPublicEmailsForAuthenticated: [
            "GET /user/public_emails",
            {},
            {
              renamed: ["users", "listPublicEmailsForAuthenticatedUser"]
            }
          ],
          listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
          listPublicKeysForUser: ["GET /users/{username}/keys"],
          listPublicSshKeysForAuthenticated: [
            "GET /user/keys",
            {},
            {
              renamed: ["users", "listPublicSshKeysForAuthenticatedUser"]
            }
          ],
          listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
          setPrimaryEmailVisibilityForAuthenticated: [
            "PATCH /user/email/visibility",
            {},
            {
              renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"]
            }
          ],
          setPrimaryEmailVisibilityForAuthenticatedUser: ["PATCH /user/email/visibility"],
          unblock: ["DELETE /user/blocks/{username}"],
          unfollow: ["DELETE /user/following/{username}"],
          updateAuthenticated: ["PATCH /user"]
        }
      }

      const VERSION = "5.13.0"

      function endpointsToMethods(octokit, endpointsMap) {
        const newMethods = {}

        for (const [scope, endpoints] of Object.entries(endpointsMap)) {
          for (const [methodName, endpoint] of Object.entries(endpoints)) {
            const [route, defaults, decorations] = endpoint
            const [method, url] = route.split(/ /)
            const endpointDefaults = Object.assign(
              {
                method,
                url
              },
              defaults
            )

            if (!newMethods[scope]) {
              newMethods[scope] = {}
            }

            const scopeMethods = newMethods[scope]

            if (decorations) {
              scopeMethods[methodName] = decorate(
                octokit,
                scope,
                methodName,
                endpointDefaults,
                decorations
              )
              continue
            }

            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults)
          }
        }

        return newMethods
      }

      function decorate(octokit, scope, methodName, defaults, decorations) {
        const requestWithDefaults = octokit.request.defaults(defaults)
        /* istanbul ignore next */

        function withDecorations(...args) {
          // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
          let options = requestWithDefaults.endpoint.merge(...args) // There are currently no other decorations than `.mapToData`

          if (decorations.mapToData) {
            options = Object.assign({}, options, {
              data: options[decorations.mapToData],
              [decorations.mapToData]: undefined
            })
            return requestWithDefaults(options)
          }

          if (decorations.renamed) {
            const [newScope, newMethodName] = decorations.renamed
            octokit.log.warn(
              `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`
            )
          }

          if (decorations.deprecated) {
            octokit.log.warn(decorations.deprecated)
          }

          if (decorations.renamedParameters) {
            // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
            const options = requestWithDefaults.endpoint.merge(...args)

            for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
              if (name in options) {
                octokit.log.warn(
                  `"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`
                )

                if (!(alias in options)) {
                  options[alias] = options[name]
                }

                delete options[name]
              }
            }

            return requestWithDefaults(options)
          } // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488

          return requestWithDefaults(...args)
        }

        return Object.assign(withDecorations, requestWithDefaults)
      }

      function restEndpointMethods(octokit) {
        const api = endpointsToMethods(octokit, Endpoints)
        return {
          rest: api
        }
      }
      restEndpointMethods.VERSION = VERSION
      function legacyRestEndpointMethods(octokit) {
        const api = endpointsToMethods(octokit, Endpoints)
        return _objectSpread2(
          _objectSpread2({}, api),
          {},
          {
            rest: api
          }
        )
      }
      legacyRestEndpointMethods.VERSION = VERSION

      exports.legacyRestEndpointMethods = legacyRestEndpointMethods
      exports.restEndpointMethods = restEndpointMethods
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 10537: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex
      }

      var deprecation = __nccwpck_require__(58932)
      var once = _interopDefault(__nccwpck_require__(1223))

      const logOnceCode = once((deprecation) => console.warn(deprecation))
      const logOnceHeaders = once((deprecation) => console.warn(deprecation))
      /**
       * Error with extra properties to help with debugging
       */

      class RequestError extends Error {
        constructor(message, statusCode, options) {
          super(message) // Maintains proper stack trace (only available on V8)

          /* istanbul ignore next */

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor)
          }

          this.name = "HttpError"
          this.status = statusCode
          let headers

          if ("headers" in options && typeof options.headers !== "undefined") {
            headers = options.headers
          }

          if ("response" in options) {
            this.response = options.response
            headers = options.response.headers
          } // redact request credentials without mutating original request options

          const requestCopy = Object.assign({}, options.request)

          if (options.request.headers.authorization) {
            requestCopy.headers = Object.assign({}, options.request.headers, {
              authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
            })
          }

          requestCopy.url = requestCopy.url // client_id & client_secret can be passed as URL query parameters to increase rate limit
            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications
            .replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]") // OAuth tokens can be passed as URL query parameters, although it is not recommended
            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header
            .replace(/\baccess_token=\w+/g, "access_token=[REDACTED]")
          this.request = requestCopy // deprecations

          Object.defineProperty(this, "code", {
            get() {
              logOnceCode(
                new deprecation.Deprecation(
                  "[@octokit/request-error] `error.code` is deprecated, use `error.status`."
                )
              )
              return statusCode
            }
          })
          Object.defineProperty(this, "headers", {
            get() {
              logOnceHeaders(
                new deprecation.Deprecation(
                  "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."
                )
              )
              return headers || {}
            }
          })
        }
      }

      exports.RequestError = RequestError
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 36234: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex
      }

      var endpoint = __nccwpck_require__(59440)
      var universalUserAgent = __nccwpck_require__(45030)
      var isPlainObject = __nccwpck_require__(63287)
      var nodeFetch = _interopDefault(__nccwpck_require__(80467))
      var requestError = __nccwpck_require__(10537)

      const VERSION = "5.6.3"

      function getBufferResponse(response) {
        return response.arrayBuffer()
      }

      function fetchWrapper(requestOptions) {
        const log =
          requestOptions.request && requestOptions.request.log
            ? requestOptions.request.log
            : console

        if (
          isPlainObject.isPlainObject(requestOptions.body) ||
          Array.isArray(requestOptions.body)
        ) {
          requestOptions.body = JSON.stringify(requestOptions.body)
        }

        let headers = {}
        let status
        let url
        const fetch = (requestOptions.request && requestOptions.request.fetch) || nodeFetch
        return fetch(
          requestOptions.url,
          Object.assign(
            {
              method: requestOptions.method,
              body: requestOptions.body,
              headers: requestOptions.headers,
              redirect: requestOptions.redirect
            }, // `requestOptions.request.agent` type is incompatible
            // see https://github.com/octokit/types.ts/pull/264
            requestOptions.request
          )
        )
          .then(async (response) => {
            url = response.url
            status = response.status

            for (const keyAndValue of response.headers) {
              headers[keyAndValue[0]] = keyAndValue[1]
            }

            if ("deprecation" in headers) {
              const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/)
              const deprecationLink = matches && matches.pop()
              log.warn(
                `[@octokit/request] "${requestOptions.method} ${
                  requestOptions.url
                }" is deprecated. It is scheduled to be removed on ${headers.sunset}${
                  deprecationLink ? `. See ${deprecationLink}` : ""
                }`
              )
            }

            if (status === 204 || status === 205) {
              return
            } // GitHub API returns 200 for HEAD requests

            if (requestOptions.method === "HEAD") {
              if (status < 400) {
                return
              }

              throw new requestError.RequestError(response.statusText, status, {
                response: {
                  url,
                  status,
                  headers,
                  data: undefined
                },
                request: requestOptions
              })
            }

            if (status === 304) {
              throw new requestError.RequestError("Not modified", status, {
                response: {
                  url,
                  status,
                  headers,
                  data: await getResponseData(response)
                },
                request: requestOptions
              })
            }

            if (status >= 400) {
              const data = await getResponseData(response)
              const error = new requestError.RequestError(toErrorMessage(data), status, {
                response: {
                  url,
                  status,
                  headers,
                  data
                },
                request: requestOptions
              })
              throw error
            }

            return getResponseData(response)
          })
          .then((data) => {
            return {
              status,
              url,
              headers,
              data
            }
          })
          .catch((error) => {
            if (error instanceof requestError.RequestError) throw error
            throw new requestError.RequestError(error.message, 500, {
              request: requestOptions
            })
          })
      }

      async function getResponseData(response) {
        const contentType = response.headers.get("content-type")

        if (/application\/json/.test(contentType)) {
          return response.json()
        }

        if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
          return response.text()
        }

        return getBufferResponse(response)
      }

      function toErrorMessage(data) {
        if (typeof data === "string") return data // istanbul ignore else - just in case

        if ("message" in data) {
          if (Array.isArray(data.errors)) {
            return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`
          }

          return data.message
        } // istanbul ignore next - just in case

        return `Unknown error: ${JSON.stringify(data)}`
      }

      function withDefaults(oldEndpoint, newDefaults) {
        const endpoint = oldEndpoint.defaults(newDefaults)

        const newApi = function (route, parameters) {
          const endpointOptions = endpoint.merge(route, parameters)

          if (!endpointOptions.request || !endpointOptions.request.hook) {
            return fetchWrapper(endpoint.parse(endpointOptions))
          }

          const request = (route, parameters) => {
            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)))
          }

          Object.assign(request, {
            endpoint,
            defaults: withDefaults.bind(null, endpoint)
          })
          return endpointOptions.request.hook(request, endpointOptions)
        }

        return Object.assign(newApi, {
          endpoint,
          defaults: withDefaults.bind(null, endpoint)
        })
      }

      const request = withDefaults(endpoint.endpoint, {
        headers: {
          "user-agent": `octokit-request.js/${VERSION} ${universalUserAgent.getUserAgent()}`
        }
      })

      exports.request = request
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 60156: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const { isUndefined } = __nccwpck_require__(90250)
      const parser = __nccwpck_require__(41655).sync
      const filter = __nccwpck_require__(55003)
      const debug = __nccwpck_require__(38237)("semantic-release:commit-analyzer")
      const loadParserConfig = __nccwpck_require__(53928)
      const loadReleaseRules = __nccwpck_require__(60098)
      const analyzeCommit = __nccwpck_require__(24192)
      const compareReleaseTypes = __nccwpck_require__(51301)
      const RELEASE_TYPES = __nccwpck_require__(86513)
      const DEFAULT_RELEASE_RULES = __nccwpck_require__(87128)

      /**
       * Determine the type of release to create based on a list of commits.
       *
       * @param {Object} pluginConfig The plugin configuration.
       * @param {String} pluginConfig.preset conventional-changelog preset ('angular', 'atom', 'codemirror', 'ember', 'eslint', 'express', 'jquery', 'jscs', 'jshint')
       * @param {String} pluginConfig.config Requirable npm package with a custom conventional-changelog preset
       * @param {String|Array} pluginConfig.releaseRules A `String` to load an external module or an `Array` of rules.
       * @param {Object} pluginConfig.parserOpts Additional `conventional-changelog-parser` options that will overwrite ones loaded by `preset` or `config`.
       * @param {Object} context The semantic-release context.
       * @param {Array<Object>} context.commits The commits to analyze.
       * @param {String} context.cwd The current working directory.
       *
       * @returns {String|null} the type of release to create based on the list of commits or `null` if no release has to be done.
       */
      async function analyzeCommits(pluginConfig, context) {
        const { commits, logger } = context
        const releaseRules = loadReleaseRules(pluginConfig, context)
        const config = await loadParserConfig(pluginConfig, context)
        let releaseType = null

        filter(
          commits
            .filter(({ message, hash }) => {
              if (!message.trim()) {
                debug("Skip commit %s with empty message", hash)
                return false
              }

              return true
            })
            .map(({ message, ...commitProps }) => ({
              rawMsg: message,
              message,
              ...commitProps,
              ...parser(message, config)
            }))
        ).every(({ rawMsg, ...commit }) => {
          logger.log(`Analyzing commit: %s`, rawMsg)
          let commitReleaseType

          // Determine release type based on custom releaseRules
          if (releaseRules) {
            debug("Analyzing with custom rules")
            commitReleaseType = analyzeCommit(releaseRules, commit)
          }

          // If no custom releaseRules or none matched the commit, try with default releaseRules
          if (isUndefined(commitReleaseType)) {
            debug("Analyzing with default rules")
            commitReleaseType = analyzeCommit(DEFAULT_RELEASE_RULES, commit)
          }

          if (commitReleaseType) {
            logger.log("The release type for the commit is %s", commitReleaseType)
          } else {
            logger.log("The commit should not trigger a release")
          }

          // Set releaseType if commit's release type is higher
          if (commitReleaseType && compareReleaseTypes(releaseType, commitReleaseType)) {
            releaseType = commitReleaseType
          }

          // Break loop if releaseType is the highest
          if (releaseType === RELEASE_TYPES[0]) {
            return false
          }

          return true
        })
        logger.log(
          "Analysis of %s commits complete: %s release",
          commits.length,
          releaseType || "no"
        )

        return releaseType
      }

      module.exports = { analyzeCommits }

      /***/
    },

    /***/ 24192: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const { isMatchWith, isString } = __nccwpck_require__(90250)
      const micromatch = __nccwpck_require__(76228)
      const debug = __nccwpck_require__(38237)("semantic-release:commit-analyzer")
      const RELEASE_TYPES = __nccwpck_require__(86513)
      const compareReleaseTypes = __nccwpck_require__(51301)

      /**
       * Find all the rules matching and return the highest release type of the matching rules.
       *
       * @param {Array} releaseRules the rules to match the commit against.
       * @param {Commit} commit a parsed commit.
       * @return {string} the highest release type of the matching rules or `undefined` if no rule match the commit.
       */
      module.exports = (releaseRules, commit) => {
        let releaseType

        releaseRules
          .filter(
            ({ breaking, revert, release, ...rule }) =>
              // If the rule is not `breaking` or the commit doesn't have a breaking change note
              (!breaking || (commit.notes && commit.notes.length > 0)) &&
              // If the rule is not `revert` or the commit is not a revert
              (!revert || commit.revert) &&
              // Otherwise match the regular rules
              isMatchWith(commit, rule, (object, src) =>
                isString(src) && isString(object) ? micromatch.isMatch(object, src) : undefined
              )
          )
          .every((match) => {
            if (compareReleaseTypes(releaseType, match.release)) {
              releaseType = match.release
              debug("The rule %o match commit with release type %o", match, releaseType)
              if (releaseType === RELEASE_TYPES[0]) {
                debug("Release type %o is the highest possible. Stop analysis.", releaseType)
                return false
              }
            } else {
              debug(
                "The rule %o match commit with release type %o but the higher release type %o has already been found for this commit",
                match,
                match.release,
                releaseType
              )
            }

            return true
          })

        return releaseType
      }

      /***/
    },

    /***/ 51301: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const RELEASE_TYPES = __nccwpck_require__(86513)

      /**
       * Test if a realease type is of higher level than a given one.
       *
       * @param {string} currentReleaseType the current release type.
       * @param {string} releaseType the release type to compare with.
       * @return {Boolean} true if `releaseType` is higher than `currentReleaseType`.
       */
      module.exports = (currentReleaseType, releaseType) =>
        !currentReleaseType ||
        RELEASE_TYPES.indexOf(releaseType) < RELEASE_TYPES.indexOf(currentReleaseType)

      /***/
    },

    /***/ 87128: /***/ (module) => {
      /**
       * Default `releaseRules` rules for common commit formats, following conventions.
       *
       * @type {Array}
       */
      module.exports = [
        { breaking: true, release: "major" },
        { revert: true, release: "patch" },
        // Angular
        { type: "feat", release: "minor" },
        { type: "fix", release: "patch" },
        { type: "perf", release: "patch" },
        // Atom
        { emoji: ":racehorse:", release: "patch" },
        { emoji: ":bug:", release: "patch" },
        { emoji: ":penguin:", release: "patch" },
        { emoji: ":apple:", release: "patch" },
        { emoji: ":checkered_flag:", release: "patch" },
        // Ember
        { tag: "BUGFIX", release: "patch" },
        { tag: "FEATURE", release: "minor" },
        { tag: "SECURITY", release: "patch" },
        // ESLint
        { tag: "Breaking", release: "major" },
        { tag: "Fix", release: "patch" },
        { tag: "Update", release: "minor" },
        { tag: "New", release: "minor" },
        // Express
        { component: "perf", release: "patch" },
        { component: "deps", release: "patch" },
        // JSHint
        { type: "FEAT", release: "minor" },
        { type: "FIX", release: "patch" }
      ]

      /***/
    },

    /***/ 86513: /***/ (module) => {
      /**
       * Type of release supported by Semver/NPM.
       *
       * @type {Array}
       */
      module.exports = ["major", "premajor", "minor", "preminor", "patch", "prepatch", "prerelease"]

      /***/
    },

    /***/ 53928: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const { promisify } = __nccwpck_require__(73837)
      const { isPlainObject } = __nccwpck_require__(90250)
      const importFrom = __nccwpck_require__(62197)
      const conventionalChangelogAngular = __nccwpck_require__(18143)

      /**
       * Load `conventional-changelog-parser` options. Handle presets that return either a `Promise<Array>` or a `Promise<Function>`.
       *
       * @param {Object} pluginConfig The plugin configuration.
       * @param {Object} pluginConfig.preset conventional-changelog preset ('angular', 'atom', 'codemirror', 'ember', 'eslint', 'express', 'jquery', 'jscs', 'jshint')
       * @param {String} pluginConfig.config Requirable npm package with a custom conventional-changelog preset
       * @param {Object} pluginConfig.parserOpts Additionnal `conventional-changelog-parser` options that will overwrite ones loaded by `preset` or `config`.
       * @param {Object} context The semantic-release context.
       * @param {String} context.cwd The current working directory.
       * @return {Promise<Object>} a `Promise` that resolve to the `conventional-changelog-parser` options.
       */
      module.exports = async ({ preset, config, parserOpts, presetConfig }, { cwd }) => {
        let loadedConfig

        if (preset) {
          const presetPackage = `conventional-changelog-${preset.toLowerCase()}`
          loadedConfig =
            importFrom.silent(__dirname, presetPackage) || importFrom(cwd, presetPackage)
        } else if (config) {
          loadedConfig = importFrom.silent(__dirname, config) || importFrom(cwd, config)
        } else {
          loadedConfig = conventionalChangelogAngular
        }

        loadedConfig = await (typeof loadedConfig === "function"
          ? isPlainObject(presetConfig)
            ? loadedConfig(presetConfig)
            : promisify(loadedConfig)()
          : loadedConfig)

        return { ...loadedConfig.parserOpts, ...parserOpts }
      }

      /***/
    },

    /***/ 60098: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const { isUndefined } = __nccwpck_require__(90250)
      const importFrom = __nccwpck_require__(62197)
      const RELEASE_TYPES = __nccwpck_require__(86513)

      /**
       * Load and validate the `releaseRules` rules.
       *
       * If `releaseRules` parameter is a `string` then load it as an external module with `require`.
       * Verifies that the loaded/parameter `releaseRules` is an `Array` and each element has a valid `release` attribute.
       *
       * @param {Object} pluginConfig The plugin configuration.
       * @param {String|Array} pluginConfig.releaseRules A `String` to load an external module or an `Array` of rules.
       * @param {Object} context The semantic-release context.
       * @param {String} context.cwd The current working directory.
       *
       * @return {Array} the loaded and validated `releaseRules`.
       */
      module.exports = ({ releaseRules }, { cwd }) => {
        let loadedReleaseRules

        if (releaseRules) {
          loadedReleaseRules =
            typeof releaseRules === "string"
              ? importFrom.silent(__dirname, releaseRules) || importFrom(cwd, releaseRules)
              : releaseRules

          if (!Array.isArray(loadedReleaseRules)) {
            throw new TypeError(
              'Error in commit-analyzer configuration: "releaseRules" must be an array of rules'
            )
          }

          loadedReleaseRules.forEach((rule) => {
            if (!rule || isUndefined(rule.release)) {
              throw new Error(
                'Error in commit-analyzer configuration: rules must be an object with a "release" property'
              )
            } else if (
              !RELEASE_TYPES.includes(rule.release) &&
              rule.release !== null &&
              rule.release !== false
            ) {
              throw new Error(
                `Error in commit-analyzer configuration: "${
                  rule.release
                }" is not a valid release type. Valid values are: ${JSON.stringify(RELEASE_TYPES)}`
              )
            }
          })
        }

        return loadedReleaseRules
      }

      /***/
    },

    /***/ 80390: /***/ function (__unused_webpack_module, exports) {
      ;(function (global, factory) {
        true ? factory(exports) : 0
      })(this, function (exports) {
        "use strict"

        // Reserved word lists for various dialects of the language

        var reservedWords = {
          3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
          5: "class enum extends super const export import",
          6: "enum",
          strict: "implements interface let package private protected public static yield",
          strictBind: "eval arguments"
        }

        // And the keywords

        var ecma5AndLessKeywords =
          "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"

        var keywords$1 = {
          5: ecma5AndLessKeywords,
          "5module": ecma5AndLessKeywords + " export import",
          6: ecma5AndLessKeywords + " const class extends export import super"
        }

        var keywordRelationalOperator = /^in(stanceof)?$/

        // ## Character categories

        // Big ugly regular expressions that match characters in the
        // whitespace, identifier, and identifier-start categories. These
        // are only applied when a character is found to actually have a
        // code point above 128.
        // Generated by `bin/generate-identifier-regex.js`.
        var nonASCIIidentifierStartChars =
          "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc"
        var nonASCIIidentifierChars =
          "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f"

        var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]")
        var nonASCIIidentifier = new RegExp(
          "[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]"
        )

        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null

        // These are a run-length and offset encoded representation of the
        // >0xffff code points that are a valid part of identifiers. The
        // offset starts at 0x10000, and each pair of numbers represents an
        // offset to the next range, and then a size of the range. They were
        // generated by bin/generate-identifier-regex.js

        // eslint-disable-next-line comma-spacing
        var astralIdentifierStartCodes = [
          0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29,
          6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2,
          6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3,
          0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1,
          65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17,
          111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28,
          22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3,
          22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2,
          6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46,
          42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7,
          2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45,
          20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2,
          31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582,
          8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0,
          67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3,
          9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2,
          0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2,
          30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17,
          0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2,
          1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2,
          0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2,
          16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938
        ]

        // eslint-disable-next-line comma-spacing
        var astralIdentifierCodes = [
          509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9,
          370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2,
          37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3,
          56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9,
          214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2,
          1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15,
          406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2,
          4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1,
          19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5,
          49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0,
          62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239
        ]

        // This has a complexity linear to the value of the code. The
        // assumption is that looking up astral identifier characters is
        // rare.
        function isInAstralSet(code, set) {
          var pos = 0x10000
          for (var i = 0; i < set.length; i += 2) {
            pos += set[i]
            if (pos > code) {
              return false
            }
            pos += set[i + 1]
            if (pos >= code) {
              return true
            }
          }
        }

        // Test whether a given character code starts an identifier.

        function isIdentifierStart(code, astral) {
          if (code < 65) {
            return code === 36
          }
          if (code < 91) {
            return true
          }
          if (code < 97) {
            return code === 95
          }
          if (code < 123) {
            return true
          }
          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))
          }
          if (astral === false) {
            return false
          }
          return isInAstralSet(code, astralIdentifierStartCodes)
        }

        // Test whether a given character is part of an identifier.

        function isIdentifierChar(code, astral) {
          if (code < 48) {
            return code === 36
          }
          if (code < 58) {
            return true
          }
          if (code < 65) {
            return false
          }
          if (code < 91) {
            return true
          }
          if (code < 97) {
            return code === 95
          }
          if (code < 123) {
            return true
          }
          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
          }
          if (astral === false) {
            return false
          }
          return (
            isInAstralSet(code, astralIdentifierStartCodes) ||
            isInAstralSet(code, astralIdentifierCodes)
          )
        }

        // ## Token types

        // The assignment of fine-grained, information-carrying type objects
        // allows the tokenizer to store the information it has about a
        // token in a way that is very cheap for the parser to look up.

        // All token type variables start with an underscore, to make them
        // easy to recognize.

        // The `beforeExpr` property is used to disambiguate between regular
        // expressions and divisions. It is set on all token types that can
        // be followed by an expression (thus, a slash after them would be a
        // regular expression).
        //
        // The `startsExpr` property is used to check if the token ends a
        // `yield` expression. It is set on all token types that either can
        // directly start an expression (like a quotation mark) or can
        // continue an expression (like the body of a string).
        //
        // `isLoop` marks a keyword as starting a loop, which is important
        // to know when parsing a label, in order to allow or disallow
        // continue jumps to that label.

        var TokenType = function TokenType(label, conf) {
          if (conf === void 0) conf = {}

          this.label = label
          this.keyword = conf.keyword
          this.beforeExpr = !!conf.beforeExpr
          this.startsExpr = !!conf.startsExpr
          this.isLoop = !!conf.isLoop
          this.isAssign = !!conf.isAssign
          this.prefix = !!conf.prefix
          this.postfix = !!conf.postfix
          this.binop = conf.binop || null
          this.updateContext = null
        }

        function binop(name, prec) {
          return new TokenType(name, { beforeExpr: true, binop: prec })
        }
        var beforeExpr = { beforeExpr: true },
          startsExpr = { startsExpr: true }

        // Map keyword names to token types.

        var keywords = {}

        // Succinct definitions of keyword token types
        function kw(name, options) {
          if (options === void 0) options = {}

          options.keyword = name
          return (keywords[name] = new TokenType(name, options))
        }

        var types$1 = {
          num: new TokenType("num", startsExpr),
          regexp: new TokenType("regexp", startsExpr),
          string: new TokenType("string", startsExpr),
          name: new TokenType("name", startsExpr),
          privateId: new TokenType("privateId", startsExpr),
          eof: new TokenType("eof"),

          // Punctuation token types.
          bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
          bracketR: new TokenType("]"),
          braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
          braceR: new TokenType("}"),
          parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", beforeExpr),
          semi: new TokenType(";", beforeExpr),
          colon: new TokenType(":", beforeExpr),
          dot: new TokenType("."),
          question: new TokenType("?", beforeExpr),
          questionDot: new TokenType("?."),
          arrow: new TokenType("=>", beforeExpr),
          template: new TokenType("template"),
          invalidTemplate: new TokenType("invalidTemplate"),
          ellipsis: new TokenType("...", beforeExpr),
          backQuote: new TokenType("`", startsExpr),
          dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),

          // Operators. These carry several kinds of properties to help the
          // parser use them properly (the presence of these properties is
          // what categorizes them as operators).
          //
          // `binop`, when present, specifies that this operator is a binary
          // operator, and will refer to its precedence.
          //
          // `prefix` and `postfix` mark the operator as a prefix or postfix
          // unary operator.
          //
          // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
          // binary operators with a very low precedence, that should result
          // in AssignmentExpression nodes.

          eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
          assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
          incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
          prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
          logicalOR: binop("||", 1),
          logicalAND: binop("&&", 2),
          bitwiseOR: binop("|", 3),
          bitwiseXOR: binop("^", 4),
          bitwiseAND: binop("&", 5),
          equality: binop("==/!=/===/!==", 6),
          relational: binop("</>/<=/>=", 7),
          bitShift: binop("<</>>/>>>", 8),
          plusMin: new TokenType("+/-", {
            beforeExpr: true,
            binop: 9,
            prefix: true,
            startsExpr: true
          }),
          modulo: binop("%", 10),
          star: binop("*", 10),
          slash: binop("/", 10),
          starstar: new TokenType("**", { beforeExpr: true }),
          coalesce: binop("??", 1),

          // Keyword token types.
          _break: kw("break"),
          _case: kw("case", beforeExpr),
          _catch: kw("catch"),
          _continue: kw("continue"),
          _debugger: kw("debugger"),
          _default: kw("default", beforeExpr),
          _do: kw("do", { isLoop: true, beforeExpr: true }),
          _else: kw("else", beforeExpr),
          _finally: kw("finally"),
          _for: kw("for", { isLoop: true }),
          _function: kw("function", startsExpr),
          _if: kw("if"),
          _return: kw("return", beforeExpr),
          _switch: kw("switch"),
          _throw: kw("throw", beforeExpr),
          _try: kw("try"),
          _var: kw("var"),
          _const: kw("const"),
          _while: kw("while", { isLoop: true }),
          _with: kw("with"),
          _new: kw("new", { beforeExpr: true, startsExpr: true }),
          _this: kw("this", startsExpr),
          _super: kw("super", startsExpr),
          _class: kw("class", startsExpr),
          _extends: kw("extends", beforeExpr),
          _export: kw("export"),
          _import: kw("import", startsExpr),
          _null: kw("null", startsExpr),
          _true: kw("true", startsExpr),
          _false: kw("false", startsExpr),
          _in: kw("in", { beforeExpr: true, binop: 7 }),
          _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
          _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
          _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
          _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
        }

        // Matches a whole line break (where CRLF is considered a single
        // line break). Used to count lines.

        var lineBreak = /\r\n?|\n|\u2028|\u2029/
        var lineBreakG = new RegExp(lineBreak.source, "g")

        function isNewLine(code) {
          return code === 10 || code === 13 || code === 0x2028 || code === 0x2029
        }

        function nextLineBreak(code, from, end) {
          if (end === void 0) end = code.length

          for (var i = from; i < end; i++) {
            var next = code.charCodeAt(i)
            if (isNewLine(next)) {
              return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1
            }
          }
          return -1
        }

        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/

        var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g

        var ref = Object.prototype
        var hasOwnProperty = ref.hasOwnProperty
        var toString = ref.toString

        var hasOwn =
          Object.hasOwn ||
          function (obj, propName) {
            return hasOwnProperty.call(obj, propName)
          }

        var isArray =
          Array.isArray ||
          function (obj) {
            return toString.call(obj) === "[object Array]"
          }

        function wordsRegexp(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
        }

        var loneSurrogate =
          /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/

        // These are used when `options.locations` is on, for the
        // `startLoc` and `endLoc` properties.

        var Position = function Position(line, col) {
          this.line = line
          this.column = col
        }

        Position.prototype.offset = function offset(n) {
          return new Position(this.line, this.column + n)
        }

        var SourceLocation = function SourceLocation(p, start, end) {
          this.start = start
          this.end = end
          if (p.sourceFile !== null) {
            this.source = p.sourceFile
          }
        }

        // The `getLineInfo` function is mostly useful when the
        // `locations` option is off (for performance reasons) and you
        // want to find the line/column position for a given character
        // offset. `input` should be the code string that the offset refers
        // into.

        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            var nextBreak = nextLineBreak(input, cur, offset)
            if (nextBreak < 0) {
              return new Position(line, offset - cur)
            }
            ++line
            cur = nextBreak
          }
        }

        // A second argument must be given to configure the parser process.
        // These options are recognized (only `ecmaVersion` is required):

        var defaultOptions = {
          // `ecmaVersion` indicates the ECMAScript version to parse. Must be
          // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
          // (2019), 11 (2020), 12 (2021), 13 (2022), or `"latest"` (the
          // latest version the library supports). This influences support
          // for strict mode, the set of reserved words, and support for
          // new syntax features.
          ecmaVersion: null,
          // `sourceType` indicates the mode the code should be parsed in.
          // Can be either `"script"` or `"module"`. This influences global
          // strict mode and parsing of `import` and `export` declarations.
          sourceType: "script",
          // `onInsertedSemicolon` can be a callback that will be called
          // when a semicolon is automatically inserted. It will be passed
          // the position of the comma as an offset, and if `locations` is
          // enabled, it is given the location as a `{line, column}` object
          // as second argument.
          onInsertedSemicolon: null,
          // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
          // trailing commas.
          onTrailingComma: null,
          // By default, reserved words are only enforced if ecmaVersion >= 5.
          // Set `allowReserved` to a boolean value to explicitly turn this on
          // an off. When this option has the value "never", reserved words
          // and keywords can also not be used as property names.
          allowReserved: null,
          // When enabled, a return at the top level is not considered an
          // error.
          allowReturnOutsideFunction: false,
          // When enabled, import/export statements are not constrained to
          // appearing at the top of the program, and an import.meta expression
          // in a script isn't considered an error.
          allowImportExportEverywhere: false,
          // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
          // When enabled, await identifiers are allowed to appear at the top-level scope,
          // but they are still not allowed in non-async functions.
          allowAwaitOutsideFunction: null,
          // When enabled, super identifiers are not constrained to
          // appearing in methods and do not raise an error when they appear elsewhere.
          allowSuperOutsideMethod: null,
          // When enabled, hashbang directive in the beginning of file
          // is allowed and treated as a line comment.
          allowHashBang: false,
          // When `locations` is on, `loc` properties holding objects with
          // `start` and `end` properties in `{line, column}` form (with
          // line being 1-based and column 0-based) will be attached to the
          // nodes.
          locations: false,
          // A function can be passed as `onToken` option, which will
          // cause Acorn to call that function with object in the same
          // format as tokens returned from `tokenizer().getToken()`. Note
          // that you are not allowed to call the parser from the
          // callback—that will corrupt its internal state.
          onToken: null,
          // A function can be passed as `onComment` option, which will
          // cause Acorn to call that function with `(block, text, start,
          // end)` parameters whenever a comment is skipped. `block` is a
          // boolean indicating whether this is a block (`/* */`) comment,
          // `text` is the content of the comment, and `start` and `end` are
          // character offsets that denote the start and end of the comment.
          // When the `locations` option is on, two more parameters are
          // passed, the full `{line, column}` locations of the start and
          // end of the comments. Note that you are not allowed to call the
          // parser from the callback—that will corrupt its internal state.
          onComment: null,
          // Nodes have their start and end characters offsets recorded in
          // `start` and `end` properties (directly on the node, rather than
          // the `loc` object, which holds line/column data. To also add a
          // [semi-standardized][range] `range` property holding a `[start,
          // end]` array with the same numbers, set the `ranges` option to
          // `true`.
          //
          // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
          ranges: false,
          // It is possible to parse multiple files into a single AST by
          // passing the tree produced by parsing the first file as
          // `program` option in subsequent parses. This will add the
          // toplevel forms of the parsed file to the `Program` (top) node
          // of an existing parse tree.
          program: null,
          // When `locations` is on, you can pass this to record the source
          // file in every node's `loc` object.
          sourceFile: null,
          // This value, if given, is stored in every node, whether
          // `locations` is on or off.
          directSourceFile: null,
          // When enabled, parenthesized expressions are represented by
          // (non-standard) ParenthesizedExpression nodes
          preserveParens: false
        }

        // Interpret and default an options object

        var warnedAboutEcmaVersion = false

        function getOptions(opts) {
          var options = {}

          for (var opt in defaultOptions) {
            options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]
          }

          if (options.ecmaVersion === "latest") {
            options.ecmaVersion = 1e8
          } else if (options.ecmaVersion == null) {
            if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
              warnedAboutEcmaVersion = true
              console.warn(
                "Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future."
              )
            }
            options.ecmaVersion = 11
          } else if (options.ecmaVersion >= 2015) {
            options.ecmaVersion -= 2009
          }

          if (options.allowReserved == null) {
            options.allowReserved = options.ecmaVersion < 5
          }

          if (isArray(options.onToken)) {
            var tokens = options.onToken
            options.onToken = function (token) {
              return tokens.push(token)
            }
          }
          if (isArray(options.onComment)) {
            options.onComment = pushComment(options, options.onComment)
          }

          return options
        }

        function pushComment(options, array) {
          return function (block, text, start, end, startLoc, endLoc) {
            var comment = {
              type: block ? "Block" : "Line",
              value: text,
              start: start,
              end: end
            }
            if (options.locations) {
              comment.loc = new SourceLocation(this, startLoc, endLoc)
            }
            if (options.ranges) {
              comment.range = [start, end]
            }
            array.push(comment)
          }
        }

        // Each scope gets a bitset that may contain these flags
        var SCOPE_TOP = 1,
          SCOPE_FUNCTION = 2,
          SCOPE_ASYNC = 4,
          SCOPE_GENERATOR = 8,
          SCOPE_ARROW = 16,
          SCOPE_SIMPLE_CATCH = 32,
          SCOPE_SUPER = 64,
          SCOPE_DIRECT_SUPER = 128,
          SCOPE_CLASS_STATIC_BLOCK = 256,
          SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK

        function functionFlags(async, generator) {
          return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)
        }

        // Used in checkLVal* and declareName to determine the type of a binding
        var BIND_NONE = 0, // Not a binding
          BIND_VAR = 1, // Var-style binding
          BIND_LEXICAL = 2, // Let- or const-style binding
          BIND_FUNCTION = 3, // Function declaration
          BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding
          BIND_OUTSIDE = 5 // Special case for function names as bound inside the function

        var Parser = function Parser(options, input, startPos) {
          this.options = options = getOptions(options)
          this.sourceFile = options.sourceFile
          this.keywords = wordsRegexp(
            keywords$1[
              options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5
            ]
          )
          var reserved = ""
          if (options.allowReserved !== true) {
            reserved =
              reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3]
            if (options.sourceType === "module") {
              reserved += " await"
            }
          }
          this.reservedWords = wordsRegexp(reserved)
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict
          this.reservedWordsStrict = wordsRegexp(reservedStrict)
          this.reservedWordsStrictBind = wordsRegexp(
            reservedStrict + " " + reservedWords.strictBind
          )
          this.input = String(input)

          // Used to signal to callers of `readWord1` whether the word
          // contained any escape sequences. This is needed because words with
          // escape sequences must not be interpreted as keywords.
          this.containsEsc = false

          // Set up token state

          // The current position of the tokenizer in the input.
          if (startPos) {
            this.pos = startPos
            this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1
            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length
          } else {
            this.pos = this.lineStart = 0
            this.curLine = 1
          }

          // Properties of the current token:
          // Its type
          this.type = types$1.eof
          // For tokens that include more information than their type, the value
          this.value = null
          // Its start and end offset
          this.start = this.end = this.pos
          // And, if locations are used, the {line, column} object
          // corresponding to those offsets
          this.startLoc = this.endLoc = this.curPosition()

          // Position information for the previous token
          this.lastTokEndLoc = this.lastTokStartLoc = null
          this.lastTokStart = this.lastTokEnd = this.pos

          // The context stack is used to superficially track syntactic
          // context to predict whether a regular expression is allowed in a
          // given position.
          this.context = this.initialContext()
          this.exprAllowed = true

          // Figure out if it's a module code.
          this.inModule = options.sourceType === "module"
          this.strict = this.inModule || this.strictDirective(this.pos)

          // Used to signify the start of a potential arrow function
          this.potentialArrowAt = -1
          this.potentialArrowInForAwait = false

          // Positions to delayed-check that yield/await does not exist in default parameters.
          this.yieldPos = this.awaitPos = this.awaitIdentPos = 0
          // Labels in scope.
          this.labels = []
          // Thus-far undefined exports.
          this.undefinedExports = Object.create(null)

          // If enabled, skip leading hashbang line.
          if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
            this.skipLineComment(2)
          }

          // Scope tracking for duplicate variable names (see scope.js)
          this.scopeStack = []
          this.enterScope(SCOPE_TOP)

          // For RegExp validation
          this.regexpState = null

          // The stack of private names.
          // Each element has two properties: 'declared' and 'used'.
          // When it exited from the outermost class definition, all used private names must be declared.
          this.privateNameStack = []
        }

        var prototypeAccessors = {
          inFunction: { configurable: true },
          inGenerator: { configurable: true },
          inAsync: { configurable: true },
          canAwait: { configurable: true },
          allowSuper: { configurable: true },
          allowDirectSuper: { configurable: true },
          treatFunctionsAsVar: { configurable: true },
          allowNewDotTarget: { configurable: true },
          inClassStaticBlock: { configurable: true }
        }

        Parser.prototype.parse = function parse() {
          var node = this.options.program || this.startNode()
          this.nextToken()
          return this.parseTopLevel(node)
        }

        prototypeAccessors.inFunction.get = function () {
          return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0
        }

        prototypeAccessors.inGenerator.get = function () {
          return (
            (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 &&
            !this.currentVarScope().inClassFieldInit
          )
        }

        prototypeAccessors.inAsync.get = function () {
          return (
            (this.currentVarScope().flags & SCOPE_ASYNC) > 0 &&
            !this.currentVarScope().inClassFieldInit
          )
        }

        prototypeAccessors.canAwait.get = function () {
          for (var i = this.scopeStack.length - 1; i >= 0; i--) {
            var scope = this.scopeStack[i]
            if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) {
              return false
            }
            if (scope.flags & SCOPE_FUNCTION) {
              return (scope.flags & SCOPE_ASYNC) > 0
            }
          }
          return (
            (this.inModule && this.options.ecmaVersion >= 13) ||
            this.options.allowAwaitOutsideFunction
          )
        }

        prototypeAccessors.allowSuper.get = function () {
          var ref = this.currentThisScope()
          var flags = ref.flags
          var inClassFieldInit = ref.inClassFieldInit
          return (
            (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod
          )
        }

        prototypeAccessors.allowDirectSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0
        }

        prototypeAccessors.treatFunctionsAsVar.get = function () {
          return this.treatFunctionsAsVarInScope(this.currentScope())
        }

        prototypeAccessors.allowNewDotTarget.get = function () {
          var ref = this.currentThisScope()
          var flags = ref.flags
          var inClassFieldInit = ref.inClassFieldInit
          return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit
        }

        prototypeAccessors.inClassStaticBlock.get = function () {
          return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0
        }

        Parser.extend = function extend() {
          var plugins = [],
            len = arguments.length
          while (len--) plugins[len] = arguments[len]

          var cls = this
          for (var i = 0; i < plugins.length; i++) {
            cls = plugins[i](cls)
          }
          return cls
        }

        Parser.parse = function parse(input, options) {
          return new this(options, input).parse()
        }

        Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
          var parser = new this(options, input, pos)
          parser.nextToken()
          return parser.parseExpression()
        }

        Parser.tokenizer = function tokenizer(input, options) {
          return new this(options, input)
        }

        Object.defineProperties(Parser.prototype, prototypeAccessors)

        var pp$9 = Parser.prototype

        // ## Parser utilities

        var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/
        pp$9.strictDirective = function (start) {
          for (;;) {
            // Try to find string literal.
            skipWhiteSpace.lastIndex = start
            start += skipWhiteSpace.exec(this.input)[0].length
            var match = literal.exec(this.input.slice(start))
            if (!match) {
              return false
            }
            if ((match[1] || match[2]) === "use strict") {
              skipWhiteSpace.lastIndex = start + match[0].length
              var spaceAfter = skipWhiteSpace.exec(this.input),
                end = spaceAfter.index + spaceAfter[0].length
              var next = this.input.charAt(end)
              return (
                next === ";" ||
                next === "}" ||
                (lineBreak.test(spaceAfter[0]) &&
                  !(
                    /[(`.[+\-/*%<>=,?^&]/.test(next) ||
                    (next === "!" && this.input.charAt(end + 1) === "=")
                  ))
              )
            }
            start += match[0].length

            // Skip semicolon, if any.
            skipWhiteSpace.lastIndex = start
            start += skipWhiteSpace.exec(this.input)[0].length
            if (this.input[start] === ";") {
              start++
            }
          }
        }

        // Predicate that tests whether the next token is of the given
        // type, and if yes, consumes it as a side effect.

        pp$9.eat = function (type) {
          if (this.type === type) {
            this.next()
            return true
          } else {
            return false
          }
        }

        // Tests whether parsed token is a contextual keyword.

        pp$9.isContextual = function (name) {
          return this.type === types$1.name && this.value === name && !this.containsEsc
        }

        // Consumes contextual keyword if possible.

        pp$9.eatContextual = function (name) {
          if (!this.isContextual(name)) {
            return false
          }
          this.next()
          return true
        }

        // Asserts that following token is given contextual keyword.

        pp$9.expectContextual = function (name) {
          if (!this.eatContextual(name)) {
            this.unexpected()
          }
        }

        // Test whether a semicolon can be inserted at the current position.

        pp$9.canInsertSemicolon = function () {
          return (
            this.type === types$1.eof ||
            this.type === types$1.braceR ||
            lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
          )
        }

        pp$9.insertSemicolon = function () {
          if (this.canInsertSemicolon()) {
            if (this.options.onInsertedSemicolon) {
              this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)
            }
            return true
          }
        }

        // Consume a semicolon, or, failing that, see if we are allowed to
        // pretend that there is a semicolon at this position.

        pp$9.semicolon = function () {
          if (!this.eat(types$1.semi) && !this.insertSemicolon()) {
            this.unexpected()
          }
        }

        pp$9.afterTrailingComma = function (tokType, notNext) {
          if (this.type === tokType) {
            if (this.options.onTrailingComma) {
              this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)
            }
            if (!notNext) {
              this.next()
            }
            return true
          }
        }

        // Expect a token of a given type. If found, consume it, otherwise,
        // raise an unexpected token error.

        pp$9.expect = function (type) {
          this.eat(type) || this.unexpected()
        }

        // Raise an unexpected token error.

        pp$9.unexpected = function (pos) {
          this.raise(pos != null ? pos : this.start, "Unexpected token")
        }

        function DestructuringErrors() {
          this.shorthandAssign =
            this.trailingComma =
            this.parenthesizedAssign =
            this.parenthesizedBind =
            this.doubleProto =
              -1
        }

        pp$9.checkPatternErrors = function (refDestructuringErrors, isAssign) {
          if (!refDestructuringErrors) {
            return
          }
          if (refDestructuringErrors.trailingComma > -1) {
            this.raiseRecoverable(
              refDestructuringErrors.trailingComma,
              "Comma is not permitted after the rest element"
            )
          }
          var parens = isAssign
            ? refDestructuringErrors.parenthesizedAssign
            : refDestructuringErrors.parenthesizedBind
          if (parens > -1) {
            this.raiseRecoverable(parens, "Parenthesized pattern")
          }
        }

        pp$9.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) {
            return false
          }
          var shorthandAssign = refDestructuringErrors.shorthandAssign
          var doubleProto = refDestructuringErrors.doubleProto
          if (!andThrow) {
            return shorthandAssign >= 0 || doubleProto >= 0
          }
          if (shorthandAssign >= 0) {
            this.raise(
              shorthandAssign,
              "Shorthand property assignments are valid only in destructuring patterns"
            )
          }
          if (doubleProto >= 0) {
            this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property")
          }
        }

        pp$9.checkYieldAwaitInDefaultParams = function () {
          if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
            this.raise(this.yieldPos, "Yield expression cannot be a default value")
          }
          if (this.awaitPos) {
            this.raise(this.awaitPos, "Await expression cannot be a default value")
          }
        }

        pp$9.isSimpleAssignTarget = function (expr) {
          if (expr.type === "ParenthesizedExpression") {
            return this.isSimpleAssignTarget(expr.expression)
          }
          return expr.type === "Identifier" || expr.type === "MemberExpression"
        }

        var pp$8 = Parser.prototype

        // ### Statement parsing

        // Parse a program. Initializes the parser, reads any number of
        // statements, and wraps them in a Program node.  Optionally takes a
        // `program` argument.  If present, the statements will be appended
        // to its body instead of creating a new node.

        pp$8.parseTopLevel = function (node) {
          var exports = Object.create(null)
          if (!node.body) {
            node.body = []
          }
          while (this.type !== types$1.eof) {
            var stmt = this.parseStatement(null, true, exports)
            node.body.push(stmt)
          }
          if (this.inModule) {
            for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
              var name = list[i]

              this.raiseRecoverable(
                this.undefinedExports[name].start,
                "Export '" + name + "' is not defined"
              )
            }
          }
          this.adaptDirectivePrologue(node.body)
          this.next()
          node.sourceType = this.options.sourceType
          return this.finishNode(node, "Program")
        }

        var loopLabel = { kind: "loop" },
          switchLabel = { kind: "switch" }

        pp$8.isLet = function (context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
            return false
          }
          skipWhiteSpace.lastIndex = this.pos
          var skip = skipWhiteSpace.exec(this.input)
          var next = this.pos + skip[0].length,
            nextCh = this.input.charCodeAt(next)
          // For ambiguous cases, determine if a LexicalDeclaration (or only a
          // Statement) is allowed here. If context is not empty then only a Statement
          // is allowed. However, `let [` is an explicit negative lookahead for
          // ExpressionStatement, so special-case it first.
          if (nextCh === 91 || nextCh === 92 || (nextCh > 0xd7ff && nextCh < 0xdc00)) {
            return true
          } // '[', '/', astral
          if (context) {
            return false
          }

          if (nextCh === 123) {
            return true
          } // '{'
          if (isIdentifierStart(nextCh, true)) {
            var pos = next + 1
            while (isIdentifierChar((nextCh = this.input.charCodeAt(pos)), true)) {
              ++pos
            }
            if (nextCh === 92 || (nextCh > 0xd7ff && nextCh < 0xdc00)) {
              return true
            }
            var ident = this.input.slice(next, pos)
            if (!keywordRelationalOperator.test(ident)) {
              return true
            }
          }
          return false
        }

        // check 'async [no LineTerminator here] function'
        // - 'async /*foo*/ function' is OK.
        // - 'async /*\n*/ function' is invalid.
        pp$8.isAsyncFunction = function () {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
            return false
          }

          skipWhiteSpace.lastIndex = this.pos
          var skip = skipWhiteSpace.exec(this.input)
          var next = this.pos + skip[0].length,
            after
          return (
            !lineBreak.test(this.input.slice(this.pos, next)) &&
            this.input.slice(next, next + 8) === "function" &&
            (next + 8 === this.input.length ||
              !(
                isIdentifierChar((after = this.input.charCodeAt(next + 8))) ||
                (after > 0xd7ff && after < 0xdc00)
              ))
          )
        }

        // Parse a single statement.
        //
        // If expecting a statement and finding a slash operator, parse a
        // regular expression literal. This is to handle cases like
        // `if (foo) /blah/.exec(foo)`, where looking at the previous token
        // does not help.

        pp$8.parseStatement = function (context, topLevel, exports) {
          var starttype = this.type,
            node = this.startNode(),
            kind

          if (this.isLet(context)) {
            starttype = types$1._var
            kind = "let"
          }

          // Most types of statements are recognized by the keyword they
          // start with. Many are trivial to parse, some require a bit of
          // complexity.

          switch (starttype) {
            case types$1._break:
            case types$1._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword)
            case types$1._debugger:
              return this.parseDebuggerStatement(node)
            case types$1._do:
              return this.parseDoStatement(node)
            case types$1._for:
              return this.parseForStatement(node)
            case types$1._function:
              // Function as sole body of either an if statement or a labeled statement
              // works, but not when it is part of a labeled statement that is the sole
              // body of an if statement.
              if (
                context &&
                (this.strict || (context !== "if" && context !== "label")) &&
                this.options.ecmaVersion >= 6
              ) {
                this.unexpected()
              }
              return this.parseFunctionStatement(node, false, !context)
            case types$1._class:
              if (context) {
                this.unexpected()
              }
              return this.parseClass(node, true)
            case types$1._if:
              return this.parseIfStatement(node)
            case types$1._return:
              return this.parseReturnStatement(node)
            case types$1._switch:
              return this.parseSwitchStatement(node)
            case types$1._throw:
              return this.parseThrowStatement(node)
            case types$1._try:
              return this.parseTryStatement(node)
            case types$1._const:
            case types$1._var:
              kind = kind || this.value
              if (context && kind !== "var") {
                this.unexpected()
              }
              return this.parseVarStatement(node, kind)
            case types$1._while:
              return this.parseWhileStatement(node)
            case types$1._with:
              return this.parseWithStatement(node)
            case types$1.braceL:
              return this.parseBlock(true, node)
            case types$1.semi:
              return this.parseEmptyStatement(node)
            case types$1._export:
            case types$1._import:
              if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
                skipWhiteSpace.lastIndex = this.pos
                var skip = skipWhiteSpace.exec(this.input)
                var next = this.pos + skip[0].length,
                  nextCh = this.input.charCodeAt(next)
                if (nextCh === 40 || nextCh === 46) {
                  // '(' or '.'
                  return this.parseExpressionStatement(node, this.parseExpression())
                }
              }

              if (!this.options.allowImportExportEverywhere) {
                if (!topLevel) {
                  this.raise(this.start, "'import' and 'export' may only appear at the top level")
                }
                if (!this.inModule) {
                  this.raise(
                    this.start,
                    "'import' and 'export' may appear only with 'sourceType: module'"
                  )
                }
              }
              return starttype === types$1._import
                ? this.parseImport(node)
                : this.parseExport(node, exports)

            // If the statement does not start with a statement keyword or a
            // brace, it's an ExpressionStatement or LabeledStatement. We
            // simply start parsing an expression, and afterwards, if the
            // next token is a colon and the expression was a simple
            // Identifier node, we switch to interpreting it as a label.
            default:
              if (this.isAsyncFunction()) {
                if (context) {
                  this.unexpected()
                }
                this.next()
                return this.parseFunctionStatement(node, true, !context)
              }

              var maybeName = this.value,
                expr = this.parseExpression()
              if (
                starttype === types$1.name &&
                expr.type === "Identifier" &&
                this.eat(types$1.colon)
              ) {
                return this.parseLabeledStatement(node, maybeName, expr, context)
              } else {
                return this.parseExpressionStatement(node, expr)
              }
          }
        }

        pp$8.parseBreakContinueStatement = function (node, keyword) {
          var isBreak = keyword === "break"
          this.next()
          if (this.eat(types$1.semi) || this.insertSemicolon()) {
            node.label = null
          } else if (this.type !== types$1.name) {
            this.unexpected()
          } else {
            node.label = this.parseIdent()
            this.semicolon()
          }

          // Verify that there is an actual destination to break or
          // continue to.
          var i = 0
          for (; i < this.labels.length; ++i) {
            var lab = this.labels[i]
            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === "loop")) {
                break
              }
              if (node.label && isBreak) {
                break
              }
            }
          }
          if (i === this.labels.length) {
            this.raise(node.start, "Unsyntactic " + keyword)
          }
          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
        }

        pp$8.parseDebuggerStatement = function (node) {
          this.next()
          this.semicolon()
          return this.finishNode(node, "DebuggerStatement")
        }

        pp$8.parseDoStatement = function (node) {
          this.next()
          this.labels.push(loopLabel)
          node.body = this.parseStatement("do")
          this.labels.pop()
          this.expect(types$1._while)
          node.test = this.parseParenExpression()
          if (this.options.ecmaVersion >= 6) {
            this.eat(types$1.semi)
          } else {
            this.semicolon()
          }
          return this.finishNode(node, "DoWhileStatement")
        }

        // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
        // loop is non-trivial. Basically, we have to parse the init `var`
        // statement or expression, disallowing the `in` operator (see
        // the second parameter to `parseExpression`), and then check
        // whether the next token is `in` or `of`. When there is no init
        // part (semicolon immediately after the opening parenthesis), it
        // is a regular `for` loop.

        pp$8.parseForStatement = function (node) {
          this.next()
          var awaitAt =
            this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await")
              ? this.lastTokStart
              : -1
          this.labels.push(loopLabel)
          this.enterScope(0)
          this.expect(types$1.parenL)
          if (this.type === types$1.semi) {
            if (awaitAt > -1) {
              this.unexpected(awaitAt)
            }
            return this.parseFor(node, null)
          }
          var isLet = this.isLet()
          if (this.type === types$1._var || this.type === types$1._const || isLet) {
            var init$1 = this.startNode(),
              kind = isLet ? "let" : this.value
            this.next()
            this.parseVar(init$1, true, kind)
            this.finishNode(init$1, "VariableDeclaration")
            if (
              (this.type === types$1._in ||
                (this.options.ecmaVersion >= 6 && this.isContextual("of"))) &&
              init$1.declarations.length === 1
            ) {
              if (this.options.ecmaVersion >= 9) {
                if (this.type === types$1._in) {
                  if (awaitAt > -1) {
                    this.unexpected(awaitAt)
                  }
                } else {
                  node.await = awaitAt > -1
                }
              }
              return this.parseForIn(node, init$1)
            }
            if (awaitAt > -1) {
              this.unexpected(awaitAt)
            }
            return this.parseFor(node, init$1)
          }
          var startsWithLet = this.isContextual("let"),
            isForOf = false
          var refDestructuringErrors = new DestructuringErrors()
          var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors)
          if (
            this.type === types$1._in ||
            (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))
          ) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types$1._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt)
                }
              } else {
                node.await = awaitAt > -1
              }
            }
            if (startsWithLet && isForOf) {
              this.raise(
                init.start,
                "The left-hand side of a for-of loop may not start with 'let'."
              )
            }
            this.toAssignable(init, false, refDestructuringErrors)
            this.checkLValPattern(init)
            return this.parseForIn(node, init)
          } else {
            this.checkExpressionErrors(refDestructuringErrors, true)
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt)
          }
          return this.parseFor(node, init)
        }

        pp$8.parseFunctionStatement = function (node, isAsync, declarationPosition) {
          this.next()
          return this.parseFunction(
            node,
            FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),
            false,
            isAsync
          )
        }

        pp$8.parseIfStatement = function (node) {
          this.next()
          node.test = this.parseParenExpression()
          // allow function declarations in branches, but only in non-strict mode
          node.consequent = this.parseStatement("if")
          node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null
          return this.finishNode(node, "IfStatement")
        }

        pp$8.parseReturnStatement = function (node) {
          if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
            this.raise(this.start, "'return' outside of function")
          }
          this.next()

          // In `return` (and `break`/`continue`), the keywords with
          // optional arguments, we eagerly look for a semicolon or the
          // possibility to insert one.

          if (this.eat(types$1.semi) || this.insertSemicolon()) {
            node.argument = null
          } else {
            node.argument = this.parseExpression()
            this.semicolon()
          }
          return this.finishNode(node, "ReturnStatement")
        }

        pp$8.parseSwitchStatement = function (node) {
          this.next()
          node.discriminant = this.parseParenExpression()
          node.cases = []
          this.expect(types$1.braceL)
          this.labels.push(switchLabel)
          this.enterScope(0)

          // Statements under must be grouped (by label) in SwitchCase
          // nodes. `cur` is used to keep the node that we are currently
          // adding statements to.

          var cur
          for (var sawDefault = false; this.type !== types$1.braceR; ) {
            if (this.type === types$1._case || this.type === types$1._default) {
              var isCase = this.type === types$1._case
              if (cur) {
                this.finishNode(cur, "SwitchCase")
              }
              node.cases.push((cur = this.startNode()))
              cur.consequent = []
              this.next()
              if (isCase) {
                cur.test = this.parseExpression()
              } else {
                if (sawDefault) {
                  this.raiseRecoverable(this.lastTokStart, "Multiple default clauses")
                }
                sawDefault = true
                cur.test = null
              }
              this.expect(types$1.colon)
            } else {
              if (!cur) {
                this.unexpected()
              }
              cur.consequent.push(this.parseStatement(null))
            }
          }
          this.exitScope()
          if (cur) {
            this.finishNode(cur, "SwitchCase")
          }
          this.next() // Closing brace
          this.labels.pop()
          return this.finishNode(node, "SwitchStatement")
        }

        pp$8.parseThrowStatement = function (node) {
          this.next()
          if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
            this.raise(this.lastTokEnd, "Illegal newline after throw")
          }
          node.argument = this.parseExpression()
          this.semicolon()
          return this.finishNode(node, "ThrowStatement")
        }

        // Reused empty array added for node fields that are always empty.

        var empty$1 = []

        pp$8.parseTryStatement = function (node) {
          this.next()
          node.block = this.parseBlock()
          node.handler = null
          if (this.type === types$1._catch) {
            var clause = this.startNode()
            this.next()
            if (this.eat(types$1.parenL)) {
              clause.param = this.parseBindingAtom()
              var simple = clause.param.type === "Identifier"
              this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0)
              this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL)
              this.expect(types$1.parenR)
            } else {
              if (this.options.ecmaVersion < 10) {
                this.unexpected()
              }
              clause.param = null
              this.enterScope(0)
            }
            clause.body = this.parseBlock(false)
            this.exitScope()
            node.handler = this.finishNode(clause, "CatchClause")
          }
          node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null
          if (!node.handler && !node.finalizer) {
            this.raise(node.start, "Missing catch or finally clause")
          }
          return this.finishNode(node, "TryStatement")
        }

        pp$8.parseVarStatement = function (node, kind) {
          this.next()
          this.parseVar(node, false, kind)
          this.semicolon()
          return this.finishNode(node, "VariableDeclaration")
        }

        pp$8.parseWhileStatement = function (node) {
          this.next()
          node.test = this.parseParenExpression()
          this.labels.push(loopLabel)
          node.body = this.parseStatement("while")
          this.labels.pop()
          return this.finishNode(node, "WhileStatement")
        }

        pp$8.parseWithStatement = function (node) {
          if (this.strict) {
            this.raise(this.start, "'with' in strict mode")
          }
          this.next()
          node.object = this.parseParenExpression()
          node.body = this.parseStatement("with")
          return this.finishNode(node, "WithStatement")
        }

        pp$8.parseEmptyStatement = function (node) {
          this.next()
          return this.finishNode(node, "EmptyStatement")
        }

        pp$8.parseLabeledStatement = function (node, maybeName, expr, context) {
          for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
            var label = list[i$1]

            if (label.name === maybeName) {
              this.raise(expr.start, "Label '" + maybeName + "' is already declared")
            }
          }
          var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null
          for (var i = this.labels.length - 1; i >= 0; i--) {
            var label$1 = this.labels[i]
            if (label$1.statementStart === node.start) {
              // Update information about previous labels on this node
              label$1.statementStart = this.start
              label$1.kind = kind
            } else {
              break
            }
          }
          this.labels.push({ name: maybeName, kind: kind, statementStart: this.start })
          node.body = this.parseStatement(
            context ? (context.indexOf("label") === -1 ? context + "label" : context) : "label"
          )
          this.labels.pop()
          node.label = expr
          return this.finishNode(node, "LabeledStatement")
        }

        pp$8.parseExpressionStatement = function (node, expr) {
          node.expression = expr
          this.semicolon()
          return this.finishNode(node, "ExpressionStatement")
        }

        // Parse a semicolon-enclosed block of statements, handling `"use
        // strict"` declarations when `allowStrict` is true (used for
        // function bodies).

        pp$8.parseBlock = function (createNewLexicalScope, node, exitStrict) {
          if (createNewLexicalScope === void 0) createNewLexicalScope = true
          if (node === void 0) node = this.startNode()

          node.body = []
          this.expect(types$1.braceL)
          if (createNewLexicalScope) {
            this.enterScope(0)
          }
          while (this.type !== types$1.braceR) {
            var stmt = this.parseStatement(null)
            node.body.push(stmt)
          }
          if (exitStrict) {
            this.strict = false
          }
          this.next()
          if (createNewLexicalScope) {
            this.exitScope()
          }
          return this.finishNode(node, "BlockStatement")
        }

        // Parse a regular `for` loop. The disambiguation code in
        // `parseStatement` will already have parsed the init statement or
        // expression.

        pp$8.parseFor = function (node, init) {
          node.init = init
          this.expect(types$1.semi)
          node.test = this.type === types$1.semi ? null : this.parseExpression()
          this.expect(types$1.semi)
          node.update = this.type === types$1.parenR ? null : this.parseExpression()
          this.expect(types$1.parenR)
          node.body = this.parseStatement("for")
          this.exitScope()
          this.labels.pop()
          return this.finishNode(node, "ForStatement")
        }

        // Parse a `for`/`in` and `for`/`of` loop, which are almost
        // same from parser's perspective.

        pp$8.parseForIn = function (node, init) {
          var isForIn = this.type === types$1._in
          this.next()

          if (
            init.type === "VariableDeclaration" &&
            init.declarations[0].init != null &&
            (!isForIn ||
              this.options.ecmaVersion < 8 ||
              this.strict ||
              init.kind !== "var" ||
              init.declarations[0].id.type !== "Identifier")
          ) {
            this.raise(
              init.start,
              (isForIn ? "for-in" : "for-of") +
                " loop variable declaration may not have an initializer"
            )
          }
          node.left = init
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign()
          this.expect(types$1.parenR)
          node.body = this.parseStatement("for")
          this.exitScope()
          this.labels.pop()
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement")
        }

        // Parse a list of variable declarations.

        pp$8.parseVar = function (node, isFor, kind) {
          node.declarations = []
          node.kind = kind
          for (;;) {
            var decl = this.startNode()
            this.parseVarId(decl, kind)
            if (this.eat(types$1.eq)) {
              decl.init = this.parseMaybeAssign(isFor)
            } else if (
              kind === "const" &&
              !(
                this.type === types$1._in ||
                (this.options.ecmaVersion >= 6 && this.isContextual("of"))
              )
            ) {
              this.unexpected()
            } else if (
              decl.id.type !== "Identifier" &&
              !(isFor && (this.type === types$1._in || this.isContextual("of")))
            ) {
              this.raise(
                this.lastTokEnd,
                "Complex binding patterns require an initialization value"
              )
            } else {
              decl.init = null
            }
            node.declarations.push(this.finishNode(decl, "VariableDeclarator"))
            if (!this.eat(types$1.comma)) {
              break
            }
          }
          return node
        }

        pp$8.parseVarId = function (decl, kind) {
          decl.id = this.parseBindingAtom()
          this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false)
        }

        var FUNC_STATEMENT = 1,
          FUNC_HANGING_STATEMENT = 2,
          FUNC_NULLABLE_ID = 4

        // Parse a function declaration or literal (depending on the
        // `statement & FUNC_STATEMENT`).

        // Remove `allowExpressionBody` for 7.0.0, as it is only called with false
        pp$8.parseFunction = function (node, statement, allowExpressionBody, isAsync, forInit) {
          this.initFunction(node)
          if (this.options.ecmaVersion >= 9 || (this.options.ecmaVersion >= 6 && !isAsync)) {
            if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {
              this.unexpected()
            }
            node.generator = this.eat(types$1.star)
          }
          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync
          }

          if (statement & FUNC_STATEMENT) {
            node.id =
              statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent()
            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
              // If it is a regular function declaration in sloppy mode, then it is
              // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
              // mode depends on properties of the current scope (see
              // treatFunctionsAsVar).
              this.checkLValSimple(
                node.id,
                this.strict || node.generator || node.async
                  ? this.treatFunctionsAsVar
                    ? BIND_VAR
                    : BIND_LEXICAL
                  : BIND_FUNCTION
              )
            }
          }

          var oldYieldPos = this.yieldPos,
            oldAwaitPos = this.awaitPos,
            oldAwaitIdentPos = this.awaitIdentPos
          this.yieldPos = 0
          this.awaitPos = 0
          this.awaitIdentPos = 0
          this.enterScope(functionFlags(node.async, node.generator))

          if (!(statement & FUNC_STATEMENT)) {
            node.id = this.type === types$1.name ? this.parseIdent() : null
          }

          this.parseFunctionParams(node)
          this.parseFunctionBody(node, allowExpressionBody, false, forInit)

          this.yieldPos = oldYieldPos
          this.awaitPos = oldAwaitPos
          this.awaitIdentPos = oldAwaitIdentPos
          return this.finishNode(
            node,
            statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression"
          )
        }

        pp$8.parseFunctionParams = function (node) {
          this.expect(types$1.parenL)
          node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8)
          this.checkYieldAwaitInDefaultParams()
        }

        // Parse a class declaration or literal (depending on the
        // `isStatement` parameter).

        pp$8.parseClass = function (node, isStatement) {
          this.next()

          // ecma-262 14.6 Class Definitions
          // A class definition is always strict mode code.
          var oldStrict = this.strict
          this.strict = true

          this.parseClassId(node, isStatement)
          this.parseClassSuper(node)
          var privateNameMap = this.enterClassBody()
          var classBody = this.startNode()
          var hadConstructor = false
          classBody.body = []
          this.expect(types$1.braceL)
          while (this.type !== types$1.braceR) {
            var element = this.parseClassElement(node.superClass !== null)
            if (element) {
              classBody.body.push(element)
              if (element.type === "MethodDefinition" && element.kind === "constructor") {
                if (hadConstructor) {
                  this.raise(element.start, "Duplicate constructor in the same class")
                }
                hadConstructor = true
              } else if (
                element.key &&
                element.key.type === "PrivateIdentifier" &&
                isPrivateNameConflicted(privateNameMap, element)
              ) {
                this.raiseRecoverable(
                  element.key.start,
                  "Identifier '#" + element.key.name + "' has already been declared"
                )
              }
            }
          }
          this.strict = oldStrict
          this.next()
          node.body = this.finishNode(classBody, "ClassBody")
          this.exitClassBody()
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
        }

        pp$8.parseClassElement = function (constructorAllowsSuper) {
          if (this.eat(types$1.semi)) {
            return null
          }

          var ecmaVersion = this.options.ecmaVersion
          var node = this.startNode()
          var keyName = ""
          var isGenerator = false
          var isAsync = false
          var kind = "method"
          var isStatic = false

          if (this.eatContextual("static")) {
            // Parse static init block
            if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {
              this.parseClassStaticBlock(node)
              return node
            }
            if (this.isClassElementNameStart() || this.type === types$1.star) {
              isStatic = true
            } else {
              keyName = "static"
            }
          }
          node.static = isStatic
          if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
            if (
              (this.isClassElementNameStart() || this.type === types$1.star) &&
              !this.canInsertSemicolon()
            ) {
              isAsync = true
            } else {
              keyName = "async"
            }
          }
          if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {
            isGenerator = true
          }
          if (!keyName && !isAsync && !isGenerator) {
            var lastValue = this.value
            if (this.eatContextual("get") || this.eatContextual("set")) {
              if (this.isClassElementNameStart()) {
                kind = lastValue
              } else {
                keyName = lastValue
              }
            }
          }

          // Parse element name
          if (keyName) {
            // 'async', 'get', 'set', or 'static' were not a keyword contextually.
            // The last token is any of those. Make it the element name.
            node.computed = false
            node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc)
            node.key.name = keyName
            this.finishNode(node.key, "Identifier")
          } else {
            this.parseClassElementName(node)
          }

          // Parse element value
          if (
            ecmaVersion < 13 ||
            this.type === types$1.parenL ||
            kind !== "method" ||
            isGenerator ||
            isAsync
          ) {
            var isConstructor = !node.static && checkKeyName(node, "constructor")
            var allowsDirectSuper = isConstructor && constructorAllowsSuper
            // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.
            if (isConstructor && kind !== "method") {
              this.raise(node.key.start, "Constructor can't have get/set modifier")
            }
            node.kind = isConstructor ? "constructor" : kind
            this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper)
          } else {
            this.parseClassField(node)
          }

          return node
        }

        pp$8.isClassElementNameStart = function () {
          return (
            this.type === types$1.name ||
            this.type === types$1.privateId ||
            this.type === types$1.num ||
            this.type === types$1.string ||
            this.type === types$1.bracketL ||
            this.type.keyword
          )
        }

        pp$8.parseClassElementName = function (element) {
          if (this.type === types$1.privateId) {
            if (this.value === "constructor") {
              this.raise(this.start, "Classes can't have an element named '#constructor'")
            }
            element.computed = false
            element.key = this.parsePrivateIdent()
          } else {
            this.parsePropertyName(element)
          }
        }

        pp$8.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
          // Check key and flags
          var key = method.key
          if (method.kind === "constructor") {
            if (isGenerator) {
              this.raise(key.start, "Constructor can't be a generator")
            }
            if (isAsync) {
              this.raise(key.start, "Constructor can't be an async method")
            }
          } else if (method.static && checkKeyName(method, "prototype")) {
            this.raise(key.start, "Classes may not have a static property named prototype")
          }

          // Parse value
          var value = (method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper))

          // Check value
          if (method.kind === "get" && value.params.length !== 0) {
            this.raiseRecoverable(value.start, "getter should have no params")
          }
          if (method.kind === "set" && value.params.length !== 1) {
            this.raiseRecoverable(value.start, "setter should have exactly one param")
          }
          if (method.kind === "set" && value.params[0].type === "RestElement") {
            this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params")
          }

          return this.finishNode(method, "MethodDefinition")
        }

        pp$8.parseClassField = function (field) {
          if (checkKeyName(field, "constructor")) {
            this.raise(field.key.start, "Classes can't have a field named 'constructor'")
          } else if (field.static && checkKeyName(field, "prototype")) {
            this.raise(field.key.start, "Classes can't have a static field named 'prototype'")
          }

          if (this.eat(types$1.eq)) {
            // To raise SyntaxError if 'arguments' exists in the initializer.
            var scope = this.currentThisScope()
            var inClassFieldInit = scope.inClassFieldInit
            scope.inClassFieldInit = true
            field.value = this.parseMaybeAssign()
            scope.inClassFieldInit = inClassFieldInit
          } else {
            field.value = null
          }
          this.semicolon()

          return this.finishNode(field, "PropertyDefinition")
        }

        pp$8.parseClassStaticBlock = function (node) {
          node.body = []

          var oldLabels = this.labels
          this.labels = []
          this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER)
          while (this.type !== types$1.braceR) {
            var stmt = this.parseStatement(null)
            node.body.push(stmt)
          }
          this.next()
          this.exitScope()
          this.labels = oldLabels

          return this.finishNode(node, "StaticBlock")
        }

        pp$8.parseClassId = function (node, isStatement) {
          if (this.type === types$1.name) {
            node.id = this.parseIdent()
            if (isStatement) {
              this.checkLValSimple(node.id, BIND_LEXICAL, false)
            }
          } else {
            if (isStatement === true) {
              this.unexpected()
            }
            node.id = null
          }
        }

        pp$8.parseClassSuper = function (node) {
          node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(false) : null
        }

        pp$8.enterClassBody = function () {
          var element = { declared: Object.create(null), used: [] }
          this.privateNameStack.push(element)
          return element.declared
        }

        pp$8.exitClassBody = function () {
          var ref = this.privateNameStack.pop()
          var declared = ref.declared
          var used = ref.used
          var len = this.privateNameStack.length
          var parent = len === 0 ? null : this.privateNameStack[len - 1]
          for (var i = 0; i < used.length; ++i) {
            var id = used[i]
            if (!hasOwn(declared, id.name)) {
              if (parent) {
                parent.used.push(id)
              } else {
                this.raiseRecoverable(
                  id.start,
                  "Private field '#" + id.name + "' must be declared in an enclosing class"
                )
              }
            }
          }
        }

        function isPrivateNameConflicted(privateNameMap, element) {
          var name = element.key.name
          var curr = privateNameMap[name]

          var next = "true"
          if (
            element.type === "MethodDefinition" &&
            (element.kind === "get" || element.kind === "set")
          ) {
            next = (element.static ? "s" : "i") + element.kind
          }

          // `class { get #a(){}; static set #a(_){} }` is also conflict.
          if (
            (curr === "iget" && next === "iset") ||
            (curr === "iset" && next === "iget") ||
            (curr === "sget" && next === "sset") ||
            (curr === "sset" && next === "sget")
          ) {
            privateNameMap[name] = "true"
            return false
          } else if (!curr) {
            privateNameMap[name] = next
            return false
          } else {
            return true
          }
        }

        function checkKeyName(node, name) {
          var computed = node.computed
          var key = node.key
          return (
            !computed &&
            ((key.type === "Identifier" && key.name === name) ||
              (key.type === "Literal" && key.value === name))
          )
        }

        // Parses module export declaration.

        pp$8.parseExport = function (node, exports) {
          this.next()
          // export * from '...'
          if (this.eat(types$1.star)) {
            if (this.options.ecmaVersion >= 11) {
              if (this.eatContextual("as")) {
                node.exported = this.parseModuleExportName()
                this.checkExport(exports, node.exported.name, this.lastTokStart)
              } else {
                node.exported = null
              }
            }
            this.expectContextual("from")
            if (this.type !== types$1.string) {
              this.unexpected()
            }
            node.source = this.parseExprAtom()
            this.semicolon()
            return this.finishNode(node, "ExportAllDeclaration")
          }
          if (this.eat(types$1._default)) {
            // export default ...
            this.checkExport(exports, "default", this.lastTokStart)
            var isAsync
            if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode()
              this.next()
              if (isAsync) {
                this.next()
              }
              node.declaration = this.parseFunction(
                fNode,
                FUNC_STATEMENT | FUNC_NULLABLE_ID,
                false,
                isAsync
              )
            } else if (this.type === types$1._class) {
              var cNode = this.startNode()
              node.declaration = this.parseClass(cNode, "nullableID")
            } else {
              node.declaration = this.parseMaybeAssign()
              this.semicolon()
            }
            return this.finishNode(node, "ExportDefaultDeclaration")
          }
          // export var|const|let|function|class ...
          if (this.shouldParseExportStatement()) {
            node.declaration = this.parseStatement(null)
            if (node.declaration.type === "VariableDeclaration") {
              this.checkVariableExport(exports, node.declaration.declarations)
            } else {
              this.checkExport(exports, node.declaration.id.name, node.declaration.id.start)
            }
            node.specifiers = []
            node.source = null
          } else {
            // export { x, y as z } [from '...']
            node.declaration = null
            node.specifiers = this.parseExportSpecifiers(exports)
            if (this.eatContextual("from")) {
              if (this.type !== types$1.string) {
                this.unexpected()
              }
              node.source = this.parseExprAtom()
            } else {
              for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                // check for keywords used as local names
                var spec = list[i]

                this.checkUnreserved(spec.local)
                // check if export is defined
                this.checkLocalExport(spec.local)

                if (spec.local.type === "Literal") {
                  this.raise(
                    spec.local.start,
                    "A string literal cannot be used as an exported binding without `from`."
                  )
                }
              }

              node.source = null
            }
            this.semicolon()
          }
          return this.finishNode(node, "ExportNamedDeclaration")
        }

        pp$8.checkExport = function (exports, name, pos) {
          if (!exports) {
            return
          }
          if (hasOwn(exports, name)) {
            this.raiseRecoverable(pos, "Duplicate export '" + name + "'")
          }
          exports[name] = true
        }

        pp$8.checkPatternExport = function (exports, pat) {
          var type = pat.type
          if (type === "Identifier") {
            this.checkExport(exports, pat.name, pat.start)
          } else if (type === "ObjectPattern") {
            for (var i = 0, list = pat.properties; i < list.length; i += 1) {
              var prop = list[i]

              this.checkPatternExport(exports, prop)
            }
          } else if (type === "ArrayPattern") {
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1]

              if (elt) {
                this.checkPatternExport(exports, elt)
              }
            }
          } else if (type === "Property") {
            this.checkPatternExport(exports, pat.value)
          } else if (type === "AssignmentPattern") {
            this.checkPatternExport(exports, pat.left)
          } else if (type === "RestElement") {
            this.checkPatternExport(exports, pat.argument)
          } else if (type === "ParenthesizedExpression") {
            this.checkPatternExport(exports, pat.expression)
          }
        }

        pp$8.checkVariableExport = function (exports, decls) {
          if (!exports) {
            return
          }
          for (var i = 0, list = decls; i < list.length; i += 1) {
            var decl = list[i]

            this.checkPatternExport(exports, decl.id)
          }
        }

        pp$8.shouldParseExportStatement = function () {
          return (
            this.type.keyword === "var" ||
            this.type.keyword === "const" ||
            this.type.keyword === "class" ||
            this.type.keyword === "function" ||
            this.isLet() ||
            this.isAsyncFunction()
          )
        }

        // Parses a comma-separated list of module exports.

        pp$8.parseExportSpecifiers = function (exports) {
          var nodes = [],
            first = true
          // export { x, y as z } [from '...']
          this.expect(types$1.braceL)
          while (!this.eat(types$1.braceR)) {
            if (!first) {
              this.expect(types$1.comma)
              if (this.afterTrailingComma(types$1.braceR)) {
                break
              }
            } else {
              first = false
            }

            var node = this.startNode()
            node.local = this.parseModuleExportName()
            node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local
            this.checkExport(
              exports,
              node.exported[node.exported.type === "Identifier" ? "name" : "value"],
              node.exported.start
            )
            nodes.push(this.finishNode(node, "ExportSpecifier"))
          }
          return nodes
        }

        // Parses import declaration.

        pp$8.parseImport = function (node) {
          this.next()
          // import '...'
          if (this.type === types$1.string) {
            node.specifiers = empty$1
            node.source = this.parseExprAtom()
          } else {
            node.specifiers = this.parseImportSpecifiers()
            this.expectContextual("from")
            node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()
          }
          this.semicolon()
          return this.finishNode(node, "ImportDeclaration")
        }

        // Parses a comma-separated list of module imports.

        pp$8.parseImportSpecifiers = function () {
          var nodes = [],
            first = true
          if (this.type === types$1.name) {
            // import defaultObj, { x, y as z } from '...'
            var node = this.startNode()
            node.local = this.parseIdent()
            this.checkLValSimple(node.local, BIND_LEXICAL)
            nodes.push(this.finishNode(node, "ImportDefaultSpecifier"))
            if (!this.eat(types$1.comma)) {
              return nodes
            }
          }
          if (this.type === types$1.star) {
            var node$1 = this.startNode()
            this.next()
            this.expectContextual("as")
            node$1.local = this.parseIdent()
            this.checkLValSimple(node$1.local, BIND_LEXICAL)
            nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"))
            return nodes
          }
          this.expect(types$1.braceL)
          while (!this.eat(types$1.braceR)) {
            if (!first) {
              this.expect(types$1.comma)
              if (this.afterTrailingComma(types$1.braceR)) {
                break
              }
            } else {
              first = false
            }

            var node$2 = this.startNode()
            node$2.imported = this.parseModuleExportName()
            if (this.eatContextual("as")) {
              node$2.local = this.parseIdent()
            } else {
              this.checkUnreserved(node$2.imported)
              node$2.local = node$2.imported
            }
            this.checkLValSimple(node$2.local, BIND_LEXICAL)
            nodes.push(this.finishNode(node$2, "ImportSpecifier"))
          }
          return nodes
        }

        pp$8.parseModuleExportName = function () {
          if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
            var stringLiteral = this.parseLiteral(this.value)
            if (loneSurrogate.test(stringLiteral.value)) {
              this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.")
            }
            return stringLiteral
          }
          return this.parseIdent(true)
        }

        // Set `ExpressionStatement#directive` property for directive prologues.
        pp$8.adaptDirectivePrologue = function (statements) {
          for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
            statements[i].directive = statements[i].expression.raw.slice(1, -1)
          }
        }
        pp$8.isDirectiveCandidate = function (statement) {
          return (
            statement.type === "ExpressionStatement" &&
            statement.expression.type === "Literal" &&
            typeof statement.expression.value === "string" &&
            // Reject parenthesized strings.
            (this.input[statement.start] === '"' || this.input[statement.start] === "'")
          )
        }

        var pp$7 = Parser.prototype

        // Convert existing expression atom to assignable pattern
        // if possible.

        pp$7.toAssignable = function (node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) {
            switch (node.type) {
              case "Identifier":
                if (this.inAsync && node.name === "await") {
                  this.raise(
                    node.start,
                    "Cannot use 'await' as identifier inside an async function"
                  )
                }
                break

              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break

              case "ObjectExpression":
                node.type = "ObjectPattern"
                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true)
                }
                for (var i = 0, list = node.properties; i < list.length; i += 1) {
                  var prop = list[i]

                  this.toAssignable(prop, isBinding)
                  // Early error:
                  //   AssignmentRestProperty[Yield, Await] :
                  //     `...` DestructuringAssignmentTarget[Yield, Await]
                  //
                  //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
                  if (
                    prop.type === "RestElement" &&
                    (prop.argument.type === "ArrayPattern" ||
                      prop.argument.type === "ObjectPattern")
                  ) {
                    this.raise(prop.argument.start, "Unexpected token")
                  }
                }
                break

              case "Property":
                // AssignmentProperty has type === "Property"
                if (node.kind !== "init") {
                  this.raise(node.key.start, "Object pattern can't contain getter or setter")
                }
                this.toAssignable(node.value, isBinding)
                break

              case "ArrayExpression":
                node.type = "ArrayPattern"
                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true)
                }
                this.toAssignableList(node.elements, isBinding)
                break

              case "SpreadElement":
                node.type = "RestElement"
                this.toAssignable(node.argument, isBinding)
                if (node.argument.type === "AssignmentPattern") {
                  this.raise(node.argument.start, "Rest elements cannot have a default value")
                }
                break

              case "AssignmentExpression":
                if (node.operator !== "=") {
                  this.raise(
                    node.left.end,
                    "Only '=' operator can be used for specifying default value."
                  )
                }
                node.type = "AssignmentPattern"
                delete node.operator
                this.toAssignable(node.left, isBinding)
                break

              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isBinding, refDestructuringErrors)
                break

              case "ChainExpression":
                this.raiseRecoverable(
                  node.start,
                  "Optional chaining cannot appear in left-hand side"
                )
                break

              case "MemberExpression":
                if (!isBinding) {
                  break
                }

              default:
                this.raise(node.start, "Assigning to rvalue")
            }
          } else if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true)
          }
          return node
        }

        // Convert list of expression atoms to binding list.

        pp$7.toAssignableList = function (exprList, isBinding) {
          var end = exprList.length
          for (var i = 0; i < end; i++) {
            var elt = exprList[i]
            if (elt) {
              this.toAssignable(elt, isBinding)
            }
          }
          if (end) {
            var last = exprList[end - 1]
            if (
              this.options.ecmaVersion === 6 &&
              isBinding &&
              last &&
              last.type === "RestElement" &&
              last.argument.type !== "Identifier"
            ) {
              this.unexpected(last.argument.start)
            }
          }
          return exprList
        }

        // Parses spread element.

        pp$7.parseSpread = function (refDestructuringErrors) {
          var node = this.startNode()
          this.next()
          node.argument = this.parseMaybeAssign(false, refDestructuringErrors)
          return this.finishNode(node, "SpreadElement")
        }

        pp$7.parseRestBinding = function () {
          var node = this.startNode()
          this.next()

          // RestElement inside of a function parameter must be an identifier
          if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {
            this.unexpected()
          }

          node.argument = this.parseBindingAtom()

          return this.finishNode(node, "RestElement")
        }

        // Parses lvalue (assignable) atom.

        pp$7.parseBindingAtom = function () {
          if (this.options.ecmaVersion >= 6) {
            switch (this.type) {
              case types$1.bracketL:
                var node = this.startNode()
                this.next()
                node.elements = this.parseBindingList(types$1.bracketR, true, true)
                return this.finishNode(node, "ArrayPattern")

              case types$1.braceL:
                return this.parseObj(true)
            }
          }
          return this.parseIdent()
        }

        pp$7.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
          var elts = [],
            first = true
          while (!this.eat(close)) {
            if (first) {
              first = false
            } else {
              this.expect(types$1.comma)
            }
            if (allowEmpty && this.type === types$1.comma) {
              elts.push(null)
            } else if (allowTrailingComma && this.afterTrailingComma(close)) {
              break
            } else if (this.type === types$1.ellipsis) {
              var rest = this.parseRestBinding()
              this.parseBindingListItem(rest)
              elts.push(rest)
              if (this.type === types$1.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element")
              }
              this.expect(close)
              break
            } else {
              var elem = this.parseMaybeDefault(this.start, this.startLoc)
              this.parseBindingListItem(elem)
              elts.push(elem)
            }
          }
          return elts
        }

        pp$7.parseBindingListItem = function (param) {
          return param
        }

        // Parses assignment pattern around given atom if possible.

        pp$7.parseMaybeDefault = function (startPos, startLoc, left) {
          left = left || this.parseBindingAtom()
          if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {
            return left
          }
          var node = this.startNodeAt(startPos, startLoc)
          node.left = left
          node.right = this.parseMaybeAssign()
          return this.finishNode(node, "AssignmentPattern")
        }

        // The following three functions all verify that a node is an lvalue —
        // something that can be bound, or assigned to. In order to do so, they perform
        // a variety of checks:
        //
        // - Check that none of the bound/assigned-to identifiers are reserved words.
        // - Record name declarations for bindings in the appropriate scope.
        // - Check duplicate argument names, if checkClashes is set.
        //
        // If a complex binding pattern is encountered (e.g., object and array
        // destructuring), the entire pattern is recursively checked.
        //
        // There are three versions of checkLVal*() appropriate for different
        // circumstances:
        //
        // - checkLValSimple() shall be used if the syntactic construct supports
        //   nothing other than identifiers and member expressions. Parenthesized
        //   expressions are also correctly handled. This is generally appropriate for
        //   constructs for which the spec says
        //
        //   > It is a Syntax Error if AssignmentTargetType of [the production] is not
        //   > simple.
        //
        //   It is also appropriate for checking if an identifier is valid and not
        //   defined elsewhere, like import declarations or function/class identifiers.
        //
        //   Examples where this is used include:
        //     a += …;
        //     import a from '…';
        //   where a is the node to be checked.
        //
        // - checkLValPattern() shall be used if the syntactic construct supports
        //   anything checkLValSimple() supports, as well as object and array
        //   destructuring patterns. This is generally appropriate for constructs for
        //   which the spec says
        //
        //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor
        //   > an ArrayLiteral and AssignmentTargetType of [the production] is not
        //   > simple.
        //
        //   Examples where this is used include:
        //     (a = …);
        //     const a = …;
        //     try { … } catch (a) { … }
        //   where a is the node to be checked.
        //
        // - checkLValInnerPattern() shall be used if the syntactic construct supports
        //   anything checkLValPattern() supports, as well as default assignment
        //   patterns, rest elements, and other constructs that may appear within an
        //   object or array destructuring pattern.
        //
        //   As a special case, function parameters also use checkLValInnerPattern(),
        //   as they also support defaults and rest constructs.
        //
        // These functions deliberately support both assignment and binding constructs,
        // as the logic for both is exceedingly similar. If the node is the target of
        // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it
        // should be set to the appropriate BIND_* constant, like BIND_VAR or
        // BIND_LEXICAL.
        //
        // If the function is called with a non-BIND_NONE bindingType, then
        // additionally a checkClashes object may be specified to allow checking for
        // duplicate argument names. checkClashes is ignored if the provided construct
        // is an assignment (i.e., bindingType is BIND_NONE).

        pp$7.checkLValSimple = function (expr, bindingType, checkClashes) {
          if (bindingType === void 0) bindingType = BIND_NONE

          var isBind = bindingType !== BIND_NONE

          switch (expr.type) {
            case "Identifier":
              if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
                this.raiseRecoverable(
                  expr.start,
                  (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"
                )
              }
              if (isBind) {
                if (bindingType === BIND_LEXICAL && expr.name === "let") {
                  this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name")
                }
                if (checkClashes) {
                  if (hasOwn(checkClashes, expr.name)) {
                    this.raiseRecoverable(expr.start, "Argument name clash")
                  }
                  checkClashes[expr.name] = true
                }
                if (bindingType !== BIND_OUTSIDE) {
                  this.declareName(expr.name, bindingType, expr.start)
                }
              }
              break

            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side")
              break

            case "MemberExpression":
              if (isBind) {
                this.raiseRecoverable(expr.start, "Binding member expression")
              }
              break

            case "ParenthesizedExpression":
              if (isBind) {
                this.raiseRecoverable(expr.start, "Binding parenthesized expression")
              }
              return this.checkLValSimple(expr.expression, bindingType, checkClashes)

            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue")
          }
        }

        pp$7.checkLValPattern = function (expr, bindingType, checkClashes) {
          if (bindingType === void 0) bindingType = BIND_NONE

          switch (expr.type) {
            case "ObjectPattern":
              for (var i = 0, list = expr.properties; i < list.length; i += 1) {
                var prop = list[i]

                this.checkLValInnerPattern(prop, bindingType, checkClashes)
              }
              break

            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1]

                if (elem) {
                  this.checkLValInnerPattern(elem, bindingType, checkClashes)
                }
              }
              break

            default:
              this.checkLValSimple(expr, bindingType, checkClashes)
          }
        }

        pp$7.checkLValInnerPattern = function (expr, bindingType, checkClashes) {
          if (bindingType === void 0) bindingType = BIND_NONE

          switch (expr.type) {
            case "Property":
              // AssignmentProperty has type === "Property"
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes)
              break

            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes)
              break

            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes)
              break

            default:
              this.checkLValPattern(expr, bindingType, checkClashes)
          }
        }

        // The algorithm used to determine whether a regexp can appear at a

        var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
          this.token = token
          this.isExpr = !!isExpr
          this.preserveSpace = !!preserveSpace
          this.override = override
          this.generator = !!generator
        }

        var types = {
          b_stat: new TokContext("{", false),
          b_expr: new TokContext("{", true),
          b_tmpl: new TokContext("${", false),
          p_stat: new TokContext("(", false),
          p_expr: new TokContext("(", true),
          q_tmpl: new TokContext("`", true, true, function (p) {
            return p.tryReadTemplateToken()
          }),
          f_stat: new TokContext("function", false),
          f_expr: new TokContext("function", true),
          f_expr_gen: new TokContext("function", true, false, null, true),
          f_gen: new TokContext("function", false, false, null, true)
        }

        var pp$6 = Parser.prototype

        pp$6.initialContext = function () {
          return [types.b_stat]
        }

        pp$6.curContext = function () {
          return this.context[this.context.length - 1]
        }

        pp$6.braceIsBlock = function (prevType) {
          var parent = this.curContext()
          if (parent === types.f_expr || parent === types.f_stat) {
            return true
          }
          if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {
            return !parent.isExpr
          }

          // The check for `tt.name && exprAllowed` detects whether we are
          // after a `yield` or `of` construct. See the `updateContext` for
          // `tt.name`.
          if (prevType === types$1._return || (prevType === types$1.name && this.exprAllowed)) {
            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
          }
          if (
            prevType === types$1._else ||
            prevType === types$1.semi ||
            prevType === types$1.eof ||
            prevType === types$1.parenR ||
            prevType === types$1.arrow
          ) {
            return true
          }
          if (prevType === types$1.braceL) {
            return parent === types.b_stat
          }
          if (
            prevType === types$1._var ||
            prevType === types$1._const ||
            prevType === types$1.name
          ) {
            return false
          }
          return !this.exprAllowed
        }

        pp$6.inGeneratorContext = function () {
          for (var i = this.context.length - 1; i >= 1; i--) {
            var context = this.context[i]
            if (context.token === "function") {
              return context.generator
            }
          }
          return false
        }

        pp$6.updateContext = function (prevType) {
          var update,
            type = this.type
          if (type.keyword && prevType === types$1.dot) {
            this.exprAllowed = false
          } else if ((update = type.updateContext)) {
            update.call(this, prevType)
          } else {
            this.exprAllowed = type.beforeExpr
          }
        }

        // Used to handle egde case when token context could not be inferred correctly in tokenize phase
        pp$6.overrideContext = function (tokenCtx) {
          if (this.curContext() !== tokenCtx) {
            this.context[this.context.length - 1] = tokenCtx
          }
        }

        // Token-specific context update code

        types$1.parenR.updateContext = types$1.braceR.updateContext = function () {
          if (this.context.length === 1) {
            this.exprAllowed = true
            return
          }
          var out = this.context.pop()
          if (out === types.b_stat && this.curContext().token === "function") {
            out = this.context.pop()
          }
          this.exprAllowed = !out.isExpr
        }

        types$1.braceL.updateContext = function (prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)
          this.exprAllowed = true
        }

        types$1.dollarBraceL.updateContext = function () {
          this.context.push(types.b_tmpl)
          this.exprAllowed = true
        }

        types$1.parenL.updateContext = function (prevType) {
          var statementParens =
            prevType === types$1._if ||
            prevType === types$1._for ||
            prevType === types$1._with ||
            prevType === types$1._while
          this.context.push(statementParens ? types.p_stat : types.p_expr)
          this.exprAllowed = true
        }

        types$1.incDec.updateContext = function () {
          // tokExprAllowed stays unchanged
        }

        types$1._function.updateContext = types$1._class.updateContext = function (prevType) {
          if (
            prevType.beforeExpr &&
            prevType !== types$1._else &&
            !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&
            !(
              prevType === types$1._return &&
              lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
            ) &&
            !(
              (prevType === types$1.colon || prevType === types$1.braceL) &&
              this.curContext() === types.b_stat
            )
          ) {
            this.context.push(types.f_expr)
          } else {
            this.context.push(types.f_stat)
          }
          this.exprAllowed = false
        }

        types$1.backQuote.updateContext = function () {
          if (this.curContext() === types.q_tmpl) {
            this.context.pop()
          } else {
            this.context.push(types.q_tmpl)
          }
          this.exprAllowed = false
        }

        types$1.star.updateContext = function (prevType) {
          if (prevType === types$1._function) {
            var index = this.context.length - 1
            if (this.context[index] === types.f_expr) {
              this.context[index] = types.f_expr_gen
            } else {
              this.context[index] = types.f_gen
            }
          }
          this.exprAllowed = true
        }

        types$1.name.updateContext = function (prevType) {
          var allowed = false
          if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
            if (
              (this.value === "of" && !this.exprAllowed) ||
              (this.value === "yield" && this.inGeneratorContext())
            ) {
              allowed = true
            }
          }
          this.exprAllowed = allowed
        }

        // A recursive descent parser operates by defining functions for all

        var pp$5 = Parser.prototype

        // Check if property name clashes with already added.
        // Object/class getters and setters are not allowed to clash —
        // either with each other or with an init property — and in
        // strict mode, init properties are also not allowed to be repeated.

        pp$5.checkPropClash = function (prop, propHash, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
            return
          }
          if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
            return
          }
          var key = prop.key
          var name
          switch (key.type) {
            case "Identifier":
              name = key.name
              break
            case "Literal":
              name = String(key.value)
              break
            default:
              return
          }
          var kind = prop.kind
          if (this.options.ecmaVersion >= 6) {
            if (name === "__proto__" && kind === "init") {
              if (propHash.proto) {
                if (refDestructuringErrors) {
                  if (refDestructuringErrors.doubleProto < 0) {
                    refDestructuringErrors.doubleProto = key.start
                  }
                } else {
                  this.raiseRecoverable(key.start, "Redefinition of __proto__ property")
                }
              }
              propHash.proto = true
            }
            return
          }
          name = "$" + name
          var other = propHash[name]
          if (other) {
            var redefinition
            if (kind === "init") {
              redefinition = (this.strict && other.init) || other.get || other.set
            } else {
              redefinition = other.init || other[kind]
            }
            if (redefinition) {
              this.raiseRecoverable(key.start, "Redefinition of property")
            }
          } else {
            other = propHash[name] = {
              init: false,
              get: false,
              set: false
            }
          }
          other[kind] = true
        }

        // ### Expression parsing

        // These nest, from the most general expression type at the top to
        // 'atomic', nondivisible expression types at the bottom. Most of
        // the functions will simply let the function(s) below them parse,
        // and, *if* the syntactic construct they handle is present, wrap
        // the AST node that the inner parser gave them in another node.

        // Parse a full expression. The optional arguments are used to
        // forbid the `in` operator (in for loops initalization expressions)
        // and provide reference for storing '=' operator inside shorthand
        // property assignment in contexts where both object expression
        // and object pattern might appear (so it's possible to raise
        // delayed syntax error at correct position).

        pp$5.parseExpression = function (forInit, refDestructuringErrors) {
          var startPos = this.start,
            startLoc = this.startLoc
          var expr = this.parseMaybeAssign(forInit, refDestructuringErrors)
          if (this.type === types$1.comma) {
            var node = this.startNodeAt(startPos, startLoc)
            node.expressions = [expr]
            while (this.eat(types$1.comma)) {
              node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors))
            }
            return this.finishNode(node, "SequenceExpression")
          }
          return expr
        }

        // Parse an assignment expression. This includes applications of
        // operators like `+=`.

        pp$5.parseMaybeAssign = function (forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) {
              return this.parseYield(forInit)
            }
            // The tokenizer will assume an expression is allowed after
            // `yield`, but this isn't that kind of yield
            else {
              this.exprAllowed = false
            }
          }

          var ownDestructuringErrors = false,
            oldParenAssign = -1,
            oldTrailingComma = -1,
            oldDoubleProto = -1
          if (refDestructuringErrors) {
            oldParenAssign = refDestructuringErrors.parenthesizedAssign
            oldTrailingComma = refDestructuringErrors.trailingComma
            oldDoubleProto = refDestructuringErrors.doubleProto
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1
          } else {
            refDestructuringErrors = new DestructuringErrors()
            ownDestructuringErrors = true
          }

          var startPos = this.start,
            startLoc = this.startLoc
          if (this.type === types$1.parenL || this.type === types$1.name) {
            this.potentialArrowAt = this.start
            this.potentialArrowInForAwait = forInit === "await"
          }
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors)
          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startPos, startLoc)
          }
          if (this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc)
            node.operator = this.value
            if (this.type === types$1.eq) {
              left = this.toAssignable(left, false, refDestructuringErrors)
            }
            if (!ownDestructuringErrors) {
              refDestructuringErrors.parenthesizedAssign =
                refDestructuringErrors.trailingComma =
                refDestructuringErrors.doubleProto =
                  -1
            }
            if (refDestructuringErrors.shorthandAssign >= left.start) {
              refDestructuringErrors.shorthandAssign = -1
            } // reset because shorthand default was used correctly
            if (this.type === types$1.eq) {
              this.checkLValPattern(left)
            } else {
              this.checkLValSimple(left)
            }
            node.left = left
            this.next()
            node.right = this.parseMaybeAssign(forInit)
            if (oldDoubleProto > -1) {
              refDestructuringErrors.doubleProto = oldDoubleProto
            }
            return this.finishNode(node, "AssignmentExpression")
          } else {
            if (ownDestructuringErrors) {
              this.checkExpressionErrors(refDestructuringErrors, true)
            }
          }
          if (oldParenAssign > -1) {
            refDestructuringErrors.parenthesizedAssign = oldParenAssign
          }
          if (oldTrailingComma > -1) {
            refDestructuringErrors.trailingComma = oldTrailingComma
          }
          return left
        }

        // Parse a ternary conditional (`?:`) operator.

        pp$5.parseMaybeConditional = function (forInit, refDestructuringErrors) {
          var startPos = this.start,
            startLoc = this.startLoc
          var expr = this.parseExprOps(forInit, refDestructuringErrors)
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr
          }
          if (this.eat(types$1.question)) {
            var node = this.startNodeAt(startPos, startLoc)
            node.test = expr
            node.consequent = this.parseMaybeAssign()
            this.expect(types$1.colon)
            node.alternate = this.parseMaybeAssign(forInit)
            return this.finishNode(node, "ConditionalExpression")
          }
          return expr
        }

        // Start the precedence parser.

        pp$5.parseExprOps = function (forInit, refDestructuringErrors) {
          var startPos = this.start,
            startLoc = this.startLoc
          var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit)
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr
          }
          return expr.start === startPos && expr.type === "ArrowFunctionExpression"
            ? expr
            : this.parseExprOp(expr, startPos, startLoc, -1, forInit)
        }

        // Parse binary operators with the operator precedence parsing
        // algorithm. `left` is the left-hand side of the operator.
        // `minPrec` provides context that allows the function to stop and
        // defer further parser to one of its callers when it encounters an
        // operator that has a lower precedence than the set it is parsing.

        pp$5.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop
          if (prec != null && (!forInit || this.type !== types$1._in)) {
            if (prec > minPrec) {
              var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND
              var coalesce = this.type === types$1.coalesce
              if (coalesce) {
                // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
                // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
                prec = types$1.logicalAND.binop
              }
              var op = this.value
              this.next()
              var startPos = this.start,
                startLoc = this.startLoc
              var right = this.parseExprOp(
                this.parseMaybeUnary(null, false, false, forInit),
                startPos,
                startLoc,
                prec,
                forInit
              )
              var node = this.buildBinary(
                leftStartPos,
                leftStartLoc,
                left,
                right,
                op,
                logical || coalesce
              )
              if (
                (logical && this.type === types$1.coalesce) ||
                (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))
              ) {
                this.raiseRecoverable(
                  this.start,
                  "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"
                )
              }
              return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)
            }
          }
          return left
        }

        pp$5.buildBinary = function (startPos, startLoc, left, right, op, logical) {
          if (right.type === "PrivateIdentifier") {
            this.raise(right.start, "Private identifier can only be left side of binary expression")
          }
          var node = this.startNodeAt(startPos, startLoc)
          node.left = left
          node.operator = op
          node.right = right
          return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
        }

        // Parse unary operators, both prefix and postfix.

        pp$5.parseMaybeUnary = function (refDestructuringErrors, sawUnary, incDec, forInit) {
          var startPos = this.start,
            startLoc = this.startLoc,
            expr
          if (this.isContextual("await") && this.canAwait) {
            expr = this.parseAwait(forInit)
            sawUnary = true
          } else if (this.type.prefix) {
            var node = this.startNode(),
              update = this.type === types$1.incDec
            node.operator = this.value
            node.prefix = true
            this.next()
            node.argument = this.parseMaybeUnary(null, true, update, forInit)
            this.checkExpressionErrors(refDestructuringErrors, true)
            if (update) {
              this.checkLValSimple(node.argument)
            } else if (
              this.strict &&
              node.operator === "delete" &&
              node.argument.type === "Identifier"
            ) {
              this.raiseRecoverable(node.start, "Deleting local variable in strict mode")
            } else if (node.operator === "delete" && isPrivateFieldAccess(node.argument)) {
              this.raiseRecoverable(node.start, "Private fields can not be deleted")
            } else {
              sawUnary = true
            }
            expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression")
          } else if (!sawUnary && this.type === types$1.privateId) {
            if (forInit || this.privateNameStack.length === 0) {
              this.unexpected()
            }
            expr = this.parsePrivateIdent()
            // only could be private fields in 'in', such as #x in obj
            if (this.type !== types$1._in) {
              this.unexpected()
            }
          } else {
            expr = this.parseExprSubscripts(refDestructuringErrors, forInit)
            if (this.checkExpressionErrors(refDestructuringErrors)) {
              return expr
            }
            while (this.type.postfix && !this.canInsertSemicolon()) {
              var node$1 = this.startNodeAt(startPos, startLoc)
              node$1.operator = this.value
              node$1.prefix = false
              node$1.argument = expr
              this.checkLValSimple(expr)
              this.next()
              expr = this.finishNode(node$1, "UpdateExpression")
            }
          }

          if (!incDec && this.eat(types$1.starstar)) {
            if (sawUnary) {
              this.unexpected(this.lastTokStart)
            } else {
              return this.buildBinary(
                startPos,
                startLoc,
                expr,
                this.parseMaybeUnary(null, false, false, forInit),
                "**",
                false
              )
            }
          } else {
            return expr
          }
        }

        function isPrivateFieldAccess(node) {
          return (
            (node.type === "MemberExpression" && node.property.type === "PrivateIdentifier") ||
            (node.type === "ChainExpression" && isPrivateFieldAccess(node.expression))
          )
        }

        // Parse call, dot, and `[]`-subscript expressions.

        pp$5.parseExprSubscripts = function (refDestructuringErrors, forInit) {
          var startPos = this.start,
            startLoc = this.startLoc
          var expr = this.parseExprAtom(refDestructuringErrors, forInit)
          if (
            expr.type === "ArrowFunctionExpression" &&
            this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")"
          ) {
            return expr
          }
          var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit)
          if (refDestructuringErrors && result.type === "MemberExpression") {
            if (refDestructuringErrors.parenthesizedAssign >= result.start) {
              refDestructuringErrors.parenthesizedAssign = -1
            }
            if (refDestructuringErrors.parenthesizedBind >= result.start) {
              refDestructuringErrors.parenthesizedBind = -1
            }
            if (refDestructuringErrors.trailingComma >= result.start) {
              refDestructuringErrors.trailingComma = -1
            }
          }
          return result
        }

        pp$5.parseSubscripts = function (base, startPos, startLoc, noCalls, forInit) {
          var maybeAsyncArrow =
            this.options.ecmaVersion >= 8 &&
            base.type === "Identifier" &&
            base.name === "async" &&
            this.lastTokEnd === base.end &&
            !this.canInsertSemicolon() &&
            base.end - base.start === 5 &&
            this.potentialArrowAt === base.start
          var optionalChained = false

          while (true) {
            var element = this.parseSubscript(
              base,
              startPos,
              startLoc,
              noCalls,
              maybeAsyncArrow,
              optionalChained,
              forInit
            )

            if (element.optional) {
              optionalChained = true
            }
            if (element === base || element.type === "ArrowFunctionExpression") {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc)
                chainNode.expression = element
                element = this.finishNode(chainNode, "ChainExpression")
              }
              return element
            }

            base = element
          }
        }

        pp$5.parseSubscript = function (
          base,
          startPos,
          startLoc,
          noCalls,
          maybeAsyncArrow,
          optionalChained,
          forInit
        ) {
          var optionalSupported = this.options.ecmaVersion >= 11
          var optional = optionalSupported && this.eat(types$1.questionDot)
          if (noCalls && optional) {
            this.raise(
              this.lastTokStart,
              "Optional chaining cannot appear in the callee of new expressions"
            )
          }

          var computed = this.eat(types$1.bracketL)
          if (
            computed ||
            (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) ||
            this.eat(types$1.dot)
          ) {
            var node = this.startNodeAt(startPos, startLoc)
            node.object = base
            if (computed) {
              node.property = this.parseExpression()
              this.expect(types$1.bracketR)
            } else if (this.type === types$1.privateId && base.type !== "Super") {
              node.property = this.parsePrivateIdent()
            } else {
              node.property = this.parseIdent(this.options.allowReserved !== "never")
            }
            node.computed = !!computed
            if (optionalSupported) {
              node.optional = optional
            }
            base = this.finishNode(node, "MemberExpression")
          } else if (!noCalls && this.eat(types$1.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(),
              oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos
            this.yieldPos = 0
            this.awaitPos = 0
            this.awaitIdentPos = 0
            var exprList = this.parseExprList(
              types$1.parenR,
              this.options.ecmaVersion >= 8,
              false,
              refDestructuringErrors
            )
            if (
              maybeAsyncArrow &&
              !optional &&
              !this.canInsertSemicolon() &&
              this.eat(types$1.arrow)
            ) {
              this.checkPatternErrors(refDestructuringErrors, false)
              this.checkYieldAwaitInDefaultParams()
              if (this.awaitIdentPos > 0) {
                this.raise(
                  this.awaitIdentPos,
                  "Cannot use 'await' as identifier inside an async function"
                )
              }
              this.yieldPos = oldYieldPos
              this.awaitPos = oldAwaitPos
              this.awaitIdentPos = oldAwaitIdentPos
              return this.parseArrowExpression(
                this.startNodeAt(startPos, startLoc),
                exprList,
                true,
                forInit
              )
            }
            this.checkExpressionErrors(refDestructuringErrors, true)
            this.yieldPos = oldYieldPos || this.yieldPos
            this.awaitPos = oldAwaitPos || this.awaitPos
            this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos
            var node$1 = this.startNodeAt(startPos, startLoc)
            node$1.callee = base
            node$1.arguments = exprList
            if (optionalSupported) {
              node$1.optional = optional
            }
            base = this.finishNode(node$1, "CallExpression")
          } else if (this.type === types$1.backQuote) {
            if (optional || optionalChained) {
              this.raise(
                this.start,
                "Optional chaining cannot appear in the tag of tagged template expressions"
              )
            }
            var node$2 = this.startNodeAt(startPos, startLoc)
            node$2.tag = base
            node$2.quasi = this.parseTemplate({ isTagged: true })
            base = this.finishNode(node$2, "TaggedTemplateExpression")
          }
          return base
        }

        // Parse an atomic expression — either a single token that is an
        // expression, an expression started by a keyword like `function` or
        // `new`, or an expression wrapped in punctuation like `()`, `[]`,
        // or `{}`.

        pp$5.parseExprAtom = function (refDestructuringErrors, forInit) {
          // If a division operator appears in an expression position, the
          // tokenizer got confused, and we force it to read a regexp instead.
          if (this.type === types$1.slash) {
            this.readRegexp()
          }

          var node,
            canBeArrow = this.potentialArrowAt === this.start
          switch (this.type) {
            case types$1._super:
              if (!this.allowSuper) {
                this.raise(this.start, "'super' keyword outside a method")
              }
              node = this.startNode()
              this.next()
              if (this.type === types$1.parenL && !this.allowDirectSuper) {
                this.raise(node.start, "super() call outside constructor of a subclass")
              }
              // The `super` keyword can appear at below:
              // SuperProperty:
              //     super [ Expression ]
              //     super . IdentifierName
              // SuperCall:
              //     super ( Arguments )
              if (
                this.type !== types$1.dot &&
                this.type !== types$1.bracketL &&
                this.type !== types$1.parenL
              ) {
                this.unexpected()
              }
              return this.finishNode(node, "Super")

            case types$1._this:
              node = this.startNode()
              this.next()
              return this.finishNode(node, "ThisExpression")

            case types$1.name:
              var startPos = this.start,
                startLoc = this.startLoc,
                containsEsc = this.containsEsc
              var id = this.parseIdent(false)
              if (
                this.options.ecmaVersion >= 8 &&
                !containsEsc &&
                id.name === "async" &&
                !this.canInsertSemicolon() &&
                this.eat(types$1._function)
              ) {
                this.overrideContext(types.f_expr)
                return this.parseFunction(
                  this.startNodeAt(startPos, startLoc),
                  0,
                  false,
                  true,
                  forInit
                )
              }
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$1.arrow)) {
                  return this.parseArrowExpression(
                    this.startNodeAt(startPos, startLoc),
                    [id],
                    false,
                    forInit
                  )
                }
                if (
                  this.options.ecmaVersion >= 8 &&
                  id.name === "async" &&
                  this.type === types$1.name &&
                  !containsEsc &&
                  (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)
                ) {
                  id = this.parseIdent(false)
                  if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {
                    this.unexpected()
                  }
                  return this.parseArrowExpression(
                    this.startNodeAt(startPos, startLoc),
                    [id],
                    true,
                    forInit
                  )
                }
              }
              return id

            case types$1.regexp:
              var value = this.value
              node = this.parseLiteral(value.value)
              node.regex = { pattern: value.pattern, flags: value.flags }
              return node

            case types$1.num:
            case types$1.string:
              return this.parseLiteral(this.value)

            case types$1._null:
            case types$1._true:
            case types$1._false:
              node = this.startNode()
              node.value = this.type === types$1._null ? null : this.type === types$1._true
              node.raw = this.type.keyword
              this.next()
              return this.finishNode(node, "Literal")

            case types$1.parenL:
              var start = this.start,
                expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit)
              if (refDestructuringErrors) {
                if (
                  refDestructuringErrors.parenthesizedAssign < 0 &&
                  !this.isSimpleAssignTarget(expr)
                ) {
                  refDestructuringErrors.parenthesizedAssign = start
                }
                if (refDestructuringErrors.parenthesizedBind < 0) {
                  refDestructuringErrors.parenthesizedBind = start
                }
              }
              return expr

            case types$1.bracketL:
              node = this.startNode()
              this.next()
              node.elements = this.parseExprList(
                types$1.bracketR,
                true,
                true,
                refDestructuringErrors
              )
              return this.finishNode(node, "ArrayExpression")

            case types$1.braceL:
              this.overrideContext(types.b_expr)
              return this.parseObj(false, refDestructuringErrors)

            case types$1._function:
              node = this.startNode()
              this.next()
              return this.parseFunction(node, 0)

            case types$1._class:
              return this.parseClass(this.startNode(), false)

            case types$1._new:
              return this.parseNew()

            case types$1.backQuote:
              return this.parseTemplate()

            case types$1._import:
              if (this.options.ecmaVersion >= 11) {
                return this.parseExprImport()
              } else {
                return this.unexpected()
              }

            default:
              this.unexpected()
          }
        }

        pp$5.parseExprImport = function () {
          var node = this.startNode()

          // Consume `import` as an identifier for `import.meta`.
          // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.
          if (this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword import")
          }
          var meta = this.parseIdent(true)

          switch (this.type) {
            case types$1.parenL:
              return this.parseDynamicImport(node)
            case types$1.dot:
              node.meta = meta
              return this.parseImportMeta(node)
            default:
              this.unexpected()
          }
        }

        pp$5.parseDynamicImport = function (node) {
          this.next() // skip `(`

          // Parse node.source.
          node.source = this.parseMaybeAssign()

          // Verify ending.
          if (!this.eat(types$1.parenR)) {
            var errorPos = this.start
            if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
              this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()")
            } else {
              this.unexpected(errorPos)
            }
          }

          return this.finishNode(node, "ImportExpression")
        }

        pp$5.parseImportMeta = function (node) {
          this.next() // skip `.`

          var containsEsc = this.containsEsc
          node.property = this.parseIdent(true)

          if (node.property.name !== "meta") {
            this.raiseRecoverable(
              node.property.start,
              "The only valid meta property for import is 'import.meta'"
            )
          }
          if (containsEsc) {
            this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters")
          }
          if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
            this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module")
          }

          return this.finishNode(node, "MetaProperty")
        }

        pp$5.parseLiteral = function (value) {
          var node = this.startNode()
          node.value = value
          node.raw = this.input.slice(this.start, this.end)
          if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
            node.bigint = node.raw.slice(0, -1).replace(/_/g, "")
          }
          this.next()
          return this.finishNode(node, "Literal")
        }

        pp$5.parseParenExpression = function () {
          this.expect(types$1.parenL)
          var val = this.parseExpression()
          this.expect(types$1.parenR)
          return val
        }

        pp$5.parseParenAndDistinguishExpression = function (canBeArrow, forInit) {
          var startPos = this.start,
            startLoc = this.startLoc,
            val,
            allowTrailingComma = this.options.ecmaVersion >= 8
          if (this.options.ecmaVersion >= 6) {
            this.next()

            var innerStartPos = this.start,
              innerStartLoc = this.startLoc
            var exprList = [],
              first = true,
              lastIsComma = false
            var refDestructuringErrors = new DestructuringErrors(),
              oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              spreadStart
            this.yieldPos = 0
            this.awaitPos = 0
            // Do not save awaitIdentPos to allow checking awaits nested in parameters
            while (this.type !== types$1.parenR) {
              first ? (first = false) : this.expect(types$1.comma)
              if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
                lastIsComma = true
                break
              } else if (this.type === types$1.ellipsis) {
                spreadStart = this.start
                exprList.push(this.parseParenItem(this.parseRestBinding()))
                if (this.type === types$1.comma) {
                  this.raise(this.start, "Comma is not permitted after the rest element")
                }
                break
              } else {
                exprList.push(
                  this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem)
                )
              }
            }
            var innerEndPos = this.lastTokEnd,
              innerEndLoc = this.lastTokEndLoc
            this.expect(types$1.parenR)

            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false)
              this.checkYieldAwaitInDefaultParams()
              this.yieldPos = oldYieldPos
              this.awaitPos = oldAwaitPos
              return this.parseParenArrowList(startPos, startLoc, exprList, forInit)
            }

            if (!exprList.length || lastIsComma) {
              this.unexpected(this.lastTokStart)
            }
            if (spreadStart) {
              this.unexpected(spreadStart)
            }
            this.checkExpressionErrors(refDestructuringErrors, true)
            this.yieldPos = oldYieldPos || this.yieldPos
            this.awaitPos = oldAwaitPos || this.awaitPos

            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc)
              val.expressions = exprList
              this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)
            } else {
              val = exprList[0]
            }
          } else {
            val = this.parseParenExpression()
          }

          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc)
            par.expression = val
            return this.finishNode(par, "ParenthesizedExpression")
          } else {
            return val
          }
        }

        pp$5.parseParenItem = function (item) {
          return item
        }

        pp$5.parseParenArrowList = function (startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(
            this.startNodeAt(startPos, startLoc),
            exprList,
            false,
            forInit
          )
        }

        // New's precedence is slightly tricky. It must allow its argument to
        // be a `[]` or dot subscript expression, but not a call — at least,
        // not without wrapping it in parentheses. Thus, it uses the noCalls
        // argument to parseSubscripts to prevent it from consuming the
        // argument list.

        var empty = []

        pp$5.parseNew = function () {
          if (this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword new")
          }
          var node = this.startNode()
          var meta = this.parseIdent(true)
          if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {
            node.meta = meta
            var containsEsc = this.containsEsc
            node.property = this.parseIdent(true)
            if (node.property.name !== "target") {
              this.raiseRecoverable(
                node.property.start,
                "The only valid meta property for new is 'new.target'"
              )
            }
            if (containsEsc) {
              this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters")
            }
            if (!this.allowNewDotTarget) {
              this.raiseRecoverable(
                node.start,
                "'new.target' can only be used in functions and class static block"
              )
            }
            return this.finishNode(node, "MetaProperty")
          }
          var startPos = this.start,
            startLoc = this.startLoc,
            isImport = this.type === types$1._import
          node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false)
          if (isImport && node.callee.type === "ImportExpression") {
            this.raise(startPos, "Cannot use new with import()")
          }
          if (this.eat(types$1.parenL)) {
            node.arguments = this.parseExprList(
              types$1.parenR,
              this.options.ecmaVersion >= 8,
              false
            )
          } else {
            node.arguments = empty
          }
          return this.finishNode(node, "NewExpression")
        }

        // Parse template expression.

        pp$5.parseTemplateElement = function (ref) {
          var isTagged = ref.isTagged

          var elem = this.startNode()
          if (this.type === types$1.invalidTemplate) {
            if (!isTagged) {
              this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal")
            }
            elem.value = {
              raw: this.value,
              cooked: null
            }
          } else {
            elem.value = {
              raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
              cooked: this.value
            }
          }
          this.next()
          elem.tail = this.type === types$1.backQuote
          return this.finishNode(elem, "TemplateElement")
        }

        pp$5.parseTemplate = function (ref) {
          if (ref === void 0) ref = {}
          var isTagged = ref.isTagged
          if (isTagged === void 0) isTagged = false

          var node = this.startNode()
          this.next()
          node.expressions = []
          var curElt = this.parseTemplateElement({ isTagged: isTagged })
          node.quasis = [curElt]
          while (!curElt.tail) {
            if (this.type === types$1.eof) {
              this.raise(this.pos, "Unterminated template literal")
            }
            this.expect(types$1.dollarBraceL)
            node.expressions.push(this.parseExpression())
            this.expect(types$1.braceR)
            node.quasis.push((curElt = this.parseTemplateElement({ isTagged: isTagged })))
          }
          this.next()
          return this.finishNode(node, "TemplateLiteral")
        }

        pp$5.isAsyncProp = function (prop) {
          return (
            !prop.computed &&
            prop.key.type === "Identifier" &&
            prop.key.name === "async" &&
            (this.type === types$1.name ||
              this.type === types$1.num ||
              this.type === types$1.string ||
              this.type === types$1.bracketL ||
              this.type.keyword ||
              (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&
            !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
          )
        }

        // Parse an object literal or binding pattern.

        pp$5.parseObj = function (isPattern, refDestructuringErrors) {
          var node = this.startNode(),
            first = true,
            propHash = {}
          node.properties = []
          this.next()
          while (!this.eat(types$1.braceR)) {
            if (!first) {
              this.expect(types$1.comma)
              if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {
                break
              }
            } else {
              first = false
            }

            var prop = this.parseProperty(isPattern, refDestructuringErrors)
            if (!isPattern) {
              this.checkPropClash(prop, propHash, refDestructuringErrors)
            }
            node.properties.push(prop)
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
        }

        pp$5.parseProperty = function (isPattern, refDestructuringErrors) {
          var prop = this.startNode(),
            isGenerator,
            isAsync,
            startPos,
            startLoc
          if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
            if (isPattern) {
              prop.argument = this.parseIdent(false)
              if (this.type === types$1.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element")
              }
              return this.finishNode(prop, "RestElement")
            }
            // To disallow parenthesized identifier via `this.toAssignable()`.
            if (this.type === types$1.parenL && refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0) {
                refDestructuringErrors.parenthesizedAssign = this.start
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = this.start
              }
            }
            // Parse argument.
            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors)
            // To disallow trailing comma via `this.toAssignable()`.
            if (
              this.type === types$1.comma &&
              refDestructuringErrors &&
              refDestructuringErrors.trailingComma < 0
            ) {
              refDestructuringErrors.trailingComma = this.start
            }
            // Finish
            return this.finishNode(prop, "SpreadElement")
          }
          if (this.options.ecmaVersion >= 6) {
            prop.method = false
            prop.shorthand = false
            if (isPattern || refDestructuringErrors) {
              startPos = this.start
              startLoc = this.startLoc
            }
            if (!isPattern) {
              isGenerator = this.eat(types$1.star)
            }
          }
          var containsEsc = this.containsEsc
          this.parsePropertyName(prop)
          if (
            !isPattern &&
            !containsEsc &&
            this.options.ecmaVersion >= 8 &&
            !isGenerator &&
            this.isAsyncProp(prop)
          ) {
            isAsync = true
            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star)
            this.parsePropertyName(prop, refDestructuringErrors)
          } else {
            isAsync = false
          }
          this.parsePropertyValue(
            prop,
            isPattern,
            isGenerator,
            isAsync,
            startPos,
            startLoc,
            refDestructuringErrors,
            containsEsc
          )
          return this.finishNode(prop, "Property")
        }

        pp$5.parsePropertyValue = function (
          prop,
          isPattern,
          isGenerator,
          isAsync,
          startPos,
          startLoc,
          refDestructuringErrors,
          containsEsc
        ) {
          if ((isGenerator || isAsync) && this.type === types$1.colon) {
            this.unexpected()
          }

          if (this.eat(types$1.colon)) {
            prop.value = isPattern
              ? this.parseMaybeDefault(this.start, this.startLoc)
              : this.parseMaybeAssign(false, refDestructuringErrors)
            prop.kind = "init"
          } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
            if (isPattern) {
              this.unexpected()
            }
            prop.kind = "init"
            prop.method = true
            prop.value = this.parseMethod(isGenerator, isAsync)
          } else if (
            !isPattern &&
            !containsEsc &&
            this.options.ecmaVersion >= 5 &&
            !prop.computed &&
            prop.key.type === "Identifier" &&
            (prop.key.name === "get" || prop.key.name === "set") &&
            this.type !== types$1.comma &&
            this.type !== types$1.braceR &&
            this.type !== types$1.eq
          ) {
            if (isGenerator || isAsync) {
              this.unexpected()
            }
            prop.kind = prop.key.name
            this.parsePropertyName(prop)
            prop.value = this.parseMethod(false)
            var paramCount = prop.kind === "get" ? 0 : 1
            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start
              if (prop.kind === "get") {
                this.raiseRecoverable(start, "getter should have no params")
              } else {
                this.raiseRecoverable(start, "setter should have exactly one param")
              }
            } else {
              if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
                this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params")
              }
            }
          } else if (
            this.options.ecmaVersion >= 6 &&
            !prop.computed &&
            prop.key.type === "Identifier"
          ) {
            if (isGenerator || isAsync) {
              this.unexpected()
            }
            this.checkUnreserved(prop.key)
            if (prop.key.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = startPos
            }
            prop.kind = "init"
            if (isPattern) {
              prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))
            } else if (this.type === types$1.eq && refDestructuringErrors) {
              if (refDestructuringErrors.shorthandAssign < 0) {
                refDestructuringErrors.shorthandAssign = this.start
              }
              prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))
            } else {
              prop.value = this.copyNode(prop.key)
            }
            prop.shorthand = true
          } else {
            this.unexpected()
          }
        }

        pp$5.parsePropertyName = function (prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types$1.bracketL)) {
              prop.computed = true
              prop.key = this.parseMaybeAssign()
              this.expect(types$1.bracketR)
              return prop.key
            } else {
              prop.computed = false
            }
          }
          return (prop.key =
            this.type === types$1.num || this.type === types$1.string
              ? this.parseExprAtom()
              : this.parseIdent(this.options.allowReserved !== "never"))
        }

        // Initialize empty function node.

        pp$5.initFunction = function (node) {
          node.id = null
          if (this.options.ecmaVersion >= 6) {
            node.generator = node.expression = false
          }
          if (this.options.ecmaVersion >= 8) {
            node.async = false
          }
        }

        // Parse object or class method.

        pp$5.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(),
            oldYieldPos = this.yieldPos,
            oldAwaitPos = this.awaitPos,
            oldAwaitIdentPos = this.awaitIdentPos

          this.initFunction(node)
          if (this.options.ecmaVersion >= 6) {
            node.generator = isGenerator
          }
          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync
          }

          this.yieldPos = 0
          this.awaitPos = 0
          this.awaitIdentPos = 0
          this.enterScope(
            functionFlags(isAsync, node.generator) |
              SCOPE_SUPER |
              (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0)
          )

          this.expect(types$1.parenL)
          node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8)
          this.checkYieldAwaitInDefaultParams()
          this.parseFunctionBody(node, false, true, false)

          this.yieldPos = oldYieldPos
          this.awaitPos = oldAwaitPos
          this.awaitIdentPos = oldAwaitIdentPos
          return this.finishNode(node, "FunctionExpression")
        }

        // Parse arrow function expression with given parameters.

        pp$5.parseArrowExpression = function (node, params, isAsync, forInit) {
          var oldYieldPos = this.yieldPos,
            oldAwaitPos = this.awaitPos,
            oldAwaitIdentPos = this.awaitIdentPos

          this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW)
          this.initFunction(node)
          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync
          }

          this.yieldPos = 0
          this.awaitPos = 0
          this.awaitIdentPos = 0

          node.params = this.toAssignableList(params, true)
          this.parseFunctionBody(node, true, false, forInit)

          this.yieldPos = oldYieldPos
          this.awaitPos = oldAwaitPos
          this.awaitIdentPos = oldAwaitIdentPos
          return this.finishNode(node, "ArrowFunctionExpression")
        }

        // Parse function body and check parameters.

        pp$5.parseFunctionBody = function (node, isArrowFunction, isMethod, forInit) {
          var isExpression = isArrowFunction && this.type !== types$1.braceL
          var oldStrict = this.strict,
            useStrict = false

          if (isExpression) {
            node.body = this.parseMaybeAssign(forInit)
            node.expression = true
            this.checkParams(node, false)
          } else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params)
            if (!oldStrict || nonSimple) {
              useStrict = this.strictDirective(this.end)
              // If this is a strict mode function, verify that argument names
              // are not repeated, and it does not try to bind the words `eval`
              // or `arguments`.
              if (useStrict && nonSimple) {
                this.raiseRecoverable(
                  node.start,
                  "Illegal 'use strict' directive in function with non-simple parameter list"
                )
              }
            }
            // Start a new scope with regard to labels and the `inFunction`
            // flag (restore them to their old value afterwards).
            var oldLabels = this.labels
            this.labels = []
            if (useStrict) {
              this.strict = true
            }

            // Add the params to varDeclaredNames to ensure that an error is thrown
            // if a let/const declaration in the function clashes with one of the params.
            this.checkParams(
              node,
              !oldStrict &&
                !useStrict &&
                !isArrowFunction &&
                !isMethod &&
                this.isSimpleParamList(node.params)
            )
            // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
            if (this.strict && node.id) {
              this.checkLValSimple(node.id, BIND_OUTSIDE)
            }
            node.body = this.parseBlock(false, undefined, useStrict && !oldStrict)
            node.expression = false
            this.adaptDirectivePrologue(node.body.body)
            this.labels = oldLabels
          }
          this.exitScope()
        }

        pp$5.isSimpleParamList = function (params) {
          for (var i = 0, list = params; i < list.length; i += 1) {
            var param = list[i]

            if (param.type !== "Identifier") {
              return false
            }
          }
          return true
        }

        // Checks function params for various disallowed patterns such as using "eval"
        // or "arguments" and duplicate parameters.

        pp$5.checkParams = function (node, allowDuplicates) {
          var nameHash = Object.create(null)
          for (var i = 0, list = node.params; i < list.length; i += 1) {
            var param = list[i]

            this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash)
          }
        }

        // Parses a comma-separated list of expressions, and returns them as
        // an array. `close` is the token type that ends the list, and
        // `allowEmpty` can be turned on to allow subsequent commas with
        // nothing in between them to be parsed as `null` (which is needed
        // for array literals).

        pp$5.parseExprList = function (
          close,
          allowTrailingComma,
          allowEmpty,
          refDestructuringErrors
        ) {
          var elts = [],
            first = true
          while (!this.eat(close)) {
            if (!first) {
              this.expect(types$1.comma)
              if (allowTrailingComma && this.afterTrailingComma(close)) {
                break
              }
            } else {
              first = false
            }

            var elt = void 0
            if (allowEmpty && this.type === types$1.comma) {
              elt = null
            } else if (this.type === types$1.ellipsis) {
              elt = this.parseSpread(refDestructuringErrors)
              if (
                refDestructuringErrors &&
                this.type === types$1.comma &&
                refDestructuringErrors.trailingComma < 0
              ) {
                refDestructuringErrors.trailingComma = this.start
              }
            } else {
              elt = this.parseMaybeAssign(false, refDestructuringErrors)
            }
            elts.push(elt)
          }
          return elts
        }

        pp$5.checkUnreserved = function (ref) {
          var start = ref.start
          var end = ref.end
          var name = ref.name

          if (this.inGenerator && name === "yield") {
            this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator")
          }
          if (this.inAsync && name === "await") {
            this.raiseRecoverable(
              start,
              "Cannot use 'await' as identifier inside an async function"
            )
          }
          if (this.currentThisScope().inClassFieldInit && name === "arguments") {
            this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer")
          }
          if (this.inClassStaticBlock && (name === "arguments" || name === "await")) {
            this.raise(start, "Cannot use " + name + " in class static initialization block")
          }
          if (this.keywords.test(name)) {
            this.raise(start, "Unexpected keyword '" + name + "'")
          }
          if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
            return
          }
          var re = this.strict ? this.reservedWordsStrict : this.reservedWords
          if (re.test(name)) {
            if (!this.inAsync && name === "await") {
              this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function")
            }
            this.raiseRecoverable(start, "The keyword '" + name + "' is reserved")
          }
        }

        // Parse the next token as an identifier. If `liberal` is true (used
        // when parsing properties), it will also convert keywords into
        // identifiers.

        pp$5.parseIdent = function (liberal, isBinding) {
          var node = this.startNode()
          if (this.type === types$1.name) {
            node.name = this.value
          } else if (this.type.keyword) {
            node.name = this.type.keyword

            // To fix https://github.com/acornjs/acorn/issues/575
            // `class` and `function` keywords push new context into this.context.
            // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
            // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
            if (
              (node.name === "class" || node.name === "function") &&
              (this.lastTokEnd !== this.lastTokStart + 1 ||
                this.input.charCodeAt(this.lastTokStart) !== 46)
            ) {
              this.context.pop()
            }
          } else {
            this.unexpected()
          }
          this.next(!!liberal)
          this.finishNode(node, "Identifier")
          if (!liberal) {
            this.checkUnreserved(node)
            if (node.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = node.start
            }
          }
          return node
        }

        pp$5.parsePrivateIdent = function () {
          var node = this.startNode()
          if (this.type === types$1.privateId) {
            node.name = this.value
          } else {
            this.unexpected()
          }
          this.next()
          this.finishNode(node, "PrivateIdentifier")

          // For validating existence
          if (this.privateNameStack.length === 0) {
            this.raise(
              node.start,
              "Private field '#" + node.name + "' must be declared in an enclosing class"
            )
          } else {
            this.privateNameStack[this.privateNameStack.length - 1].used.push(node)
          }

          return node
        }

        // Parses yield expression inside generator.

        pp$5.parseYield = function (forInit) {
          if (!this.yieldPos) {
            this.yieldPos = this.start
          }

          var node = this.startNode()
          this.next()
          if (
            this.type === types$1.semi ||
            this.canInsertSemicolon() ||
            (this.type !== types$1.star && !this.type.startsExpr)
          ) {
            node.delegate = false
            node.argument = null
          } else {
            node.delegate = this.eat(types$1.star)
            node.argument = this.parseMaybeAssign(forInit)
          }
          return this.finishNode(node, "YieldExpression")
        }

        pp$5.parseAwait = function (forInit) {
          if (!this.awaitPos) {
            this.awaitPos = this.start
          }

          var node = this.startNode()
          this.next()
          node.argument = this.parseMaybeUnary(null, true, false, forInit)
          return this.finishNode(node, "AwaitExpression")
        }

        var pp$4 = Parser.prototype

        // This function is used to raise exceptions on parse errors. It
        // takes an offset integer (into the current `input`) to indicate
        // the location of the error, attaches the position to the end
        // of the error message, and then raises a `SyntaxError` with that
        // message.

        pp$4.raise = function (pos, message) {
          var loc = getLineInfo(this.input, pos)
          message += " (" + loc.line + ":" + loc.column + ")"
          var err = new SyntaxError(message)
          err.pos = pos
          err.loc = loc
          err.raisedAt = this.pos
          throw err
        }

        pp$4.raiseRecoverable = pp$4.raise

        pp$4.curPosition = function () {
          if (this.options.locations) {
            return new Position(this.curLine, this.pos - this.lineStart)
          }
        }

        var pp$3 = Parser.prototype

        var Scope = function Scope(flags) {
          this.flags = flags
          // A list of var-declared names in the current lexical scope
          this.var = []
          // A list of lexically-declared names in the current lexical scope
          this.lexical = []
          // A list of lexically-declared FunctionDeclaration names in the current lexical scope
          this.functions = []
          // A switch to disallow the identifier reference 'arguments'
          this.inClassFieldInit = false
        }

        // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

        pp$3.enterScope = function (flags) {
          this.scopeStack.push(new Scope(flags))
        }

        pp$3.exitScope = function () {
          this.scopeStack.pop()
        }

        // The spec says:
        // > At the top level of a function, or script, function declarations are
        // > treated like var declarations rather than like lexical declarations.
        pp$3.treatFunctionsAsVarInScope = function (scope) {
          return scope.flags & SCOPE_FUNCTION || (!this.inModule && scope.flags & SCOPE_TOP)
        }

        pp$3.declareName = function (name, bindingType, pos) {
          var redeclared = false
          if (bindingType === BIND_LEXICAL) {
            var scope = this.currentScope()
            redeclared =
              scope.lexical.indexOf(name) > -1 ||
              scope.functions.indexOf(name) > -1 ||
              scope.var.indexOf(name) > -1
            scope.lexical.push(name)
            if (this.inModule && scope.flags & SCOPE_TOP) {
              delete this.undefinedExports[name]
            }
          } else if (bindingType === BIND_SIMPLE_CATCH) {
            var scope$1 = this.currentScope()
            scope$1.lexical.push(name)
          } else if (bindingType === BIND_FUNCTION) {
            var scope$2 = this.currentScope()
            if (this.treatFunctionsAsVar) {
              redeclared = scope$2.lexical.indexOf(name) > -1
            } else {
              redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1
            }
            scope$2.functions.push(name)
          } else {
            for (var i = this.scopeStack.length - 1; i >= 0; --i) {
              var scope$3 = this.scopeStack[i]
              if (
                (scope$3.lexical.indexOf(name) > -1 &&
                  !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name)) ||
                (!this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1)
              ) {
                redeclared = true
                break
              }
              scope$3.var.push(name)
              if (this.inModule && scope$3.flags & SCOPE_TOP) {
                delete this.undefinedExports[name]
              }
              if (scope$3.flags & SCOPE_VAR) {
                break
              }
            }
          }
          if (redeclared) {
            this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared")
          }
        }

        pp$3.checkLocalExport = function (id) {
          // scope.functions must be empty as Module code is always strict.
          if (
            this.scopeStack[0].lexical.indexOf(id.name) === -1 &&
            this.scopeStack[0].var.indexOf(id.name) === -1
          ) {
            this.undefinedExports[id.name] = id
          }
        }

        pp$3.currentScope = function () {
          return this.scopeStack[this.scopeStack.length - 1]
        }

        pp$3.currentVarScope = function () {
          for (var i = this.scopeStack.length - 1; ; i--) {
            var scope = this.scopeStack[i]
            if (scope.flags & SCOPE_VAR) {
              return scope
            }
          }
        }

        // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
        pp$3.currentThisScope = function () {
          for (var i = this.scopeStack.length - 1; ; i--) {
            var scope = this.scopeStack[i]
            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
              return scope
            }
          }
        }

        var Node = function Node(parser, pos, loc) {
          this.type = ""
          this.start = pos
          this.end = 0
          if (parser.options.locations) {
            this.loc = new SourceLocation(parser, loc)
          }
          if (parser.options.directSourceFile) {
            this.sourceFile = parser.options.directSourceFile
          }
          if (parser.options.ranges) {
            this.range = [pos, 0]
          }
        }

        // Start an AST node, attaching a start offset.

        var pp$2 = Parser.prototype

        pp$2.startNode = function () {
          return new Node(this, this.start, this.startLoc)
        }

        pp$2.startNodeAt = function (pos, loc) {
          return new Node(this, pos, loc)
        }

        // Finish an AST node, adding `type` and `end` properties.

        function finishNodeAt(node, type, pos, loc) {
          node.type = type
          node.end = pos
          if (this.options.locations) {
            node.loc.end = loc
          }
          if (this.options.ranges) {
            node.range[1] = pos
          }
          return node
        }

        pp$2.finishNode = function (node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
        }

        // Finish node at given position

        pp$2.finishNodeAt = function (node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc)
        }

        pp$2.copyNode = function (node) {
          var newNode = new Node(this, node.start, this.startLoc)
          for (var prop in node) {
            newNode[prop] = node[prop]
          }
          return newNode
        }

        // This file contains Unicode properties extracted from the ECMAScript
        // specification. The lists are extracted like so:
        // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)

        // #table-binary-unicode-properties
        var ecma9BinaryProperties =
          "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS"
        var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic"
        var ecma11BinaryProperties = ecma10BinaryProperties
        var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict"
        var ecma13BinaryProperties = ecma12BinaryProperties
        var unicodeBinaryProperties = {
          9: ecma9BinaryProperties,
          10: ecma10BinaryProperties,
          11: ecma11BinaryProperties,
          12: ecma12BinaryProperties,
          13: ecma13BinaryProperties
        }

        // #table-unicode-general-category-values
        var unicodeGeneralCategoryValues =
          "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu"

        // #table-unicode-script-values
        var ecma9ScriptValues =
          "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb"
        var ecma10ScriptValues =
          ecma9ScriptValues +
          " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd"
        var ecma11ScriptValues =
          ecma10ScriptValues +
          " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho"
        var ecma12ScriptValues =
          ecma11ScriptValues +
          " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi"
        var ecma13ScriptValues =
          ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith"
        var unicodeScriptValues = {
          9: ecma9ScriptValues,
          10: ecma10ScriptValues,
          11: ecma11ScriptValues,
          12: ecma12ScriptValues,
          13: ecma13ScriptValues
        }

        var data = {}
        function buildUnicodeData(ecmaVersion) {
          var d = (data[ecmaVersion] = {
            binary: wordsRegexp(
              unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues
            ),
            nonBinary: {
              General_Category: wordsRegexp(unicodeGeneralCategoryValues),
              Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
            }
          })
          d.nonBinary.Script_Extensions = d.nonBinary.Script

          d.nonBinary.gc = d.nonBinary.General_Category
          d.nonBinary.sc = d.nonBinary.Script
          d.nonBinary.scx = d.nonBinary.Script_Extensions
        }

        for (var i = 0, list = [9, 10, 11, 12, 13]; i < list.length; i += 1) {
          var ecmaVersion = list[i]

          buildUnicodeData(ecmaVersion)
        }

        var pp$1 = Parser.prototype

        var RegExpValidationState = function RegExpValidationState(parser) {
          this.parser = parser
          this.validFlags =
            "gim" +
            (parser.options.ecmaVersion >= 6 ? "uy" : "") +
            (parser.options.ecmaVersion >= 9 ? "s" : "") +
            (parser.options.ecmaVersion >= 13 ? "d" : "")
          this.unicodeProperties =
            data[parser.options.ecmaVersion >= 13 ? 13 : parser.options.ecmaVersion]
          this.source = ""
          this.flags = ""
          this.start = 0
          this.switchU = false
          this.switchN = false
          this.pos = 0
          this.lastIntValue = 0
          this.lastStringValue = ""
          this.lastAssertionIsQuantifiable = false
          this.numCapturingParens = 0
          this.maxBackReference = 0
          this.groupNames = []
          this.backReferenceNames = []
        }

        RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
          var unicode = flags.indexOf("u") !== -1
          this.start = start | 0
          this.source = pattern + ""
          this.flags = flags
          this.switchU = unicode && this.parser.options.ecmaVersion >= 6
          this.switchN = unicode && this.parser.options.ecmaVersion >= 9
        }

        RegExpValidationState.prototype.raise = function raise(message) {
          this.parser.raiseRecoverable(
            this.start,
            "Invalid regular expression: /" + this.source + "/: " + message
          )
        }

        // If u flag is given, this returns the code point at the index (it combines a surrogate pair).
        // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
        RegExpValidationState.prototype.at = function at(i, forceU) {
          if (forceU === void 0) forceU = false

          var s = this.source
          var l = s.length
          if (i >= l) {
            return -1
          }
          var c = s.charCodeAt(i)
          if (!(forceU || this.switchU) || c <= 0xd7ff || c >= 0xe000 || i + 1 >= l) {
            return c
          }
          var next = s.charCodeAt(i + 1)
          return next >= 0xdc00 && next <= 0xdfff ? (c << 10) + next - 0x35fdc00 : c
        }

        RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
          if (forceU === void 0) forceU = false

          var s = this.source
          var l = s.length
          if (i >= l) {
            return l
          }
          var c = s.charCodeAt(i),
            next
          if (
            !(forceU || this.switchU) ||
            c <= 0xd7ff ||
            c >= 0xe000 ||
            i + 1 >= l ||
            (next = s.charCodeAt(i + 1)) < 0xdc00 ||
            next > 0xdfff
          ) {
            return i + 1
          }
          return i + 2
        }

        RegExpValidationState.prototype.current = function current(forceU) {
          if (forceU === void 0) forceU = false

          return this.at(this.pos, forceU)
        }

        RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
          if (forceU === void 0) forceU = false

          return this.at(this.nextIndex(this.pos, forceU), forceU)
        }

        RegExpValidationState.prototype.advance = function advance(forceU) {
          if (forceU === void 0) forceU = false

          this.pos = this.nextIndex(this.pos, forceU)
        }

        RegExpValidationState.prototype.eat = function eat(ch, forceU) {
          if (forceU === void 0) forceU = false

          if (this.current(forceU) === ch) {
            this.advance(forceU)
            return true
          }
          return false
        }

        function codePointToString$1(ch) {
          if (ch <= 0xffff) {
            return String.fromCharCode(ch)
          }
          ch -= 0x10000
          return String.fromCharCode((ch >> 10) + 0xd800, (ch & 0x03ff) + 0xdc00)
        }

        /**
         * Validate the flags part of a given RegExpLiteral.
         *
         * @param {RegExpValidationState} state The state to validate RegExp.
         * @returns {void}
         */
        pp$1.validateRegExpFlags = function (state) {
          var validFlags = state.validFlags
          var flags = state.flags

          for (var i = 0; i < flags.length; i++) {
            var flag = flags.charAt(i)
            if (validFlags.indexOf(flag) === -1) {
              this.raise(state.start, "Invalid regular expression flag")
            }
            if (flags.indexOf(flag, i + 1) > -1) {
              this.raise(state.start, "Duplicate regular expression flag")
            }
          }
        }

        /**
         * Validate the pattern part of a given RegExpLiteral.
         *
         * @param {RegExpValidationState} state The state to validate RegExp.
         * @returns {void}
         */
        pp$1.validateRegExpPattern = function (state) {
          this.regexp_pattern(state)

          // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
          // parsing contains a |GroupName|, reparse with the goal symbol
          // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
          // exception if _P_ did not conform to the grammar, if any elements of _P_
          // were not matched by the parse, or if any Early Error conditions exist.
          if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
            state.switchN = true
            this.regexp_pattern(state)
          }
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
        pp$1.regexp_pattern = function (state) {
          state.pos = 0
          state.lastIntValue = 0
          state.lastStringValue = ""
          state.lastAssertionIsQuantifiable = false
          state.numCapturingParens = 0
          state.maxBackReference = 0
          state.groupNames.length = 0
          state.backReferenceNames.length = 0

          this.regexp_disjunction(state)

          if (state.pos !== state.source.length) {
            // Make the same messages as V8.
            if (state.eat(0x29 /* ) */)) {
              state.raise("Unmatched ')'")
            }
            if (state.eat(0x5d /* ] */) || state.eat(0x7d /* } */)) {
              state.raise("Lone quantifier brackets")
            }
          }
          if (state.maxBackReference > state.numCapturingParens) {
            state.raise("Invalid escape")
          }
          for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
            var name = list[i]

            if (state.groupNames.indexOf(name) === -1) {
              state.raise("Invalid named capture referenced")
            }
          }
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
        pp$1.regexp_disjunction = function (state) {
          this.regexp_alternative(state)
          while (state.eat(0x7c /* | */)) {
            this.regexp_alternative(state)
          }

          // Make the same message as V8.
          if (this.regexp_eatQuantifier(state, true)) {
            state.raise("Nothing to repeat")
          }
          if (state.eat(0x7b /* { */)) {
            state.raise("Lone quantifier brackets")
          }
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
        pp$1.regexp_alternative = function (state) {
          while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
        pp$1.regexp_eatTerm = function (state) {
          if (this.regexp_eatAssertion(state)) {
            // Handle `QuantifiableAssertion Quantifier` alternative.
            // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
            // is a QuantifiableAssertion.
            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
              // Make the same message as V8.
              if (state.switchU) {
                state.raise("Invalid quantifier")
              }
            }
            return true
          }

          if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
            this.regexp_eatQuantifier(state)
            return true
          }

          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
        pp$1.regexp_eatAssertion = function (state) {
          var start = state.pos
          state.lastAssertionIsQuantifiable = false

          // ^, $
          if (state.eat(0x5e /* ^ */) || state.eat(0x24 /* $ */)) {
            return true
          }

          // \b \B
          if (state.eat(0x5c /* \ */)) {
            if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
              return true
            }
            state.pos = start
          }

          // Lookahead / Lookbehind
          if (state.eat(0x28 /* ( */) && state.eat(0x3f /* ? */)) {
            var lookbehind = false
            if (this.options.ecmaVersion >= 9) {
              lookbehind = state.eat(0x3c /* < */)
            }
            if (state.eat(0x3d /* = */) || state.eat(0x21 /* ! */)) {
              this.regexp_disjunction(state)
              if (!state.eat(0x29 /* ) */)) {
                state.raise("Unterminated group")
              }
              state.lastAssertionIsQuantifiable = !lookbehind
              return true
            }
          }

          state.pos = start
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
        pp$1.regexp_eatQuantifier = function (state, noError) {
          if (noError === void 0) noError = false

          if (this.regexp_eatQuantifierPrefix(state, noError)) {
            state.eat(0x3f /* ? */)
            return true
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
        pp$1.regexp_eatQuantifierPrefix = function (state, noError) {
          return (
            state.eat(0x2a /* * */) ||
            state.eat(0x2b /* + */) ||
            state.eat(0x3f /* ? */) ||
            this.regexp_eatBracedQuantifier(state, noError)
          )
        }
        pp$1.regexp_eatBracedQuantifier = function (state, noError) {
          var start = state.pos
          if (state.eat(0x7b /* { */)) {
            var min = 0,
              max = -1
            if (this.regexp_eatDecimalDigits(state)) {
              min = state.lastIntValue
              if (state.eat(0x2c /* , */) && this.regexp_eatDecimalDigits(state)) {
                max = state.lastIntValue
              }
              if (state.eat(0x7d /* } */)) {
                // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
                if (max !== -1 && max < min && !noError) {
                  state.raise("numbers out of order in {} quantifier")
                }
                return true
              }
            }
            if (state.switchU && !noError) {
              state.raise("Incomplete quantifier")
            }
            state.pos = start
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
        pp$1.regexp_eatAtom = function (state) {
          return (
            this.regexp_eatPatternCharacters(state) ||
            state.eat(0x2e /* . */) ||
            this.regexp_eatReverseSolidusAtomEscape(state) ||
            this.regexp_eatCharacterClass(state) ||
            this.regexp_eatUncapturingGroup(state) ||
            this.regexp_eatCapturingGroup(state)
          )
        }
        pp$1.regexp_eatReverseSolidusAtomEscape = function (state) {
          var start = state.pos
          if (state.eat(0x5c /* \ */)) {
            if (this.regexp_eatAtomEscape(state)) {
              return true
            }
            state.pos = start
          }
          return false
        }
        pp$1.regexp_eatUncapturingGroup = function (state) {
          var start = state.pos
          if (state.eat(0x28 /* ( */)) {
            if (state.eat(0x3f /* ? */) && state.eat(0x3a /* : */)) {
              this.regexp_disjunction(state)
              if (state.eat(0x29 /* ) */)) {
                return true
              }
              state.raise("Unterminated group")
            }
            state.pos = start
          }
          return false
        }
        pp$1.regexp_eatCapturingGroup = function (state) {
          if (state.eat(0x28 /* ( */)) {
            if (this.options.ecmaVersion >= 9) {
              this.regexp_groupSpecifier(state)
            } else if (state.current() === 0x3f /* ? */) {
              state.raise("Invalid group")
            }
            this.regexp_disjunction(state)
            if (state.eat(0x29 /* ) */)) {
              state.numCapturingParens += 1
              return true
            }
            state.raise("Unterminated group")
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
        pp$1.regexp_eatExtendedAtom = function (state) {
          return (
            state.eat(0x2e /* . */) ||
            this.regexp_eatReverseSolidusAtomEscape(state) ||
            this.regexp_eatCharacterClass(state) ||
            this.regexp_eatUncapturingGroup(state) ||
            this.regexp_eatCapturingGroup(state) ||
            this.regexp_eatInvalidBracedQuantifier(state) ||
            this.regexp_eatExtendedPatternCharacter(state)
          )
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
        pp$1.regexp_eatInvalidBracedQuantifier = function (state) {
          if (this.regexp_eatBracedQuantifier(state, true)) {
            state.raise("Nothing to repeat")
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
        pp$1.regexp_eatSyntaxCharacter = function (state) {
          var ch = state.current()
          if (isSyntaxCharacter(ch)) {
            state.lastIntValue = ch
            state.advance()
            return true
          }
          return false
        }
        function isSyntaxCharacter(ch) {
          return (
            ch === 0x24 /* $ */ ||
            (ch >= 0x28 /* ( */ && ch <= 0x2b) /* + */ ||
            ch === 0x2e /* . */ ||
            ch === 0x3f /* ? */ ||
            (ch >= 0x5b /* [ */ && ch <= 0x5e) /* ^ */ ||
            (ch >= 0x7b /* { */ && ch <= 0x7d) /* } */
          )
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
        // But eat eager.
        pp$1.regexp_eatPatternCharacters = function (state) {
          var start = state.pos
          var ch = 0
          while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
            state.advance()
          }
          return state.pos !== start
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
        pp$1.regexp_eatExtendedPatternCharacter = function (state) {
          var ch = state.current()
          if (
            ch !== -1 &&
            ch !== 0x24 /* $ */ &&
            !((ch >= 0x28 /* ( */ && ch <= 0x2b) /* + */) &&
            ch !== 0x2e /* . */ &&
            ch !== 0x3f /* ? */ &&
            ch !== 0x5b /* [ */ &&
            ch !== 0x5e /* ^ */ &&
            ch !== 0x7c /* | */
          ) {
            state.advance()
            return true
          }
          return false
        }

        // GroupSpecifier ::
        //   [empty]
        //   `?` GroupName
        pp$1.regexp_groupSpecifier = function (state) {
          if (state.eat(0x3f /* ? */)) {
            if (this.regexp_eatGroupName(state)) {
              if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
                state.raise("Duplicate capture group name")
              }
              state.groupNames.push(state.lastStringValue)
              return
            }
            state.raise("Invalid group")
          }
        }

        // GroupName ::
        //   `<` RegExpIdentifierName `>`
        // Note: this updates `state.lastStringValue` property with the eaten name.
        pp$1.regexp_eatGroupName = function (state) {
          state.lastStringValue = ""
          if (state.eat(0x3c /* < */)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3e /* > */)) {
              return true
            }
            state.raise("Invalid capture group name")
          }
          return false
        }

        // RegExpIdentifierName ::
        //   RegExpIdentifierStart
        //   RegExpIdentifierName RegExpIdentifierPart
        // Note: this updates `state.lastStringValue` property with the eaten name.
        pp$1.regexp_eatRegExpIdentifierName = function (state) {
          state.lastStringValue = ""
          if (this.regexp_eatRegExpIdentifierStart(state)) {
            state.lastStringValue += codePointToString$1(state.lastIntValue)
            while (this.regexp_eatRegExpIdentifierPart(state)) {
              state.lastStringValue += codePointToString$1(state.lastIntValue)
            }
            return true
          }
          return false
        }

        // RegExpIdentifierStart ::
        //   UnicodeIDStart
        //   `$`
        //   `_`
        //   `\` RegExpUnicodeEscapeSequence[+U]
        pp$1.regexp_eatRegExpIdentifierStart = function (state) {
          var start = state.pos
          var forceU = this.options.ecmaVersion >= 11
          var ch = state.current(forceU)
          state.advance(forceU)

          if (ch === 0x5c /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
            ch = state.lastIntValue
          }
          if (isRegExpIdentifierStart(ch)) {
            state.lastIntValue = ch
            return true
          }

          state.pos = start
          return false
        }
        function isRegExpIdentifierStart(ch) {
          return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5f /* _ */
        }

        // RegExpIdentifierPart ::
        //   UnicodeIDContinue
        //   `$`
        //   `_`
        //   `\` RegExpUnicodeEscapeSequence[+U]
        //   <ZWNJ>
        //   <ZWJ>
        pp$1.regexp_eatRegExpIdentifierPart = function (state) {
          var start = state.pos
          var forceU = this.options.ecmaVersion >= 11
          var ch = state.current(forceU)
          state.advance(forceU)

          if (ch === 0x5c /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
            ch = state.lastIntValue
          }
          if (isRegExpIdentifierPart(ch)) {
            state.lastIntValue = ch
            return true
          }

          state.pos = start
          return false
        }
        function isRegExpIdentifierPart(ch) {
          return (
            isIdentifierChar(ch, true) ||
            ch === 0x24 /* $ */ ||
            ch === 0x5f /* _ */ ||
            ch === 0x200c /* <ZWNJ> */ ||
            ch === 0x200d
          ) /* <ZWJ> */
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
        pp$1.regexp_eatAtomEscape = function (state) {
          if (
            this.regexp_eatBackReference(state) ||
            this.regexp_eatCharacterClassEscape(state) ||
            this.regexp_eatCharacterEscape(state) ||
            (state.switchN && this.regexp_eatKGroupName(state))
          ) {
            return true
          }
          if (state.switchU) {
            // Make the same message as V8.
            if (state.current() === 0x63 /* c */) {
              state.raise("Invalid unicode escape")
            }
            state.raise("Invalid escape")
          }
          return false
        }
        pp$1.regexp_eatBackReference = function (state) {
          var start = state.pos
          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue
            if (state.switchU) {
              // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
              if (n > state.maxBackReference) {
                state.maxBackReference = n
              }
              return true
            }
            if (n <= state.numCapturingParens) {
              return true
            }
            state.pos = start
          }
          return false
        }
        pp$1.regexp_eatKGroupName = function (state) {
          if (state.eat(0x6b /* k */)) {
            if (this.regexp_eatGroupName(state)) {
              state.backReferenceNames.push(state.lastStringValue)
              return true
            }
            state.raise("Invalid named reference")
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
        pp$1.regexp_eatCharacterEscape = function (state) {
          return (
            this.regexp_eatControlEscape(state) ||
            this.regexp_eatCControlLetter(state) ||
            this.regexp_eatZero(state) ||
            this.regexp_eatHexEscapeSequence(state) ||
            this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||
            (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
            this.regexp_eatIdentityEscape(state)
          )
        }
        pp$1.regexp_eatCControlLetter = function (state) {
          var start = state.pos
          if (state.eat(0x63 /* c */)) {
            if (this.regexp_eatControlLetter(state)) {
              return true
            }
            state.pos = start
          }
          return false
        }
        pp$1.regexp_eatZero = function (state) {
          if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
            state.lastIntValue = 0
            state.advance()
            return true
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
        pp$1.regexp_eatControlEscape = function (state) {
          var ch = state.current()
          if (ch === 0x74 /* t */) {
            state.lastIntValue = 0x09 /* \t */
            state.advance()
            return true
          }
          if (ch === 0x6e /* n */) {
            state.lastIntValue = 0x0a /* \n */
            state.advance()
            return true
          }
          if (ch === 0x76 /* v */) {
            state.lastIntValue = 0x0b /* \v */
            state.advance()
            return true
          }
          if (ch === 0x66 /* f */) {
            state.lastIntValue = 0x0c /* \f */
            state.advance()
            return true
          }
          if (ch === 0x72 /* r */) {
            state.lastIntValue = 0x0d /* \r */
            state.advance()
            return true
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
        pp$1.regexp_eatControlLetter = function (state) {
          var ch = state.current()
          if (isControlLetter(ch)) {
            state.lastIntValue = ch % 0x20
            state.advance()
            return true
          }
          return false
        }
        function isControlLetter(ch) {
          return (
            (ch >= 0x41 /* A */ && ch <= 0x5a) /* Z */ || (ch >= 0x61 /* a */ && ch <= 0x7a) /* z */
          )
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
        pp$1.regexp_eatRegExpUnicodeEscapeSequence = function (state, forceU) {
          if (forceU === void 0) forceU = false

          var start = state.pos
          var switchU = forceU || state.switchU

          if (state.eat(0x75 /* u */)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue
              if (switchU && lead >= 0xd800 && lead <= 0xdbff) {
                var leadSurrogateEnd = state.pos
                if (
                  state.eat(0x5c /* \ */) &&
                  state.eat(0x75 /* u */) &&
                  this.regexp_eatFixedHexDigits(state, 4)
                ) {
                  var trail = state.lastIntValue
                  if (trail >= 0xdc00 && trail <= 0xdfff) {
                    state.lastIntValue = (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000
                    return true
                  }
                }
                state.pos = leadSurrogateEnd
                state.lastIntValue = lead
              }
              return true
            }
            if (
              switchU &&
              state.eat(0x7b /* { */) &&
              this.regexp_eatHexDigits(state) &&
              state.eat(0x7d /* } */) &&
              isValidUnicode(state.lastIntValue)
            ) {
              return true
            }
            if (switchU) {
              state.raise("Invalid unicode escape")
            }
            state.pos = start
          }

          return false
        }
        function isValidUnicode(ch) {
          return ch >= 0 && ch <= 0x10ffff
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
        pp$1.regexp_eatIdentityEscape = function (state) {
          if (state.switchU) {
            if (this.regexp_eatSyntaxCharacter(state)) {
              return true
            }
            if (state.eat(0x2f /* / */)) {
              state.lastIntValue = 0x2f /* / */
              return true
            }
            return false
          }

          var ch = state.current()
          if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6b) /* k */) {
            state.lastIntValue = ch
            state.advance()
            return true
          }

          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
        pp$1.regexp_eatDecimalEscape = function (state) {
          state.lastIntValue = 0
          var ch = state.current()
          if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30) /* 0 */
              state.advance()
            } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
            return true
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
        pp$1.regexp_eatCharacterClassEscape = function (state) {
          var ch = state.current()

          if (isCharacterClassEscape(ch)) {
            state.lastIntValue = -1
            state.advance()
            return true
          }

          if (
            state.switchU &&
            this.options.ecmaVersion >= 9 &&
            (ch === 0x50 /* P */ || ch === 0x70) /* p */
          ) {
            state.lastIntValue = -1
            state.advance()
            if (
              state.eat(0x7b /* { */) &&
              this.regexp_eatUnicodePropertyValueExpression(state) &&
              state.eat(0x7d /* } */)
            ) {
              return true
            }
            state.raise("Invalid property name")
          }

          return false
        }
        function isCharacterClassEscape(ch) {
          return (
            ch === 0x64 /* d */ ||
            ch === 0x44 /* D */ ||
            ch === 0x73 /* s */ ||
            ch === 0x53 /* S */ ||
            ch === 0x77 /* w */ ||
            ch === 0x57 /* W */
          )
        }

        // UnicodePropertyValueExpression ::
        //   UnicodePropertyName `=` UnicodePropertyValue
        //   LoneUnicodePropertyNameOrValue
        pp$1.regexp_eatUnicodePropertyValueExpression = function (state) {
          var start = state.pos

          // UnicodePropertyName `=` UnicodePropertyValue
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3d /* = */)) {
            var name = state.lastStringValue
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value = state.lastStringValue
              this.regexp_validateUnicodePropertyNameAndValue(state, name, value)
              return true
            }
          }
          state.pos = start

          // LoneUnicodePropertyNameOrValue
          if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue
            this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue)
            return true
          }
          return false
        }
        pp$1.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
          if (!hasOwn(state.unicodeProperties.nonBinary, name)) {
            state.raise("Invalid property name")
          }
          if (!state.unicodeProperties.nonBinary[name].test(value)) {
            state.raise("Invalid property value")
          }
        }
        pp$1.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
          if (!state.unicodeProperties.binary.test(nameOrValue)) {
            state.raise("Invalid property name")
          }
        }

        // UnicodePropertyName ::
        //   UnicodePropertyNameCharacters
        pp$1.regexp_eatUnicodePropertyName = function (state) {
          var ch = 0
          state.lastStringValue = ""
          while (isUnicodePropertyNameCharacter((ch = state.current()))) {
            state.lastStringValue += codePointToString$1(ch)
            state.advance()
          }
          return state.lastStringValue !== ""
        }
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || ch === 0x5f /* _ */
        }

        // UnicodePropertyValue ::
        //   UnicodePropertyValueCharacters
        pp$1.regexp_eatUnicodePropertyValue = function (state) {
          var ch = 0
          state.lastStringValue = ""
          while (isUnicodePropertyValueCharacter((ch = state.current()))) {
            state.lastStringValue += codePointToString$1(ch)
            state.advance()
          }
          return state.lastStringValue !== ""
        }
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
        }

        // LoneUnicodePropertyNameOrValue ::
        //   UnicodePropertyValueCharacters
        pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
          return this.regexp_eatUnicodePropertyValue(state)
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
        pp$1.regexp_eatCharacterClass = function (state) {
          if (state.eat(0x5b /* [ */)) {
            state.eat(0x5e /* ^ */)
            this.regexp_classRanges(state)
            if (state.eat(0x5d /* ] */)) {
              return true
            }
            // Unreachable since it threw "unterminated regular expression" error before.
            state.raise("Unterminated character class")
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
        // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
        // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
        pp$1.regexp_classRanges = function (state) {
          while (this.regexp_eatClassAtom(state)) {
            var left = state.lastIntValue
            if (state.eat(0x2d /* - */) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue
              if (state.switchU && (left === -1 || right === -1)) {
                state.raise("Invalid character class")
              }
              if (left !== -1 && right !== -1 && left > right) {
                state.raise("Range out of order in character class")
              }
            }
          }
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
        // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
        pp$1.regexp_eatClassAtom = function (state) {
          var start = state.pos

          if (state.eat(0x5c /* \ */)) {
            if (this.regexp_eatClassEscape(state)) {
              return true
            }
            if (state.switchU) {
              // Make the same message as V8.
              var ch$1 = state.current()
              if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
                state.raise("Invalid class escape")
              }
              state.raise("Invalid escape")
            }
            state.pos = start
          }

          var ch = state.current()
          if (ch !== 0x5d /* ] */) {
            state.lastIntValue = ch
            state.advance()
            return true
          }

          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
        pp$1.regexp_eatClassEscape = function (state) {
          var start = state.pos

          if (state.eat(0x62 /* b */)) {
            state.lastIntValue = 0x08 /* <BS> */
            return true
          }

          if (state.switchU && state.eat(0x2d /* - */)) {
            state.lastIntValue = 0x2d /* - */
            return true
          }

          if (!state.switchU && state.eat(0x63 /* c */)) {
            if (this.regexp_eatClassControlLetter(state)) {
              return true
            }
            state.pos = start
          }

          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state)
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
        pp$1.regexp_eatClassControlLetter = function (state) {
          var ch = state.current()
          if (isDecimalDigit(ch) || ch === 0x5f /* _ */) {
            state.lastIntValue = ch % 0x20
            state.advance()
            return true
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
        pp$1.regexp_eatHexEscapeSequence = function (state) {
          var start = state.pos
          if (state.eat(0x78 /* x */)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) {
              return true
            }
            if (state.switchU) {
              state.raise("Invalid escape")
            }
            state.pos = start
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
        pp$1.regexp_eatDecimalDigits = function (state) {
          var start = state.pos
          var ch = 0
          state.lastIntValue = 0
          while (isDecimalDigit((ch = state.current()))) {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30) /* 0 */
            state.advance()
          }
          return state.pos !== start
        }
        function isDecimalDigit(ch) {
          return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
        pp$1.regexp_eatHexDigits = function (state) {
          var start = state.pos
          var ch = 0
          state.lastIntValue = 0
          while (isHexDigit((ch = state.current()))) {
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch)
            state.advance()
          }
          return state.pos !== start
        }
        function isHexDigit(ch) {
          return (
            (ch >= 0x30 /* 0 */ && ch <= 0x39) /* 9 */ ||
            (ch >= 0x41 /* A */ && ch <= 0x46) /* F */ ||
            (ch >= 0x61 /* a */ && ch <= 0x66) /* f */
          )
        }
        function hexToInt(ch) {
          if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
            return 10 + (ch - 0x41) /* A */
          }
          if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
            return 10 + (ch - 0x61) /* a */
          }
          return ch - 0x30 /* 0 */
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
        // Allows only 0-377(octal) i.e. 0-255(decimal).
        pp$1.regexp_eatLegacyOctalEscapeSequence = function (state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue
              if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
                state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue
              } else {
                state.lastIntValue = n1 * 8 + n2
              }
            } else {
              state.lastIntValue = n1
            }
            return true
          }
          return false
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
        pp$1.regexp_eatOctalDigit = function (state) {
          var ch = state.current()
          if (isOctalDigit(ch)) {
            state.lastIntValue = ch - 0x30 /* 0 */
            state.advance()
            return true
          }
          state.lastIntValue = 0
          return false
        }
        function isOctalDigit(ch) {
          return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
        }

        // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
        // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
        // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
        pp$1.regexp_eatFixedHexDigits = function (state, length) {
          var start = state.pos
          state.lastIntValue = 0
          for (var i = 0; i < length; ++i) {
            var ch = state.current()
            if (!isHexDigit(ch)) {
              state.pos = start
              return false
            }
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch)
            state.advance()
          }
          return true
        }

        // Object type used to represent tokens. Note that normally, tokens
        // simply exist as properties on the parser object. This is only
        // used for the onToken callback and the external tokenizer.

        var Token = function Token(p) {
          this.type = p.type
          this.value = p.value
          this.start = p.start
          this.end = p.end
          if (p.options.locations) {
            this.loc = new SourceLocation(p, p.startLoc, p.endLoc)
          }
          if (p.options.ranges) {
            this.range = [p.start, p.end]
          }
        }

        // ## Tokenizer

        var pp = Parser.prototype

        // Move to the next token

        pp.next = function (ignoreEscapeSequenceInKeyword) {
          if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword)
          }
          if (this.options.onToken) {
            this.options.onToken(new Token(this))
          }

          this.lastTokEnd = this.end
          this.lastTokStart = this.start
          this.lastTokEndLoc = this.endLoc
          this.lastTokStartLoc = this.startLoc
          this.nextToken()
        }

        pp.getToken = function () {
          this.next()
          return new Token(this)
        }

        // If we're in an ES6 environment, make parsers iterable
        if (typeof Symbol !== "undefined") {
          pp[Symbol.iterator] = function () {
            var this$1$1 = this

            return {
              next: function () {
                var token = this$1$1.getToken()
                return {
                  done: token.type === types$1.eof,
                  value: token
                }
              }
            }
          }
        }

        // Toggle strict mode. Re-reads the next number or string to please
        // pedantic tests (`"use strict"; 010;` should fail).

        // Read a single token, updating the parser object's token-related
        // properties.

        pp.nextToken = function () {
          var curContext = this.curContext()
          if (!curContext || !curContext.preserveSpace) {
            this.skipSpace()
          }

          this.start = this.pos
          if (this.options.locations) {
            this.startLoc = this.curPosition()
          }
          if (this.pos >= this.input.length) {
            return this.finishToken(types$1.eof)
          }

          if (curContext.override) {
            return curContext.override(this)
          } else {
            this.readToken(this.fullCharCodeAtPos())
          }
        }

        pp.readToken = function (code) {
          // Identifier or keyword. '\uXXXX' sequences are allowed in
          // identifiers, so '\' also dispatches to that.
          if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */) {
            return this.readWord()
          }

          return this.getTokenFromCode(code)
        }

        pp.fullCharCodeAtPos = function () {
          var code = this.input.charCodeAt(this.pos)
          if (code <= 0xd7ff || code >= 0xdc00) {
            return code
          }
          var next = this.input.charCodeAt(this.pos + 1)
          return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00
        }

        pp.skipBlockComment = function () {
          var startLoc = this.options.onComment && this.curPosition()
          var start = this.pos,
            end = this.input.indexOf("*/", (this.pos += 2))
          if (end === -1) {
            this.raise(this.pos - 2, "Unterminated comment")
          }
          this.pos = end + 2
          if (this.options.locations) {
            for (
              var nextBreak = void 0, pos = start;
              (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;

            ) {
              ++this.curLine
              pos = this.lineStart = nextBreak
            }
          }
          if (this.options.onComment) {
            this.options.onComment(
              true,
              this.input.slice(start + 2, end),
              start,
              this.pos,
              startLoc,
              this.curPosition()
            )
          }
        }

        pp.skipLineComment = function (startSkip) {
          var start = this.pos
          var startLoc = this.options.onComment && this.curPosition()
          var ch = this.input.charCodeAt((this.pos += startSkip))
          while (this.pos < this.input.length && !isNewLine(ch)) {
            ch = this.input.charCodeAt(++this.pos)
          }
          if (this.options.onComment) {
            this.options.onComment(
              false,
              this.input.slice(start + startSkip, this.pos),
              start,
              this.pos,
              startLoc,
              this.curPosition()
            )
          }
        }

        // Called at the start of the parse and after every token. Skips
        // whitespace and comments, and.

        pp.skipSpace = function () {
          loop: while (this.pos < this.input.length) {
            var ch = this.input.charCodeAt(this.pos)
            switch (ch) {
              case 32:
              case 160: // ' '
                ++this.pos
                break
              case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) {
                  ++this.pos
                }
              case 10:
              case 8232:
              case 8233:
                ++this.pos
                if (this.options.locations) {
                  ++this.curLine
                  this.lineStart = this.pos
                }
                break
              case 47: // '/'
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42: // '*'
                    this.skipBlockComment()
                    break
                  case 47:
                    this.skipLineComment(2)
                    break
                  default:
                    break loop
                }
                break
              default:
                if (
                  (ch > 8 && ch < 14) ||
                  (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))
                ) {
                  ++this.pos
                } else {
                  break loop
                }
            }
          }
        }

        // Called at the end of every token. Sets `end`, `val`, and
        // maintains `context` and `exprAllowed`, and skips the space after
        // the token, so that the next one's `start` will point at the
        // right position.

        pp.finishToken = function (type, val) {
          this.end = this.pos
          if (this.options.locations) {
            this.endLoc = this.curPosition()
          }
          var prevType = this.type
          this.type = type
          this.value = val

          this.updateContext(prevType)
        }

        // ### Token reading

        // This is the function that is called to fetch the next token. It
        // is somewhat obscure, because it works in character codes rather
        // than characters, and because operator parsing has been inlined
        // into it.
        //
        // All in the name of speed.
        //
        pp.readToken_dot = function () {
          var next = this.input.charCodeAt(this.pos + 1)
          if (next >= 48 && next <= 57) {
            return this.readNumber(true)
          }
          var next2 = this.input.charCodeAt(this.pos + 2)
          if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
            // 46 = dot '.'
            this.pos += 3
            return this.finishToken(types$1.ellipsis)
          } else {
            ++this.pos
            return this.finishToken(types$1.dot)
          }
        }

        pp.readToken_slash = function () {
          // '/'
          var next = this.input.charCodeAt(this.pos + 1)
          if (this.exprAllowed) {
            ++this.pos
            return this.readRegexp()
          }
          if (next === 61) {
            return this.finishOp(types$1.assign, 2)
          }
          return this.finishOp(types$1.slash, 1)
        }

        pp.readToken_mult_modulo_exp = function (code) {
          // '%*'
          var next = this.input.charCodeAt(this.pos + 1)
          var size = 1
          var tokentype = code === 42 ? types$1.star : types$1.modulo

          // exponentiation operator ** and **=
          if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
            ++size
            tokentype = types$1.starstar
            next = this.input.charCodeAt(this.pos + 2)
          }

          if (next === 61) {
            return this.finishOp(types$1.assign, size + 1)
          }
          return this.finishOp(tokentype, size)
        }

        pp.readToken_pipe_amp = function (code) {
          // '|&'
          var next = this.input.charCodeAt(this.pos + 1)
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              var next2 = this.input.charCodeAt(this.pos + 2)
              if (next2 === 61) {
                return this.finishOp(types$1.assign, 3)
              }
            }
            return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)
          }
          if (next === 61) {
            return this.finishOp(types$1.assign, 2)
          }
          return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)
        }

        pp.readToken_caret = function () {
          // '^'
          var next = this.input.charCodeAt(this.pos + 1)
          if (next === 61) {
            return this.finishOp(types$1.assign, 2)
          }
          return this.finishOp(types$1.bitwiseXOR, 1)
        }

        pp.readToken_plus_min = function (code) {
          // '+-'
          var next = this.input.charCodeAt(this.pos + 1)
          if (next === code) {
            if (
              next === 45 &&
              !this.inModule &&
              this.input.charCodeAt(this.pos + 2) === 62 &&
              (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))
            ) {
              // A `-->` line comment
              this.skipLineComment(3)
              this.skipSpace()
              return this.nextToken()
            }
            return this.finishOp(types$1.incDec, 2)
          }
          if (next === 61) {
            return this.finishOp(types$1.assign, 2)
          }
          return this.finishOp(types$1.plusMin, 1)
        }

        pp.readToken_lt_gt = function (code) {
          // '<>'
          var next = this.input.charCodeAt(this.pos + 1)
          var size = 1
          if (next === code) {
            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2
            if (this.input.charCodeAt(this.pos + size) === 61) {
              return this.finishOp(types$1.assign, size + 1)
            }
            return this.finishOp(types$1.bitShift, size)
          }
          if (
            next === 33 &&
            code === 60 &&
            !this.inModule &&
            this.input.charCodeAt(this.pos + 2) === 45 &&
            this.input.charCodeAt(this.pos + 3) === 45
          ) {
            // `<!--`, an XML-style comment that should be interpreted as a line comment
            this.skipLineComment(4)
            this.skipSpace()
            return this.nextToken()
          }
          if (next === 61) {
            size = 2
          }
          return this.finishOp(types$1.relational, size)
        }

        pp.readToken_eq_excl = function (code) {
          // '=!'
          var next = this.input.charCodeAt(this.pos + 1)
          if (next === 61) {
            return this.finishOp(
              types$1.equality,
              this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2
            )
          }
          if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
            // '=>'
            this.pos += 2
            return this.finishToken(types$1.arrow)
          }
          return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)
        }

        pp.readToken_question = function () {
          // '?'
          var ecmaVersion = this.options.ecmaVersion
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1)
            if (next === 46) {
              var next2 = this.input.charCodeAt(this.pos + 2)
              if (next2 < 48 || next2 > 57) {
                return this.finishOp(types$1.questionDot, 2)
              }
            }
            if (next === 63) {
              if (ecmaVersion >= 12) {
                var next2$1 = this.input.charCodeAt(this.pos + 2)
                if (next2$1 === 61) {
                  return this.finishOp(types$1.assign, 3)
                }
              }
              return this.finishOp(types$1.coalesce, 2)
            }
          }
          return this.finishOp(types$1.question, 1)
        }

        pp.readToken_numberSign = function () {
          // '#'
          var ecmaVersion = this.options.ecmaVersion
          var code = 35 // '#'
          if (ecmaVersion >= 13) {
            ++this.pos
            code = this.fullCharCodeAtPos()
            if (isIdentifierStart(code, true) || code === 92 /* '\' */) {
              return this.finishToken(types$1.privateId, this.readWord1())
            }
          }

          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'")
        }

        pp.getTokenFromCode = function (code) {
          switch (code) {
            // The interpretation of a dot depends on whether it is followed
            // by a digit or another two dots.
            case 46: // '.'
              return this.readToken_dot()

            // Punctuation tokens.
            case 40:
              ++this.pos
              return this.finishToken(types$1.parenL)
            case 41:
              ++this.pos
              return this.finishToken(types$1.parenR)
            case 59:
              ++this.pos
              return this.finishToken(types$1.semi)
            case 44:
              ++this.pos
              return this.finishToken(types$1.comma)
            case 91:
              ++this.pos
              return this.finishToken(types$1.bracketL)
            case 93:
              ++this.pos
              return this.finishToken(types$1.bracketR)
            case 123:
              ++this.pos
              return this.finishToken(types$1.braceL)
            case 125:
              ++this.pos
              return this.finishToken(types$1.braceR)
            case 58:
              ++this.pos
              return this.finishToken(types$1.colon)

            case 96: // '`'
              if (this.options.ecmaVersion < 6) {
                break
              }
              ++this.pos
              return this.finishToken(types$1.backQuote)

            case 48: // '0'
              var next = this.input.charCodeAt(this.pos + 1)
              if (next === 120 || next === 88) {
                return this.readRadixNumber(16)
              } // '0x', '0X' - hex number
              if (this.options.ecmaVersion >= 6) {
                if (next === 111 || next === 79) {
                  return this.readRadixNumber(8)
                } // '0o', '0O' - octal number
                if (next === 98 || next === 66) {
                  return this.readRadixNumber(2)
                } // '0b', '0B' - binary number
              }

            // Anything else beginning with a digit is an integer, octal
            // number, or float.
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57: // 1-9
              return this.readNumber(false)

            // Quotes produce strings.
            case 34:
            case 39: // '"', "'"
              return this.readString(code)

            // Operators are parsed inline in tiny state machines. '=' (61) is
            // often referred to. `finishOp` simply skips the amount of
            // characters it is given as second argument, and returns a token
            // of the type given by its first argument.
            case 47: // '/'
              return this.readToken_slash()

            case 37:
            case 42: // '%*'
              return this.readToken_mult_modulo_exp(code)

            case 124:
            case 38: // '|&'
              return this.readToken_pipe_amp(code)

            case 94: // '^'
              return this.readToken_caret()

            case 43:
            case 45: // '+-'
              return this.readToken_plus_min(code)

            case 60:
            case 62: // '<>'
              return this.readToken_lt_gt(code)

            case 61:
            case 33: // '=!'
              return this.readToken_eq_excl(code)

            case 63: // '?'
              return this.readToken_question()

            case 126: // '~'
              return this.finishOp(types$1.prefix, 1)

            case 35: // '#'
              return this.readToken_numberSign()
          }

          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'")
        }

        pp.finishOp = function (type, size) {
          var str = this.input.slice(this.pos, this.pos + size)
          this.pos += size
          return this.finishToken(type, str)
        }

        pp.readRegexp = function () {
          var escaped,
            inClass,
            start = this.pos
          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(start, "Unterminated regular expression")
            }
            var ch = this.input.charAt(this.pos)
            if (lineBreak.test(ch)) {
              this.raise(start, "Unterminated regular expression")
            }
            if (!escaped) {
              if (ch === "[") {
                inClass = true
              } else if (ch === "]" && inClass) {
                inClass = false
              } else if (ch === "/" && !inClass) {
                break
              }
              escaped = ch === "\\"
            } else {
              escaped = false
            }
            ++this.pos
          }
          var pattern = this.input.slice(start, this.pos)
          ++this.pos
          var flagsStart = this.pos
          var flags = this.readWord1()
          if (this.containsEsc) {
            this.unexpected(flagsStart)
          }

          // Validate pattern
          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this))
          state.reset(start, pattern, flags)
          this.validateRegExpFlags(state)
          this.validateRegExpPattern(state)

          // Create Literal#value property value.
          var value = null
          try {
            value = new RegExp(pattern, flags)
          } catch (e) {
            // ESTree requires null if it failed to instantiate RegExp object.
            // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
          }

          return this.finishToken(types$1.regexp, { pattern: pattern, flags: flags, value: value })
        }

        // Read an integer in the given radix. Return null if zero digits
        // were read, the integer value otherwise. When `len` is given, this
        // will return `null` unless the integer has exactly `len` digits.

        pp.readInt = function (radix, len, maybeLegacyOctalNumericLiteral) {
          // `len` is used for character escape sequences. In that case, disallow separators.
          var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined

          // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)
          // and isn't fraction part nor exponent part. In that case, if the first digit
          // is zero then disallow separators.
          var isLegacyOctalNumericLiteral =
            maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48

          var start = this.pos,
            total = 0,
            lastCode = 0
          for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
            var code = this.input.charCodeAt(this.pos),
              val = void 0

            if (allowSeparators && code === 95) {
              if (isLegacyOctalNumericLiteral) {
                this.raiseRecoverable(
                  this.pos,
                  "Numeric separator is not allowed in legacy octal numeric literals"
                )
              }
              if (lastCode === 95) {
                this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore")
              }
              if (i === 0) {
                this.raiseRecoverable(
                  this.pos,
                  "Numeric separator is not allowed at the first of digits"
                )
              }
              lastCode = code
              continue
            }

            if (code >= 97) {
              val = code - 97 + 10
            } // a
            else if (code >= 65) {
              val = code - 65 + 10
            } // A
            else if (code >= 48 && code <= 57) {
              val = code - 48
            } // 0-9
            else {
              val = Infinity
            }
            if (val >= radix) {
              break
            }
            lastCode = code
            total = total * radix + val
          }

          if (allowSeparators && lastCode === 95) {
            this.raiseRecoverable(
              this.pos - 1,
              "Numeric separator is not allowed at the last of digits"
            )
          }
          if (this.pos === start || (len != null && this.pos - start !== len)) {
            return null
          }

          return total
        }

        function stringToNumber(str, isLegacyOctalNumericLiteral) {
          if (isLegacyOctalNumericLiteral) {
            return parseInt(str, 8)
          }

          // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.
          return parseFloat(str.replace(/_/g, ""))
        }

        function stringToBigInt(str) {
          if (typeof BigInt !== "function") {
            return null
          }

          // `BigInt(value)` throws syntax error if the string contains numeric separators.
          return BigInt(str.replace(/_/g, ""))
        }

        pp.readRadixNumber = function (radix) {
          var start = this.pos
          this.pos += 2 // 0x
          var val = this.readInt(radix)
          if (val == null) {
            this.raise(this.start + 2, "Expected number in radix " + radix)
          }
          if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
            val = stringToBigInt(this.input.slice(start, this.pos))
            ++this.pos
          } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number")
          }
          return this.finishToken(types$1.num, val)
        }

        // Read an integer, octal integer, or floating-point number.

        pp.readNumber = function (startsWithDot) {
          var start = this.pos
          if (!startsWithDot && this.readInt(10, undefined, true) === null) {
            this.raise(start, "Invalid number")
          }
          var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48
          if (octal && this.strict) {
            this.raise(start, "Invalid number")
          }
          var next = this.input.charCodeAt(this.pos)
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
            var val$1 = stringToBigInt(this.input.slice(start, this.pos))
            ++this.pos
            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise(this.pos, "Identifier directly after number")
            }
            return this.finishToken(types$1.num, val$1)
          }
          if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
            octal = false
          }
          if (next === 46 && !octal) {
            // '.'
            ++this.pos
            this.readInt(10)
            next = this.input.charCodeAt(this.pos)
          }
          if ((next === 69 || next === 101) && !octal) {
            // 'eE'
            next = this.input.charCodeAt(++this.pos)
            if (next === 43 || next === 45) {
              ++this.pos
            } // '+-'
            if (this.readInt(10) === null) {
              this.raise(start, "Invalid number")
            }
          }
          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number")
          }

          var val = stringToNumber(this.input.slice(start, this.pos), octal)
          return this.finishToken(types$1.num, val)
        }

        // Read a string value, interpreting backslash-escapes.

        pp.readCodePoint = function () {
          var ch = this.input.charCodeAt(this.pos),
            code

          if (ch === 123) {
            // '{'
            if (this.options.ecmaVersion < 6) {
              this.unexpected()
            }
            var codePos = ++this.pos
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos)
            ++this.pos
            if (code > 0x10ffff) {
              this.invalidStringToken(codePos, "Code point out of bounds")
            }
          } else {
            code = this.readHexChar(4)
          }
          return code
        }

        function codePointToString(code) {
          // UTF-16 Decoding
          if (code <= 0xffff) {
            return String.fromCharCode(code)
          }
          code -= 0x10000
          return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00)
        }

        pp.readString = function (quote) {
          var out = "",
            chunkStart = ++this.pos
          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated string constant")
            }
            var ch = this.input.charCodeAt(this.pos)
            if (ch === quote) {
              break
            }
            if (ch === 92) {
              // '\'
              out += this.input.slice(chunkStart, this.pos)
              out += this.readEscapedChar(false)
              chunkStart = this.pos
            } else if (ch === 0x2028 || ch === 0x2029) {
              if (this.options.ecmaVersion < 10) {
                this.raise(this.start, "Unterminated string constant")
              }
              ++this.pos
              if (this.options.locations) {
                this.curLine++
                this.lineStart = this.pos
              }
            } else {
              if (isNewLine(ch)) {
                this.raise(this.start, "Unterminated string constant")
              }
              ++this.pos
            }
          }
          out += this.input.slice(chunkStart, this.pos++)
          return this.finishToken(types$1.string, out)
        }

        // Reads template string tokens.

        var INVALID_TEMPLATE_ESCAPE_ERROR = {}

        pp.tryReadTemplateToken = function () {
          this.inTemplateElement = true
          try {
            this.readTmplToken()
          } catch (err) {
            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
              this.readInvalidTemplateToken()
            } else {
              throw err
            }
          }

          this.inTemplateElement = false
        }

        pp.invalidStringToken = function (position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
            throw INVALID_TEMPLATE_ESCAPE_ERROR
          } else {
            this.raise(position, message)
          }
        }

        pp.readTmplToken = function () {
          var out = "",
            chunkStart = this.pos
          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated template")
            }
            var ch = this.input.charCodeAt(this.pos)
            if (ch === 96 || (ch === 36 && this.input.charCodeAt(this.pos + 1) === 123)) {
              // '`', '${'
              if (
                this.pos === this.start &&
                (this.type === types$1.template || this.type === types$1.invalidTemplate)
              ) {
                if (ch === 36) {
                  this.pos += 2
                  return this.finishToken(types$1.dollarBraceL)
                } else {
                  ++this.pos
                  return this.finishToken(types$1.backQuote)
                }
              }
              out += this.input.slice(chunkStart, this.pos)
              return this.finishToken(types$1.template, out)
            }
            if (ch === 92) {
              // '\'
              out += this.input.slice(chunkStart, this.pos)
              out += this.readEscapedChar(true)
              chunkStart = this.pos
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.pos)
              ++this.pos
              switch (ch) {
                case 13:
                  if (this.input.charCodeAt(this.pos) === 10) {
                    ++this.pos
                  }
                case 10:
                  out += "\n"
                  break
                default:
                  out += String.fromCharCode(ch)
                  break
              }
              if (this.options.locations) {
                ++this.curLine
                this.lineStart = this.pos
              }
              chunkStart = this.pos
            } else {
              ++this.pos
            }
          }
        }

        // Reads a template token to search for the end, without validating any escape sequences
        pp.readInvalidTemplateToken = function () {
          for (; this.pos < this.input.length; this.pos++) {
            switch (this.input[this.pos]) {
              case "\\":
                ++this.pos
                break

              case "$":
                if (this.input[this.pos + 1] !== "{") {
                  break
                }

              // falls through
              case "`":
                return this.finishToken(
                  types$1.invalidTemplate,
                  this.input.slice(this.start, this.pos)
                )

              // no default
            }
          }
          this.raise(this.start, "Unterminated template")
        }

        // Used to read escaped characters

        pp.readEscapedChar = function (inTemplate) {
          var ch = this.input.charCodeAt(++this.pos)
          ++this.pos
          switch (ch) {
            case 110:
              return "\n" // 'n' -> '\n'
            case 114:
              return "\r" // 'r' -> '\r'
            case 120:
              return String.fromCharCode(this.readHexChar(2)) // 'x'
            case 117:
              return codePointToString(this.readCodePoint()) // 'u'
            case 116:
              return "\t" // 't' -> '\t'
            case 98:
              return "\b" // 'b' -> '\b'
            case 118:
              return "\u000b" // 'v' -> '\u000b'
            case 102:
              return "\f" // 'f' -> '\f'
            case 13:
              if (this.input.charCodeAt(this.pos) === 10) {
                ++this.pos
              } // '\r\n'
            case 10: // ' \n'
              if (this.options.locations) {
                this.lineStart = this.pos
                ++this.curLine
              }
              return ""
            case 56:
            case 57:
              if (this.strict) {
                this.invalidStringToken(this.pos - 1, "Invalid escape sequence")
              }
              if (inTemplate) {
                var codePos = this.pos - 1

                this.invalidStringToken(codePos, "Invalid escape sequence in template string")

                return null
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]
                var octal = parseInt(octalStr, 8)
                if (octal > 255) {
                  octalStr = octalStr.slice(0, -1)
                  octal = parseInt(octalStr, 8)
                }
                this.pos += octalStr.length - 1
                ch = this.input.charCodeAt(this.pos)
                if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                  this.invalidStringToken(
                    this.pos - 1 - octalStr.length,
                    inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
                  )
                }
                return String.fromCharCode(octal)
              }
              if (isNewLine(ch)) {
                // Unicode new line characters after \ get removed from output in both
                // template literals and strings
                return ""
              }
              return String.fromCharCode(ch)
          }
        }

        // Used to read character escape sequences ('\x', '\u', '\U').

        pp.readHexChar = function (len) {
          var codePos = this.pos
          var n = this.readInt(16, len)
          if (n === null) {
            this.invalidStringToken(codePos, "Bad character escape sequence")
          }
          return n
        }

        // Read an identifier, and return it as a string. Sets `this.containsEsc`
        // to whether the word contained a '\u' escape.
        //
        // Incrementally adds only escaped chars, adding other chunks as-is
        // as a micro-optimization.

        pp.readWord1 = function () {
          this.containsEsc = false
          var word = "",
            first = true,
            chunkStart = this.pos
          var astral = this.options.ecmaVersion >= 6
          while (this.pos < this.input.length) {
            var ch = this.fullCharCodeAtPos()
            if (isIdentifierChar(ch, astral)) {
              this.pos += ch <= 0xffff ? 1 : 2
            } else if (ch === 92) {
              // "\"
              this.containsEsc = true
              word += this.input.slice(chunkStart, this.pos)
              var escStart = this.pos
              if (this.input.charCodeAt(++this.pos) !== 117) {
                // "u"
                this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX")
              }
              ++this.pos
              var esc = this.readCodePoint()
              if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                this.invalidStringToken(escStart, "Invalid Unicode escape")
              }
              word += codePointToString(esc)
              chunkStart = this.pos
            } else {
              break
            }
            first = false
          }
          return word + this.input.slice(chunkStart, this.pos)
        }

        // Read an identifier or keyword token. Will check for reserved
        // words when necessary.

        pp.readWord = function () {
          var word = this.readWord1()
          var type = types$1.name
          if (this.keywords.test(word)) {
            type = keywords[word]
          }
          return this.finishToken(type, word)
        }

        // Acorn is a tiny, fast JavaScript parser written in JavaScript.

        var version = "8.7.0"

        Parser.acorn = {
          Parser: Parser,
          version: version,
          defaultOptions: defaultOptions,
          Position: Position,
          SourceLocation: SourceLocation,
          getLineInfo: getLineInfo,
          Node: Node,
          TokenType: TokenType,
          tokTypes: types$1,
          keywordTypes: keywords,
          TokContext: TokContext,
          tokContexts: types,
          isIdentifierChar: isIdentifierChar,
          isIdentifierStart: isIdentifierStart,
          Token: Token,
          isNewLine: isNewLine,
          lineBreak: lineBreak,
          lineBreakG: lineBreakG,
          nonASCIIwhitespace: nonASCIIwhitespace
        }

        // The main exported interface (under `self.acorn` when in the
        // browser) is a `parse` function that takes a code string and
        // returns an abstract syntax tree as specified by [Mozilla parser
        // API][api].
        //
        // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

        function parse(input, options) {
          return Parser.parse(input, options)
        }

        // This function tries to parse a single expression at a given
        // offset in a string. Useful for parsing mixed-language formats
        // that embed JavaScript expressions.

        function parseExpressionAt(input, pos, options) {
          return Parser.parseExpressionAt(input, pos, options)
        }

        // Acorn is organized as a tokenizer and a recursive-descent parser.
        // The `tokenizer` export provides an interface to the tokenizer.

        function tokenizer(input, options) {
          return Parser.tokenizer(input, options)
        }

        exports.Node = Node
        exports.Parser = Parser
        exports.Position = Position
        exports.SourceLocation = SourceLocation
        exports.TokContext = TokContext
        exports.Token = Token
        exports.TokenType = TokenType
        exports.defaultOptions = defaultOptions
        exports.getLineInfo = getLineInfo
        exports.isIdentifierChar = isIdentifierChar
        exports.isIdentifierStart = isIdentifierStart
        exports.isNewLine = isNewLine
        exports.keywordTypes = keywords
        exports.lineBreak = lineBreak
        exports.lineBreakG = lineBreakG
        exports.nonASCIIwhitespace = nonASCIIwhitespace
        exports.parse = parse
        exports.parseExpressionAt = parseExpressionAt
        exports.tokContexts = types
        exports.tokTypes = types$1
        exports.tokenizer = tokenizer
        exports.version = version

        Object.defineProperty(exports, "__esModule", { value: true })
      })

      /***/
    },

    /***/ 64941: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var compileSchema = __nccwpck_require__(875),
        resolve = __nccwpck_require__(63896),
        Cache = __nccwpck_require__(93679),
        SchemaObject = __nccwpck_require__(37605),
        stableStringify = __nccwpck_require__(30969),
        formats = __nccwpck_require__(66627),
        rules = __nccwpck_require__(68561),
        $dataMetaSchema = __nccwpck_require__(21412),
        util = __nccwpck_require__(76578)

      module.exports = Ajv

      Ajv.prototype.validate = validate
      Ajv.prototype.compile = compile
      Ajv.prototype.addSchema = addSchema
      Ajv.prototype.addMetaSchema = addMetaSchema
      Ajv.prototype.validateSchema = validateSchema
      Ajv.prototype.getSchema = getSchema
      Ajv.prototype.removeSchema = removeSchema
      Ajv.prototype.addFormat = addFormat
      Ajv.prototype.errorsText = errorsText

      Ajv.prototype._addSchema = _addSchema
      Ajv.prototype._compile = _compile

      Ajv.prototype.compileAsync = __nccwpck_require__(80890)
      var customKeyword = __nccwpck_require__(53297)
      Ajv.prototype.addKeyword = customKeyword.add
      Ajv.prototype.getKeyword = customKeyword.get
      Ajv.prototype.removeKeyword = customKeyword.remove
      Ajv.prototype.validateKeyword = customKeyword.validate

      var errorClasses = __nccwpck_require__(25726)
      Ajv.ValidationError = errorClasses.Validation
      Ajv.MissingRefError = errorClasses.MissingRef
      Ajv.$dataMetaSchema = $dataMetaSchema

      var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema"

      var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes", "strictDefaults"]
      var META_SUPPORT_DATA = ["/properties"]

      /**
       * Creates validator instance.
       * Usage: `Ajv(opts)`
       * @param {Object} opts optional options
       * @return {Object} ajv instance
       */
      function Ajv(opts) {
        if (!(this instanceof Ajv)) return new Ajv(opts)
        opts = this._opts = util.copy(opts) || {}
        setLogger(this)
        this._schemas = {}
        this._refs = {}
        this._fragments = {}
        this._formats = formats(opts.format)

        this._cache = opts.cache || new Cache()
        this._loadingSchemas = {}
        this._compilations = []
        this.RULES = rules()
        this._getId = chooseGetId(opts)

        opts.loopRequired = opts.loopRequired || Infinity
        if (opts.errorDataPath == "property") opts._errorDataPathProperty = true
        if (opts.serialize === undefined) opts.serialize = stableStringify
        this._metaOpts = getMetaSchemaOptions(this)

        if (opts.formats) addInitialFormats(this)
        if (opts.keywords) addInitialKeywords(this)
        addDefaultMetaSchema(this)
        if (typeof opts.meta == "object") this.addMetaSchema(opts.meta)
        if (opts.nullable) this.addKeyword("nullable", { metaSchema: { type: "boolean" } })
        addInitialSchemas(this)
      }

      /**
       * Validate data using schema
       * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
       * @this   Ajv
       * @param  {String|Object} schemaKeyRef key, ref or schema object
       * @param  {Any} data to be validated
       * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
       */
      function validate(schemaKeyRef, data) {
        var v
        if (typeof schemaKeyRef == "string") {
          v = this.getSchema(schemaKeyRef)
          if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"')
        } else {
          var schemaObj = this._addSchema(schemaKeyRef)
          v = schemaObj.validate || this._compile(schemaObj)
        }

        var valid = v(data)
        if (v.$async !== true) this.errors = v.errors
        return valid
      }

      /**
       * Create validating function for passed schema.
       * @this   Ajv
       * @param  {Object} schema schema object
       * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
       * @return {Function} validating function
       */
      function compile(schema, _meta) {
        var schemaObj = this._addSchema(schema, undefined, _meta)
        return schemaObj.validate || this._compile(schemaObj)
      }

      /**
       * Adds schema to the instance.
       * @this   Ajv
       * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
       * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
       * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
       * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
       * @return {Ajv} this for method chaining
       */
      function addSchema(schema, key, _skipValidation, _meta) {
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++)
            this.addSchema(schema[i], undefined, _skipValidation, _meta)
          return this
        }
        var id = this._getId(schema)
        if (id !== undefined && typeof id != "string") throw new Error("schema id must be string")
        key = resolve.normalizeId(key || id)
        checkUnique(this, key)
        this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true)
        return this
      }

      /**
       * Add schema that will be used to validate other schemas
       * options in META_IGNORE_OPTIONS are alway set to false
       * @this   Ajv
       * @param {Object} schema schema object
       * @param {String} key optional schema key
       * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
       * @return {Ajv} this for method chaining
       */
      function addMetaSchema(schema, key, skipValidation) {
        this.addSchema(schema, key, skipValidation, true)
        return this
      }

      /**
       * Validate schema
       * @this   Ajv
       * @param {Object} schema schema to validate
       * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
       * @return {Boolean} true if schema is valid
       */
      function validateSchema(schema, throwOrLogError) {
        var $schema = schema.$schema
        if ($schema !== undefined && typeof $schema != "string")
          throw new Error("$schema must be a string")
        $schema = $schema || this._opts.defaultMeta || defaultMeta(this)
        if (!$schema) {
          this.logger.warn("meta-schema not available")
          this.errors = null
          return true
        }
        var valid = this.validate($schema, schema)
        if (!valid && throwOrLogError) {
          var message = "schema is invalid: " + this.errorsText()
          if (this._opts.validateSchema == "log") this.logger.error(message)
          else throw new Error(message)
        }
        return valid
      }

      function defaultMeta(self) {
        var meta = self._opts.meta
        self._opts.defaultMeta =
          typeof meta == "object"
            ? self._getId(meta) || meta
            : self.getSchema(META_SCHEMA_ID)
            ? META_SCHEMA_ID
            : undefined
        return self._opts.defaultMeta
      }

      /**
       * Get compiled schema from the instance by `key` or `ref`.
       * @this   Ajv
       * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
       * @return {Function} schema validating function (with property `schema`).
       */
      function getSchema(keyRef) {
        var schemaObj = _getSchemaObj(this, keyRef)
        switch (typeof schemaObj) {
          case "object":
            return schemaObj.validate || this._compile(schemaObj)
          case "string":
            return this.getSchema(schemaObj)
          case "undefined":
            return _getSchemaFragment(this, keyRef)
        }
      }

      function _getSchemaFragment(self, ref) {
        var res = resolve.schema.call(self, { schema: {} }, ref)
        if (res) {
          var schema = res.schema,
            root = res.root,
            baseId = res.baseId
          var v = compileSchema.call(self, schema, root, undefined, baseId)
          self._fragments[ref] = new SchemaObject({
            ref: ref,
            fragment: true,
            schema: schema,
            root: root,
            baseId: baseId,
            validate: v
          })
          return v
        }
      }

      function _getSchemaObj(self, keyRef) {
        keyRef = resolve.normalizeId(keyRef)
        return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef]
      }

      /**
       * Remove cached schema(s).
       * If no parameter is passed all schemas but meta-schemas are removed.
       * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
       * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
       * @this   Ajv
       * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
       * @return {Ajv} this for method chaining
       */
      function removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
          _removeAllSchemas(this, this._schemas, schemaKeyRef)
          _removeAllSchemas(this, this._refs, schemaKeyRef)
          return this
        }
        switch (typeof schemaKeyRef) {
          case "undefined":
            _removeAllSchemas(this, this._schemas)
            _removeAllSchemas(this, this._refs)
            this._cache.clear()
            return this
          case "string":
            var schemaObj = _getSchemaObj(this, schemaKeyRef)
            if (schemaObj) this._cache.del(schemaObj.cacheKey)
            delete this._schemas[schemaKeyRef]
            delete this._refs[schemaKeyRef]
            return this
          case "object":
            var serialize = this._opts.serialize
            var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef
            this._cache.del(cacheKey)
            var id = this._getId(schemaKeyRef)
            if (id) {
              id = resolve.normalizeId(id)
              delete this._schemas[id]
              delete this._refs[id]
            }
        }
        return this
      }

      function _removeAllSchemas(self, schemas, regex) {
        for (var keyRef in schemas) {
          var schemaObj = schemas[keyRef]
          if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
            self._cache.del(schemaObj.cacheKey)
            delete schemas[keyRef]
          }
        }
      }

      /* @this   Ajv */
      function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
        if (typeof schema != "object" && typeof schema != "boolean")
          throw new Error("schema should be object or boolean")
        var serialize = this._opts.serialize
        var cacheKey = serialize ? serialize(schema) : schema
        var cached = this._cache.get(cacheKey)
        if (cached) return cached

        shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false

        var id = resolve.normalizeId(this._getId(schema))
        if (id && shouldAddSchema) checkUnique(this, id)

        var willValidate = this._opts.validateSchema !== false && !skipValidation
        var recursiveMeta
        if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
          this.validateSchema(schema, true)

        var localRefs = resolve.ids.call(this, schema)

        var schemaObj = new SchemaObject({
          id: id,
          schema: schema,
          localRefs: localRefs,
          cacheKey: cacheKey,
          meta: meta
        })

        if (id[0] != "#" && shouldAddSchema) this._refs[id] = schemaObj
        this._cache.put(cacheKey, schemaObj)

        if (willValidate && recursiveMeta) this.validateSchema(schema, true)

        return schemaObj
      }

      /* @this   Ajv */
      function _compile(schemaObj, root) {
        if (schemaObj.compiling) {
          schemaObj.validate = callValidate
          callValidate.schema = schemaObj.schema
          callValidate.errors = null
          callValidate.root = root ? root : callValidate
          if (schemaObj.schema.$async === true) callValidate.$async = true
          return callValidate
        }
        schemaObj.compiling = true

        var currentOpts
        if (schemaObj.meta) {
          currentOpts = this._opts
          this._opts = this._metaOpts
        }

        var v
        try {
          v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs)
        } catch (e) {
          delete schemaObj.validate
          throw e
        } finally {
          schemaObj.compiling = false
          if (schemaObj.meta) this._opts = currentOpts
        }

        schemaObj.validate = v
        schemaObj.refs = v.refs
        schemaObj.refVal = v.refVal
        schemaObj.root = v.root
        return v

        /* @this   {*} - custom context, see passContext option */
        function callValidate() {
          /* jshint validthis: true */
          var _validate = schemaObj.validate
          var result = _validate.apply(this, arguments)
          callValidate.errors = _validate.errors
          return result
        }
      }

      function chooseGetId(opts) {
        switch (opts.schemaId) {
          case "auto":
            return _get$IdOrId
          case "id":
            return _getId
          default:
            return _get$Id
        }
      }

      /* @this   Ajv */
      function _getId(schema) {
        if (schema.$id) this.logger.warn("schema $id ignored", schema.$id)
        return schema.id
      }

      /* @this   Ajv */
      function _get$Id(schema) {
        if (schema.id) this.logger.warn("schema id ignored", schema.id)
        return schema.$id
      }

      function _get$IdOrId(schema) {
        if (schema.$id && schema.id && schema.$id != schema.id)
          throw new Error("schema $id is different from id")
        return schema.$id || schema.id
      }

      /**
       * Convert array of error message objects to string
       * @this   Ajv
       * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
       * @param  {Object} options optional options with properties `separator` and `dataVar`.
       * @return {String} human readable string with all errors descriptions
       */
      function errorsText(errors, options) {
        errors = errors || this.errors
        if (!errors) return "No errors"
        options = options || {}
        var separator = options.separator === undefined ? ", " : options.separator
        var dataVar = options.dataVar === undefined ? "data" : options.dataVar

        var text = ""
        for (var i = 0; i < errors.length; i++) {
          var e = errors[i]
          if (e) text += dataVar + e.dataPath + " " + e.message + separator
        }
        return text.slice(0, -separator.length)
      }

      /**
       * Add custom format
       * @this   Ajv
       * @param {String} name format name
       * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
       * @return {Ajv} this for method chaining
       */
      function addFormat(name, format) {
        if (typeof format == "string") format = new RegExp(format)
        this._formats[name] = format
        return this
      }

      function addDefaultMetaSchema(self) {
        var $dataSchema
        if (self._opts.$data) {
          $dataSchema = __nccwpck_require__(894)
          self.addMetaSchema($dataSchema, $dataSchema.$id, true)
        }
        if (self._opts.meta === false) return
        var metaSchema = __nccwpck_require__(6680)
        if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA)
        self.addMetaSchema(metaSchema, META_SCHEMA_ID, true)
        self._refs["http://json-schema.org/schema"] = META_SCHEMA_ID
      }

      function addInitialSchemas(self) {
        var optsSchemas = self._opts.schemas
        if (!optsSchemas) return
        if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas)
        else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key)
      }

      function addInitialFormats(self) {
        for (var name in self._opts.formats) {
          var format = self._opts.formats[name]
          self.addFormat(name, format)
        }
      }

      function addInitialKeywords(self) {
        for (var name in self._opts.keywords) {
          var keyword = self._opts.keywords[name]
          self.addKeyword(name, keyword)
        }
      }

      function checkUnique(self, id) {
        if (self._schemas[id] || self._refs[id])
          throw new Error('schema with key or id "' + id + '" already exists')
      }

      function getMetaSchemaOptions(self) {
        var metaOpts = util.copy(self._opts)
        for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) delete metaOpts[META_IGNORE_OPTIONS[i]]
        return metaOpts
      }

      function setLogger(self) {
        var logger = self._opts.logger
        if (logger === false) {
          self.logger = { log: noop, warn: noop, error: noop }
        } else {
          if (logger === undefined) logger = console
          if (!(typeof logger == "object" && logger.log && logger.warn && logger.error))
            throw new Error("logger must implement log, warn and error methods")
          self.logger = logger
        }
      }

      function noop() {}

      /***/
    },

    /***/ 93679: /***/ (module) => {
      "use strict"

      var Cache = (module.exports = function Cache() {
        this._cache = {}
      })

      Cache.prototype.put = function Cache_put(key, value) {
        this._cache[key] = value
      }

      Cache.prototype.get = function Cache_get(key) {
        return this._cache[key]
      }

      Cache.prototype.del = function Cache_del(key) {
        delete this._cache[key]
      }

      Cache.prototype.clear = function Cache_clear() {
        this._cache = {}
      }

      /***/
    },

    /***/ 80890: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var MissingRefError = __nccwpck_require__(25726).MissingRef

      module.exports = compileAsync

      /**
       * Creates validating function for passed schema with asynchronous loading of missing schemas.
       * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
       * @this  Ajv
       * @param {Object}   schema schema object
       * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
       * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
       * @return {Promise} promise that resolves with a validating function.
       */
      function compileAsync(schema, meta, callback) {
        /* eslint no-shadow: 0 */
        /* global Promise */
        /* jshint validthis: true */
        var self = this
        if (typeof this._opts.loadSchema != "function")
          throw new Error("options.loadSchema should be a function")

        if (typeof meta == "function") {
          callback = meta
          meta = undefined
        }

        var p = loadMetaSchemaOf(schema).then(function () {
          var schemaObj = self._addSchema(schema, undefined, meta)
          return schemaObj.validate || _compileAsync(schemaObj)
        })

        if (callback) {
          p.then(function (v) {
            callback(null, v)
          }, callback)
        }

        return p

        function loadMetaSchemaOf(sch) {
          var $schema = sch.$schema
          return $schema && !self.getSchema($schema)
            ? compileAsync.call(self, { $ref: $schema }, true)
            : Promise.resolve()
        }

        function _compileAsync(schemaObj) {
          try {
            return self._compile(schemaObj)
          } catch (e) {
            if (e instanceof MissingRefError) return loadMissingSchema(e)
            throw e
          }

          function loadMissingSchema(e) {
            var ref = e.missingSchema
            if (added(ref))
              throw new Error(
                "Schema " + ref + " is loaded but " + e.missingRef + " cannot be resolved"
              )

            var schemaPromise = self._loadingSchemas[ref]
            if (!schemaPromise) {
              schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref)
              schemaPromise.then(removePromise, removePromise)
            }

            return schemaPromise
              .then(function (sch) {
                if (!added(ref)) {
                  return loadMetaSchemaOf(sch).then(function () {
                    if (!added(ref)) self.addSchema(sch, ref, undefined, meta)
                  })
                }
              })
              .then(function () {
                return _compileAsync(schemaObj)
              })

            function removePromise() {
              delete self._loadingSchemas[ref]
            }

            function added(ref) {
              return self._refs[ref] || self._schemas[ref]
            }
          }
        }
      }

      /***/
    },

    /***/ 25726: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var resolve = __nccwpck_require__(63896)

      module.exports = {
        Validation: errorSubclass(ValidationError),
        MissingRef: errorSubclass(MissingRefError)
      }

      function ValidationError(errors) {
        this.message = "validation failed"
        this.errors = errors
        this.ajv = this.validation = true
      }

      MissingRefError.message = function (baseId, ref) {
        return "can't resolve reference " + ref + " from id " + baseId
      }

      function MissingRefError(baseId, ref, message) {
        this.message = message || MissingRefError.message(baseId, ref)
        this.missingRef = resolve.url(baseId, ref)
        this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef))
      }

      function errorSubclass(Subclass) {
        Subclass.prototype = Object.create(Error.prototype)
        Subclass.prototype.constructor = Subclass
        return Subclass
      }

      /***/
    },

    /***/ 66627: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var util = __nccwpck_require__(76578)

      var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/
      var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
      var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i
      var HOSTNAME =
        /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i
      var URI =
        /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i
      var URIREF =
        /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i
      // uri-template: https://tools.ietf.org/html/rfc6570
      var URITEMPLATE =
        /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i
      // For the source: https://gist.github.com/dperini/729294
      // For test cases: https://mathiasbynens.be/demo/url-regex
      // @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
      // var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
      var URL =
        /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i
      var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i
      var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/
      var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i
      var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/

      module.exports = formats

      function formats(mode) {
        mode = mode == "full" ? "full" : "fast"
        return util.copy(formats[mode])
      }

      formats.fast = {
        // date: http://tools.ietf.org/html/rfc3339#section-5.6
        date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
        // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
        time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
        "date-time":
          /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
        // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
        uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
        "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
        "uri-template": URITEMPLATE,
        url: URL,
        // email (sources from jsen validator):
        // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
        // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
        email:
          /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
        hostname: HOSTNAME,
        // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex: regex,
        // uuid: http://tools.ietf.org/html/rfc4122
        uuid: UUID,
        // JSON-pointer: https://tools.ietf.org/html/rfc6901
        // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
        "json-pointer": JSON_POINTER,
        "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
        // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
        "relative-json-pointer": RELATIVE_JSON_POINTER
      }

      formats.full = {
        date: date,
        time: time,
        "date-time": date_time,
        uri: uri,
        "uri-reference": URIREF,
        "uri-template": URITEMPLATE,
        url: URL,
        email:
          /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
        hostname: HOSTNAME,
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex: regex,
        uuid: UUID,
        "json-pointer": JSON_POINTER,
        "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
        "relative-json-pointer": RELATIVE_JSON_POINTER
      }

      function isLeapYear(year) {
        // https://tools.ietf.org/html/rfc3339#appendix-C
        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)
      }

      function date(str) {
        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
        var matches = str.match(DATE)
        if (!matches) return false

        var year = +matches[1]
        var month = +matches[2]
        var day = +matches[3]

        return (
          month >= 1 &&
          month <= 12 &&
          day >= 1 &&
          day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month])
        )
      }

      function time(str, full) {
        var matches = str.match(TIME)
        if (!matches) return false

        var hour = matches[1]
        var minute = matches[2]
        var second = matches[3]
        var timeZone = matches[5]
        return (
          ((hour <= 23 && minute <= 59 && second <= 59) ||
            (hour == 23 && minute == 59 && second == 60)) &&
          (!full || timeZone)
        )
      }

      var DATE_TIME_SEPARATOR = /t|\s/i
      function date_time(str) {
        // http://tools.ietf.org/html/rfc3339#section-5.6
        var dateTime = str.split(DATE_TIME_SEPARATOR)
        return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true)
      }

      var NOT_URI_FRAGMENT = /\/|:/
      function uri(str) {
        // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
        return NOT_URI_FRAGMENT.test(str) && URI.test(str)
      }

      var Z_ANCHOR = /[^\\]\\Z/
      function regex(str) {
        if (Z_ANCHOR.test(str)) return false
        try {
          new RegExp(str)
          return true
        } catch (e) {
          return false
        }
      }

      /***/
    },

    /***/ 875: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var resolve = __nccwpck_require__(63896),
        util = __nccwpck_require__(76578),
        errorClasses = __nccwpck_require__(25726),
        stableStringify = __nccwpck_require__(30969)

      var validateGenerator = __nccwpck_require__(49585)

      /**
       * Functions below are used inside compiled validations function
       */

      var ucs2length = util.ucs2length
      var equal = __nccwpck_require__(28206)

      // this error is thrown by async schemas to return validation errors via exception
      var ValidationError = errorClasses.Validation

      module.exports = compile

      /**
       * Compiles schema to validation function
       * @this   Ajv
       * @param  {Object} schema schema object
       * @param  {Object} root object with information about the root schema for this schema
       * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
       * @param  {String} baseId base ID for IDs in the schema
       * @return {Function} validation function
       */
      function compile(schema, root, localRefs, baseId) {
        /* jshint validthis: true, evil: true */
        /* eslint no-shadow: 0 */
        var self = this,
          opts = this._opts,
          refVal = [undefined],
          refs = {},
          patterns = [],
          patternsHash = {},
          defaults = [],
          defaultsHash = {},
          customRules = []

        root = root || { schema: schema, refVal: refVal, refs: refs }

        var c = checkCompiling.call(this, schema, root, baseId)
        var compilation = this._compilations[c.index]
        if (c.compiling) return (compilation.callValidate = callValidate)

        var formats = this._formats
        var RULES = this.RULES

        try {
          var v = localCompile(schema, root, localRefs, baseId)
          compilation.validate = v
          var cv = compilation.callValidate
          if (cv) {
            cv.schema = v.schema
            cv.errors = null
            cv.refs = v.refs
            cv.refVal = v.refVal
            cv.root = v.root
            cv.$async = v.$async
            if (opts.sourceCode) cv.source = v.source
          }
          return v
        } finally {
          endCompiling.call(this, schema, root, baseId)
        }

        /* @this   {*} - custom context, see passContext option */
        function callValidate() {
          /* jshint validthis: true */
          var validate = compilation.validate
          var result = validate.apply(this, arguments)
          callValidate.errors = validate.errors
          return result
        }

        function localCompile(_schema, _root, localRefs, baseId) {
          var isRoot = !_root || (_root && _root.schema == _schema)
          if (_root.schema != root.schema)
            return compile.call(self, _schema, _root, localRefs, baseId)

          var $async = _schema.$async === true

          var sourceCode = validateGenerator({
            isTop: true,
            schema: _schema,
            isRoot: isRoot,
            baseId: baseId,
            root: _root,
            schemaPath: "",
            errSchemaPath: "#",
            errorPath: '""',
            MissingRefError: errorClasses.MissingRef,
            RULES: RULES,
            validate: validateGenerator,
            util: util,
            resolve: resolve,
            resolveRef: resolveRef,
            usePattern: usePattern,
            useDefault: useDefault,
            useCustomRule: useCustomRule,
            opts: opts,
            formats: formats,
            logger: self.logger,
            self: self
          })

          sourceCode =
            vars(refVal, refValCode) +
            vars(patterns, patternCode) +
            vars(defaults, defaultCode) +
            vars(customRules, customRuleCode) +
            sourceCode

          if (opts.processCode) sourceCode = opts.processCode(sourceCode, _schema)
          // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
          var validate
          try {
            var makeValidate = new Function(
              "self",
              "RULES",
              "formats",
              "root",
              "refVal",
              "defaults",
              "customRules",
              "equal",
              "ucs2length",
              "ValidationError",
              sourceCode
            )

            validate = makeValidate(
              self,
              RULES,
              formats,
              root,
              refVal,
              defaults,
              customRules,
              equal,
              ucs2length,
              ValidationError
            )

            refVal[0] = validate
          } catch (e) {
            self.logger.error("Error compiling schema, function code:", sourceCode)
            throw e
          }

          validate.schema = _schema
          validate.errors = null
          validate.refs = refs
          validate.refVal = refVal
          validate.root = isRoot ? validate : _root
          if ($async) validate.$async = true
          if (opts.sourceCode === true) {
            validate.source = {
              code: sourceCode,
              patterns: patterns,
              defaults: defaults
            }
          }

          return validate
        }

        function resolveRef(baseId, ref, isRoot) {
          ref = resolve.url(baseId, ref)
          var refIndex = refs[ref]
          var _refVal, refCode
          if (refIndex !== undefined) {
            _refVal = refVal[refIndex]
            refCode = "refVal[" + refIndex + "]"
            return resolvedRef(_refVal, refCode)
          }
          if (!isRoot && root.refs) {
            var rootRefId = root.refs[ref]
            if (rootRefId !== undefined) {
              _refVal = root.refVal[rootRefId]
              refCode = addLocalRef(ref, _refVal)
              return resolvedRef(_refVal, refCode)
            }
          }

          refCode = addLocalRef(ref)
          var v = resolve.call(self, localCompile, root, ref)
          if (v === undefined) {
            var localSchema = localRefs && localRefs[ref]
            if (localSchema) {
              v = resolve.inlineRef(localSchema, opts.inlineRefs)
                ? localSchema
                : compile.call(self, localSchema, root, localRefs, baseId)
            }
          }

          if (v === undefined) {
            removeLocalRef(ref)
          } else {
            replaceLocalRef(ref, v)
            return resolvedRef(v, refCode)
          }
        }

        function addLocalRef(ref, v) {
          var refId = refVal.length
          refVal[refId] = v
          refs[ref] = refId
          return "refVal" + refId
        }

        function removeLocalRef(ref) {
          delete refs[ref]
        }

        function replaceLocalRef(ref, v) {
          var refId = refs[ref]
          refVal[refId] = v
        }

        function resolvedRef(refVal, code) {
          return typeof refVal == "object" || typeof refVal == "boolean"
            ? { code: code, schema: refVal, inline: true }
            : { code: code, $async: refVal && !!refVal.$async }
        }

        function usePattern(regexStr) {
          var index = patternsHash[regexStr]
          if (index === undefined) {
            index = patternsHash[regexStr] = patterns.length
            patterns[index] = regexStr
          }
          return "pattern" + index
        }

        function useDefault(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
              return "" + value
            case "string":
              return util.toQuotedString(value)
            case "object":
              if (value === null) return "null"
              var valueStr = stableStringify(value)
              var index = defaultsHash[valueStr]
              if (index === undefined) {
                index = defaultsHash[valueStr] = defaults.length
                defaults[index] = value
              }
              return "default" + index
          }
        }

        function useCustomRule(rule, schema, parentSchema, it) {
          if (self._opts.validateSchema !== false) {
            var deps = rule.definition.dependencies
            if (
              deps &&
              !deps.every(function (keyword) {
                return Object.prototype.hasOwnProperty.call(parentSchema, keyword)
              })
            )
              throw new Error("parent schema must have all required keywords: " + deps.join(","))

            var validateSchema = rule.definition.validateSchema
            if (validateSchema) {
              var valid = validateSchema(schema)
              if (!valid) {
                var message = "keyword schema is invalid: " + self.errorsText(validateSchema.errors)
                if (self._opts.validateSchema == "log") self.logger.error(message)
                else throw new Error(message)
              }
            }
          }

          var compile = rule.definition.compile,
            inline = rule.definition.inline,
            macro = rule.definition.macro

          var validate
          if (compile) {
            validate = compile.call(self, schema, parentSchema, it)
          } else if (macro) {
            validate = macro.call(self, schema, parentSchema, it)
            if (opts.validateSchema !== false) self.validateSchema(validate, true)
          } else if (inline) {
            validate = inline.call(self, it, rule.keyword, schema, parentSchema)
          } else {
            validate = rule.definition.validate
            if (!validate) return
          }

          if (validate === undefined)
            throw new Error('custom keyword "' + rule.keyword + '"failed to compile')

          var index = customRules.length
          customRules[index] = validate

          return {
            code: "customRule" + index,
            validate: validate
          }
        }
      }

      /**
       * Checks if the schema is currently compiled
       * @this   Ajv
       * @param  {Object} schema schema to compile
       * @param  {Object} root root object
       * @param  {String} baseId base schema ID
       * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
       */
      function checkCompiling(schema, root, baseId) {
        /* jshint validthis: true */
        var index = compIndex.call(this, schema, root, baseId)
        if (index >= 0) return { index: index, compiling: true }
        index = this._compilations.length
        this._compilations[index] = {
          schema: schema,
          root: root,
          baseId: baseId
        }
        return { index: index, compiling: false }
      }

      /**
       * Removes the schema from the currently compiled list
       * @this   Ajv
       * @param  {Object} schema schema to compile
       * @param  {Object} root root object
       * @param  {String} baseId base schema ID
       */
      function endCompiling(schema, root, baseId) {
        /* jshint validthis: true */
        var i = compIndex.call(this, schema, root, baseId)
        if (i >= 0) this._compilations.splice(i, 1)
      }

      /**
       * Index of schema compilation in the currently compiled list
       * @this   Ajv
       * @param  {Object} schema schema to compile
       * @param  {Object} root root object
       * @param  {String} baseId base schema ID
       * @return {Integer} compilation index
       */
      function compIndex(schema, root, baseId) {
        /* jshint validthis: true */
        for (var i = 0; i < this._compilations.length; i++) {
          var c = this._compilations[i]
          if (c.schema == schema && c.root == root && c.baseId == baseId) return i
        }
        return -1
      }

      function patternCode(i, patterns) {
        return "var pattern" + i + " = new RegExp(" + util.toQuotedString(patterns[i]) + ");"
      }

      function defaultCode(i) {
        return "var default" + i + " = defaults[" + i + "];"
      }

      function refValCode(i, refVal) {
        return refVal[i] === undefined ? "" : "var refVal" + i + " = refVal[" + i + "];"
      }

      function customRuleCode(i) {
        return "var customRule" + i + " = customRules[" + i + "];"
      }

      function vars(arr, statement) {
        if (!arr.length) return ""
        var code = ""
        for (var i = 0; i < arr.length; i++) code += statement(i, arr)
        return code
      }

      /***/
    },

    /***/ 63896: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var URI = __nccwpck_require__(70020),
        equal = __nccwpck_require__(28206),
        util = __nccwpck_require__(76578),
        SchemaObject = __nccwpck_require__(37605),
        traverse = __nccwpck_require__(52533)

      module.exports = resolve

      resolve.normalizeId = normalizeId
      resolve.fullPath = getFullPath
      resolve.url = resolveUrl
      resolve.ids = resolveIds
      resolve.inlineRef = inlineRef
      resolve.schema = resolveSchema

      /**
       * [resolve and compile the references ($ref)]
       * @this   Ajv
       * @param  {Function} compile reference to schema compilation funciton (localCompile)
       * @param  {Object} root object with information about the root schema for the current schema
       * @param  {String} ref reference to resolve
       * @return {Object|Function} schema object (if the schema can be inlined) or validation function
       */
      function resolve(compile, root, ref) {
        /* jshint validthis: true */
        var refVal = this._refs[ref]
        if (typeof refVal == "string") {
          if (this._refs[refVal]) refVal = this._refs[refVal]
          else return resolve.call(this, compile, root, refVal)
        }

        refVal = refVal || this._schemas[ref]
        if (refVal instanceof SchemaObject) {
          return inlineRef(refVal.schema, this._opts.inlineRefs)
            ? refVal.schema
            : refVal.validate || this._compile(refVal)
        }

        var res = resolveSchema.call(this, root, ref)
        var schema, v, baseId
        if (res) {
          schema = res.schema
          root = res.root
          baseId = res.baseId
        }

        if (schema instanceof SchemaObject) {
          v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId)
        } else if (schema !== undefined) {
          v = inlineRef(schema, this._opts.inlineRefs)
            ? schema
            : compile.call(this, schema, root, undefined, baseId)
        }

        return v
      }

      /**
       * Resolve schema, its root and baseId
       * @this Ajv
       * @param  {Object} root root object with properties schema, refVal, refs
       * @param  {String} ref  reference to resolve
       * @return {Object} object with properties schema, root, baseId
       */
      function resolveSchema(root, ref) {
        /* jshint validthis: true */
        var p = URI.parse(ref),
          refPath = _getFullPath(p),
          baseId = getFullPath(this._getId(root.schema))
        if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
          var id = normalizeId(refPath)
          var refVal = this._refs[id]
          if (typeof refVal == "string") {
            return resolveRecursive.call(this, root, refVal, p)
          } else if (refVal instanceof SchemaObject) {
            if (!refVal.validate) this._compile(refVal)
            root = refVal
          } else {
            refVal = this._schemas[id]
            if (refVal instanceof SchemaObject) {
              if (!refVal.validate) this._compile(refVal)
              if (id == normalizeId(ref)) return { schema: refVal, root: root, baseId: baseId }
              root = refVal
            } else {
              return
            }
          }
          if (!root.schema) return
          baseId = getFullPath(this._getId(root.schema))
        }
        return getJsonPointer.call(this, p, baseId, root.schema, root)
      }

      /* @this Ajv */
      function resolveRecursive(root, ref, parsedRef) {
        /* jshint validthis: true */
        var res = resolveSchema.call(this, root, ref)
        if (res) {
          var schema = res.schema
          var baseId = res.baseId
          root = res.root
          var id = this._getId(schema)
          if (id) baseId = resolveUrl(baseId, id)
          return getJsonPointer.call(this, parsedRef, baseId, schema, root)
        }
      }

      var PREVENT_SCOPE_CHANGE = util.toHash([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions"
      ])
      /* @this Ajv */
      function getJsonPointer(parsedRef, baseId, schema, root) {
        /* jshint validthis: true */
        parsedRef.fragment = parsedRef.fragment || ""
        if (parsedRef.fragment.slice(0, 1) != "/") return
        var parts = parsedRef.fragment.split("/")

        for (var i = 1; i < parts.length; i++) {
          var part = parts[i]
          if (part) {
            part = util.unescapeFragment(part)
            schema = schema[part]
            if (schema === undefined) break
            var id
            if (!PREVENT_SCOPE_CHANGE[part]) {
              id = this._getId(schema)
              if (id) baseId = resolveUrl(baseId, id)
              if (schema.$ref) {
                var $ref = resolveUrl(baseId, schema.$ref)
                var res = resolveSchema.call(this, root, $ref)
                if (res) {
                  schema = res.schema
                  root = res.root
                  baseId = res.baseId
                }
              }
            }
          }
        }
        if (schema !== undefined && schema !== root.schema)
          return { schema: schema, root: root, baseId: baseId }
      }

      var SIMPLE_INLINED = util.toHash([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum"
      ])
      function inlineRef(schema, limit) {
        if (limit === false) return false
        if (limit === undefined || limit === true) return checkNoRef(schema)
        else if (limit) return countKeys(schema) <= limit
      }

      function checkNoRef(schema) {
        var item
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++) {
            item = schema[i]
            if (typeof item == "object" && !checkNoRef(item)) return false
          }
        } else {
          for (var key in schema) {
            if (key == "$ref") return false
            item = schema[key]
            if (typeof item == "object" && !checkNoRef(item)) return false
          }
        }
        return true
      }

      function countKeys(schema) {
        var count = 0,
          item
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++) {
            item = schema[i]
            if (typeof item == "object") count += countKeys(item)
            if (count == Infinity) return Infinity
          }
        } else {
          for (var key in schema) {
            if (key == "$ref") return Infinity
            if (SIMPLE_INLINED[key]) {
              count++
            } else {
              item = schema[key]
              if (typeof item == "object") count += countKeys(item) + 1
              if (count == Infinity) return Infinity
            }
          }
        }
        return count
      }

      function getFullPath(id, normalize) {
        if (normalize !== false) id = normalizeId(id)
        var p = URI.parse(id)
        return _getFullPath(p)
      }

      function _getFullPath(p) {
        return URI.serialize(p).split("#")[0] + "#"
      }

      var TRAILING_SLASH_HASH = /#\/?$/
      function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : ""
      }

      function resolveUrl(baseId, id) {
        id = normalizeId(id)
        return URI.resolve(baseId, id)
      }

      /* @this Ajv */
      function resolveIds(schema) {
        var schemaId = normalizeId(this._getId(schema))
        var baseIds = { "": schemaId }
        var fullPaths = { "": getFullPath(schemaId, false) }
        var localRefs = {}
        var self = this

        traverse(
          schema,
          { allKeys: true },
          function (
            sch,
            jsonPtr,
            rootSchema,
            parentJsonPtr,
            parentKeyword,
            parentSchema,
            keyIndex
          ) {
            if (jsonPtr === "") return
            var id = self._getId(sch)
            var baseId = baseIds[parentJsonPtr]
            var fullPath = fullPaths[parentJsonPtr] + "/" + parentKeyword
            if (keyIndex !== undefined)
              fullPath +=
                "/" + (typeof keyIndex == "number" ? keyIndex : util.escapeFragment(keyIndex))

            if (typeof id == "string") {
              id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id)

              var refVal = self._refs[id]
              if (typeof refVal == "string") refVal = self._refs[refVal]
              if (refVal && refVal.schema) {
                if (!equal(sch, refVal.schema))
                  throw new Error('id "' + id + '" resolves to more than one schema')
              } else if (id != normalizeId(fullPath)) {
                if (id[0] == "#") {
                  if (localRefs[id] && !equal(sch, localRefs[id]))
                    throw new Error('id "' + id + '" resolves to more than one schema')
                  localRefs[id] = sch
                } else {
                  self._refs[id] = fullPath
                }
              }
            }
            baseIds[jsonPtr] = baseId
            fullPaths[jsonPtr] = fullPath
          }
        )

        return localRefs
      }

      /***/
    },

    /***/ 68561: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var ruleModules = __nccwpck_require__(85810),
        toHash = __nccwpck_require__(76578).toHash

      module.exports = function rules() {
        var RULES = [
          {
            type: "number",
            rules: [
              { maximum: ["exclusiveMaximum"] },
              { minimum: ["exclusiveMinimum"] },
              "multipleOf",
              "format"
            ]
          },
          { type: "string", rules: ["maxLength", "minLength", "pattern", "format"] },
          { type: "array", rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"] },
          {
            type: "object",
            rules: [
              "maxProperties",
              "minProperties",
              "required",
              "dependencies",
              "propertyNames",
              { properties: ["additionalProperties", "patternProperties"] }
            ]
          },
          { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }
        ]

        var ALL = ["type", "$comment"]
        var KEYWORDS = [
          "$schema",
          "$id",
          "id",
          "$data",
          "$async",
          "title",
          "description",
          "default",
          "definitions",
          "examples",
          "readOnly",
          "writeOnly",
          "contentMediaType",
          "contentEncoding",
          "additionalItems",
          "then",
          "else"
        ]
        var TYPES = ["number", "integer", "string", "array", "object", "boolean", "null"]
        RULES.all = toHash(ALL)
        RULES.types = toHash(TYPES)

        RULES.forEach(function (group) {
          group.rules = group.rules.map(function (keyword) {
            var implKeywords
            if (typeof keyword == "object") {
              var key = Object.keys(keyword)[0]
              implKeywords = keyword[key]
              keyword = key
              implKeywords.forEach(function (k) {
                ALL.push(k)
                RULES.all[k] = true
              })
            }
            ALL.push(keyword)
            var rule = (RULES.all[keyword] = {
              keyword: keyword,
              code: ruleModules[keyword],
              implements: implKeywords
            })
            return rule
          })

          RULES.all.$comment = {
            keyword: "$comment",
            code: ruleModules.$comment
          }

          if (group.type) RULES.types[group.type] = group
        })

        RULES.keywords = toHash(ALL.concat(KEYWORDS))
        RULES.custom = {}

        return RULES
      }

      /***/
    },

    /***/ 37605: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var util = __nccwpck_require__(76578)

      module.exports = SchemaObject

      function SchemaObject(obj) {
        util.copy(obj, this)
      }

      /***/
    },

    /***/ 64580: /***/ (module) => {
      "use strict"

      // https://mathiasbynens.be/notes/javascript-encoding
      // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
      module.exports = function ucs2length(str) {
        var length = 0,
          len = str.length,
          pos = 0,
          value
        while (pos < len) {
          length++
          value = str.charCodeAt(pos++)
          if (value >= 0xd800 && value <= 0xdbff && pos < len) {
            // high surrogate, and there is a next character
            value = str.charCodeAt(pos)
            if ((value & 0xfc00) == 0xdc00) pos++ // low surrogate
          }
        }
        return length
      }

      /***/
    },

    /***/ 76578: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      module.exports = {
        copy: copy,
        checkDataType: checkDataType,
        checkDataTypes: checkDataTypes,
        coerceToTypes: coerceToTypes,
        toHash: toHash,
        getProperty: getProperty,
        escapeQuotes: escapeQuotes,
        equal: __nccwpck_require__(28206),
        ucs2length: __nccwpck_require__(64580),
        varOccurences: varOccurences,
        varReplace: varReplace,
        schemaHasRules: schemaHasRules,
        schemaHasRulesExcept: schemaHasRulesExcept,
        schemaUnknownRules: schemaUnknownRules,
        toQuotedString: toQuotedString,
        getPathExpr: getPathExpr,
        getPath: getPath,
        getData: getData,
        unescapeFragment: unescapeFragment,
        unescapeJsonPointer: unescapeJsonPointer,
        escapeFragment: escapeFragment,
        escapeJsonPointer: escapeJsonPointer
      }

      function copy(o, to) {
        to = to || {}
        for (var key in o) to[key] = o[key]
        return to
      }

      function checkDataType(dataType, data, strictNumbers, negate) {
        var EQUAL = negate ? " !== " : " === ",
          AND = negate ? " || " : " && ",
          OK = negate ? "!" : "",
          NOT = negate ? "" : "!"
        switch (dataType) {
          case "null":
            return data + EQUAL + "null"
          case "array":
            return OK + "Array.isArray(" + data + ")"
          case "object":
            return (
              "(" +
              OK +
              data +
              AND +
              "typeof " +
              data +
              EQUAL +
              '"object"' +
              AND +
              NOT +
              "Array.isArray(" +
              data +
              "))"
            )
          case "integer":
            return (
              "(typeof " +
              data +
              EQUAL +
              '"number"' +
              AND +
              NOT +
              "(" +
              data +
              " % 1)" +
              AND +
              data +
              EQUAL +
              data +
              (strictNumbers ? AND + OK + "isFinite(" + data + ")" : "") +
              ")"
            )
          case "number":
            return (
              "(typeof " +
              data +
              EQUAL +
              '"' +
              dataType +
              '"' +
              (strictNumbers ? AND + OK + "isFinite(" + data + ")" : "") +
              ")"
            )
          default:
            return "typeof " + data + EQUAL + '"' + dataType + '"'
        }
      }

      function checkDataTypes(dataTypes, data, strictNumbers) {
        switch (dataTypes.length) {
          case 1:
            return checkDataType(dataTypes[0], data, strictNumbers, true)
          default:
            var code = ""
            var types = toHash(dataTypes)
            if (types.array && types.object) {
              code = types.null ? "(" : "(!" + data + " || "
              code += "typeof " + data + ' !== "object")'
              delete types.null
              delete types.array
              delete types.object
            }
            if (types.number) delete types.integer
            for (var t in types)
              code += (code ? " && " : "") + checkDataType(t, data, strictNumbers, true)

            return code
        }
      }

      var COERCE_TO_TYPES = toHash(["string", "number", "integer", "boolean", "null"])
      function coerceToTypes(optionCoerceTypes, dataTypes) {
        if (Array.isArray(dataTypes)) {
          var types = []
          for (var i = 0; i < dataTypes.length; i++) {
            var t = dataTypes[i]
            if (COERCE_TO_TYPES[t]) types[types.length] = t
            else if (optionCoerceTypes === "array" && t === "array") types[types.length] = t
          }
          if (types.length) return types
        } else if (COERCE_TO_TYPES[dataTypes]) {
          return [dataTypes]
        } else if (optionCoerceTypes === "array" && dataTypes === "array") {
          return ["array"]
        }
      }

      function toHash(arr) {
        var hash = {}
        for (var i = 0; i < arr.length; i++) hash[arr[i]] = true
        return hash
      }

      var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i
      var SINGLE_QUOTE = /'|\\/g
      function getProperty(key) {
        return typeof key == "number"
          ? "[" + key + "]"
          : IDENTIFIER.test(key)
          ? "." + key
          : "['" + escapeQuotes(key) + "']"
      }

      function escapeQuotes(str) {
        return str
          .replace(SINGLE_QUOTE, "\\$&")
          .replace(/\n/g, "\\n")
          .replace(/\r/g, "\\r")
          .replace(/\f/g, "\\f")
          .replace(/\t/g, "\\t")
      }

      function varOccurences(str, dataVar) {
        dataVar += "[^0-9]"
        var matches = str.match(new RegExp(dataVar, "g"))
        return matches ? matches.length : 0
      }

      function varReplace(str, dataVar, expr) {
        dataVar += "([^0-9])"
        expr = expr.replace(/\$/g, "$$$$")
        return str.replace(new RegExp(dataVar, "g"), expr + "$1")
      }

      function schemaHasRules(schema, rules) {
        if (typeof schema == "boolean") return !schema
        for (var key in schema) if (rules[key]) return true
      }

      function schemaHasRulesExcept(schema, rules, exceptKeyword) {
        if (typeof schema == "boolean") return !schema && exceptKeyword != "not"
        for (var key in schema) if (key != exceptKeyword && rules[key]) return true
      }

      function schemaUnknownRules(schema, rules) {
        if (typeof schema == "boolean") return
        for (var key in schema) if (!rules[key]) return key
      }

      function toQuotedString(str) {
        return "'" + escapeQuotes(str) + "'"
      }

      function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
        var path = jsonPointers // false by default
          ? "'/' + " + expr + (isNumber ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')")
          : isNumber
          ? "'[' + " + expr + " + ']'"
          : "'[\\'' + " + expr + " + '\\']'"
        return joinPaths(currentPath, path)
      }

      function getPath(currentPath, prop, jsonPointers) {
        var path = jsonPointers // false by default
          ? toQuotedString("/" + escapeJsonPointer(prop))
          : toQuotedString(getProperty(prop))
        return joinPaths(currentPath, path)
      }

      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/
      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/
      function getData($data, lvl, paths) {
        var up, jsonPointer, data, matches
        if ($data === "") return "rootData"
        if ($data[0] == "/") {
          if (!JSON_POINTER.test($data)) throw new Error("Invalid JSON-pointer: " + $data)
          jsonPointer = $data
          data = "rootData"
        } else {
          matches = $data.match(RELATIVE_JSON_POINTER)
          if (!matches) throw new Error("Invalid JSON-pointer: " + $data)
          up = +matches[1]
          jsonPointer = matches[2]
          if (jsonPointer == "#") {
            if (up >= lvl)
              throw new Error(
                "Cannot access property/index " + up + " levels up, current level is " + lvl
              )
            return paths[lvl - up]
          }

          if (up > lvl)
            throw new Error("Cannot access data " + up + " levels up, current level is " + lvl)
          data = "data" + (lvl - up || "")
          if (!jsonPointer) return data
        }

        var expr = data
        var segments = jsonPointer.split("/")
        for (var i = 0; i < segments.length; i++) {
          var segment = segments[i]
          if (segment) {
            data += getProperty(unescapeJsonPointer(segment))
            expr += " && " + data
          }
        }
        return expr
      }

      function joinPaths(a, b) {
        if (a == '""') return b
        return (a + " + " + b).replace(/([^\\])' \+ '/g, "$1")
      }

      function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str))
      }

      function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str))
      }

      function escapeJsonPointer(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1")
      }

      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~")
      }

      /***/
    },

    /***/ 21412: /***/ (module) => {
      "use strict"

      var KEYWORDS = [
        "multipleOf",
        "maximum",
        "exclusiveMaximum",
        "minimum",
        "exclusiveMinimum",
        "maxLength",
        "minLength",
        "pattern",
        "additionalItems",
        "maxItems",
        "minItems",
        "uniqueItems",
        "maxProperties",
        "minProperties",
        "required",
        "additionalProperties",
        "enum",
        "format",
        "const"
      ]

      module.exports = function (metaSchema, keywordsJsonPointers) {
        for (var i = 0; i < keywordsJsonPointers.length; i++) {
          metaSchema = JSON.parse(JSON.stringify(metaSchema))
          var segments = keywordsJsonPointers[i].split("/")
          var keywords = metaSchema
          var j
          for (j = 1; j < segments.length; j++) keywords = keywords[segments[j]]

          for (j = 0; j < KEYWORDS.length; j++) {
            var key = KEYWORDS[j]
            var schema = keywords[key]
            if (schema) {
              keywords[key] = {
                anyOf: [
                  schema,
                  {
                    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
                  }
                ]
              }
            }
          }
        }

        return metaSchema
      }

      /***/
    },

    /***/ 10458: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var metaSchema = __nccwpck_require__(6680)

      module.exports = {
        $id: "https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",
        definitions: {
          simpleTypes: metaSchema.definitions.simpleTypes
        },
        type: "object",
        dependencies: {
          schema: ["validate"],
          $data: ["validate"],
          statements: ["inline"],
          valid: { not: { required: ["macro"] } }
        },
        properties: {
          type: metaSchema.properties.type,
          schema: { type: "boolean" },
          statements: { type: "boolean" },
          dependencies: {
            type: "array",
            items: { type: "string" }
          },
          metaSchema: { type: "object" },
          modifying: { type: "boolean" },
          valid: { type: "boolean" },
          $data: { type: "boolean" },
          async: { type: "boolean" },
          errors: {
            anyOf: [{ type: "boolean" }, { const: "full" }]
          }
        }
      }

      /***/
    },

    /***/ 7404: /***/ (module) => {
      "use strict"

      module.exports = function generate__limit(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $errorKeyword
        var $data = "data" + ($dataLvl || "")
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        var $isMax = $keyword == "maximum",
          $exclusiveKeyword = $isMax ? "exclusiveMaximum" : "exclusiveMinimum",
          $schemaExcl = it.schema[$exclusiveKeyword],
          $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
          $op = $isMax ? "<" : ">",
          $notOp = $isMax ? ">" : "<",
          $errorKeyword = undefined
        if (!($isData || typeof $schema == "number" || $schema === undefined)) {
          throw new Error($keyword + " must be number")
        }
        if (
          !(
            $isDataExcl ||
            $schemaExcl === undefined ||
            typeof $schemaExcl == "number" ||
            typeof $schemaExcl == "boolean"
          )
        ) {
          throw new Error($exclusiveKeyword + " must be number or boolean")
        }
        if ($isDataExcl) {
          var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
            $exclusive = "exclusive" + $lvl,
            $exclType = "exclType" + $lvl,
            $exclIsNumber = "exclIsNumber" + $lvl,
            $opExpr = "op" + $lvl,
            $opStr = "' + " + $opExpr + " + '"
          out += " var schemaExcl" + $lvl + " = " + $schemaValueExcl + "; "
          $schemaValueExcl = "schemaExcl" + $lvl
          out +=
            " var " +
            $exclusive +
            "; var " +
            $exclType +
            " = typeof " +
            $schemaValueExcl +
            "; if (" +
            $exclType +
            " != 'boolean' && " +
            $exclType +
            " != 'undefined' && " +
            $exclType +
            " != 'number') { "
          var $errorKeyword = $exclusiveKeyword
          var $$outStack = $$outStack || []
          $$outStack.push(out)
          out = "" /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              ($errorKeyword || "_exclusiveLimit") +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: {} "
            if (it.opts.messages !== false) {
              out += " , message: '" + $exclusiveKeyword + " should be boolean' "
            }
            if (it.opts.verbose) {
              out +=
                " , schema: validate.schema" +
                $schemaPath +
                " , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          var __err = out
          out = $$outStack.pop()
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); "
            } else {
              out += " validate.errors = [" + __err + "]; return false; "
            }
          } else {
            out +=
              " var err = " +
              __err +
              ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          }
          out += " } else if ( "
          if ($isData) {
            out +=
              " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || "
          }
          out +=
            " " +
            $exclType +
            " == 'number' ? ( (" +
            $exclusive +
            " = " +
            $schemaValue +
            " === undefined || " +
            $schemaValueExcl +
            " " +
            $op +
            "= " +
            $schemaValue +
            ") ? " +
            $data +
            " " +
            $notOp +
            "= " +
            $schemaValueExcl +
            " : " +
            $data +
            " " +
            $notOp +
            " " +
            $schemaValue +
            " ) : ( (" +
            $exclusive +
            " = " +
            $schemaValueExcl +
            " === true) ? " +
            $data +
            " " +
            $notOp +
            "= " +
            $schemaValue +
            " : " +
            $data +
            " " +
            $notOp +
            " " +
            $schemaValue +
            " ) || " +
            $data +
            " !== " +
            $data +
            ") { var op" +
            $lvl +
            " = " +
            $exclusive +
            " ? '" +
            $op +
            "' : '" +
            $op +
            "='; "
          if ($schema === undefined) {
            $errorKeyword = $exclusiveKeyword
            $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword
            $schemaValue = $schemaValueExcl
            $isData = $isDataExcl
          }
        } else {
          var $exclIsNumber = typeof $schemaExcl == "number",
            $opStr = $op
          if ($exclIsNumber && $isData) {
            var $opExpr = "'" + $opStr + "'"
            out += " if ( "
            if ($isData) {
              out +=
                " (" +
                $schemaValue +
                " !== undefined && typeof " +
                $schemaValue +
                " != 'number') || "
            }
            out +=
              " ( " +
              $schemaValue +
              " === undefined || " +
              $schemaExcl +
              " " +
              $op +
              "= " +
              $schemaValue +
              " ? " +
              $data +
              " " +
              $notOp +
              "= " +
              $schemaExcl +
              " : " +
              $data +
              " " +
              $notOp +
              " " +
              $schemaValue +
              " ) || " +
              $data +
              " !== " +
              $data +
              ") { "
          } else {
            if ($exclIsNumber && $schema === undefined) {
              $exclusive = true
              $errorKeyword = $exclusiveKeyword
              $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword
              $schemaValue = $schemaExcl
              $notOp += "="
            } else {
              if ($exclIsNumber) $schemaValue = Math[$isMax ? "min" : "max"]($schemaExcl, $schema)
              if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
                $exclusive = true
                $errorKeyword = $exclusiveKeyword
                $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword
                $notOp += "="
              } else {
                $exclusive = false
                $opStr += "="
              }
            }
            var $opExpr = "'" + $opStr + "'"
            out += " if ( "
            if ($isData) {
              out +=
                " (" +
                $schemaValue +
                " !== undefined && typeof " +
                $schemaValue +
                " != 'number') || "
            }
            out +=
              " " +
              $data +
              " " +
              $notOp +
              " " +
              $schemaValue +
              " || " +
              $data +
              " !== " +
              $data +
              ") { "
          }
        }
        $errorKeyword = $errorKeyword || $keyword
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            ($errorKeyword || "_limit") +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { comparison: " +
            $opExpr +
            ", limit: " +
            $schemaValue +
            ", exclusive: " +
            $exclusive +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should be " + $opStr + " "
            if ($isData) {
              out += "' + " + $schemaValue
            } else {
              out += "" + $schemaValue + "'"
            }
          }
          if (it.opts.verbose) {
            out += " , schema:  "
            if ($isData) {
              out += "validate.schema" + $schemaPath
            } else {
              out += "" + $schema
            }
            out +=
              "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += " } "
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 64683: /***/ (module) => {
      "use strict"

      module.exports = function generate__limitItems(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $errorKeyword
        var $data = "data" + ($dataLvl || "")
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number")
        }
        var $op = $keyword == "maxItems" ? ">" : "<"
        out += "if ( "
        if ($isData) {
          out +=
            " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || "
        }
        out += " " + $data + ".length " + $op + " " + $schemaValue + ") { "
        var $errorKeyword = $keyword
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            ($errorKeyword || "_limitItems") +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { limit: " +
            $schemaValue +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have "
            if ($keyword == "maxItems") {
              out += "more"
            } else {
              out += "fewer"
            }
            out += " than "
            if ($isData) {
              out += "' + " + $schemaValue + " + '"
            } else {
              out += "" + $schema
            }
            out += " items' "
          }
          if (it.opts.verbose) {
            out += " , schema:  "
            if ($isData) {
              out += "validate.schema" + $schemaPath
            } else {
              out += "" + $schema
            }
            out +=
              "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += "} "
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 52114: /***/ (module) => {
      "use strict"

      module.exports = function generate__limitLength(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $errorKeyword
        var $data = "data" + ($dataLvl || "")
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number")
        }
        var $op = $keyword == "maxLength" ? ">" : "<"
        out += "if ( "
        if ($isData) {
          out +=
            " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || "
        }
        if (it.opts.unicode === false) {
          out += " " + $data + ".length "
        } else {
          out += " ucs2length(" + $data + ") "
        }
        out += " " + $op + " " + $schemaValue + ") { "
        var $errorKeyword = $keyword
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            ($errorKeyword || "_limitLength") +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { limit: " +
            $schemaValue +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT be "
            if ($keyword == "maxLength") {
              out += "longer"
            } else {
              out += "shorter"
            }
            out += " than "
            if ($isData) {
              out += "' + " + $schemaValue + " + '"
            } else {
              out += "" + $schema
            }
            out += " characters' "
          }
          if (it.opts.verbose) {
            out += " , schema:  "
            if ($isData) {
              out += "validate.schema" + $schemaPath
            } else {
              out += "" + $schema
            }
            out +=
              "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += "} "
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 71142: /***/ (module) => {
      "use strict"

      module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $errorKeyword
        var $data = "data" + ($dataLvl || "")
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number")
        }
        var $op = $keyword == "maxProperties" ? ">" : "<"
        out += "if ( "
        if ($isData) {
          out +=
            " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || "
        }
        out += " Object.keys(" + $data + ").length " + $op + " " + $schemaValue + ") { "
        var $errorKeyword = $keyword
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            ($errorKeyword || "_limitProperties") +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { limit: " +
            $schemaValue +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have "
            if ($keyword == "maxProperties") {
              out += "more"
            } else {
              out += "fewer"
            }
            out += " than "
            if ($isData) {
              out += "' + " + $schemaValue + " + '"
            } else {
              out += "" + $schema
            }
            out += " properties' "
          }
          if (it.opts.verbose) {
            out += " , schema:  "
            if ($isData) {
              out += "validate.schema" + $schemaPath
            } else {
              out += "" + $schema
            }
            out +=
              "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += "} "
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 89443: /***/ (module) => {
      "use strict"

      module.exports = function generate_allOf(it, $keyword, $ruleType) {
        var out = " "
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        var $currentBaseId = $it.baseId,
          $allSchemasEmpty = true
        var arr1 = $schema
        if (arr1) {
          var $sch,
            $i = -1,
            l1 = arr1.length - 1
          while ($i < l1) {
            $sch = arr1[($i += 1)]
            if (
              it.opts.strictKeywords
                ? (typeof $sch == "object" && Object.keys($sch).length > 0) || $sch === false
                : it.util.schemaHasRules($sch, it.RULES.all)
            ) {
              $allSchemasEmpty = false
              $it.schema = $sch
              $it.schemaPath = $schemaPath + "[" + $i + "]"
              $it.errSchemaPath = $errSchemaPath + "/" + $i
              out += "  " + it.validate($it) + " "
              $it.baseId = $currentBaseId
              if ($breakOnError) {
                out += " if (" + $nextValid + ") { "
                $closingBraces += "}"
              }
            }
          }
        }
        if ($breakOnError) {
          if ($allSchemasEmpty) {
            out += " if (true) { "
          } else {
            out += " " + $closingBraces.slice(0, -1) + " "
          }
        }
        return out
      }

      /***/
    },

    /***/ 63093: /***/ (module) => {
      "use strict"

      module.exports = function generate_anyOf(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        var $noEmptySchema = $schema.every(function ($sch) {
          return it.opts.strictKeywords
            ? (typeof $sch == "object" && Object.keys($sch).length > 0) || $sch === false
            : it.util.schemaHasRules($sch, it.RULES.all)
        })
        if ($noEmptySchema) {
          var $currentBaseId = $it.baseId
          out += " var " + $errs + " = errors; var " + $valid + " = false;  "
          var $wasComposite = it.compositeRule
          it.compositeRule = $it.compositeRule = true
          var arr1 = $schema
          if (arr1) {
            var $sch,
              $i = -1,
              l1 = arr1.length - 1
            while ($i < l1) {
              $sch = arr1[($i += 1)]
              $it.schema = $sch
              $it.schemaPath = $schemaPath + "[" + $i + "]"
              $it.errSchemaPath = $errSchemaPath + "/" + $i
              out += "  " + it.validate($it) + " "
              $it.baseId = $currentBaseId
              out +=
                " " + $valid + " = " + $valid + " || " + $nextValid + "; if (!" + $valid + ") { "
              $closingBraces += "}"
            }
          }
          it.compositeRule = $it.compositeRule = $wasComposite
          out +=
            " " +
            $closingBraces +
            " if (!" +
            $valid +
            ") {   var err =   " /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              "anyOf" +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: {} "
            if (it.opts.messages !== false) {
              out += " , message: 'should match some schema in anyOf' "
            }
            if (it.opts.verbose) {
              out +=
                " , schema: validate.schema" +
                $schemaPath +
                " , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += " throw new ValidationError(vErrors); "
            } else {
              out += " validate.errors = vErrors; return false; "
            }
          }
          out +=
            " } else {  errors = " +
            $errs +
            "; if (vErrors !== null) { if (" +
            $errs +
            ") vErrors.length = " +
            $errs +
            "; else vErrors = null; } "
          if (it.opts.allErrors) {
            out += " } "
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { "
          }
        }
        return out
      }

      /***/
    },

    /***/ 30134: /***/ (module) => {
      "use strict"

      module.exports = function generate_comment(it, $keyword, $ruleType) {
        var out = " "
        var $schema = it.schema[$keyword]
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $comment = it.util.toQuotedString($schema)
        if (it.opts.$comment === true) {
          out += " console.log(" + $comment + ");"
        } else if (typeof it.opts.$comment == "function") {
          out +=
            " self._opts.$comment(" +
            $comment +
            ", " +
            it.util.toQuotedString($errSchemaPath) +
            ", validate.root.schema);"
        }
        return out
      }

      /***/
    },

    /***/ 1661: /***/ (module) => {
      "use strict"

      module.exports = function generate_const(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        if (!$isData) {
          out += " var schema" + $lvl + " = validate.schema" + $schemaPath + ";"
        }
        out +=
          "var " + $valid + " = equal(" + $data + ", schema" + $lvl + "); if (!" + $valid + ") {   "
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            "const" +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { allowedValue: schema" +
            $lvl +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should be equal to constant' "
          }
          if (it.opts.verbose) {
            out +=
              " , schema: validate.schema" +
              $schemaPath +
              " , parentSchema: validate.schema" +
              it.schemaPath +
              " , data: " +
              $data +
              " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += " }"
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 55964: /***/ (module) => {
      "use strict"

      module.exports = function generate_contains(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        var $idx = "i" + $lvl,
          $dataNxt = ($it.dataLevel = it.dataLevel + 1),
          $nextData = "data" + $dataNxt,
          $currentBaseId = it.baseId,
          $nonEmptySchema = it.opts.strictKeywords
            ? (typeof $schema == "object" && Object.keys($schema).length > 0) || $schema === false
            : it.util.schemaHasRules($schema, it.RULES.all)
        out += "var " + $errs + " = errors;var " + $valid + ";"
        if ($nonEmptySchema) {
          var $wasComposite = it.compositeRule
          it.compositeRule = $it.compositeRule = true
          $it.schema = $schema
          $it.schemaPath = $schemaPath
          $it.errSchemaPath = $errSchemaPath
          out +=
            " var " +
            $nextValid +
            " = false; for (var " +
            $idx +
            " = 0; " +
            $idx +
            " < " +
            $data +
            ".length; " +
            $idx +
            "++) { "
          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true)
          var $passData = $data + "[" + $idx + "]"
          $it.dataPathArr[$dataNxt] = $idx
          var $code = it.validate($it)
          $it.baseId = $currentBaseId
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " "
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " "
          }
          out += " if (" + $nextValid + ") break; }  "
          it.compositeRule = $it.compositeRule = $wasComposite
          out += " " + $closingBraces + " if (!" + $nextValid + ") {"
        } else {
          out += " if (" + $data + ".length == 0) {"
        }
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            "contains" +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: {} "
          if (it.opts.messages !== false) {
            out += " , message: 'should contain a valid item' "
          }
          if (it.opts.verbose) {
            out +=
              " , schema: validate.schema" +
              $schemaPath +
              " , parentSchema: validate.schema" +
              it.schemaPath +
              " , data: " +
              $data +
              " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += " } else { "
        if ($nonEmptySchema) {
          out +=
            "  errors = " +
            $errs +
            "; if (vErrors !== null) { if (" +
            $errs +
            ") vErrors.length = " +
            $errs +
            "; else vErrors = null; } "
        }
        if (it.opts.allErrors) {
          out += " } "
        }
        return out
      }

      /***/
    },

    /***/ 5912: /***/ (module) => {
      "use strict"

      module.exports = function generate_custom(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $errorKeyword
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $errs = "errs__" + $lvl
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        var $rule = this,
          $definition = "definition" + $lvl,
          $rDef = $rule.definition,
          $closingBraces = ""
        var $compile, $inline, $macro, $ruleValidate, $validateCode
        if ($isData && $rDef.$data) {
          $validateCode = "keywordValidate" + $lvl
          var $validateSchema = $rDef.validateSchema
          out +=
            " var " +
            $definition +
            " = RULES.custom['" +
            $keyword +
            "'].definition; var " +
            $validateCode +
            " = " +
            $definition +
            ".validate;"
        } else {
          $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it)
          if (!$ruleValidate) return
          $schemaValue = "validate.schema" + $schemaPath
          $validateCode = $ruleValidate.code
          $compile = $rDef.compile
          $inline = $rDef.inline
          $macro = $rDef.macro
        }
        var $ruleErrs = $validateCode + ".errors",
          $i = "i" + $lvl,
          $ruleErr = "ruleErr" + $lvl,
          $asyncKeyword = $rDef.async
        if ($asyncKeyword && !it.async) throw new Error("async keyword in sync schema")
        if (!($inline || $macro)) {
          out += "" + $ruleErrs + " = null;"
        }
        out += "var " + $errs + " = errors;var " + $valid + ";"
        if ($isData && $rDef.$data) {
          $closingBraces += "}"
          out += " if (" + $schemaValue + " === undefined) { " + $valid + " = true; } else { "
          if ($validateSchema) {
            $closingBraces += "}"
            out +=
              " " +
              $valid +
              " = " +
              $definition +
              ".validateSchema(" +
              $schemaValue +
              "); if (" +
              $valid +
              ") { "
          }
        }
        if ($inline) {
          if ($rDef.statements) {
            out += " " + $ruleValidate.validate + " "
          } else {
            out += " " + $valid + " = " + $ruleValidate.validate + "; "
          }
        } else if ($macro) {
          var $it = it.util.copy(it)
          var $closingBraces = ""
          $it.level++
          var $nextValid = "valid" + $it.level
          $it.schema = $ruleValidate.validate
          $it.schemaPath = ""
          var $wasComposite = it.compositeRule
          it.compositeRule = $it.compositeRule = true
          var $code = it.validate($it).replace(/validate\.schema/g, $validateCode)
          it.compositeRule = $it.compositeRule = $wasComposite
          out += " " + $code
        } else {
          var $$outStack = $$outStack || []
          $$outStack.push(out)
          out = ""
          out += "  " + $validateCode + ".call( "
          if (it.opts.passContext) {
            out += "this"
          } else {
            out += "self"
          }
          if ($compile || $rDef.schema === false) {
            out += " , " + $data + " "
          } else {
            out += " , " + $schemaValue + " , " + $data + " , validate.schema" + it.schemaPath + " "
          }
          out += " , (dataPath || '')"
          if (it.errorPath != '""') {
            out += " + " + it.errorPath
          }
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData",
            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty"
          out += " , " + $parentData + " , " + $parentDataProperty + " , rootData )  "
          var def_callRuleValidate = out
          out = $$outStack.pop()
          if ($rDef.errors === false) {
            out += " " + $valid + " = "
            if ($asyncKeyword) {
              out += "await "
            }
            out += "" + def_callRuleValidate + "; "
          } else {
            if ($asyncKeyword) {
              $ruleErrs = "customErrors" + $lvl
              out +=
                " var " +
                $ruleErrs +
                " = null; try { " +
                $valid +
                " = await " +
                def_callRuleValidate +
                "; } catch (e) { " +
                $valid +
                " = false; if (e instanceof ValidationError) " +
                $ruleErrs +
                " = e.errors; else throw e; } "
            } else {
              out += " " + $ruleErrs + " = null; " + $valid + " = " + def_callRuleValidate + "; "
            }
          }
        }
        if ($rDef.modifying) {
          out +=
            " if (" +
            $parentData +
            ") " +
            $data +
            " = " +
            $parentData +
            "[" +
            $parentDataProperty +
            "];"
        }
        out += "" + $closingBraces
        if ($rDef.valid) {
          if ($breakOnError) {
            out += " if (true) { "
          }
        } else {
          out += " if ( "
          if ($rDef.valid === undefined) {
            out += " !"
            if ($macro) {
              out += "" + $nextValid
            } else {
              out += "" + $valid
            }
          } else {
            out += " " + !$rDef.valid + " "
          }
          out += ") { "
          $errorKeyword = $rule.keyword
          var $$outStack = $$outStack || []
          $$outStack.push(out)
          out = ""
          var $$outStack = $$outStack || []
          $$outStack.push(out)
          out = "" /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              ($errorKeyword || "custom") +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: { keyword: '" +
              $rule.keyword +
              "' } "
            if (it.opts.messages !== false) {
              out += " , message: 'should pass \"" + $rule.keyword + "\" keyword validation' "
            }
            if (it.opts.verbose) {
              out +=
                " , schema: validate.schema" +
                $schemaPath +
                " , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          var __err = out
          out = $$outStack.pop()
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); "
            } else {
              out += " validate.errors = [" + __err + "]; return false; "
            }
          } else {
            out +=
              " var err = " +
              __err +
              ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          }
          var def_customError = out
          out = $$outStack.pop()
          if ($inline) {
            if ($rDef.errors) {
              if ($rDef.errors != "full") {
                out +=
                  "  for (var " +
                  $i +
                  "=" +
                  $errs +
                  "; " +
                  $i +
                  "<errors; " +
                  $i +
                  "++) { var " +
                  $ruleErr +
                  " = vErrors[" +
                  $i +
                  "]; if (" +
                  $ruleErr +
                  ".dataPath === undefined) " +
                  $ruleErr +
                  ".dataPath = (dataPath || '') + " +
                  it.errorPath +
                  "; if (" +
                  $ruleErr +
                  ".schemaPath === undefined) { " +
                  $ruleErr +
                  '.schemaPath = "' +
                  $errSchemaPath +
                  '"; } '
                if (it.opts.verbose) {
                  out +=
                    " " +
                    $ruleErr +
                    ".schema = " +
                    $schemaValue +
                    "; " +
                    $ruleErr +
                    ".data = " +
                    $data +
                    "; "
                }
                out += " } "
              }
            } else {
              if ($rDef.errors === false) {
                out += " " + def_customError + " "
              } else {
                out +=
                  " if (" +
                  $errs +
                  " == errors) { " +
                  def_customError +
                  " } else {  for (var " +
                  $i +
                  "=" +
                  $errs +
                  "; " +
                  $i +
                  "<errors; " +
                  $i +
                  "++) { var " +
                  $ruleErr +
                  " = vErrors[" +
                  $i +
                  "]; if (" +
                  $ruleErr +
                  ".dataPath === undefined) " +
                  $ruleErr +
                  ".dataPath = (dataPath || '') + " +
                  it.errorPath +
                  "; if (" +
                  $ruleErr +
                  ".schemaPath === undefined) { " +
                  $ruleErr +
                  '.schemaPath = "' +
                  $errSchemaPath +
                  '"; } '
                if (it.opts.verbose) {
                  out +=
                    " " +
                    $ruleErr +
                    ".schema = " +
                    $schemaValue +
                    "; " +
                    $ruleErr +
                    ".data = " +
                    $data +
                    "; "
                }
                out += " } } "
              }
            }
          } else if ($macro) {
            out += "   var err =   " /* istanbul ignore else */
            if (it.createErrors !== false) {
              out +=
                " { keyword: '" +
                ($errorKeyword || "custom") +
                "' , dataPath: (dataPath || '') + " +
                it.errorPath +
                " , schemaPath: " +
                it.util.toQuotedString($errSchemaPath) +
                " , params: { keyword: '" +
                $rule.keyword +
                "' } "
              if (it.opts.messages !== false) {
                out += " , message: 'should pass \"" + $rule.keyword + "\" keyword validation' "
              }
              if (it.opts.verbose) {
                out +=
                  " , schema: validate.schema" +
                  $schemaPath +
                  " , parentSchema: validate.schema" +
                  it.schemaPath +
                  " , data: " +
                  $data +
                  " "
              }
              out += " } "
            } else {
              out += " {} "
            }
            out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += " throw new ValidationError(vErrors); "
              } else {
                out += " validate.errors = vErrors; return false; "
              }
            }
          } else {
            if ($rDef.errors === false) {
              out += " " + def_customError + " "
            } else {
              out +=
                " if (Array.isArray(" +
                $ruleErrs +
                ")) { if (vErrors === null) vErrors = " +
                $ruleErrs +
                "; else vErrors = vErrors.concat(" +
                $ruleErrs +
                "); errors = vErrors.length;  for (var " +
                $i +
                "=" +
                $errs +
                "; " +
                $i +
                "<errors; " +
                $i +
                "++) { var " +
                $ruleErr +
                " = vErrors[" +
                $i +
                "]; if (" +
                $ruleErr +
                ".dataPath === undefined) " +
                $ruleErr +
                ".dataPath = (dataPath || '') + " +
                it.errorPath +
                ";  " +
                $ruleErr +
                '.schemaPath = "' +
                $errSchemaPath +
                '";  '
              if (it.opts.verbose) {
                out +=
                  " " +
                  $ruleErr +
                  ".schema = " +
                  $schemaValue +
                  "; " +
                  $ruleErr +
                  ".data = " +
                  $data +
                  "; "
              }
              out += " } } else { " + def_customError + " } "
            }
          }
          out += " } "
          if ($breakOnError) {
            out += " else { "
          }
        }
        return out
      }

      /***/
    },

    /***/ 2591: /***/ (module) => {
      "use strict"

      module.exports = function generate_dependencies(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        var $schemaDeps = {},
          $propertyDeps = {},
          $ownProperties = it.opts.ownProperties
        for ($property in $schema) {
          if ($property == "__proto__") continue
          var $sch = $schema[$property]
          var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps
          $deps[$property] = $sch
        }
        out += "var " + $errs + " = errors;"
        var $currentErrorPath = it.errorPath
        out += "var missing" + $lvl + ";"
        for (var $property in $propertyDeps) {
          $deps = $propertyDeps[$property]
          if ($deps.length) {
            out += " if ( " + $data + it.util.getProperty($property) + " !== undefined "
            if ($ownProperties) {
              out +=
                " && Object.prototype.hasOwnProperty.call(" +
                $data +
                ", '" +
                it.util.escapeQuotes($property) +
                "') "
            }
            if ($breakOnError) {
              out += " && ( "
              var arr1 = $deps
              if (arr1) {
                var $propertyKey,
                  $i = -1,
                  l1 = arr1.length - 1
                while ($i < l1) {
                  $propertyKey = arr1[($i += 1)]
                  if ($i) {
                    out += " || "
                  }
                  var $prop = it.util.getProperty($propertyKey),
                    $useData = $data + $prop
                  out += " ( ( " + $useData + " === undefined "
                  if ($ownProperties) {
                    out +=
                      " || ! Object.prototype.hasOwnProperty.call(" +
                      $data +
                      ", '" +
                      it.util.escapeQuotes($propertyKey) +
                      "') "
                  }
                  out +=
                    ") && (missing" +
                    $lvl +
                    " = " +
                    it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) +
                    ") ) "
                }
              }
              out += ")) {  "
              var $propertyPath = "missing" + $lvl,
                $missingProperty = "' + " + $propertyPath + " + '"
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.opts.jsonPointers
                  ? it.util.getPathExpr($currentErrorPath, $propertyPath, true)
                  : $currentErrorPath + " + " + $propertyPath
              }
              var $$outStack = $$outStack || []
              $$outStack.push(out)
              out = "" /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  "dependencies" +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  " , schemaPath: " +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { property: '" +
                  it.util.escapeQuotes($property) +
                  "', missingProperty: '" +
                  $missingProperty +
                  "', depsCount: " +
                  $deps.length +
                  ", deps: '" +
                  it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) +
                  "' } "
                if (it.opts.messages !== false) {
                  out += " , message: 'should have "
                  if ($deps.length == 1) {
                    out += "property " + it.util.escapeQuotes($deps[0])
                  } else {
                    out += "properties " + it.util.escapeQuotes($deps.join(", "))
                  }
                  out += " when property " + it.util.escapeQuotes($property) + " is present' "
                }
                if (it.opts.verbose) {
                  out +=
                    " , schema: validate.schema" +
                    $schemaPath +
                    " , parentSchema: validate.schema" +
                    it.schemaPath +
                    " , data: " +
                    $data +
                    " "
                }
                out += " } "
              } else {
                out += " {} "
              }
              var __err = out
              out = $$outStack.pop()
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); "
                } else {
                  out += " validate.errors = [" + __err + "]; return false; "
                }
              } else {
                out +=
                  " var err = " +
                  __err +
                  ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
              }
            } else {
              out += " ) { "
              var arr2 = $deps
              if (arr2) {
                var $propertyKey,
                  i2 = -1,
                  l2 = arr2.length - 1
                while (i2 < l2) {
                  $propertyKey = arr2[(i2 += 1)]
                  var $prop = it.util.getProperty($propertyKey),
                    $missingProperty = it.util.escapeQuotes($propertyKey),
                    $useData = $data + $prop
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPath(
                      $currentErrorPath,
                      $propertyKey,
                      it.opts.jsonPointers
                    )
                  }
                  out += " if ( " + $useData + " === undefined "
                  if ($ownProperties) {
                    out +=
                      " || ! Object.prototype.hasOwnProperty.call(" +
                      $data +
                      ", '" +
                      it.util.escapeQuotes($propertyKey) +
                      "') "
                  }
                  out += ") {  var err =   " /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out +=
                      " { keyword: '" +
                      "dependencies" +
                      "' , dataPath: (dataPath || '') + " +
                      it.errorPath +
                      " , schemaPath: " +
                      it.util.toQuotedString($errSchemaPath) +
                      " , params: { property: '" +
                      it.util.escapeQuotes($property) +
                      "', missingProperty: '" +
                      $missingProperty +
                      "', depsCount: " +
                      $deps.length +
                      ", deps: '" +
                      it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) +
                      "' } "
                    if (it.opts.messages !== false) {
                      out += " , message: 'should have "
                      if ($deps.length == 1) {
                        out += "property " + it.util.escapeQuotes($deps[0])
                      } else {
                        out += "properties " + it.util.escapeQuotes($deps.join(", "))
                      }
                      out += " when property " + it.util.escapeQuotes($property) + " is present' "
                    }
                    if (it.opts.verbose) {
                      out +=
                        " , schema: validate.schema" +
                        $schemaPath +
                        " , parentSchema: validate.schema" +
                        it.schemaPath +
                        " , data: " +
                        $data +
                        " "
                    }
                    out += " } "
                  } else {
                    out += " {} "
                  }
                  out +=
                    ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "
                }
              }
            }
            out += " }   "
            if ($breakOnError) {
              $closingBraces += "}"
              out += " else { "
            }
          }
        }
        it.errorPath = $currentErrorPath
        var $currentBaseId = $it.baseId
        for (var $property in $schemaDeps) {
          var $sch = $schemaDeps[$property]
          if (
            it.opts.strictKeywords
              ? (typeof $sch == "object" && Object.keys($sch).length > 0) || $sch === false
              : it.util.schemaHasRules($sch, it.RULES.all)
          ) {
            out +=
              " " +
              $nextValid +
              " = true; if ( " +
              $data +
              it.util.getProperty($property) +
              " !== undefined "
            if ($ownProperties) {
              out +=
                " && Object.prototype.hasOwnProperty.call(" +
                $data +
                ", '" +
                it.util.escapeQuotes($property) +
                "') "
            }
            out += ") { "
            $it.schema = $sch
            $it.schemaPath = $schemaPath + it.util.getProperty($property)
            $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($property)
            out += "  " + it.validate($it) + " "
            $it.baseId = $currentBaseId
            out += " }  "
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { "
              $closingBraces += "}"
            }
          }
        }
        if ($breakOnError) {
          out += "   " + $closingBraces + " if (" + $errs + " == errors) {"
        }
        return out
      }

      /***/
    },

    /***/ 10163: /***/ (module) => {
      "use strict"

      module.exports = function generate_enum(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        var $i = "i" + $lvl,
          $vSchema = "schema" + $lvl
        if (!$isData) {
          out += " var " + $vSchema + " = validate.schema" + $schemaPath + ";"
        }
        out += "var " + $valid + ";"
        if ($isData) {
          out +=
            " if (schema" +
            $lvl +
            " === undefined) " +
            $valid +
            " = true; else if (!Array.isArray(schema" +
            $lvl +
            ")) " +
            $valid +
            " = false; else {"
        }
        out +=
          "" +
          $valid +
          " = false;for (var " +
          $i +
          "=0; " +
          $i +
          "<" +
          $vSchema +
          ".length; " +
          $i +
          "++) if (equal(" +
          $data +
          ", " +
          $vSchema +
          "[" +
          $i +
          "])) { " +
          $valid +
          " = true; break; }"
        if ($isData) {
          out += "  }  "
        }
        out += " if (!" + $valid + ") {   "
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            "enum" +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { allowedValues: schema" +
            $lvl +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should be equal to one of the allowed values' "
          }
          if (it.opts.verbose) {
            out +=
              " , schema: validate.schema" +
              $schemaPath +
              " , parentSchema: validate.schema" +
              it.schemaPath +
              " , data: " +
              $data +
              " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += " }"
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 63847: /***/ (module) => {
      "use strict"

      module.exports = function generate_format(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        if (it.opts.format === false) {
          if ($breakOnError) {
            out += " if (true) { "
          }
          return out
        }
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        var $unknownFormats = it.opts.unknownFormats,
          $allowUnknown = Array.isArray($unknownFormats)
        if ($isData) {
          var $format = "format" + $lvl,
            $isObject = "isObject" + $lvl,
            $formatType = "formatType" + $lvl
          out +=
            " var " +
            $format +
            " = formats[" +
            $schemaValue +
            "]; var " +
            $isObject +
            " = typeof " +
            $format +
            " == 'object' && !(" +
            $format +
            " instanceof RegExp) && " +
            $format +
            ".validate; var " +
            $formatType +
            " = " +
            $isObject +
            " && " +
            $format +
            ".type || 'string'; if (" +
            $isObject +
            ") { "
          if (it.async) {
            out += " var async" + $lvl + " = " + $format + ".async; "
          }
          out += " " + $format + " = " + $format + ".validate; } if (  "
          if ($isData) {
            out +=
              " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || "
          }
          out += " ("
          if ($unknownFormats != "ignore") {
            out += " (" + $schemaValue + " && !" + $format + " "
            if ($allowUnknown) {
              out += " && self._opts.unknownFormats.indexOf(" + $schemaValue + ") == -1 "
            }
            out += ") || "
          }
          out +=
            " (" +
            $format +
            " && " +
            $formatType +
            " == '" +
            $ruleType +
            "' && !(typeof " +
            $format +
            " == 'function' ? "
          if (it.async) {
            out +=
              " (async" +
              $lvl +
              " ? await " +
              $format +
              "(" +
              $data +
              ") : " +
              $format +
              "(" +
              $data +
              ")) "
          } else {
            out += " " + $format + "(" + $data + ") "
          }
          out += " : " + $format + ".test(" + $data + "))))) {"
        } else {
          var $format = it.formats[$schema]
          if (!$format) {
            if ($unknownFormats == "ignore") {
              it.logger.warn(
                'unknown format "' +
                  $schema +
                  '" ignored in schema at path "' +
                  it.errSchemaPath +
                  '"'
              )
              if ($breakOnError) {
                out += " if (true) { "
              }
              return out
            } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
              if ($breakOnError) {
                out += " if (true) { "
              }
              return out
            } else {
              throw new Error(
                'unknown format "' +
                  $schema +
                  '" is used in schema at path "' +
                  it.errSchemaPath +
                  '"'
              )
            }
          }
          var $isObject =
            typeof $format == "object" && !($format instanceof RegExp) && $format.validate
          var $formatType = ($isObject && $format.type) || "string"
          if ($isObject) {
            var $async = $format.async === true
            $format = $format.validate
          }
          if ($formatType != $ruleType) {
            if ($breakOnError) {
              out += " if (true) { "
            }
            return out
          }
          if ($async) {
            if (!it.async) throw new Error("async format in sync schema")
            var $formatRef = "formats" + it.util.getProperty($schema) + ".validate"
            out += " if (!(await " + $formatRef + "(" + $data + "))) { "
          } else {
            out += " if (! "
            var $formatRef = "formats" + it.util.getProperty($schema)
            if ($isObject) $formatRef += ".validate"
            if (typeof $format == "function") {
              out += " " + $formatRef + "(" + $data + ") "
            } else {
              out += " " + $formatRef + ".test(" + $data + ") "
            }
            out += ") { "
          }
        }
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            "format" +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { format:  "
          if ($isData) {
            out += "" + $schemaValue
          } else {
            out += "" + it.util.toQuotedString($schema)
          }
          out += "  } "
          if (it.opts.messages !== false) {
            out += " , message: 'should match format \""
            if ($isData) {
              out += "' + " + $schemaValue + " + '"
            } else {
              out += "" + it.util.escapeQuotes($schema)
            }
            out += "\"' "
          }
          if (it.opts.verbose) {
            out += " , schema:  "
            if ($isData) {
              out += "validate.schema" + $schemaPath
            } else {
              out += "" + it.util.toQuotedString($schema)
            }
            out +=
              "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += " } "
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 80862: /***/ (module) => {
      "use strict"

      module.exports = function generate_if(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        $it.level++
        var $nextValid = "valid" + $it.level
        var $thenSch = it.schema["then"],
          $elseSch = it.schema["else"],
          $thenPresent =
            $thenSch !== undefined &&
            (it.opts.strictKeywords
              ? (typeof $thenSch == "object" && Object.keys($thenSch).length > 0) ||
                $thenSch === false
              : it.util.schemaHasRules($thenSch, it.RULES.all)),
          $elsePresent =
            $elseSch !== undefined &&
            (it.opts.strictKeywords
              ? (typeof $elseSch == "object" && Object.keys($elseSch).length > 0) ||
                $elseSch === false
              : it.util.schemaHasRules($elseSch, it.RULES.all)),
          $currentBaseId = $it.baseId
        if ($thenPresent || $elsePresent) {
          var $ifClause
          $it.createErrors = false
          $it.schema = $schema
          $it.schemaPath = $schemaPath
          $it.errSchemaPath = $errSchemaPath
          out += " var " + $errs + " = errors; var " + $valid + " = true;  "
          var $wasComposite = it.compositeRule
          it.compositeRule = $it.compositeRule = true
          out += "  " + it.validate($it) + " "
          $it.baseId = $currentBaseId
          $it.createErrors = true
          out +=
            "  errors = " +
            $errs +
            "; if (vErrors !== null) { if (" +
            $errs +
            ") vErrors.length = " +
            $errs +
            "; else vErrors = null; }  "
          it.compositeRule = $it.compositeRule = $wasComposite
          if ($thenPresent) {
            out += " if (" + $nextValid + ") {  "
            $it.schema = it.schema["then"]
            $it.schemaPath = it.schemaPath + ".then"
            $it.errSchemaPath = it.errSchemaPath + "/then"
            out += "  " + it.validate($it) + " "
            $it.baseId = $currentBaseId
            out += " " + $valid + " = " + $nextValid + "; "
            if ($thenPresent && $elsePresent) {
              $ifClause = "ifClause" + $lvl
              out += " var " + $ifClause + " = 'then'; "
            } else {
              $ifClause = "'then'"
            }
            out += " } "
            if ($elsePresent) {
              out += " else { "
            }
          } else {
            out += " if (!" + $nextValid + ") { "
          }
          if ($elsePresent) {
            $it.schema = it.schema["else"]
            $it.schemaPath = it.schemaPath + ".else"
            $it.errSchemaPath = it.errSchemaPath + "/else"
            out += "  " + it.validate($it) + " "
            $it.baseId = $currentBaseId
            out += " " + $valid + " = " + $nextValid + "; "
            if ($thenPresent && $elsePresent) {
              $ifClause = "ifClause" + $lvl
              out += " var " + $ifClause + " = 'else'; "
            } else {
              $ifClause = "'else'"
            }
            out += " } "
          }
          out += " if (!" + $valid + ") {   var err =   " /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              "if" +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: { failingKeyword: " +
              $ifClause +
              " } "
            if (it.opts.messages !== false) {
              out += " , message: 'should match \"' + " + $ifClause + " + '\" schema' "
            }
            if (it.opts.verbose) {
              out +=
                " , schema: validate.schema" +
                $schemaPath +
                " , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += " throw new ValidationError(vErrors); "
            } else {
              out += " validate.errors = vErrors; return false; "
            }
          }
          out += " }   "
          if ($breakOnError) {
            out += " else { "
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { "
          }
        }
        return out
      }

      /***/
    },

    /***/ 85810: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      //all requires must be explicit because browserify won't work with dynamic requires
      module.exports = {
        $ref: __nccwpck_require__(42393),
        allOf: __nccwpck_require__(89443),
        anyOf: __nccwpck_require__(63093),
        $comment: __nccwpck_require__(30134),
        const: __nccwpck_require__(1661),
        contains: __nccwpck_require__(55964),
        dependencies: __nccwpck_require__(2591),
        enum: __nccwpck_require__(10163),
        format: __nccwpck_require__(63847),
        if: __nccwpck_require__(80862),
        items: __nccwpck_require__(54408),
        maximum: __nccwpck_require__(7404),
        minimum: __nccwpck_require__(7404),
        maxItems: __nccwpck_require__(64683),
        minItems: __nccwpck_require__(64683),
        maxLength: __nccwpck_require__(52114),
        minLength: __nccwpck_require__(52114),
        maxProperties: __nccwpck_require__(71142),
        minProperties: __nccwpck_require__(71142),
        multipleOf: __nccwpck_require__(39772),
        not: __nccwpck_require__(60750),
        oneOf: __nccwpck_require__(6106),
        pattern: __nccwpck_require__(13912),
        properties: __nccwpck_require__(52924),
        propertyNames: __nccwpck_require__(19195),
        required: __nccwpck_require__(8420),
        uniqueItems: __nccwpck_require__(24995),
        validate: __nccwpck_require__(49585)
      }

      /***/
    },

    /***/ 54408: /***/ (module) => {
      "use strict"

      module.exports = function generate_items(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        var $idx = "i" + $lvl,
          $dataNxt = ($it.dataLevel = it.dataLevel + 1),
          $nextData = "data" + $dataNxt,
          $currentBaseId = it.baseId
        out += "var " + $errs + " = errors;var " + $valid + ";"
        if (Array.isArray($schema)) {
          var $additionalItems = it.schema.additionalItems
          if ($additionalItems === false) {
            out += " " + $valid + " = " + $data + ".length <= " + $schema.length + "; "
            var $currErrSchemaPath = $errSchemaPath
            $errSchemaPath = it.errSchemaPath + "/additionalItems"
            out += "  if (!" + $valid + ") {   "
            var $$outStack = $$outStack || []
            $$outStack.push(out)
            out = "" /* istanbul ignore else */
            if (it.createErrors !== false) {
              out +=
                " { keyword: '" +
                "additionalItems" +
                "' , dataPath: (dataPath || '') + " +
                it.errorPath +
                " , schemaPath: " +
                it.util.toQuotedString($errSchemaPath) +
                " , params: { limit: " +
                $schema.length +
                " } "
              if (it.opts.messages !== false) {
                out += " , message: 'should NOT have more than " + $schema.length + " items' "
              }
              if (it.opts.verbose) {
                out +=
                  " , schema: false , parentSchema: validate.schema" +
                  it.schemaPath +
                  " , data: " +
                  $data +
                  " "
              }
              out += " } "
            } else {
              out += " {} "
            }
            var __err = out
            out = $$outStack.pop()
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); "
              } else {
                out += " validate.errors = [" + __err + "]; return false; "
              }
            } else {
              out +=
                " var err = " +
                __err +
                ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
            }
            out += " } "
            $errSchemaPath = $currErrSchemaPath
            if ($breakOnError) {
              $closingBraces += "}"
              out += " else { "
            }
          }
          var arr1 = $schema
          if (arr1) {
            var $sch,
              $i = -1,
              l1 = arr1.length - 1
            while ($i < l1) {
              $sch = arr1[($i += 1)]
              if (
                it.opts.strictKeywords
                  ? (typeof $sch == "object" && Object.keys($sch).length > 0) || $sch === false
                  : it.util.schemaHasRules($sch, it.RULES.all)
              ) {
                out += " " + $nextValid + " = true; if (" + $data + ".length > " + $i + ") { "
                var $passData = $data + "[" + $i + "]"
                $it.schema = $sch
                $it.schemaPath = $schemaPath + "[" + $i + "]"
                $it.errSchemaPath = $errSchemaPath + "/" + $i
                $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true)
                $it.dataPathArr[$dataNxt] = $i
                var $code = it.validate($it)
                $it.baseId = $currentBaseId
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " "
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " "
                }
                out += " }  "
                if ($breakOnError) {
                  out += " if (" + $nextValid + ") { "
                  $closingBraces += "}"
                }
              }
            }
          }
          if (
            typeof $additionalItems == "object" &&
            (it.opts.strictKeywords
              ? (typeof $additionalItems == "object" && Object.keys($additionalItems).length > 0) ||
                $additionalItems === false
              : it.util.schemaHasRules($additionalItems, it.RULES.all))
          ) {
            $it.schema = $additionalItems
            $it.schemaPath = it.schemaPath + ".additionalItems"
            $it.errSchemaPath = it.errSchemaPath + "/additionalItems"
            out +=
              " " +
              $nextValid +
              " = true; if (" +
              $data +
              ".length > " +
              $schema.length +
              ") {  for (var " +
              $idx +
              " = " +
              $schema.length +
              "; " +
              $idx +
              " < " +
              $data +
              ".length; " +
              $idx +
              "++) { "
            $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true)
            var $passData = $data + "[" + $idx + "]"
            $it.dataPathArr[$dataNxt] = $idx
            var $code = it.validate($it)
            $it.baseId = $currentBaseId
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " "
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " "
            }
            if ($breakOnError) {
              out += " if (!" + $nextValid + ") break; "
            }
            out += " } }  "
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { "
              $closingBraces += "}"
            }
          }
        } else if (
          it.opts.strictKeywords
            ? (typeof $schema == "object" && Object.keys($schema).length > 0) || $schema === false
            : it.util.schemaHasRules($schema, it.RULES.all)
        ) {
          $it.schema = $schema
          $it.schemaPath = $schemaPath
          $it.errSchemaPath = $errSchemaPath
          out +=
            "  for (var " +
            $idx +
            " = " +
            0 +
            "; " +
            $idx +
            " < " +
            $data +
            ".length; " +
            $idx +
            "++) { "
          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true)
          var $passData = $data + "[" + $idx + "]"
          $it.dataPathArr[$dataNxt] = $idx
          var $code = it.validate($it)
          $it.baseId = $currentBaseId
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " "
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " "
          }
          if ($breakOnError) {
            out += " if (!" + $nextValid + ") break; "
          }
          out += " }"
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {"
        }
        return out
      }

      /***/
    },

    /***/ 39772: /***/ (module) => {
      "use strict"

      module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number")
        }
        out += "var division" + $lvl + ";if ("
        if ($isData) {
          out +=
            " " + $schemaValue + " !== undefined && ( typeof " + $schemaValue + " != 'number' || "
        }
        out += " (division" + $lvl + " = " + $data + " / " + $schemaValue + ", "
        if (it.opts.multipleOfPrecision) {
          out +=
            " Math.abs(Math.round(division" +
            $lvl +
            ") - division" +
            $lvl +
            ") > 1e-" +
            it.opts.multipleOfPrecision +
            " "
        } else {
          out += " division" + $lvl + " !== parseInt(division" + $lvl + ") "
        }
        out += " ) "
        if ($isData) {
          out += "  )  "
        }
        out += " ) {   "
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            "multipleOf" +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { multipleOf: " +
            $schemaValue +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should be multiple of "
            if ($isData) {
              out += "' + " + $schemaValue
            } else {
              out += "" + $schemaValue + "'"
            }
          }
          if (it.opts.verbose) {
            out += " , schema:  "
            if ($isData) {
              out += "validate.schema" + $schemaPath
            } else {
              out += "" + $schema
            }
            out +=
              "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += "} "
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 60750: /***/ (module) => {
      "use strict"

      module.exports = function generate_not(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        $it.level++
        var $nextValid = "valid" + $it.level
        if (
          it.opts.strictKeywords
            ? (typeof $schema == "object" && Object.keys($schema).length > 0) || $schema === false
            : it.util.schemaHasRules($schema, it.RULES.all)
        ) {
          $it.schema = $schema
          $it.schemaPath = $schemaPath
          $it.errSchemaPath = $errSchemaPath
          out += " var " + $errs + " = errors;  "
          var $wasComposite = it.compositeRule
          it.compositeRule = $it.compositeRule = true
          $it.createErrors = false
          var $allErrorsOption
          if ($it.opts.allErrors) {
            $allErrorsOption = $it.opts.allErrors
            $it.opts.allErrors = false
          }
          out += " " + it.validate($it) + " "
          $it.createErrors = true
          if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption
          it.compositeRule = $it.compositeRule = $wasComposite
          out += " if (" + $nextValid + ") {   "
          var $$outStack = $$outStack || []
          $$outStack.push(out)
          out = "" /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              "not" +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: {} "
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT be valid' "
            }
            if (it.opts.verbose) {
              out +=
                " , schema: validate.schema" +
                $schemaPath +
                " , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          var __err = out
          out = $$outStack.pop()
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); "
            } else {
              out += " validate.errors = [" + __err + "]; return false; "
            }
          } else {
            out +=
              " var err = " +
              __err +
              ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          }
          out +=
            " } else {  errors = " +
            $errs +
            "; if (vErrors !== null) { if (" +
            $errs +
            ") vErrors.length = " +
            $errs +
            "; else vErrors = null; } "
          if (it.opts.allErrors) {
            out += " } "
          }
        } else {
          out += "  var err =   " /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              "not" +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: {} "
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT be valid' "
            }
            if (it.opts.verbose) {
              out +=
                " , schema: validate.schema" +
                $schemaPath +
                " , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          if ($breakOnError) {
            out += " if (false) { "
          }
        }
        return out
      }

      /***/
    },

    /***/ 6106: /***/ (module) => {
      "use strict"

      module.exports = function generate_oneOf(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        var $currentBaseId = $it.baseId,
          $prevValid = "prevValid" + $lvl,
          $passingSchemas = "passingSchemas" + $lvl
        out +=
          "var " +
          $errs +
          " = errors , " +
          $prevValid +
          " = false , " +
          $valid +
          " = false , " +
          $passingSchemas +
          " = null; "
        var $wasComposite = it.compositeRule
        it.compositeRule = $it.compositeRule = true
        var arr1 = $schema
        if (arr1) {
          var $sch,
            $i = -1,
            l1 = arr1.length - 1
          while ($i < l1) {
            $sch = arr1[($i += 1)]
            if (
              it.opts.strictKeywords
                ? (typeof $sch == "object" && Object.keys($sch).length > 0) || $sch === false
                : it.util.schemaHasRules($sch, it.RULES.all)
            ) {
              $it.schema = $sch
              $it.schemaPath = $schemaPath + "[" + $i + "]"
              $it.errSchemaPath = $errSchemaPath + "/" + $i
              out += "  " + it.validate($it) + " "
              $it.baseId = $currentBaseId
            } else {
              out += " var " + $nextValid + " = true; "
            }
            if ($i) {
              out +=
                " if (" +
                $nextValid +
                " && " +
                $prevValid +
                ") { " +
                $valid +
                " = false; " +
                $passingSchemas +
                " = [" +
                $passingSchemas +
                ", " +
                $i +
                "]; } else { "
              $closingBraces += "}"
            }
            out +=
              " if (" +
              $nextValid +
              ") { " +
              $valid +
              " = " +
              $prevValid +
              " = true; " +
              $passingSchemas +
              " = " +
              $i +
              "; }"
          }
        }
        it.compositeRule = $it.compositeRule = $wasComposite
        out +=
          "" + $closingBraces + "if (!" + $valid + ") {   var err =   " /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            "oneOf" +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { passingSchemas: " +
            $passingSchemas +
            " } "
          if (it.opts.messages !== false) {
            out += " , message: 'should match exactly one schema in oneOf' "
          }
          if (it.opts.verbose) {
            out +=
              " , schema: validate.schema" +
              $schemaPath +
              " , parentSchema: validate.schema" +
              it.schemaPath +
              " , data: " +
              $data +
              " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError(vErrors); "
          } else {
            out += " validate.errors = vErrors; return false; "
          }
        }
        out +=
          "} else {  errors = " +
          $errs +
          "; if (vErrors !== null) { if (" +
          $errs +
          ") vErrors.length = " +
          $errs +
          "; else vErrors = null; }"
        if (it.opts.allErrors) {
          out += " } "
        }
        return out
      }

      /***/
    },

    /***/ 13912: /***/ (module) => {
      "use strict"

      module.exports = function generate_pattern(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        var $regexp = $isData ? "(new RegExp(" + $schemaValue + "))" : it.usePattern($schema)
        out += "if ( "
        if ($isData) {
          out +=
            " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || "
        }
        out += " !" + $regexp + ".test(" + $data + ") ) {   "
        var $$outStack = $$outStack || []
        $$outStack.push(out)
        out = "" /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            "pattern" +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            " , schemaPath: " +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { pattern:  "
          if ($isData) {
            out += "" + $schemaValue
          } else {
            out += "" + it.util.toQuotedString($schema)
          }
          out += "  } "
          if (it.opts.messages !== false) {
            out += " , message: 'should match pattern \""
            if ($isData) {
              out += "' + " + $schemaValue + " + '"
            } else {
              out += "" + it.util.escapeQuotes($schema)
            }
            out += "\"' "
          }
          if (it.opts.verbose) {
            out += " , schema:  "
            if ($isData) {
              out += "validate.schema" + $schemaPath
            } else {
              out += "" + it.util.toQuotedString($schema)
            }
            out +=
              "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " "
          }
          out += " } "
        } else {
          out += " {} "
        }
        var __err = out
        out = $$outStack.pop()
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); "
          } else {
            out += " validate.errors = [" + __err + "]; return false; "
          }
        } else {
          out +=
            " var err = " +
            __err +
            ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
        }
        out += "} "
        if ($breakOnError) {
          out += " else { "
        }
        return out
      }

      /***/
    },

    /***/ 52924: /***/ (module) => {
      "use strict"

      module.exports = function generate_properties(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        var $key = "key" + $lvl,
          $idx = "idx" + $lvl,
          $dataNxt = ($it.dataLevel = it.dataLevel + 1),
          $nextData = "data" + $dataNxt,
          $dataProperties = "dataProperties" + $lvl
        var $schemaKeys = Object.keys($schema || {}).filter(notProto),
          $pProperties = it.schema.patternProperties || {},
          $pPropertyKeys = Object.keys($pProperties).filter(notProto),
          $aProperties = it.schema.additionalProperties,
          $someProperties = $schemaKeys.length || $pPropertyKeys.length,
          $noAdditional = $aProperties === false,
          $additionalIsSchema = typeof $aProperties == "object" && Object.keys($aProperties).length,
          $removeAdditional = it.opts.removeAdditional,
          $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
          $ownProperties = it.opts.ownProperties,
          $currentBaseId = it.baseId
        var $required = it.schema.required
        if (
          $required &&
          !(it.opts.$data && $required.$data) &&
          $required.length < it.opts.loopRequired
        ) {
          var $requiredHash = it.util.toHash($required)
        }

        function notProto(p) {
          return p !== "__proto__"
        }
        out += "var " + $errs + " = errors;var " + $nextValid + " = true;"
        if ($ownProperties) {
          out += " var " + $dataProperties + " = undefined;"
        }
        if ($checkAdditional) {
          if ($ownProperties) {
            out +=
              " " +
              $dataProperties +
              " = " +
              $dataProperties +
              " || Object.keys(" +
              $data +
              "); for (var " +
              $idx +
              "=0; " +
              $idx +
              "<" +
              $dataProperties +
              ".length; " +
              $idx +
              "++) { var " +
              $key +
              " = " +
              $dataProperties +
              "[" +
              $idx +
              "]; "
          } else {
            out += " for (var " + $key + " in " + $data + ") { "
          }
          if ($someProperties) {
            out += " var isAdditional" + $lvl + " = !(false "
            if ($schemaKeys.length) {
              if ($schemaKeys.length > 8) {
                out += " || validate.schema" + $schemaPath + ".hasOwnProperty(" + $key + ") "
              } else {
                var arr1 = $schemaKeys
                if (arr1) {
                  var $propertyKey,
                    i1 = -1,
                    l1 = arr1.length - 1
                  while (i1 < l1) {
                    $propertyKey = arr1[(i1 += 1)]
                    out += " || " + $key + " == " + it.util.toQuotedString($propertyKey) + " "
                  }
                }
              }
            }
            if ($pPropertyKeys.length) {
              var arr2 = $pPropertyKeys
              if (arr2) {
                var $pProperty,
                  $i = -1,
                  l2 = arr2.length - 1
                while ($i < l2) {
                  $pProperty = arr2[($i += 1)]
                  out += " || " + it.usePattern($pProperty) + ".test(" + $key + ") "
                }
              }
            }
            out += " ); if (isAdditional" + $lvl + ") { "
          }
          if ($removeAdditional == "all") {
            out += " delete " + $data + "[" + $key + "]; "
          } else {
            var $currentErrorPath = it.errorPath
            var $additionalProperty = "' + " + $key + " + '"
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers)
            }
            if ($noAdditional) {
              if ($removeAdditional) {
                out += " delete " + $data + "[" + $key + "]; "
              } else {
                out += " " + $nextValid + " = false; "
                var $currErrSchemaPath = $errSchemaPath
                $errSchemaPath = it.errSchemaPath + "/additionalProperties"
                var $$outStack = $$outStack || []
                $$outStack.push(out)
                out = "" /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out +=
                    " { keyword: '" +
                    "additionalProperties" +
                    "' , dataPath: (dataPath || '') + " +
                    it.errorPath +
                    " , schemaPath: " +
                    it.util.toQuotedString($errSchemaPath) +
                    " , params: { additionalProperty: '" +
                    $additionalProperty +
                    "' } "
                  if (it.opts.messages !== false) {
                    out += " , message: '"
                    if (it.opts._errorDataPathProperty) {
                      out += "is an invalid additional property"
                    } else {
                      out += "should NOT have additional properties"
                    }
                    out += "' "
                  }
                  if (it.opts.verbose) {
                    out +=
                      " , schema: false , parentSchema: validate.schema" +
                      it.schemaPath +
                      " , data: " +
                      $data +
                      " "
                  }
                  out += " } "
                } else {
                  out += " {} "
                }
                var __err = out
                out = $$outStack.pop()
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += " throw new ValidationError([" + __err + "]); "
                  } else {
                    out += " validate.errors = [" + __err + "]; return false; "
                  }
                } else {
                  out +=
                    " var err = " +
                    __err +
                    ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
                }
                $errSchemaPath = $currErrSchemaPath
                if ($breakOnError) {
                  out += " break; "
                }
              }
            } else if ($additionalIsSchema) {
              if ($removeAdditional == "failing") {
                out += " var " + $errs + " = errors;  "
                var $wasComposite = it.compositeRule
                it.compositeRule = $it.compositeRule = true
                $it.schema = $aProperties
                $it.schemaPath = it.schemaPath + ".additionalProperties"
                $it.errSchemaPath = it.errSchemaPath + "/additionalProperties"
                $it.errorPath = it.opts._errorDataPathProperty
                  ? it.errorPath
                  : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers)
                var $passData = $data + "[" + $key + "]"
                $it.dataPathArr[$dataNxt] = $key
                var $code = it.validate($it)
                $it.baseId = $currentBaseId
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " "
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " "
                }
                out +=
                  " if (!" +
                  $nextValid +
                  ") { errors = " +
                  $errs +
                  "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " +
                  $data +
                  "[" +
                  $key +
                  "]; }  "
                it.compositeRule = $it.compositeRule = $wasComposite
              } else {
                $it.schema = $aProperties
                $it.schemaPath = it.schemaPath + ".additionalProperties"
                $it.errSchemaPath = it.errSchemaPath + "/additionalProperties"
                $it.errorPath = it.opts._errorDataPathProperty
                  ? it.errorPath
                  : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers)
                var $passData = $data + "[" + $key + "]"
                $it.dataPathArr[$dataNxt] = $key
                var $code = it.validate($it)
                $it.baseId = $currentBaseId
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " "
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " "
                }
                if ($breakOnError) {
                  out += " if (!" + $nextValid + ") break; "
                }
              }
            }
            it.errorPath = $currentErrorPath
          }
          if ($someProperties) {
            out += " } "
          }
          out += " }  "
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { "
            $closingBraces += "}"
          }
        }
        var $useDefaults = it.opts.useDefaults && !it.compositeRule
        if ($schemaKeys.length) {
          var arr3 = $schemaKeys
          if (arr3) {
            var $propertyKey,
              i3 = -1,
              l3 = arr3.length - 1
            while (i3 < l3) {
              $propertyKey = arr3[(i3 += 1)]
              var $sch = $schema[$propertyKey]
              if (
                it.opts.strictKeywords
                  ? (typeof $sch == "object" && Object.keys($sch).length > 0) || $sch === false
                  : it.util.schemaHasRules($sch, it.RULES.all)
              ) {
                var $prop = it.util.getProperty($propertyKey),
                  $passData = $data + $prop,
                  $hasDefault = $useDefaults && $sch.default !== undefined
                $it.schema = $sch
                $it.schemaPath = $schemaPath + $prop
                $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($propertyKey)
                $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers)
                $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey)
                var $code = it.validate($it)
                $it.baseId = $currentBaseId
                if (it.util.varOccurences($code, $nextData) < 2) {
                  $code = it.util.varReplace($code, $nextData, $passData)
                  var $useData = $passData
                } else {
                  var $useData = $nextData
                  out += " var " + $nextData + " = " + $passData + "; "
                }
                if ($hasDefault) {
                  out += " " + $code + " "
                } else {
                  if ($requiredHash && $requiredHash[$propertyKey]) {
                    out += " if ( " + $useData + " === undefined "
                    if ($ownProperties) {
                      out +=
                        " || ! Object.prototype.hasOwnProperty.call(" +
                        $data +
                        ", '" +
                        it.util.escapeQuotes($propertyKey) +
                        "') "
                    }
                    out += ") { " + $nextValid + " = false; "
                    var $currentErrorPath = it.errorPath,
                      $currErrSchemaPath = $errSchemaPath,
                      $missingProperty = it.util.escapeQuotes($propertyKey)
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.util.getPath(
                        $currentErrorPath,
                        $propertyKey,
                        it.opts.jsonPointers
                      )
                    }
                    $errSchemaPath = it.errSchemaPath + "/required"
                    var $$outStack = $$outStack || []
                    $$outStack.push(out)
                    out = "" /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out +=
                        " { keyword: '" +
                        "required" +
                        "' , dataPath: (dataPath || '') + " +
                        it.errorPath +
                        " , schemaPath: " +
                        it.util.toQuotedString($errSchemaPath) +
                        " , params: { missingProperty: '" +
                        $missingProperty +
                        "' } "
                      if (it.opts.messages !== false) {
                        out += " , message: '"
                        if (it.opts._errorDataPathProperty) {
                          out += "is a required property"
                        } else {
                          out += "should have required property \\'" + $missingProperty + "\\'"
                        }
                        out += "' "
                      }
                      if (it.opts.verbose) {
                        out +=
                          " , schema: validate.schema" +
                          $schemaPath +
                          " , parentSchema: validate.schema" +
                          it.schemaPath +
                          " , data: " +
                          $data +
                          " "
                      }
                      out += " } "
                    } else {
                      out += " {} "
                    }
                    var __err = out
                    out = $$outStack.pop()
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += " throw new ValidationError([" + __err + "]); "
                      } else {
                        out += " validate.errors = [" + __err + "]; return false; "
                      }
                    } else {
                      out +=
                        " var err = " +
                        __err +
                        ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
                    }
                    $errSchemaPath = $currErrSchemaPath
                    it.errorPath = $currentErrorPath
                    out += " } else { "
                  } else {
                    if ($breakOnError) {
                      out += " if ( " + $useData + " === undefined "
                      if ($ownProperties) {
                        out +=
                          " || ! Object.prototype.hasOwnProperty.call(" +
                          $data +
                          ", '" +
                          it.util.escapeQuotes($propertyKey) +
                          "') "
                      }
                      out += ") { " + $nextValid + " = true; } else { "
                    } else {
                      out += " if (" + $useData + " !== undefined "
                      if ($ownProperties) {
                        out +=
                          " &&   Object.prototype.hasOwnProperty.call(" +
                          $data +
                          ", '" +
                          it.util.escapeQuotes($propertyKey) +
                          "') "
                      }
                      out += " ) { "
                    }
                  }
                  out += " " + $code + " } "
                }
              }
              if ($breakOnError) {
                out += " if (" + $nextValid + ") { "
                $closingBraces += "}"
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr4 = $pPropertyKeys
          if (arr4) {
            var $pProperty,
              i4 = -1,
              l4 = arr4.length - 1
            while (i4 < l4) {
              $pProperty = arr4[(i4 += 1)]
              var $sch = $pProperties[$pProperty]
              if (
                it.opts.strictKeywords
                  ? (typeof $sch == "object" && Object.keys($sch).length > 0) || $sch === false
                  : it.util.schemaHasRules($sch, it.RULES.all)
              ) {
                $it.schema = $sch
                $it.schemaPath =
                  it.schemaPath + ".patternProperties" + it.util.getProperty($pProperty)
                $it.errSchemaPath =
                  it.errSchemaPath + "/patternProperties/" + it.util.escapeFragment($pProperty)
                if ($ownProperties) {
                  out +=
                    " " +
                    $dataProperties +
                    " = " +
                    $dataProperties +
                    " || Object.keys(" +
                    $data +
                    "); for (var " +
                    $idx +
                    "=0; " +
                    $idx +
                    "<" +
                    $dataProperties +
                    ".length; " +
                    $idx +
                    "++) { var " +
                    $key +
                    " = " +
                    $dataProperties +
                    "[" +
                    $idx +
                    "]; "
                } else {
                  out += " for (var " + $key + " in " + $data + ") { "
                }
                out += " if (" + it.usePattern($pProperty) + ".test(" + $key + ")) { "
                $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers)
                var $passData = $data + "[" + $key + "]"
                $it.dataPathArr[$dataNxt] = $key
                var $code = it.validate($it)
                $it.baseId = $currentBaseId
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " "
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " "
                }
                if ($breakOnError) {
                  out += " if (!" + $nextValid + ") break; "
                }
                out += " } "
                if ($breakOnError) {
                  out += " else " + $nextValid + " = true; "
                }
                out += " }  "
                if ($breakOnError) {
                  out += " if (" + $nextValid + ") { "
                  $closingBraces += "}"
                }
              }
            }
          }
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {"
        }
        return out
      }

      /***/
    },

    /***/ 19195: /***/ (module) => {
      "use strict"

      module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $errs = "errs__" + $lvl
        var $it = it.util.copy(it)
        var $closingBraces = ""
        $it.level++
        var $nextValid = "valid" + $it.level
        out += "var " + $errs + " = errors;"
        if (
          it.opts.strictKeywords
            ? (typeof $schema == "object" && Object.keys($schema).length > 0) || $schema === false
            : it.util.schemaHasRules($schema, it.RULES.all)
        ) {
          $it.schema = $schema
          $it.schemaPath = $schemaPath
          $it.errSchemaPath = $errSchemaPath
          var $key = "key" + $lvl,
            $idx = "idx" + $lvl,
            $i = "i" + $lvl,
            $invalidName = "' + " + $key + " + '",
            $dataNxt = ($it.dataLevel = it.dataLevel + 1),
            $nextData = "data" + $dataNxt,
            $dataProperties = "dataProperties" + $lvl,
            $ownProperties = it.opts.ownProperties,
            $currentBaseId = it.baseId
          if ($ownProperties) {
            out += " var " + $dataProperties + " = undefined; "
          }
          if ($ownProperties) {
            out +=
              " " +
              $dataProperties +
              " = " +
              $dataProperties +
              " || Object.keys(" +
              $data +
              "); for (var " +
              $idx +
              "=0; " +
              $idx +
              "<" +
              $dataProperties +
              ".length; " +
              $idx +
              "++) { var " +
              $key +
              " = " +
              $dataProperties +
              "[" +
              $idx +
              "]; "
          } else {
            out += " for (var " + $key + " in " + $data + ") { "
          }
          out += " var startErrs" + $lvl + " = errors; "
          var $passData = $key
          var $wasComposite = it.compositeRule
          it.compositeRule = $it.compositeRule = true
          var $code = it.validate($it)
          $it.baseId = $currentBaseId
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " "
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " "
          }
          it.compositeRule = $it.compositeRule = $wasComposite
          out +=
            " if (!" +
            $nextValid +
            ") { for (var " +
            $i +
            "=startErrs" +
            $lvl +
            "; " +
            $i +
            "<errors; " +
            $i +
            "++) { vErrors[" +
            $i +
            "].propertyName = " +
            $key +
            "; }   var err =   " /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              "propertyNames" +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: { propertyName: '" +
              $invalidName +
              "' } "
            if (it.opts.messages !== false) {
              out += " , message: 'property name \\'" + $invalidName + "\\' is invalid' "
            }
            if (it.opts.verbose) {
              out +=
                " , schema: validate.schema" +
                $schemaPath +
                " , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += " throw new ValidationError(vErrors); "
            } else {
              out += " validate.errors = vErrors; return false; "
            }
          }
          if ($breakOnError) {
            out += " break; "
          }
          out += " } }"
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {"
        }
        return out
      }

      /***/
    },

    /***/ 42393: /***/ (module) => {
      "use strict"

      module.exports = function generate_ref(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $async, $refCode
        if ($schema == "#" || $schema == "#/") {
          if (it.isRoot) {
            $async = it.async
            $refCode = "validate"
          } else {
            $async = it.root.schema.$async === true
            $refCode = "root.refVal[0]"
          }
        } else {
          var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot)
          if ($refVal === undefined) {
            var $message = it.MissingRefError.message(it.baseId, $schema)
            if (it.opts.missingRefs == "fail") {
              it.logger.error($message)
              var $$outStack = $$outStack || []
              $$outStack.push(out)
              out = "" /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  "$ref" +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  " , schemaPath: " +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { ref: '" +
                  it.util.escapeQuotes($schema) +
                  "' } "
                if (it.opts.messages !== false) {
                  out +=
                    " , message: 'can\\'t resolve reference " + it.util.escapeQuotes($schema) + "' "
                }
                if (it.opts.verbose) {
                  out +=
                    " , schema: " +
                    it.util.toQuotedString($schema) +
                    " , parentSchema: validate.schema" +
                    it.schemaPath +
                    " , data: " +
                    $data +
                    " "
                }
                out += " } "
              } else {
                out += " {} "
              }
              var __err = out
              out = $$outStack.pop()
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); "
                } else {
                  out += " validate.errors = [" + __err + "]; return false; "
                }
              } else {
                out +=
                  " var err = " +
                  __err +
                  ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
              }
              if ($breakOnError) {
                out += " if (false) { "
              }
            } else if (it.opts.missingRefs == "ignore") {
              it.logger.warn($message)
              if ($breakOnError) {
                out += " if (true) { "
              }
            } else {
              throw new it.MissingRefError(it.baseId, $schema, $message)
            }
          } else if ($refVal.inline) {
            var $it = it.util.copy(it)
            $it.level++
            var $nextValid = "valid" + $it.level
            $it.schema = $refVal.schema
            $it.schemaPath = ""
            $it.errSchemaPath = $schema
            var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code)
            out += " " + $code + " "
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { "
            }
          } else {
            $async = $refVal.$async === true || (it.async && $refVal.$async !== false)
            $refCode = $refVal.code
          }
        }
        if ($refCode) {
          var $$outStack = $$outStack || []
          $$outStack.push(out)
          out = ""
          if (it.opts.passContext) {
            out += " " + $refCode + ".call(this, "
          } else {
            out += " " + $refCode + "( "
          }
          out += " " + $data + ", (dataPath || '')"
          if (it.errorPath != '""') {
            out += " + " + it.errorPath
          }
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData",
            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty"
          out += " , " + $parentData + " , " + $parentDataProperty + ", rootData)  "
          var __callValidate = out
          out = $$outStack.pop()
          if ($async) {
            if (!it.async) throw new Error("async schema referenced by sync schema")
            if ($breakOnError) {
              out += " var " + $valid + "; "
            }
            out += " try { await " + __callValidate + "; "
            if ($breakOnError) {
              out += " " + $valid + " = true; "
            }
            out +=
              " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; "
            if ($breakOnError) {
              out += " " + $valid + " = false; "
            }
            out += " } "
            if ($breakOnError) {
              out += " if (" + $valid + ") { "
            }
          } else {
            out +=
              " if (!" +
              __callValidate +
              ") { if (vErrors === null) vErrors = " +
              $refCode +
              ".errors; else vErrors = vErrors.concat(" +
              $refCode +
              ".errors); errors = vErrors.length; } "
            if ($breakOnError) {
              out += " else { "
            }
          }
        }
        return out
      }

      /***/
    },

    /***/ 8420: /***/ (module) => {
      "use strict"

      module.exports = function generate_required(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        var $vSchema = "schema" + $lvl
        if (!$isData) {
          if (
            $schema.length < it.opts.loopRequired &&
            it.schema.properties &&
            Object.keys(it.schema.properties).length
          ) {
            var $required = []
            var arr1 = $schema
            if (arr1) {
              var $property,
                i1 = -1,
                l1 = arr1.length - 1
              while (i1 < l1) {
                $property = arr1[(i1 += 1)]
                var $propertySch = it.schema.properties[$property]
                if (
                  !(
                    $propertySch &&
                    (it.opts.strictKeywords
                      ? (typeof $propertySch == "object" && Object.keys($propertySch).length > 0) ||
                        $propertySch === false
                      : it.util.schemaHasRules($propertySch, it.RULES.all))
                  )
                ) {
                  $required[$required.length] = $property
                }
              }
            }
          } else {
            var $required = $schema
          }
        }
        if ($isData || $required.length) {
          var $currentErrorPath = it.errorPath,
            $loopRequired = $isData || $required.length >= it.opts.loopRequired,
            $ownProperties = it.opts.ownProperties
          if ($breakOnError) {
            out += " var missing" + $lvl + "; "
            if ($loopRequired) {
              if (!$isData) {
                out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; "
              }
              var $i = "i" + $lvl,
                $propertyPath = "schema" + $lvl + "[" + $i + "]",
                $missingProperty = "' + " + $propertyPath + " + '"
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPathExpr(
                  $currentErrorPath,
                  $propertyPath,
                  it.opts.jsonPointers
                )
              }
              out += " var " + $valid + " = true; "
              if ($isData) {
                out +=
                  " if (schema" +
                  $lvl +
                  " === undefined) " +
                  $valid +
                  " = true; else if (!Array.isArray(schema" +
                  $lvl +
                  ")) " +
                  $valid +
                  " = false; else {"
              }
              out +=
                " for (var " +
                $i +
                " = 0; " +
                $i +
                " < " +
                $vSchema +
                ".length; " +
                $i +
                "++) { " +
                $valid +
                " = " +
                $data +
                "[" +
                $vSchema +
                "[" +
                $i +
                "]] !== undefined "
              if ($ownProperties) {
                out +=
                  " &&   Object.prototype.hasOwnProperty.call(" +
                  $data +
                  ", " +
                  $vSchema +
                  "[" +
                  $i +
                  "]) "
              }
              out += "; if (!" + $valid + ") break; } "
              if ($isData) {
                out += "  }  "
              }
              out += "  if (!" + $valid + ") {   "
              var $$outStack = $$outStack || []
              $$outStack.push(out)
              out = "" /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  "required" +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  " , schemaPath: " +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { missingProperty: '" +
                  $missingProperty +
                  "' } "
                if (it.opts.messages !== false) {
                  out += " , message: '"
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property"
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'"
                  }
                  out += "' "
                }
                if (it.opts.verbose) {
                  out +=
                    " , schema: validate.schema" +
                    $schemaPath +
                    " , parentSchema: validate.schema" +
                    it.schemaPath +
                    " , data: " +
                    $data +
                    " "
                }
                out += " } "
              } else {
                out += " {} "
              }
              var __err = out
              out = $$outStack.pop()
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); "
                } else {
                  out += " validate.errors = [" + __err + "]; return false; "
                }
              } else {
                out +=
                  " var err = " +
                  __err +
                  ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
              }
              out += " } else { "
            } else {
              out += " if ( "
              var arr2 = $required
              if (arr2) {
                var $propertyKey,
                  $i = -1,
                  l2 = arr2.length - 1
                while ($i < l2) {
                  $propertyKey = arr2[($i += 1)]
                  if ($i) {
                    out += " || "
                  }
                  var $prop = it.util.getProperty($propertyKey),
                    $useData = $data + $prop
                  out += " ( ( " + $useData + " === undefined "
                  if ($ownProperties) {
                    out +=
                      " || ! Object.prototype.hasOwnProperty.call(" +
                      $data +
                      ", '" +
                      it.util.escapeQuotes($propertyKey) +
                      "') "
                  }
                  out +=
                    ") && (missing" +
                    $lvl +
                    " = " +
                    it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) +
                    ") ) "
                }
              }
              out += ") {  "
              var $propertyPath = "missing" + $lvl,
                $missingProperty = "' + " + $propertyPath + " + '"
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.opts.jsonPointers
                  ? it.util.getPathExpr($currentErrorPath, $propertyPath, true)
                  : $currentErrorPath + " + " + $propertyPath
              }
              var $$outStack = $$outStack || []
              $$outStack.push(out)
              out = "" /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  "required" +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  " , schemaPath: " +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { missingProperty: '" +
                  $missingProperty +
                  "' } "
                if (it.opts.messages !== false) {
                  out += " , message: '"
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property"
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'"
                  }
                  out += "' "
                }
                if (it.opts.verbose) {
                  out +=
                    " , schema: validate.schema" +
                    $schemaPath +
                    " , parentSchema: validate.schema" +
                    it.schemaPath +
                    " , data: " +
                    $data +
                    " "
                }
                out += " } "
              } else {
                out += " {} "
              }
              var __err = out
              out = $$outStack.pop()
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); "
                } else {
                  out += " validate.errors = [" + __err + "]; return false; "
                }
              } else {
                out +=
                  " var err = " +
                  __err +
                  ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
              }
              out += " } else { "
            }
          } else {
            if ($loopRequired) {
              if (!$isData) {
                out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; "
              }
              var $i = "i" + $lvl,
                $propertyPath = "schema" + $lvl + "[" + $i + "]",
                $missingProperty = "' + " + $propertyPath + " + '"
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPathExpr(
                  $currentErrorPath,
                  $propertyPath,
                  it.opts.jsonPointers
                )
              }
              if ($isData) {
                out +=
                  " if (" +
                  $vSchema +
                  " && !Array.isArray(" +
                  $vSchema +
                  ")) {  var err =   " /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out +=
                    " { keyword: '" +
                    "required" +
                    "' , dataPath: (dataPath || '') + " +
                    it.errorPath +
                    " , schemaPath: " +
                    it.util.toQuotedString($errSchemaPath) +
                    " , params: { missingProperty: '" +
                    $missingProperty +
                    "' } "
                  if (it.opts.messages !== false) {
                    out += " , message: '"
                    if (it.opts._errorDataPathProperty) {
                      out += "is a required property"
                    } else {
                      out += "should have required property \\'" + $missingProperty + "\\'"
                    }
                    out += "' "
                  }
                  if (it.opts.verbose) {
                    out +=
                      " , schema: validate.schema" +
                      $schemaPath +
                      " , parentSchema: validate.schema" +
                      it.schemaPath +
                      " , data: " +
                      $data +
                      " "
                  }
                  out += " } "
                } else {
                  out += " {} "
                }
                out +=
                  ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" +
                  $vSchema +
                  " !== undefined) { "
              }
              out +=
                " for (var " +
                $i +
                " = 0; " +
                $i +
                " < " +
                $vSchema +
                ".length; " +
                $i +
                "++) { if (" +
                $data +
                "[" +
                $vSchema +
                "[" +
                $i +
                "]] === undefined "
              if ($ownProperties) {
                out +=
                  " || ! Object.prototype.hasOwnProperty.call(" +
                  $data +
                  ", " +
                  $vSchema +
                  "[" +
                  $i +
                  "]) "
              }
              out += ") {  var err =   " /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  "required" +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  " , schemaPath: " +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { missingProperty: '" +
                  $missingProperty +
                  "' } "
                if (it.opts.messages !== false) {
                  out += " , message: '"
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property"
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'"
                  }
                  out += "' "
                }
                if (it.opts.verbose) {
                  out +=
                    " , schema: validate.schema" +
                    $schemaPath +
                    " , parentSchema: validate.schema" +
                    it.schemaPath +
                    " , data: " +
                    $data +
                    " "
                }
                out += " } "
              } else {
                out += " {} "
              }
              out +=
                ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } "
              if ($isData) {
                out += "  }  "
              }
            } else {
              var arr3 = $required
              if (arr3) {
                var $propertyKey,
                  i3 = -1,
                  l3 = arr3.length - 1
                while (i3 < l3) {
                  $propertyKey = arr3[(i3 += 1)]
                  var $prop = it.util.getProperty($propertyKey),
                    $missingProperty = it.util.escapeQuotes($propertyKey),
                    $useData = $data + $prop
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPath(
                      $currentErrorPath,
                      $propertyKey,
                      it.opts.jsonPointers
                    )
                  }
                  out += " if ( " + $useData + " === undefined "
                  if ($ownProperties) {
                    out +=
                      " || ! Object.prototype.hasOwnProperty.call(" +
                      $data +
                      ", '" +
                      it.util.escapeQuotes($propertyKey) +
                      "') "
                  }
                  out += ") {  var err =   " /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out +=
                      " { keyword: '" +
                      "required" +
                      "' , dataPath: (dataPath || '') + " +
                      it.errorPath +
                      " , schemaPath: " +
                      it.util.toQuotedString($errSchemaPath) +
                      " , params: { missingProperty: '" +
                      $missingProperty +
                      "' } "
                    if (it.opts.messages !== false) {
                      out += " , message: '"
                      if (it.opts._errorDataPathProperty) {
                        out += "is a required property"
                      } else {
                        out += "should have required property \\'" + $missingProperty + "\\'"
                      }
                      out += "' "
                    }
                    if (it.opts.verbose) {
                      out +=
                        " , schema: validate.schema" +
                        $schemaPath +
                        " , parentSchema: validate.schema" +
                        it.schemaPath +
                        " , data: " +
                        $data +
                        " "
                    }
                    out += " } "
                  } else {
                    out += " {} "
                  }
                  out +=
                    ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "
                }
              }
            }
          }
          it.errorPath = $currentErrorPath
        } else if ($breakOnError) {
          out += " if (true) {"
        }
        return out
      }

      /***/
    },

    /***/ 24995: /***/ (module) => {
      "use strict"

      module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
        var out = " "
        var $lvl = it.level
        var $dataLvl = it.dataLevel
        var $schema = it.schema[$keyword]
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword
        var $breakOnError = !it.opts.allErrors
        var $data = "data" + ($dataLvl || "")
        var $valid = "valid" + $lvl
        var $isData = it.opts.$data && $schema && $schema.$data,
          $schemaValue
        if ($isData) {
          out +=
            " var schema" +
            $lvl +
            " = " +
            it.util.getData($schema.$data, $dataLvl, it.dataPathArr) +
            "; "
          $schemaValue = "schema" + $lvl
        } else {
          $schemaValue = $schema
        }
        if (($schema || $isData) && it.opts.uniqueItems !== false) {
          if ($isData) {
            out +=
              " var " +
              $valid +
              "; if (" +
              $schemaValue +
              " === false || " +
              $schemaValue +
              " === undefined) " +
              $valid +
              " = true; else if (typeof " +
              $schemaValue +
              " != 'boolean') " +
              $valid +
              " = false; else { "
          }
          out += " var i = " + $data + ".length , " + $valid + " = true , j; if (i > 1) { "
          var $itemType = it.schema.items && it.schema.items.type,
            $typeIsArray = Array.isArray($itemType)
          if (
            !$itemType ||
            $itemType == "object" ||
            $itemType == "array" ||
            ($typeIsArray && ($itemType.indexOf("object") >= 0 || $itemType.indexOf("array") >= 0))
          ) {
            out +=
              " outer: for (;i--;) { for (j = i; j--;) { if (equal(" +
              $data +
              "[i], " +
              $data +
              "[j])) { " +
              $valid +
              " = false; break outer; } } } "
          } else {
            out += " var itemIndices = {}, item; for (;i--;) { var item = " + $data + "[i]; "
            var $method = "checkDataType" + ($typeIsArray ? "s" : "")
            out +=
              " if (" +
              it.util[$method]($itemType, "item", it.opts.strictNumbers, true) +
              ") continue; "
            if ($typeIsArray) {
              out += " if (typeof item == 'string') item = '\"' + item; "
            }
            out +=
              " if (typeof itemIndices[item] == 'number') { " +
              $valid +
              " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } "
          }
          out += " } "
          if ($isData) {
            out += "  }  "
          }
          out += " if (!" + $valid + ") {   "
          var $$outStack = $$outStack || []
          $$outStack.push(out)
          out = "" /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              "uniqueItems" +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              " , schemaPath: " +
              it.util.toQuotedString($errSchemaPath) +
              " , params: { i: i, j: j } "
            if (it.opts.messages !== false) {
              out +=
                " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "
            }
            if (it.opts.verbose) {
              out += " , schema:  "
              if ($isData) {
                out += "validate.schema" + $schemaPath
              } else {
                out += "" + $schema
              }
              out +=
                "         , parentSchema: validate.schema" +
                it.schemaPath +
                " , data: " +
                $data +
                " "
            }
            out += " } "
          } else {
            out += " {} "
          }
          var __err = out
          out = $$outStack.pop()
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); "
            } else {
              out += " validate.errors = [" + __err + "]; return false; "
            }
          } else {
            out +=
              " var err = " +
              __err +
              ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          }
          out += " } "
          if ($breakOnError) {
            out += " else { "
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { "
          }
        }
        return out
      }

      /***/
    },

    /***/ 49585: /***/ (module) => {
      "use strict"

      module.exports = function generate_validate(it, $keyword, $ruleType) {
        var out = ""
        var $async = it.schema.$async === true,
          $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, "$ref"),
          $id = it.self._getId(it.schema)
        if (it.opts.strictKeywords) {
          var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords)
          if ($unknownKwd) {
            var $keywordsMsg = "unknown keyword: " + $unknownKwd
            if (it.opts.strictKeywords === "log") it.logger.warn($keywordsMsg)
            else throw new Error($keywordsMsg)
          }
        }
        if (it.isTop) {
          out += " var validate = "
          if ($async) {
            it.async = true
            out += "async "
          }
          out +=
            "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; "
          if ($id && (it.opts.sourceCode || it.opts.processCode)) {
            out += " " + ("/*# sourceURL=" + $id + " */") + " "
          }
        }
        if (typeof it.schema == "boolean" || !($refKeywords || it.schema.$ref)) {
          var $keyword = "false schema"
          var $lvl = it.level
          var $dataLvl = it.dataLevel
          var $schema = it.schema[$keyword]
          var $schemaPath = it.schemaPath + it.util.getProperty($keyword)
          var $errSchemaPath = it.errSchemaPath + "/" + $keyword
          var $breakOnError = !it.opts.allErrors
          var $errorKeyword
          var $data = "data" + ($dataLvl || "")
          var $valid = "valid" + $lvl
          if (it.schema === false) {
            if (it.isTop) {
              $breakOnError = true
            } else {
              out += " var " + $valid + " = false; "
            }
            var $$outStack = $$outStack || []
            $$outStack.push(out)
            out = "" /* istanbul ignore else */
            if (it.createErrors !== false) {
              out +=
                " { keyword: '" +
                ($errorKeyword || "false schema") +
                "' , dataPath: (dataPath || '') + " +
                it.errorPath +
                " , schemaPath: " +
                it.util.toQuotedString($errSchemaPath) +
                " , params: {} "
              if (it.opts.messages !== false) {
                out += " , message: 'boolean schema is false' "
              }
              if (it.opts.verbose) {
                out +=
                  " , schema: false , parentSchema: validate.schema" +
                  it.schemaPath +
                  " , data: " +
                  $data +
                  " "
              }
              out += " } "
            } else {
              out += " {} "
            }
            var __err = out
            out = $$outStack.pop()
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); "
              } else {
                out += " validate.errors = [" + __err + "]; return false; "
              }
            } else {
              out +=
                " var err = " +
                __err +
                ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
            }
          } else {
            if (it.isTop) {
              if ($async) {
                out += " return data; "
              } else {
                out += " validate.errors = null; return true; "
              }
            } else {
              out += " var " + $valid + " = true; "
            }
          }
          if (it.isTop) {
            out += " }; return validate; "
          }
          return out
        }
        if (it.isTop) {
          var $top = it.isTop,
            $lvl = (it.level = 0),
            $dataLvl = (it.dataLevel = 0),
            $data = "data"
          it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema))
          it.baseId = it.baseId || it.rootId
          delete it.isTop
          it.dataPathArr = [""]
          if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
            var $defaultMsg = "default is ignored in the schema root"
            if (it.opts.strictDefaults === "log") it.logger.warn($defaultMsg)
            else throw new Error($defaultMsg)
          }
          out += " var vErrors = null; "
          out += " var errors = 0;     "
          out += " if (rootData === undefined) rootData = data; "
        } else {
          var $lvl = it.level,
            $dataLvl = it.dataLevel,
            $data = "data" + ($dataLvl || "")
          if ($id) it.baseId = it.resolve.url(it.baseId, $id)
          if ($async && !it.async) throw new Error("async schema in sync schema")
          out += " var errs_" + $lvl + " = errors;"
        }
        var $valid = "valid" + $lvl,
          $breakOnError = !it.opts.allErrors,
          $closingBraces1 = "",
          $closingBraces2 = ""
        var $errorKeyword
        var $typeSchema = it.schema.type,
          $typeIsArray = Array.isArray($typeSchema)
        if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
          if ($typeIsArray) {
            if ($typeSchema.indexOf("null") == -1) $typeSchema = $typeSchema.concat("null")
          } else if ($typeSchema != "null") {
            $typeSchema = [$typeSchema, "null"]
            $typeIsArray = true
          }
        }
        if ($typeIsArray && $typeSchema.length == 1) {
          $typeSchema = $typeSchema[0]
          $typeIsArray = false
        }
        if (it.schema.$ref && $refKeywords) {
          if (it.opts.extendRefs == "fail") {
            throw new Error(
              '$ref: validation keywords used in schema at path "' +
                it.errSchemaPath +
                '" (see option extendRefs)'
            )
          } else if (it.opts.extendRefs !== true) {
            $refKeywords = false
            it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"')
          }
        }
        if (it.schema.$comment && it.opts.$comment) {
          out += " " + it.RULES.all.$comment.code(it, "$comment")
        }
        if ($typeSchema) {
          if (it.opts.coerceTypes) {
            var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema)
          }
          var $rulesGroup = it.RULES.types[$typeSchema]
          if (
            $coerceToTypes ||
            $typeIsArray ||
            $rulesGroup === true ||
            ($rulesGroup && !$shouldUseGroup($rulesGroup))
          ) {
            var $schemaPath = it.schemaPath + ".type",
              $errSchemaPath = it.errSchemaPath + "/type"
            var $schemaPath = it.schemaPath + ".type",
              $errSchemaPath = it.errSchemaPath + "/type",
              $method = $typeIsArray ? "checkDataTypes" : "checkDataType"
            out +=
              " if (" + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ") { "
            if ($coerceToTypes) {
              var $dataType = "dataType" + $lvl,
                $coerced = "coerced" + $lvl
              out +=
                " var " + $dataType + " = typeof " + $data + "; var " + $coerced + " = undefined; "
              if (it.opts.coerceTypes == "array") {
                out +=
                  " if (" +
                  $dataType +
                  " == 'object' && Array.isArray(" +
                  $data +
                  ") && " +
                  $data +
                  ".length == 1) { " +
                  $data +
                  " = " +
                  $data +
                  "[0]; " +
                  $dataType +
                  " = typeof " +
                  $data +
                  "; if (" +
                  it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) +
                  ") " +
                  $coerced +
                  " = " +
                  $data +
                  "; } "
              }
              out += " if (" + $coerced + " !== undefined) ; "
              var arr1 = $coerceToTypes
              if (arr1) {
                var $type,
                  $i = -1,
                  l1 = arr1.length - 1
                while ($i < l1) {
                  $type = arr1[($i += 1)]
                  if ($type == "string") {
                    out +=
                      " else if (" +
                      $dataType +
                      " == 'number' || " +
                      $dataType +
                      " == 'boolean') " +
                      $coerced +
                      " = '' + " +
                      $data +
                      "; else if (" +
                      $data +
                      " === null) " +
                      $coerced +
                      " = ''; "
                  } else if ($type == "number" || $type == "integer") {
                    out +=
                      " else if (" +
                      $dataType +
                      " == 'boolean' || " +
                      $data +
                      " === null || (" +
                      $dataType +
                      " == 'string' && " +
                      $data +
                      " && " +
                      $data +
                      " == +" +
                      $data +
                      " "
                    if ($type == "integer") {
                      out += " && !(" + $data + " % 1)"
                    }
                    out += ")) " + $coerced + " = +" + $data + "; "
                  } else if ($type == "boolean") {
                    out +=
                      " else if (" +
                      $data +
                      " === 'false' || " +
                      $data +
                      " === 0 || " +
                      $data +
                      " === null) " +
                      $coerced +
                      " = false; else if (" +
                      $data +
                      " === 'true' || " +
                      $data +
                      " === 1) " +
                      $coerced +
                      " = true; "
                  } else if ($type == "null") {
                    out +=
                      " else if (" +
                      $data +
                      " === '' || " +
                      $data +
                      " === 0 || " +
                      $data +
                      " === false) " +
                      $coerced +
                      " = null; "
                  } else if (it.opts.coerceTypes == "array" && $type == "array") {
                    out +=
                      " else if (" +
                      $dataType +
                      " == 'string' || " +
                      $dataType +
                      " == 'number' || " +
                      $dataType +
                      " == 'boolean' || " +
                      $data +
                      " == null) " +
                      $coerced +
                      " = [" +
                      $data +
                      "]; "
                  }
                }
              }
              out += " else {   "
              var $$outStack = $$outStack || []
              $$outStack.push(out)
              out = "" /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  ($errorKeyword || "type") +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  " , schemaPath: " +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { type: '"
                if ($typeIsArray) {
                  out += "" + $typeSchema.join(",")
                } else {
                  out += "" + $typeSchema
                }
                out += "' } "
                if (it.opts.messages !== false) {
                  out += " , message: 'should be "
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",")
                  } else {
                    out += "" + $typeSchema
                  }
                  out += "' "
                }
                if (it.opts.verbose) {
                  out +=
                    " , schema: validate.schema" +
                    $schemaPath +
                    " , parentSchema: validate.schema" +
                    it.schemaPath +
                    " , data: " +
                    $data +
                    " "
                }
                out += " } "
              } else {
                out += " {} "
              }
              var __err = out
              out = $$outStack.pop()
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); "
                } else {
                  out += " validate.errors = [" + __err + "]; return false; "
                }
              } else {
                out +=
                  " var err = " +
                  __err +
                  ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
              }
              out += " } if (" + $coerced + " !== undefined) {  "
              var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData",
                $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty"
              out += " " + $data + " = " + $coerced + "; "
              if (!$dataLvl) {
                out += "if (" + $parentData + " !== undefined)"
              }
              out += " " + $parentData + "[" + $parentDataProperty + "] = " + $coerced + "; } "
            } else {
              var $$outStack = $$outStack || []
              $$outStack.push(out)
              out = "" /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  ($errorKeyword || "type") +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  " , schemaPath: " +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { type: '"
                if ($typeIsArray) {
                  out += "" + $typeSchema.join(",")
                } else {
                  out += "" + $typeSchema
                }
                out += "' } "
                if (it.opts.messages !== false) {
                  out += " , message: 'should be "
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",")
                  } else {
                    out += "" + $typeSchema
                  }
                  out += "' "
                }
                if (it.opts.verbose) {
                  out +=
                    " , schema: validate.schema" +
                    $schemaPath +
                    " , parentSchema: validate.schema" +
                    it.schemaPath +
                    " , data: " +
                    $data +
                    " "
                }
                out += " } "
              } else {
                out += " {} "
              }
              var __err = out
              out = $$outStack.pop()
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); "
                } else {
                  out += " validate.errors = [" + __err + "]; return false; "
                }
              } else {
                out +=
                  " var err = " +
                  __err +
                  ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
              }
            }
            out += " } "
          }
        }
        if (it.schema.$ref && !$refKeywords) {
          out += " " + it.RULES.all.$ref.code(it, "$ref") + " "
          if ($breakOnError) {
            out += " } if (errors === "
            if ($top) {
              out += "0"
            } else {
              out += "errs_" + $lvl
            }
            out += ") { "
            $closingBraces2 += "}"
          }
        } else {
          var arr2 = it.RULES
          if (arr2) {
            var $rulesGroup,
              i2 = -1,
              l2 = arr2.length - 1
            while (i2 < l2) {
              $rulesGroup = arr2[(i2 += 1)]
              if ($shouldUseGroup($rulesGroup)) {
                if ($rulesGroup.type) {
                  out +=
                    " if (" +
                    it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) +
                    ") { "
                }
                if (it.opts.useDefaults) {
                  if ($rulesGroup.type == "object" && it.schema.properties) {
                    var $schema = it.schema.properties,
                      $schemaKeys = Object.keys($schema)
                    var arr3 = $schemaKeys
                    if (arr3) {
                      var $propertyKey,
                        i3 = -1,
                        l3 = arr3.length - 1
                      while (i3 < l3) {
                        $propertyKey = arr3[(i3 += 1)]
                        var $sch = $schema[$propertyKey]
                        if ($sch.default !== undefined) {
                          var $passData = $data + it.util.getProperty($propertyKey)
                          if (it.compositeRule) {
                            if (it.opts.strictDefaults) {
                              var $defaultMsg = "default is ignored for: " + $passData
                              if (it.opts.strictDefaults === "log") it.logger.warn($defaultMsg)
                              else throw new Error($defaultMsg)
                            }
                          } else {
                            out += " if (" + $passData + " === undefined "
                            if (it.opts.useDefaults == "empty") {
                              out += " || " + $passData + " === null || " + $passData + " === '' "
                            }
                            out += " ) " + $passData + " = "
                            if (it.opts.useDefaults == "shared") {
                              out += " " + it.useDefault($sch.default) + " "
                            } else {
                              out += " " + JSON.stringify($sch.default) + " "
                            }
                            out += "; "
                          }
                        }
                      }
                    }
                  } else if ($rulesGroup.type == "array" && Array.isArray(it.schema.items)) {
                    var arr4 = it.schema.items
                    if (arr4) {
                      var $sch,
                        $i = -1,
                        l4 = arr4.length - 1
                      while ($i < l4) {
                        $sch = arr4[($i += 1)]
                        if ($sch.default !== undefined) {
                          var $passData = $data + "[" + $i + "]"
                          if (it.compositeRule) {
                            if (it.opts.strictDefaults) {
                              var $defaultMsg = "default is ignored for: " + $passData
                              if (it.opts.strictDefaults === "log") it.logger.warn($defaultMsg)
                              else throw new Error($defaultMsg)
                            }
                          } else {
                            out += " if (" + $passData + " === undefined "
                            if (it.opts.useDefaults == "empty") {
                              out += " || " + $passData + " === null || " + $passData + " === '' "
                            }
                            out += " ) " + $passData + " = "
                            if (it.opts.useDefaults == "shared") {
                              out += " " + it.useDefault($sch.default) + " "
                            } else {
                              out += " " + JSON.stringify($sch.default) + " "
                            }
                            out += "; "
                          }
                        }
                      }
                    }
                  }
                }
                var arr5 = $rulesGroup.rules
                if (arr5) {
                  var $rule,
                    i5 = -1,
                    l5 = arr5.length - 1
                  while (i5 < l5) {
                    $rule = arr5[(i5 += 1)]
                    if ($shouldUseRule($rule)) {
                      var $code = $rule.code(it, $rule.keyword, $rulesGroup.type)
                      if ($code) {
                        out += " " + $code + " "
                        if ($breakOnError) {
                          $closingBraces1 += "}"
                        }
                      }
                    }
                  }
                }
                if ($breakOnError) {
                  out += " " + $closingBraces1 + " "
                  $closingBraces1 = ""
                }
                if ($rulesGroup.type) {
                  out += " } "
                  if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                    out += " else { "
                    var $schemaPath = it.schemaPath + ".type",
                      $errSchemaPath = it.errSchemaPath + "/type"
                    var $$outStack = $$outStack || []
                    $$outStack.push(out)
                    out = "" /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out +=
                        " { keyword: '" +
                        ($errorKeyword || "type") +
                        "' , dataPath: (dataPath || '') + " +
                        it.errorPath +
                        " , schemaPath: " +
                        it.util.toQuotedString($errSchemaPath) +
                        " , params: { type: '"
                      if ($typeIsArray) {
                        out += "" + $typeSchema.join(",")
                      } else {
                        out += "" + $typeSchema
                      }
                      out += "' } "
                      if (it.opts.messages !== false) {
                        out += " , message: 'should be "
                        if ($typeIsArray) {
                          out += "" + $typeSchema.join(",")
                        } else {
                          out += "" + $typeSchema
                        }
                        out += "' "
                      }
                      if (it.opts.verbose) {
                        out +=
                          " , schema: validate.schema" +
                          $schemaPath +
                          " , parentSchema: validate.schema" +
                          it.schemaPath +
                          " , data: " +
                          $data +
                          " "
                      }
                      out += " } "
                    } else {
                      out += " {} "
                    }
                    var __err = out
                    out = $$outStack.pop()
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += " throw new ValidationError([" + __err + "]); "
                      } else {
                        out += " validate.errors = [" + __err + "]; return false; "
                      }
                    } else {
                      out +=
                        " var err = " +
                        __err +
                        ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
                    }
                    out += " } "
                  }
                }
                if ($breakOnError) {
                  out += " if (errors === "
                  if ($top) {
                    out += "0"
                  } else {
                    out += "errs_" + $lvl
                  }
                  out += ") { "
                  $closingBraces2 += "}"
                }
              }
            }
          }
        }
        if ($breakOnError) {
          out += " " + $closingBraces2 + " "
        }
        if ($top) {
          if ($async) {
            out += " if (errors === 0) return data;           "
            out += " else throw new ValidationError(vErrors); "
          } else {
            out += " validate.errors = vErrors; "
            out += " return errors === 0;       "
          }
          out += " }; return validate;"
        } else {
          out += " var " + $valid + " = errors === errs_" + $lvl + ";"
        }

        function $shouldUseGroup($rulesGroup) {
          var rules = $rulesGroup.rules
          for (var i = 0; i < rules.length; i++) if ($shouldUseRule(rules[i])) return true
        }

        function $shouldUseRule($rule) {
          return (
            it.schema[$rule.keyword] !== undefined ||
            ($rule.implements && $ruleImplementsSomeKeyword($rule))
          )
        }

        function $ruleImplementsSomeKeyword($rule) {
          var impl = $rule.implements
          for (var i = 0; i < impl.length; i++) if (it.schema[impl[i]] !== undefined) return true
        }
        return out
      }

      /***/
    },

    /***/ 53297: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i
      var customRuleCode = __nccwpck_require__(5912)
      var definitionSchema = __nccwpck_require__(10458)

      module.exports = {
        add: addKeyword,
        get: getKeyword,
        remove: removeKeyword,
        validate: validateKeyword
      }

      /**
       * Define custom keyword
       * @this  Ajv
       * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
       * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
       * @return {Ajv} this for method chaining
       */
      function addKeyword(keyword, definition) {
        /* jshint validthis: true */
        /* eslint no-shadow: 0 */
        var RULES = this.RULES
        if (RULES.keywords[keyword]) throw new Error("Keyword " + keyword + " is already defined")

        if (!IDENTIFIER.test(keyword))
          throw new Error("Keyword " + keyword + " is not a valid identifier")

        if (definition) {
          this.validateKeyword(definition, true)

          var dataType = definition.type
          if (Array.isArray(dataType)) {
            for (var i = 0; i < dataType.length; i++) _addRule(keyword, dataType[i], definition)
          } else {
            _addRule(keyword, dataType, definition)
          }

          var metaSchema = definition.metaSchema
          if (metaSchema) {
            if (definition.$data && this._opts.$data) {
              metaSchema = {
                anyOf: [
                  metaSchema,
                  {
                    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
                  }
                ]
              }
            }
            definition.validateSchema = this.compile(metaSchema, true)
          }
        }

        RULES.keywords[keyword] = RULES.all[keyword] = true

        function _addRule(keyword, dataType, definition) {
          var ruleGroup
          for (var i = 0; i < RULES.length; i++) {
            var rg = RULES[i]
            if (rg.type == dataType) {
              ruleGroup = rg
              break
            }
          }

          if (!ruleGroup) {
            ruleGroup = { type: dataType, rules: [] }
            RULES.push(ruleGroup)
          }

          var rule = {
            keyword: keyword,
            definition: definition,
            custom: true,
            code: customRuleCode,
            implements: definition.implements
          }
          ruleGroup.rules.push(rule)
          RULES.custom[keyword] = rule
        }

        return this
      }

      /**
       * Get keyword
       * @this  Ajv
       * @param {String} keyword pre-defined or custom keyword.
       * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
       */
      function getKeyword(keyword) {
        /* jshint validthis: true */
        var rule = this.RULES.custom[keyword]
        return rule ? rule.definition : this.RULES.keywords[keyword] || false
      }

      /**
       * Remove keyword
       * @this  Ajv
       * @param {String} keyword pre-defined or custom keyword.
       * @return {Ajv} this for method chaining
       */
      function removeKeyword(keyword) {
        /* jshint validthis: true */
        var RULES = this.RULES
        delete RULES.keywords[keyword]
        delete RULES.all[keyword]
        delete RULES.custom[keyword]
        for (var i = 0; i < RULES.length; i++) {
          var rules = RULES[i].rules
          for (var j = 0; j < rules.length; j++) {
            if (rules[j].keyword == keyword) {
              rules.splice(j, 1)
              break
            }
          }
        }
        return this
      }

      /**
       * Validate keyword definition
       * @this  Ajv
       * @param {Object} definition keyword definition object.
       * @param {Boolean} throwError true to throw exception if definition is invalid
       * @return {boolean} validation result
       */
      function validateKeyword(definition, throwError) {
        validateKeyword.errors = null
        var v = (this._validateKeyword =
          this._validateKeyword || this.compile(definitionSchema, true))

        if (v(definition)) return true
        validateKeyword.errors = v.errors
        if (throwError)
          throw new Error("custom keyword definition is invalid: " + this.errorsText(v.errors))
        else return false
      }

      /***/
    },

    /***/ 52068: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      /* module decorator */ module = __nccwpck_require__.nmd(module)

      const wrapAnsi16 =
        (fn, offset) =>
        (...args) => {
          const code = fn(...args)
          return `\u001B[${code + offset}m`
        }

      const wrapAnsi256 =
        (fn, offset) =>
        (...args) => {
          const code = fn(...args)
          return `\u001B[${38 + offset};5;${code}m`
        }

      const wrapAnsi16m =
        (fn, offset) =>
        (...args) => {
          const rgb = fn(...args)
          return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`
        }

      const ansi2ansi = (n) => n
      const rgb2rgb = (r, g, b) => [r, g, b]

      const setLazyProperty = (object, property, get) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get()

            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            })

            return value
          },
          enumerable: true,
          configurable: true
        })
      }

      /** @type {typeof import('color-convert')} */
      let colorConvert
      const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        if (colorConvert === undefined) {
          colorConvert = __nccwpck_require__(86931)
        }

        const offset = isBackground ? 10 : 0
        const styles = {}

        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace
          if (sourceSpace === targetSpace) {
            styles[name] = wrap(identity, offset)
          } else if (typeof suite === "object") {
            styles[name] = wrap(suite[targetSpace], offset)
          }
        }

        return styles
      }

      function assembleStyles() {
        const codes = new Map()
        const styles = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],

            // Bright color
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],

            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        }

        // Alias bright black as gray (and grey)
        styles.color.gray = styles.color.blackBright
        styles.bgColor.bgGray = styles.bgColor.bgBlackBright
        styles.color.grey = styles.color.blackBright
        styles.bgColor.bgGrey = styles.bgColor.bgBlackBright

        for (const [groupName, group] of Object.entries(styles)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles[styleName] = {
              open: `\u001B[${style[0]}m`,
              close: `\u001B[${style[1]}m`
            }

            group[styleName] = styles[styleName]

            codes.set(style[0], style[1])
          }

          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          })
        }

        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        })

        styles.color.close = "\u001B[39m"
        styles.bgColor.close = "\u001B[49m"

        setLazyProperty(styles.color, "ansi", () =>
          makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false)
        )
        setLazyProperty(styles.color, "ansi256", () =>
          makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false)
        )
        setLazyProperty(styles.color, "ansi16m", () =>
          makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false)
        )
        setLazyProperty(styles.bgColor, "ansi", () =>
          makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true)
        )
        setLazyProperty(styles.bgColor, "ansi256", () =>
          makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true)
        )
        setLazyProperty(styles.bgColor, "ansi16m", () =>
          makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true)
        )

        return styles
      }

      // Make the export immutable
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      })

      /***/
    },

    /***/ 59482: /***/ (module) => {
      const flagSymbol = Symbol("arg flag")

      function arg(
        opts,
        { argv = process.argv.slice(2), permissive = false, stopAtPositional = false } = {}
      ) {
        if (!opts) {
          throw new Error("Argument specification object is required")
        }

        const result = { _: [] }

        const aliases = {}
        const handlers = {}

        for (const key of Object.keys(opts)) {
          if (!key) {
            throw new TypeError("Argument key cannot be an empty string")
          }

          if (key[0] !== "-") {
            throw new TypeError(`Argument key must start with '-' but found: '${key}'`)
          }

          if (key.length === 1) {
            throw new TypeError(
              `Argument key must have a name; singular '-' keys are not allowed: ${key}`
            )
          }

          if (typeof opts[key] === "string") {
            aliases[key] = opts[key]
            continue
          }

          let type = opts[key]
          let isFlag = false

          if (Array.isArray(type) && type.length === 1 && typeof type[0] === "function") {
            const [fn] = type
            type = (value, name, prev = []) => {
              prev.push(fn(value, name, prev[prev.length - 1]))
              return prev
            }
            isFlag = fn === Boolean || fn[flagSymbol] === true
          } else if (typeof type === "function") {
            isFlag = type === Boolean || type[flagSymbol] === true
          } else {
            throw new TypeError(`Type missing or not a function or valid array type: ${key}`)
          }

          if (key[1] !== "-" && key.length > 2) {
            throw new TypeError(
              `Short argument keys (with a single hyphen) must have only one character: ${key}`
            )
          }

          handlers[key] = [type, isFlag]
        }

        for (let i = 0, len = argv.length; i < len; i++) {
          const wholeArg = argv[i]

          if (stopAtPositional && result._.length > 0) {
            result._ = result._.concat(argv.slice(i))
            break
          }

          if (wholeArg === "--") {
            result._ = result._.concat(argv.slice(i + 1))
            break
          }

          if (wholeArg.length > 1 && wholeArg[0] === "-") {
            /* eslint-disable operator-linebreak */
            const separatedArguments =
              wholeArg[1] === "-" || wholeArg.length === 2
                ? [wholeArg]
                : wholeArg
                    .slice(1)
                    .split("")
                    .map((a) => `-${a}`)
            /* eslint-enable operator-linebreak */

            for (let j = 0; j < separatedArguments.length; j++) {
              const arg = separatedArguments[j]
              const [originalArgName, argStr] =
                arg[1] === "-" ? arg.split(/=(.*)/, 2) : [arg, undefined]

              let argName = originalArgName
              while (argName in aliases) {
                argName = aliases[argName]
              }

              if (!(argName in handlers)) {
                if (permissive) {
                  result._.push(arg)
                  continue
                } else {
                  const err = new Error(`Unknown or unexpected option: ${originalArgName}`)
                  err.code = "ARG_UNKNOWN_OPTION"
                  throw err
                }
              }

              const [type, isFlag] = handlers[argName]

              if (!isFlag && j + 1 < separatedArguments.length) {
                throw new TypeError(
                  `Option requires argument (but was followed by another short argument): ${originalArgName}`
                )
              }

              if (isFlag) {
                result[argName] = type(true, argName, result[argName])
              } else if (argStr === undefined) {
                if (
                  argv.length < i + 2 ||
                  (argv[i + 1].length > 1 &&
                    argv[i + 1][0] === "-" &&
                    !(
                      argv[i + 1].match(/^-?\d*(\.(?=\d))?\d*$/) &&
                      (type === Number ||
                        // eslint-disable-next-line no-undef
                        (typeof BigInt !== "undefined" && type === BigInt))
                    ))
                ) {
                  const extended = originalArgName === argName ? "" : ` (alias for ${argName})`
                  throw new Error(`Option requires argument: ${originalArgName}${extended}`)
                }

                result[argName] = type(argv[i + 1], argName, result[argName])
                ++i
              } else {
                result[argName] = type(argStr, argName, result[argName])
              }
            }
          } else {
            result._.push(wholeArg)
          }
        }

        return result
      }

      arg.flag = (fn) => {
        fn[flagSymbol] = true
        return fn
      }

      // Utility types
      arg.COUNT = arg.flag((v, name, existingCount) => (existingCount || 0) + 1)

      module.exports = arg

      /***/
    },

    /***/ 28912: /***/ (module) => {
      "use strict"

      module.exports = function (val) {
        return Array.isArray(val) ? val : [val]
      }

      /***/
    },

    /***/ 83682: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var register = __nccwpck_require__(44670)
      var addHook = __nccwpck_require__(5549)
      var removeHook = __nccwpck_require__(6819)

      // bind with array of arguments: https://stackoverflow.com/a/21792913
      var bind = Function.bind
      var bindable = bind.bind(bind)

      function bindApi(hook, state, name) {
        var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state])
        hook.api = { remove: removeHookRef }
        hook.remove = removeHookRef
        ;["before", "error", "after", "wrap"].forEach(function (kind) {
          var args = name ? [state, kind, name] : [state, kind]
          hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args)
        })
      }

      function HookSingular() {
        var singularHookName = "h"
        var singularHookState = {
          registry: {}
        }
        var singularHook = register.bind(null, singularHookState, singularHookName)
        bindApi(singularHook, singularHookState, singularHookName)
        return singularHook
      }

      function HookCollection() {
        var state = {
          registry: {}
        }

        var hook = register.bind(null, state)
        bindApi(hook, state)

        return hook
      }

      var collectionHookDeprecationMessageDisplayed = false
      function Hook() {
        if (!collectionHookDeprecationMessageDisplayed) {
          console.warn(
            '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
          )
          collectionHookDeprecationMessageDisplayed = true
        }
        return HookCollection()
      }

      Hook.Singular = HookSingular.bind()
      Hook.Collection = HookCollection.bind()

      module.exports = Hook
      // expose constructors as a named property for TypeScript
      module.exports.Hook = Hook
      module.exports.Singular = Hook.Singular
      module.exports.Collection = Hook.Collection

      /***/
    },

    /***/ 5549: /***/ (module) => {
      module.exports = addHook

      function addHook(state, kind, name, hook) {
        var orig = hook
        if (!state.registry[name]) {
          state.registry[name] = []
        }

        if (kind === "before") {
          hook = function (method, options) {
            return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options))
          }
        }

        if (kind === "after") {
          hook = function (method, options) {
            var result
            return Promise.resolve()
              .then(method.bind(null, options))
              .then(function (result_) {
                result = result_
                return orig(result, options)
              })
              .then(function () {
                return result
              })
          }
        }

        if (kind === "error") {
          hook = function (method, options) {
            return Promise.resolve()
              .then(method.bind(null, options))
              .catch(function (error) {
                return orig(error, options)
              })
          }
        }

        state.registry[name].push({
          hook: hook,
          orig: orig
        })
      }

      /***/
    },

    /***/ 44670: /***/ (module) => {
      module.exports = register

      function register(state, name, method, options) {
        if (typeof method !== "function") {
          throw new Error("method for before hook must be a function")
        }

        if (!options) {
          options = {}
        }

        if (Array.isArray(name)) {
          return name.reverse().reduce(function (callback, name) {
            return register.bind(null, state, name, callback, options)
          }, method)()
        }

        return Promise.resolve().then(function () {
          if (!state.registry[name]) {
            return method(options)
          }

          return state.registry[name].reduce(function (method, registered) {
            return registered.hook.bind(null, method, options)
          }, method)()
        })
      }

      /***/
    },

    /***/ 6819: /***/ (module) => {
      module.exports = removeHook

      function removeHook(state, name, method) {
        if (!state.registry[name]) {
          return
        }

        var index = state.registry[name]
          .map(function (registered) {
            return registered.orig
          })
          .indexOf(method)

        if (index === -1) {
          return
        }

        state.registry[name].splice(index, 1)
      }

      /***/
    },

    /***/ 50610: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const stringify = __nccwpck_require__(38750)
      const compile = __nccwpck_require__(79434)
      const expand = __nccwpck_require__(35873)
      const parse = __nccwpck_require__(96477)

      /**
       * Expand the given pattern or create a regex-compatible string.
       *
       * ```js
       * const braces = require('braces');
       * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
       * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
       * ```
       * @param {String} `str`
       * @param {Object} `options`
       * @return {String}
       * @api public
       */

      const braces = (input, options = {}) => {
        let output = []

        if (Array.isArray(input)) {
          for (let pattern of input) {
            let result = braces.create(pattern, options)
            if (Array.isArray(result)) {
              output.push(...result)
            } else {
              output.push(result)
            }
          }
        } else {
          output = [].concat(braces.create(input, options))
        }

        if (options && options.expand === true && options.nodupes === true) {
          output = [...new Set(output)]
        }
        return output
      }

      /**
       * Parse the given `str` with the given `options`.
       *
       * ```js
       * // braces.parse(pattern, [, options]);
       * const ast = braces.parse('a/{b,c}/d');
       * console.log(ast);
       * ```
       * @param {String} pattern Brace pattern to parse
       * @param {Object} options
       * @return {Object} Returns an AST
       * @api public
       */

      braces.parse = (input, options = {}) => parse(input, options)

      /**
       * Creates a braces string from an AST, or an AST node.
       *
       * ```js
       * const braces = require('braces');
       * let ast = braces.parse('foo/{a,b}/bar');
       * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
       * ```
       * @param {String} `input` Brace pattern or AST.
       * @param {Object} `options`
       * @return {Array} Returns an array of expanded values.
       * @api public
       */

      braces.stringify = (input, options = {}) => {
        if (typeof input === "string") {
          return stringify(braces.parse(input, options), options)
        }
        return stringify(input, options)
      }

      /**
       * Compiles a brace pattern into a regex-compatible, optimized string.
       * This method is called by the main [braces](#braces) function by default.
       *
       * ```js
       * const braces = require('braces');
       * console.log(braces.compile('a/{b,c}/d'));
       * //=> ['a/(b|c)/d']
       * ```
       * @param {String} `input` Brace pattern or AST.
       * @param {Object} `options`
       * @return {Array} Returns an array of expanded values.
       * @api public
       */

      braces.compile = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options)
        }
        return compile(input, options)
      }

      /**
       * Expands a brace pattern into an array. This method is called by the
       * main [braces](#braces) function when `options.expand` is true. Before
       * using this method it's recommended that you read the [performance notes](#performance))
       * and advantages of using [.compile](#compile) instead.
       *
       * ```js
       * const braces = require('braces');
       * console.log(braces.expand('a/{b,c}/d'));
       * //=> ['a/b/d', 'a/c/d'];
       * ```
       * @param {String} `pattern` Brace pattern
       * @param {Object} `options`
       * @return {Array} Returns an array of expanded values.
       * @api public
       */

      braces.expand = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options)
        }

        let result = expand(input, options)

        // filter out empty strings if specified
        if (options.noempty === true) {
          result = result.filter(Boolean)
        }

        // filter out duplicates if specified
        if (options.nodupes === true) {
          result = [...new Set(result)]
        }

        return result
      }

      /**
       * Processes a brace pattern and returns either an expanded array
       * (if `options.expand` is true), a highly optimized regex-compatible string.
       * This method is called by the main [braces](#braces) function.
       *
       * ```js
       * const braces = require('braces');
       * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
       * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
       * ```
       * @param {String} `pattern` Brace pattern
       * @param {Object} `options`
       * @return {Array} Returns an array of expanded values.
       * @api public
       */

      braces.create = (input, options = {}) => {
        if (input === "" || input.length < 3) {
          return [input]
        }

        return options.expand !== true
          ? braces.compile(input, options)
          : braces.expand(input, options)
      }

      /**
       * Expose "braces"
       */

      module.exports = braces

      /***/
    },

    /***/ 79434: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const fill = __nccwpck_require__(6330)
      const utils = __nccwpck_require__(45207)

      const compile = (ast, options = {}) => {
        let walk = (node, parent = {}) => {
          let invalidBlock = utils.isInvalidBrace(parent)
          let invalidNode = node.invalid === true && options.escapeInvalid === true
          let invalid = invalidBlock === true || invalidNode === true
          let prefix = options.escapeInvalid === true ? "\\" : ""
          let output = ""

          if (node.isOpen === true) {
            return prefix + node.value
          }
          if (node.isClose === true) {
            return prefix + node.value
          }

          if (node.type === "open") {
            return invalid ? prefix + node.value : "("
          }

          if (node.type === "close") {
            return invalid ? prefix + node.value : ")"
          }

          if (node.type === "comma") {
            return node.prev.type === "comma" ? "" : invalid ? node.value : "|"
          }

          if (node.value) {
            return node.value
          }

          if (node.nodes && node.ranges > 0) {
            let args = utils.reduce(node.nodes)
            let range = fill(...args, { ...options, wrap: false, toRegex: true })

            if (range.length !== 0) {
              return args.length > 1 && range.length > 1 ? `(${range})` : range
            }
          }

          if (node.nodes) {
            for (let child of node.nodes) {
              output += walk(child, node)
            }
          }
          return output
        }

        return walk(ast)
      }

      module.exports = compile

      /***/
    },

    /***/ 18774: /***/ (module) => {
      "use strict"

      module.exports = {
        MAX_LENGTH: 1024 * 64,

        // Digits
        CHAR_0: "0" /* 0 */,
        CHAR_9: "9" /* 9 */,

        // Alphabet chars.
        CHAR_UPPERCASE_A: "A" /* A */,
        CHAR_LOWERCASE_A: "a" /* a */,
        CHAR_UPPERCASE_Z: "Z" /* Z */,
        CHAR_LOWERCASE_Z: "z" /* z */,

        CHAR_LEFT_PARENTHESES: "(" /* ( */,
        CHAR_RIGHT_PARENTHESES: ")" /* ) */,

        CHAR_ASTERISK: "*" /* * */,

        // Non-alphabetic chars.
        CHAR_AMPERSAND: "&" /* & */,
        CHAR_AT: "@" /* @ */,
        CHAR_BACKSLASH: "\\" /* \ */,
        CHAR_BACKTICK: "`" /* ` */,
        CHAR_CARRIAGE_RETURN: "\r" /* \r */,
        CHAR_CIRCUMFLEX_ACCENT: "^" /* ^ */,
        CHAR_COLON: ":" /* : */,
        CHAR_COMMA: "," /* , */,
        CHAR_DOLLAR: "$" /* . */,
        CHAR_DOT: "." /* . */,
        CHAR_DOUBLE_QUOTE: '"' /* " */,
        CHAR_EQUAL: "=" /* = */,
        CHAR_EXCLAMATION_MARK: "!" /* ! */,
        CHAR_FORM_FEED: "\f" /* \f */,
        CHAR_FORWARD_SLASH: "/" /* / */,
        CHAR_HASH: "#" /* # */,
        CHAR_HYPHEN_MINUS: "-" /* - */,
        CHAR_LEFT_ANGLE_BRACKET: "<" /* < */,
        CHAR_LEFT_CURLY_BRACE: "{" /* { */,
        CHAR_LEFT_SQUARE_BRACKET: "[" /* [ */,
        CHAR_LINE_FEED: "\n" /* \n */,
        CHAR_NO_BREAK_SPACE: "\u00A0" /* \u00A0 */,
        CHAR_PERCENT: "%" /* % */,
        CHAR_PLUS: "+" /* + */,
        CHAR_QUESTION_MARK: "?" /* ? */,
        CHAR_RIGHT_ANGLE_BRACKET: ">" /* > */,
        CHAR_RIGHT_CURLY_BRACE: "}" /* } */,
        CHAR_RIGHT_SQUARE_BRACKET: "]" /* ] */,
        CHAR_SEMICOLON: ";" /* ; */,
        CHAR_SINGLE_QUOTE: "'" /* ' */,
        CHAR_SPACE: " " /*   */,
        CHAR_TAB: "\t" /* \t */,
        CHAR_UNDERSCORE: "_" /* _ */,
        CHAR_VERTICAL_LINE: "|" /* | */,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF" /* \uFEFF */
      }

      /***/
    },

    /***/ 35873: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const fill = __nccwpck_require__(6330)
      const stringify = __nccwpck_require__(38750)
      const utils = __nccwpck_require__(45207)

      const append = (queue = "", stash = "", enclose = false) => {
        let result = []

        queue = [].concat(queue)
        stash = [].concat(stash)

        if (!stash.length) return queue
        if (!queue.length) {
          return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash
        }

        for (let item of queue) {
          if (Array.isArray(item)) {
            for (let value of item) {
              result.push(append(value, stash, enclose))
            }
          } else {
            for (let ele of stash) {
              if (enclose === true && typeof ele === "string") ele = `{${ele}}`
              result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele)
            }
          }
        }
        return utils.flatten(result)
      }

      const expand = (ast, options = {}) => {
        let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit

        let walk = (node, parent = {}) => {
          node.queue = []

          let p = parent
          let q = parent.queue

          while (p.type !== "brace" && p.type !== "root" && p.parent) {
            p = p.parent
            q = p.queue
          }

          if (node.invalid || node.dollar) {
            q.push(append(q.pop(), stringify(node, options)))
            return
          }

          if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
            q.push(append(q.pop(), ["{}"]))
            return
          }

          if (node.nodes && node.ranges > 0) {
            let args = utils.reduce(node.nodes)

            if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
              throw new RangeError(
                "expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit."
              )
            }

            let range = fill(...args, options)
            if (range.length === 0) {
              range = stringify(node, options)
            }

            q.push(append(q.pop(), range))
            node.nodes = []
            return
          }

          let enclose = utils.encloseBrace(node)
          let queue = node.queue
          let block = node

          while (block.type !== "brace" && block.type !== "root" && block.parent) {
            block = block.parent
            queue = block.queue
          }

          for (let i = 0; i < node.nodes.length; i++) {
            let child = node.nodes[i]

            if (child.type === "comma" && node.type === "brace") {
              if (i === 1) queue.push("")
              queue.push("")
              continue
            }

            if (child.type === "close") {
              q.push(append(q.pop(), queue, enclose))
              continue
            }

            if (child.value && child.type !== "open") {
              queue.push(append(queue.pop(), child.value))
              continue
            }

            if (child.nodes) {
              walk(child, node)
            }
          }

          return queue
        }

        return utils.flatten(walk(ast))
      }

      module.exports = expand

      /***/
    },

    /***/ 96477: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const stringify = __nccwpck_require__(38750)

      /**
       * Constants
       */

      const {
        MAX_LENGTH,
        CHAR_BACKSLASH /* \ */,
        CHAR_BACKTICK /* ` */,
        CHAR_COMMA /* , */,
        CHAR_DOT /* . */,
        CHAR_LEFT_PARENTHESES /* ( */,
        CHAR_RIGHT_PARENTHESES /* ) */,
        CHAR_LEFT_CURLY_BRACE /* { */,
        CHAR_RIGHT_CURLY_BRACE /* } */,
        CHAR_LEFT_SQUARE_BRACKET /* [ */,
        CHAR_RIGHT_SQUARE_BRACKET /* ] */,
        CHAR_DOUBLE_QUOTE /* " */,
        CHAR_SINGLE_QUOTE /* ' */,
        CHAR_NO_BREAK_SPACE,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE
      } = __nccwpck_require__(18774)

      /**
       * parse
       */

      const parse = (input, options = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string")
        }

        let opts = options || {}
        let max =
          typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH
        if (input.length > max) {
          throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`)
        }

        let ast = { type: "root", input, nodes: [] }
        let stack = [ast]
        let block = ast
        let prev = ast
        let brackets = 0
        let length = input.length
        let index = 0
        let depth = 0
        let value
        let memo = {}

        /**
         * Helpers
         */

        const advance = () => input[index++]
        const push = (node) => {
          if (node.type === "text" && prev.type === "dot") {
            prev.type = "text"
          }

          if (prev && prev.type === "text" && node.type === "text") {
            prev.value += node.value
            return
          }

          block.nodes.push(node)
          node.parent = block
          node.prev = prev
          prev = node
          return node
        }

        push({ type: "bos" })

        while (index < length) {
          block = stack[stack.length - 1]
          value = advance()

          /**
           * Invalid chars
           */

          if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
            continue
          }

          /**
           * Escaped chars
           */

          if (value === CHAR_BACKSLASH) {
            push({ type: "text", value: (options.keepEscaping ? value : "") + advance() })
            continue
          }

          /**
           * Right square bracket (literal): ']'
           */

          if (value === CHAR_RIGHT_SQUARE_BRACKET) {
            push({ type: "text", value: "\\" + value })
            continue
          }

          /**
           * Left square bracket: '['
           */

          if (value === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++

            let closed = true
            let next

            while (index < length && (next = advance())) {
              value += next

              if (next === CHAR_LEFT_SQUARE_BRACKET) {
                brackets++
                continue
              }

              if (next === CHAR_BACKSLASH) {
                value += advance()
                continue
              }

              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                brackets--

                if (brackets === 0) {
                  break
                }
              }
            }

            push({ type: "text", value })
            continue
          }

          /**
           * Parentheses
           */

          if (value === CHAR_LEFT_PARENTHESES) {
            block = push({ type: "paren", nodes: [] })
            stack.push(block)
            push({ type: "text", value })
            continue
          }

          if (value === CHAR_RIGHT_PARENTHESES) {
            if (block.type !== "paren") {
              push({ type: "text", value })
              continue
            }
            block = stack.pop()
            push({ type: "text", value })
            block = stack[stack.length - 1]
            continue
          }

          /**
           * Quotes: '|"|`
           */

          if (
            value === CHAR_DOUBLE_QUOTE ||
            value === CHAR_SINGLE_QUOTE ||
            value === CHAR_BACKTICK
          ) {
            let open = value
            let next

            if (options.keepQuotes !== true) {
              value = ""
            }

            while (index < length && (next = advance())) {
              if (next === CHAR_BACKSLASH) {
                value += next + advance()
                continue
              }

              if (next === open) {
                if (options.keepQuotes === true) value += next
                break
              }

              value += next
            }

            push({ type: "text", value })
            continue
          }

          /**
           * Left curly brace: '{'
           */

          if (value === CHAR_LEFT_CURLY_BRACE) {
            depth++

            let dollar = (prev.value && prev.value.slice(-1) === "$") || block.dollar === true
            let brace = {
              type: "brace",
              open: true,
              close: false,
              dollar,
              depth,
              commas: 0,
              ranges: 0,
              nodes: []
            }

            block = push(brace)
            stack.push(block)
            push({ type: "open", value })
            continue
          }

          /**
           * Right curly brace: '}'
           */

          if (value === CHAR_RIGHT_CURLY_BRACE) {
            if (block.type !== "brace") {
              push({ type: "text", value })
              continue
            }

            let type = "close"
            block = stack.pop()
            block.close = true

            push({ type, value })
            depth--

            block = stack[stack.length - 1]
            continue
          }

          /**
           * Comma: ','
           */

          if (value === CHAR_COMMA && depth > 0) {
            if (block.ranges > 0) {
              block.ranges = 0
              let open = block.nodes.shift()
              block.nodes = [open, { type: "text", value: stringify(block) }]
            }

            push({ type: "comma", value })
            block.commas++
            continue
          }

          /**
           * Dot: '.'
           */

          if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
            let siblings = block.nodes

            if (depth === 0 || siblings.length === 0) {
              push({ type: "text", value })
              continue
            }

            if (prev.type === "dot") {
              block.range = []
              prev.value += value
              prev.type = "range"

              if (block.nodes.length !== 3 && block.nodes.length !== 5) {
                block.invalid = true
                block.ranges = 0
                prev.type = "text"
                continue
              }

              block.ranges++
              block.args = []
              continue
            }

            if (prev.type === "range") {
              siblings.pop()

              let before = siblings[siblings.length - 1]
              before.value += prev.value + value
              prev = before
              block.ranges--
              continue
            }

            push({ type: "dot", value })
            continue
          }

          /**
           * Text
           */

          push({ type: "text", value })
        }

        // Mark imbalanced braces and brackets as invalid
        do {
          block = stack.pop()

          if (block.type !== "root") {
            block.nodes.forEach((node) => {
              if (!node.nodes) {
                if (node.type === "open") node.isOpen = true
                if (node.type === "close") node.isClose = true
                if (!node.nodes) node.type = "text"
                node.invalid = true
              }
            })

            // get the location of the block on parent.nodes (block's siblings)
            let parent = stack[stack.length - 1]
            let index = parent.nodes.indexOf(block)
            // replace the (invalid) block with it's nodes
            parent.nodes.splice(index, 1, ...block.nodes)
          }
        } while (stack.length > 0)

        push({ type: "eos" })
        return ast
      }

      module.exports = parse

      /***/
    },

    /***/ 38750: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const utils = __nccwpck_require__(45207)

      module.exports = (ast, options = {}) => {
        let stringify = (node, parent = {}) => {
          let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent)
          let invalidNode = node.invalid === true && options.escapeInvalid === true
          let output = ""

          if (node.value) {
            if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
              return "\\" + node.value
            }
            return node.value
          }

          if (node.value) {
            return node.value
          }

          if (node.nodes) {
            for (let child of node.nodes) {
              output += stringify(child)
            }
          }
          return output
        }

        return stringify(ast)
      }

      /***/
    },

    /***/ 45207: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      exports.isInteger = (num) => {
        if (typeof num === "number") {
          return Number.isInteger(num)
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isInteger(Number(num))
        }
        return false
      }

      /**
       * Find a node of the given type
       */

      exports.find = (node, type) => node.nodes.find((node) => node.type === type)

      /**
       * Find a node of the given type
       */

      exports.exceedsLimit = (min, max, step = 1, limit) => {
        if (limit === false) return false
        if (!exports.isInteger(min) || !exports.isInteger(max)) return false
        return (Number(max) - Number(min)) / Number(step) >= limit
      }

      /**
       * Escape the given node with '\\' before node.value
       */

      exports.escapeNode = (block, n = 0, type) => {
        let node = block.nodes[n]
        if (!node) return

        if ((type && node.type === type) || node.type === "open" || node.type === "close") {
          if (node.escaped !== true) {
            node.value = "\\" + node.value
            node.escaped = true
          }
        }
      }

      /**
       * Returns true if the given brace node should be enclosed in literal braces
       */

      exports.encloseBrace = (node) => {
        if (node.type !== "brace") return false
        if ((node.commas >> (0 + node.ranges)) >> 0 === 0) {
          node.invalid = true
          return true
        }
        return false
      }

      /**
       * Returns true if a brace node is invalid.
       */

      exports.isInvalidBrace = (block) => {
        if (block.type !== "brace") return false
        if (block.invalid === true || block.dollar) return true
        if ((block.commas >> (0 + block.ranges)) >> 0 === 0) {
          block.invalid = true
          return true
        }
        if (block.open !== true || block.close !== true) {
          block.invalid = true
          return true
        }
        return false
      }

      /**
       * Returns true if a node is an open or close node
       */

      exports.isOpenOrClose = (node) => {
        if (node.type === "open" || node.type === "close") {
          return true
        }
        return node.open === true || node.close === true
      }

      /**
       * Reduce an array of text nodes.
       */

      exports.reduce = (nodes) =>
        nodes.reduce((acc, node) => {
          if (node.type === "text") acc.push(node.value)
          if (node.type === "range") node.type = "text"
          return acc
        }, [])

      /**
       * Flatten an array
       */

      exports.flatten = (...args) => {
        const result = []
        const flat = (arr) => {
          for (let i = 0; i < arr.length; i++) {
            let ele = arr[i]
            Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele)
          }
          return result
        }
        flat(args)
        return result
      }

      /***/
    },

    /***/ 5018: /***/ (module) => {
      "use strict"

      const callsites = () => {
        const _prepareStackTrace = Error.prepareStackTrace
        Error.prepareStackTrace = (_, stack) => stack
        const stack = new Error().stack.slice(1)
        Error.prepareStackTrace = _prepareStackTrace
        return stack
      }

      module.exports = callsites
      // TODO: Remove this for the next major release
      module.exports["default"] = callsites

      /***/
    },

    /***/ 99749: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.comment = exports.getMessageHeader = void 0
      const github_1 = __nccwpck_require__(49635)
      const getMessageHeader = (updateId) => {
        return `<!-- https://github.com/levibostian/cathy comment. id:${updateId} -->`
      }
      exports.getMessageHeader = getMessageHeader
      const comment = async (message, options) => {
        if (!options.updateID) options.updateID = "default"
        const messageHeader = (0, exports.getMessageHeader)(options.updateID)
        message = `${messageHeader}\n${message}`
        let githubCommentId
        if (options.updateExisting) {
          githubCommentId = await (0, github_1.findPreviousComment)(
            options.githubToken,
            options.githubRepo,
            options.githubIssue,
            messageHeader
          )
        }
        await (0, github_1.makeComment)(
          options.githubToken,
          options.githubRepo,
          options.githubIssue,
          message,
          githubCommentId
        )
        return {
          updatedPreviousComment: githubCommentId !== undefined
        }
      }
      exports.comment = comment
      //# sourceMappingURL=comment.js.map

      /***/
    },

    /***/ 49635: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.makeComment = exports.findPreviousComment = void 0
      const core_1 = __nccwpck_require__(76762)
      const plugin_paginate_rest_1 = __nccwpck_require__(64193)
      const MyOctokit = core_1.Octokit.plugin(plugin_paginate_rest_1.paginateRest)
      const findPreviousComment = async (githubToken, repoSlug, issueNumber, commentContents) => {
        const octokit = new MyOctokit({ auth: githubToken })
        for await (const response of octokit.paginate.iterator(
          `GET /repos/${repoSlug}/issues/${issueNumber}/comments`,
          { per_page: 100 }
        )) {
          const comments = response.data
          // get comment response: https://docs.github.com/en/rest/reference/issues#get-an-issue-comment
          for (const commentJson of comments) {
            const comment = commentJson.body
            const commentId = commentJson.id
            if (comment.startsWith(commentContents)) {
              return commentId
            }
          }
        }
        return undefined
      }
      exports.findPreviousComment = findPreviousComment
      const makeComment = async (githubToken, repoSlug, issueNumber, message, commentId) => {
        const octokit = new MyOctokit({ auth: githubToken })
        if (commentId) {
          await octokit.request(`PATCH /repos/${repoSlug}/issues/comments/${commentId}`, {
            body: message
          })
        } else {
          await octokit.request(`POST /repos/${repoSlug}/issues/${issueNumber}/comments`, {
            body: message
          })
        }
        return
      }
      exports.makeComment = makeComment
      //# sourceMappingURL=github.js.map

      /***/
    },

    /***/ 65378: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.speak = void 0
      const comment_1 = __nccwpck_require__(99749)
      /**
       * Comment on pull request
       * @param message The message of the comment
       * @param options Options
       * @return none
       */
      const speak = async (message, options) => {
        if (!message) return
        await (0, comment_1.comment)(message, options)
      }
      exports.speak = speak
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 78818: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const ansiStyles = __nccwpck_require__(52068)
      const { stdout: stdoutColor, stderr: stderrColor } = __nccwpck_require__(59318)
      const { stringReplaceAll, stringEncaseCRLFWithFirstIndex } = __nccwpck_require__(82415)

      const { isArray } = Array

      // `supportsColor.level` → `ansiStyles.color[name]` mapping
      const levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"]

      const styles = Object.create(null)

      const applyOptions = (object, options = {}) => {
        if (
          options.level &&
          !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)
        ) {
          throw new Error("The `level` option should be an integer from 0 to 3")
        }

        // Detect level if not set manually
        const colorLevel = stdoutColor ? stdoutColor.level : 0
        object.level = options.level === undefined ? colorLevel : options.level
      }

      class ChalkClass {
        constructor(options) {
          // eslint-disable-next-line no-constructor-return
          return chalkFactory(options)
        }
      }

      const chalkFactory = (options) => {
        const chalk = {}
        applyOptions(chalk, options)

        chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_)

        Object.setPrototypeOf(chalk, Chalk.prototype)
        Object.setPrototypeOf(chalk.template, chalk)

        chalk.template.constructor = () => {
          throw new Error(
            "`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead."
          )
        }

        chalk.template.Instance = ChalkClass

        return chalk.template
      }

      function Chalk(options) {
        return chalkFactory(options)
      }

      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles[styleName] = {
          get() {
            const builder = createBuilder(
              this,
              createStyler(style.open, style.close, this._styler),
              this._isEmpty
            )
            Object.defineProperty(this, styleName, { value: builder })
            return builder
          }
        }
      }

      styles.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true)
          Object.defineProperty(this, "visible", { value: builder })
          return builder
        }
      }

      const usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"]

      for (const model of usedModels) {
        styles[model] = {
          get() {
            const { level } = this
            return function (...arguments_) {
              const styler = createStyler(
                ansiStyles.color[levelMapping[level]][model](...arguments_),
                ansiStyles.color.close,
                this._styler
              )
              return createBuilder(this, styler, this._isEmpty)
            }
          }
        }
      }

      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1)
        styles[bgModel] = {
          get() {
            const { level } = this
            return function (...arguments_) {
              const styler = createStyler(
                ansiStyles.bgColor[levelMapping[level]][model](...arguments_),
                ansiStyles.bgColor.close,
                this._styler
              )
              return createBuilder(this, styler, this._isEmpty)
            }
          }
        }
      }

      const proto = Object.defineProperties(() => {}, {
        ...styles,
        level: {
          enumerable: true,
          get() {
            return this._generator.level
          },
          set(level) {
            this._generator.level = level
          }
        }
      })

      const createStyler = (open, close, parent) => {
        let openAll
        let closeAll
        if (parent === undefined) {
          openAll = open
          closeAll = close
        } else {
          openAll = parent.openAll + open
          closeAll = close + parent.closeAll
        }

        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        }
      }

      const createBuilder = (self, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
            // Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
            return applyStyle(builder, chalkTag(builder, ...arguments_))
          }

          // Single argument is hot path, implicit coercion is faster than anything
          // eslint-disable-next-line no-implicit-coercion
          return applyStyle(
            builder,
            arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" ")
          )
        }

        // We alter the prototype because we must return a function, but there is
        // no way to create a function with a different prototype
        Object.setPrototypeOf(builder, proto)

        builder._generator = self
        builder._styler = _styler
        builder._isEmpty = _isEmpty

        return builder
      }

      const applyStyle = (self, string) => {
        if (self.level <= 0 || !string) {
          return self._isEmpty ? "" : string
        }

        let styler = self._styler

        if (styler === undefined) {
          return string
        }

        const { openAll, closeAll } = styler
        if (string.indexOf("\u001B") !== -1) {
          while (styler !== undefined) {
            // Replace any instances already present with a re-opening code
            // otherwise only the part of the string until said closing code
            // will be colored, and the rest will simply be 'plain'.
            string = stringReplaceAll(string, styler.close, styler.open)

            styler = styler.parent
          }
        }

        // We can move both next actions out of loop, because remaining actions in loop won't have
        // any/visible effect on parts we add here. Close the styling before a linebreak and reopen
        // after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
        const lfIndex = string.indexOf("\n")
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex)
        }

        return openAll + string + closeAll
      }

      let template
      const chalkTag = (chalk, ...strings) => {
        const [firstString] = strings

        if (!isArray(firstString) || !isArray(firstString.raw)) {
          // If chalk() was called by itself or with a string,
          // return the string itself as a string.
          return strings.join(" ")
        }

        const arguments_ = strings.slice(1)
        const parts = [firstString.raw[0]]

        for (let i = 1; i < firstString.length; i++) {
          parts.push(
            String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"),
            String(firstString.raw[i])
          )
        }

        if (template === undefined) {
          template = __nccwpck_require__(20500)
        }

        return template(chalk, parts.join(""))
      }

      Object.defineProperties(Chalk.prototype, styles)

      const chalk = Chalk() // eslint-disable-line new-cap
      chalk.supportsColor = stdoutColor
      chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 }) // eslint-disable-line new-cap
      chalk.stderr.supportsColor = stderrColor

      module.exports = chalk

      /***/
    },

    /***/ 20500: /***/ (module) => {
      "use strict"

      const TEMPLATE_REGEX =
        /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi
      const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g
      const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/
      const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi

      const ESCAPES = new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "\t"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\u001B"],
        ["a", "\u0007"]
      ])

      function unescape(c) {
        const u = c[0] === "u"
        const bracket = c[1] === "{"

        if ((u && !bracket && c.length === 5) || (c[0] === "x" && c.length === 3)) {
          return String.fromCharCode(parseInt(c.slice(1), 16))
        }

        if (u && bracket) {
          return String.fromCodePoint(parseInt(c.slice(2, -1), 16))
        }

        return ESCAPES.get(c) || c
      }

      function parseArguments(name, arguments_) {
        const results = []
        const chunks = arguments_.trim().split(/\s*,\s*/g)
        let matches

        for (const chunk of chunks) {
          const number = Number(chunk)
          if (!Number.isNaN(number)) {
            results.push(number)
          } else if ((matches = chunk.match(STRING_REGEX))) {
            results.push(
              matches[2].replace(ESCAPE_REGEX, (m, escape, character) =>
                escape ? unescape(escape) : character
              )
            )
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`)
          }
        }

        return results
      }

      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0

        const results = []
        let matches

        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1]

          if (matches[2]) {
            const args = parseArguments(name, matches[2])
            results.push([name].concat(args))
          } else {
            results.push([name])
          }
        }

        return results
      }

      function buildStyle(chalk, styles) {
        const enabled = {}

        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1)
          }
        }

        let current = chalk
        for (const [styleName, styles] of Object.entries(enabled)) {
          if (!Array.isArray(styles)) {
            continue
          }

          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`)
          }

          current = styles.length > 0 ? current[styleName](...styles) : current[styleName]
        }

        return current
      }

      module.exports = (chalk, temporary) => {
        const styles = []
        const chunks = []
        let chunk = []

        // eslint-disable-next-line max-params
        temporary.replace(
          TEMPLATE_REGEX,
          (m, escapeCharacter, inverse, style, close, character) => {
            if (escapeCharacter) {
              chunk.push(unescape(escapeCharacter))
            } else if (style) {
              const string = chunk.join("")
              chunk = []
              chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string))
              styles.push({ inverse, styles: parseStyle(style) })
            } else if (close) {
              if (styles.length === 0) {
                throw new Error("Found extraneous } in Chalk template literal")
              }

              chunks.push(buildStyle(chalk, styles)(chunk.join("")))
              chunk = []
              styles.pop()
            } else {
              chunk.push(character)
            }
          }
        )

        chunks.push(chunk.join(""))

        if (styles.length > 0) {
          const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${
            styles.length === 1 ? "" : "s"
          } (\`}\`)`
          throw new Error(errMessage)
        }

        return chunks.join("")
      }

      /***/
    },

    /***/ 82415: /***/ (module) => {
      "use strict"

      const stringReplaceAll = (string, substring, replacer) => {
        let index = string.indexOf(substring)
        if (index === -1) {
          return string
        }

        const substringLength = substring.length
        let endIndex = 0
        let returnValue = ""
        do {
          returnValue += string.substr(endIndex, index - endIndex) + substring + replacer
          endIndex = index + substringLength
          index = string.indexOf(substring, endIndex)
        } while (index !== -1)

        returnValue += string.substr(endIndex)
        return returnValue
      }

      const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
        let endIndex = 0
        let returnValue = ""
        do {
          const gotCR = string[index - 1] === "\r"
          returnValue +=
            string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) +
            prefix +
            (gotCR ? "\r\n" : "\n") +
            postfix
          endIndex = index + 1
          index = string.indexOf("\n", endIndex)
        } while (index !== -1)

        returnValue += string.substr(endIndex)
        return returnValue
      }

      module.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      }

      /***/
    },

    /***/ 97391: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      /* MIT license */
      /* eslint-disable no-mixed-operators */
      const cssKeywords = __nccwpck_require__(78510)

      // NOTE: conversions should only return primitive values (i.e. arrays, or
      //       values that give correct `typeof` results).
      //       do not use box values types (i.e. Number(), String(), etc.)

      const reverseKeywords = {}
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key
      }

      const convert = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      }

      module.exports = convert

      // Hide .channels and .labels properties
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model)
        }

        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model)
        }

        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model)
        }

        const { channels, labels } = convert[model]
        delete convert[model].channels
        delete convert[model].labels
        Object.defineProperty(convert[model], "channels", { value: channels })
        Object.defineProperty(convert[model], "labels", { value: labels })
      }

      convert.rgb.hsl = function (rgb) {
        const r = rgb[0] / 255
        const g = rgb[1] / 255
        const b = rgb[2] / 255
        const min = Math.min(r, g, b)
        const max = Math.max(r, g, b)
        const delta = max - min
        let h
        let s

        if (max === min) {
          h = 0
        } else if (r === max) {
          h = (g - b) / delta
        } else if (g === max) {
          h = 2 + (b - r) / delta
        } else if (b === max) {
          h = 4 + (r - g) / delta
        }

        h = Math.min(h * 60, 360)

        if (h < 0) {
          h += 360
        }

        const l = (min + max) / 2

        if (max === min) {
          s = 0
        } else if (l <= 0.5) {
          s = delta / (max + min)
        } else {
          s = delta / (2 - max - min)
        }

        return [h, s * 100, l * 100]
      }

      convert.rgb.hsv = function (rgb) {
        let rdif
        let gdif
        let bdif
        let h
        let s

        const r = rgb[0] / 255
        const g = rgb[1] / 255
        const b = rgb[2] / 255
        const v = Math.max(r, g, b)
        const diff = v - Math.min(r, g, b)
        const diffc = function (c) {
          return (v - c) / 6 / diff + 1 / 2
        }

        if (diff === 0) {
          h = 0
          s = 0
        } else {
          s = diff / v
          rdif = diffc(r)
          gdif = diffc(g)
          bdif = diffc(b)

          if (r === v) {
            h = bdif - gdif
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif
          }

          if (h < 0) {
            h += 1
          } else if (h > 1) {
            h -= 1
          }
        }

        return [h * 360, s * 100, v * 100]
      }

      convert.rgb.hwb = function (rgb) {
        const r = rgb[0]
        const g = rgb[1]
        let b = rgb[2]
        const h = convert.rgb.hsl(rgb)[0]
        const w = (1 / 255) * Math.min(r, Math.min(g, b))

        b = 1 - (1 / 255) * Math.max(r, Math.max(g, b))

        return [h, w * 100, b * 100]
      }

      convert.rgb.cmyk = function (rgb) {
        const r = rgb[0] / 255
        const g = rgb[1] / 255
        const b = rgb[2] / 255

        const k = Math.min(1 - r, 1 - g, 1 - b)
        const c = (1 - r - k) / (1 - k) || 0
        const m = (1 - g - k) / (1 - k) || 0
        const y = (1 - b - k) / (1 - k) || 0

        return [c * 100, m * 100, y * 100, k * 100]
      }

      function comparativeDistance(x, y) {
        /*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
        return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2
      }

      convert.rgb.keyword = function (rgb) {
        const reversed = reverseKeywords[rgb]
        if (reversed) {
          return reversed
        }

        let currentClosestDistance = Infinity
        let currentClosestKeyword

        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword]

          // Compute comparative distance
          const distance = comparativeDistance(rgb, value)

          // Check if its less, if so set as closest
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance
            currentClosestKeyword = keyword
          }
        }

        return currentClosestKeyword
      }

      convert.keyword.rgb = function (keyword) {
        return cssKeywords[keyword]
      }

      convert.rgb.xyz = function (rgb) {
        let r = rgb[0] / 255
        let g = rgb[1] / 255
        let b = rgb[2] / 255

        // Assume sRGB
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92
        g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92
        b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92

        const x = r * 0.4124 + g * 0.3576 + b * 0.1805
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505

        return [x * 100, y * 100, z * 100]
      }

      convert.rgb.lab = function (rgb) {
        const xyz = convert.rgb.xyz(rgb)
        let x = xyz[0]
        let y = xyz[1]
        let z = xyz[2]

        x /= 95.047
        y /= 100
        z /= 108.883

        x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116
        y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116
        z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116

        const l = 116 * y - 16
        const a = 500 * (x - y)
        const b = 200 * (y - z)

        return [l, a, b]
      }

      convert.hsl.rgb = function (hsl) {
        const h = hsl[0] / 360
        const s = hsl[1] / 100
        const l = hsl[2] / 100
        let t2
        let t3
        let val

        if (s === 0) {
          val = l * 255
          return [val, val, val]
        }

        if (l < 0.5) {
          t2 = l * (1 + s)
        } else {
          t2 = l + s - l * s
        }

        const t1 = 2 * l - t2

        const rgb = [0, 0, 0]
        for (let i = 0; i < 3; i++) {
          t3 = h + (1 / 3) * -(i - 1)
          if (t3 < 0) {
            t3++
          }

          if (t3 > 1) {
            t3--
          }

          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3
          } else if (2 * t3 < 1) {
            val = t2
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6
          } else {
            val = t1
          }

          rgb[i] = val * 255
        }

        return rgb
      }

      convert.hsl.hsv = function (hsl) {
        const h = hsl[0]
        let s = hsl[1] / 100
        let l = hsl[2] / 100
        let smin = s
        const lmin = Math.max(l, 0.01)

        l *= 2
        s *= l <= 1 ? l : 2 - l
        smin *= lmin <= 1 ? lmin : 2 - lmin
        const v = (l + s) / 2
        const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s)

        return [h, sv * 100, v * 100]
      }

      convert.hsv.rgb = function (hsv) {
        const h = hsv[0] / 60
        const s = hsv[1] / 100
        let v = hsv[2] / 100
        const hi = Math.floor(h) % 6

        const f = h - Math.floor(h)
        const p = 255 * v * (1 - s)
        const q = 255 * v * (1 - s * f)
        const t = 255 * v * (1 - s * (1 - f))
        v *= 255

        switch (hi) {
          case 0:
            return [v, t, p]
          case 1:
            return [q, v, p]
          case 2:
            return [p, v, t]
          case 3:
            return [p, q, v]
          case 4:
            return [t, p, v]
          case 5:
            return [v, p, q]
        }
      }

      convert.hsv.hsl = function (hsv) {
        const h = hsv[0]
        const s = hsv[1] / 100
        const v = hsv[2] / 100
        const vmin = Math.max(v, 0.01)
        let sl
        let l

        l = (2 - s) * v
        const lmin = (2 - s) * vmin
        sl = s * vmin
        sl /= lmin <= 1 ? lmin : 2 - lmin
        sl = sl || 0
        l /= 2

        return [h, sl * 100, l * 100]
      }

      // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
      convert.hwb.rgb = function (hwb) {
        const h = hwb[0] / 360
        let wh = hwb[1] / 100
        let bl = hwb[2] / 100
        const ratio = wh + bl
        let f

        // Wh + bl cant be > 1
        if (ratio > 1) {
          wh /= ratio
          bl /= ratio
        }

        const i = Math.floor(6 * h)
        const v = 1 - bl
        f = 6 * h - i

        if ((i & 0x01) !== 0) {
          f = 1 - f
        }

        const n = wh + f * (v - wh) // Linear interpolation

        let r
        let g
        let b
        /* eslint-disable max-statements-per-line,no-multi-spaces */
        switch (i) {
          default:
          case 6:
          case 0:
            r = v
            g = n
            b = wh
            break
          case 1:
            r = n
            g = v
            b = wh
            break
          case 2:
            r = wh
            g = v
            b = n
            break
          case 3:
            r = wh
            g = n
            b = v
            break
          case 4:
            r = n
            g = wh
            b = v
            break
          case 5:
            r = v
            g = wh
            b = n
            break
        }
        /* eslint-enable max-statements-per-line,no-multi-spaces */

        return [r * 255, g * 255, b * 255]
      }

      convert.cmyk.rgb = function (cmyk) {
        const c = cmyk[0] / 100
        const m = cmyk[1] / 100
        const y = cmyk[2] / 100
        const k = cmyk[3] / 100

        const r = 1 - Math.min(1, c * (1 - k) + k)
        const g = 1 - Math.min(1, m * (1 - k) + k)
        const b = 1 - Math.min(1, y * (1 - k) + k)

        return [r * 255, g * 255, b * 255]
      }

      convert.xyz.rgb = function (xyz) {
        const x = xyz[0] / 100
        const y = xyz[1] / 100
        const z = xyz[2] / 100
        let r
        let g
        let b

        r = x * 3.2406 + y * -1.5372 + z * -0.4986
        g = x * -0.9689 + y * 1.8758 + z * 0.0415
        b = x * 0.0557 + y * -0.204 + z * 1.057

        // Assume sRGB
        r = r > 0.0031308 ? 1.055 * r ** (1.0 / 2.4) - 0.055 : r * 12.92

        g = g > 0.0031308 ? 1.055 * g ** (1.0 / 2.4) - 0.055 : g * 12.92

        b = b > 0.0031308 ? 1.055 * b ** (1.0 / 2.4) - 0.055 : b * 12.92

        r = Math.min(Math.max(0, r), 1)
        g = Math.min(Math.max(0, g), 1)
        b = Math.min(Math.max(0, b), 1)

        return [r * 255, g * 255, b * 255]
      }

      convert.xyz.lab = function (xyz) {
        let x = xyz[0]
        let y = xyz[1]
        let z = xyz[2]

        x /= 95.047
        y /= 100
        z /= 108.883

        x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116
        y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116
        z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116

        const l = 116 * y - 16
        const a = 500 * (x - y)
        const b = 200 * (y - z)

        return [l, a, b]
      }

      convert.lab.xyz = function (lab) {
        const l = lab[0]
        const a = lab[1]
        const b = lab[2]
        let x
        let y
        let z

        y = (l + 16) / 116
        x = a / 500 + y
        z = y - b / 200

        const y2 = y ** 3
        const x2 = x ** 3
        const z2 = z ** 3
        y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787
        x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787
        z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787

        x *= 95.047
        y *= 100
        z *= 108.883

        return [x, y, z]
      }

      convert.lab.lch = function (lab) {
        const l = lab[0]
        const a = lab[1]
        const b = lab[2]
        let h

        const hr = Math.atan2(b, a)
        h = (hr * 360) / 2 / Math.PI

        if (h < 0) {
          h += 360
        }

        const c = Math.sqrt(a * a + b * b)

        return [l, c, h]
      }

      convert.lch.lab = function (lch) {
        const l = lch[0]
        const c = lch[1]
        const h = lch[2]

        const hr = (h / 360) * 2 * Math.PI
        const a = c * Math.cos(hr)
        const b = c * Math.sin(hr)

        return [l, a, b]
      }

      convert.rgb.ansi16 = function (args, saturation = null) {
        const [r, g, b] = args
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation // Hsv -> ansi16 optimization

        value = Math.round(value / 50)

        if (value === 0) {
          return 30
        }

        let ansi =
          30 + ((Math.round(b / 255) << 2) | (Math.round(g / 255) << 1) | Math.round(r / 255))

        if (value === 2) {
          ansi += 60
        }

        return ansi
      }

      convert.hsv.ansi16 = function (args) {
        // Optimization here; we already know the value and don't need to get
        // it converted for us.
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2])
      }

      convert.rgb.ansi256 = function (args) {
        const r = args[0]
        const g = args[1]
        const b = args[2]

        // We use the extended greyscale palette here, with the exception of
        // black and white. normal palette only has 4 greyscale shades.
        if (r === g && g === b) {
          if (r < 8) {
            return 16
          }

          if (r > 248) {
            return 231
          }

          return Math.round(((r - 8) / 247) * 24) + 232
        }

        const ansi =
          16 +
          36 * Math.round((r / 255) * 5) +
          6 * Math.round((g / 255) * 5) +
          Math.round((b / 255) * 5)

        return ansi
      }

      convert.ansi16.rgb = function (args) {
        let color = args % 10

        // Handle greyscale
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5
          }

          color = (color / 10.5) * 255

          return [color, color, color]
        }

        const mult = (~~(args > 50) + 1) * 0.5
        const r = (color & 1) * mult * 255
        const g = ((color >> 1) & 1) * mult * 255
        const b = ((color >> 2) & 1) * mult * 255

        return [r, g, b]
      }

      convert.ansi256.rgb = function (args) {
        // Handle greyscale
        if (args >= 232) {
          const c = (args - 232) * 10 + 8
          return [c, c, c]
        }

        args -= 16

        let rem
        const r = (Math.floor(args / 36) / 5) * 255
        const g = (Math.floor((rem = args % 36) / 6) / 5) * 255
        const b = ((rem % 6) / 5) * 255

        return [r, g, b]
      }

      convert.rgb.hex = function (args) {
        const integer =
          ((Math.round(args[0]) & 0xff) << 16) +
          ((Math.round(args[1]) & 0xff) << 8) +
          (Math.round(args[2]) & 0xff)

        const string = integer.toString(16).toUpperCase()
        return "000000".substring(string.length) + string
      }

      convert.hex.rgb = function (args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i)
        if (!match) {
          return [0, 0, 0]
        }

        let colorString = match[0]

        if (match[0].length === 3) {
          colorString = colorString
            .split("")
            .map((char) => {
              return char + char
            })
            .join("")
        }

        const integer = parseInt(colorString, 16)
        const r = (integer >> 16) & 0xff
        const g = (integer >> 8) & 0xff
        const b = integer & 0xff

        return [r, g, b]
      }

      convert.rgb.hcg = function (rgb) {
        const r = rgb[0] / 255
        const g = rgb[1] / 255
        const b = rgb[2] / 255
        const max = Math.max(Math.max(r, g), b)
        const min = Math.min(Math.min(r, g), b)
        const chroma = max - min
        let grayscale
        let hue

        if (chroma < 1) {
          grayscale = min / (1 - chroma)
        } else {
          grayscale = 0
        }

        if (chroma <= 0) {
          hue = 0
        } else if (max === r) {
          hue = ((g - b) / chroma) % 6
        } else if (max === g) {
          hue = 2 + (b - r) / chroma
        } else {
          hue = 4 + (r - g) / chroma
        }

        hue /= 6
        hue %= 1

        return [hue * 360, chroma * 100, grayscale * 100]
      }

      convert.hsl.hcg = function (hsl) {
        const s = hsl[1] / 100
        const l = hsl[2] / 100

        const c = l < 0.5 ? 2.0 * s * l : 2.0 * s * (1.0 - l)

        let f = 0
        if (c < 1.0) {
          f = (l - 0.5 * c) / (1.0 - c)
        }

        return [hsl[0], c * 100, f * 100]
      }

      convert.hsv.hcg = function (hsv) {
        const s = hsv[1] / 100
        const v = hsv[2] / 100

        const c = s * v
        let f = 0

        if (c < 1.0) {
          f = (v - c) / (1 - c)
        }

        return [hsv[0], c * 100, f * 100]
      }

      convert.hcg.rgb = function (hcg) {
        const h = hcg[0] / 360
        const c = hcg[1] / 100
        const g = hcg[2] / 100

        if (c === 0.0) {
          return [g * 255, g * 255, g * 255]
        }

        const pure = [0, 0, 0]
        const hi = (h % 1) * 6
        const v = hi % 1
        const w = 1 - v
        let mg = 0

        /* eslint-disable max-statements-per-line */
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1
            pure[1] = v
            pure[2] = 0
            break
          case 1:
            pure[0] = w
            pure[1] = 1
            pure[2] = 0
            break
          case 2:
            pure[0] = 0
            pure[1] = 1
            pure[2] = v
            break
          case 3:
            pure[0] = 0
            pure[1] = w
            pure[2] = 1
            break
          case 4:
            pure[0] = v
            pure[1] = 0
            pure[2] = 1
            break
          default:
            pure[0] = 1
            pure[1] = 0
            pure[2] = w
        }
        /* eslint-enable max-statements-per-line */

        mg = (1.0 - c) * g

        return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255]
      }

      convert.hcg.hsv = function (hcg) {
        const c = hcg[1] / 100
        const g = hcg[2] / 100

        const v = c + g * (1.0 - c)
        let f = 0

        if (v > 0.0) {
          f = c / v
        }

        return [hcg[0], f * 100, v * 100]
      }

      convert.hcg.hsl = function (hcg) {
        const c = hcg[1] / 100
        const g = hcg[2] / 100

        const l = g * (1.0 - c) + 0.5 * c
        let s = 0

        if (l > 0.0 && l < 0.5) {
          s = c / (2 * l)
        } else if (l >= 0.5 && l < 1.0) {
          s = c / (2 * (1 - l))
        }

        return [hcg[0], s * 100, l * 100]
      }

      convert.hcg.hwb = function (hcg) {
        const c = hcg[1] / 100
        const g = hcg[2] / 100
        const v = c + g * (1.0 - c)
        return [hcg[0], (v - c) * 100, (1 - v) * 100]
      }

      convert.hwb.hcg = function (hwb) {
        const w = hwb[1] / 100
        const b = hwb[2] / 100
        const v = 1 - b
        const c = v - w
        let g = 0

        if (c < 1) {
          g = (v - c) / (1 - c)
        }

        return [hwb[0], c * 100, g * 100]
      }

      convert.apple.rgb = function (apple) {
        return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255]
      }

      convert.rgb.apple = function (rgb) {
        return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535]
      }

      convert.gray.rgb = function (args) {
        return [(args[0] / 100) * 255, (args[0] / 100) * 255, (args[0] / 100) * 255]
      }

      convert.gray.hsl = function (args) {
        return [0, 0, args[0]]
      }

      convert.gray.hsv = convert.gray.hsl

      convert.gray.hwb = function (gray) {
        return [0, 100, gray[0]]
      }

      convert.gray.cmyk = function (gray) {
        return [0, 0, 0, gray[0]]
      }

      convert.gray.lab = function (gray) {
        return [gray[0], 0, 0]
      }

      convert.gray.hex = function (gray) {
        const val = Math.round((gray[0] / 100) * 255) & 0xff
        const integer = (val << 16) + (val << 8) + val

        const string = integer.toString(16).toUpperCase()
        return "000000".substring(string.length) + string
      }

      convert.rgb.gray = function (rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3
        return [(val / 255) * 100]
      }

      /***/
    },

    /***/ 86931: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const conversions = __nccwpck_require__(97391)
      const route = __nccwpck_require__(30880)

      const convert = {}

      const models = Object.keys(conversions)

      function wrapRaw(fn) {
        const wrappedFn = function (...args) {
          const arg0 = args[0]
          if (arg0 === undefined || arg0 === null) {
            return arg0
          }

          if (arg0.length > 1) {
            args = arg0
          }

          return fn(args)
        }

        // Preserve .conversion property if there is one
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion
        }

        return wrappedFn
      }

      function wrapRounded(fn) {
        const wrappedFn = function (...args) {
          const arg0 = args[0]

          if (arg0 === undefined || arg0 === null) {
            return arg0
          }

          if (arg0.length > 1) {
            args = arg0
          }

          const result = fn(args)

          // We're assuming the result is an array here.
          // see notice in conversions.js; don't use box types
          // in conversion functions.
          if (typeof result === "object") {
            for (let len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i])
            }
          }

          return result
        }

        // Preserve .conversion property if there is one
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion
        }

        return wrappedFn
      }

      models.forEach((fromModel) => {
        convert[fromModel] = {}

        Object.defineProperty(convert[fromModel], "channels", {
          value: conversions[fromModel].channels
        })
        Object.defineProperty(convert[fromModel], "labels", {
          value: conversions[fromModel].labels
        })

        const routes = route(fromModel)
        const routeModels = Object.keys(routes)

        routeModels.forEach((toModel) => {
          const fn = routes[toModel]

          convert[fromModel][toModel] = wrapRounded(fn)
          convert[fromModel][toModel].raw = wrapRaw(fn)
        })
      })

      module.exports = convert

      /***/
    },

    /***/ 30880: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const conversions = __nccwpck_require__(97391)

      /*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

      function buildGraph() {
        const graph = {}
        // https://jsperf.com/object-keys-vs-for-in-with-closure/3
        const models = Object.keys(conversions)

        for (let len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          }
        }

        return graph
      }

      // https://en.wikipedia.org/wiki/Breadth-first_search
      function deriveBFS(fromModel) {
        const graph = buildGraph()
        const queue = [fromModel] // Unshift -> queue -> pop

        graph[fromModel].distance = 0

        while (queue.length) {
          const current = queue.pop()
          const adjacents = Object.keys(conversions[current])

          for (let len = adjacents.length, i = 0; i < len; i++) {
            const adjacent = adjacents[i]
            const node = graph[adjacent]

            if (node.distance === -1) {
              node.distance = graph[current].distance + 1
              node.parent = current
              queue.unshift(adjacent)
            }
          }
        }

        return graph
      }

      function link(from, to) {
        return function (args) {
          return to(from(args))
        }
      }

      function wrapConversion(toModel, graph) {
        const path = [graph[toModel].parent, toModel]
        let fn = conversions[graph[toModel].parent][toModel]

        let cur = graph[toModel].parent
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent)
          fn = link(conversions[graph[cur].parent][cur], fn)
          cur = graph[cur].parent
        }

        fn.conversion = path
        return fn
      }

      module.exports = function (fromModel) {
        const graph = deriveBFS(fromModel)
        const conversion = {}

        const models = Object.keys(graph)
        for (let len = models.length, i = 0; i < len; i++) {
          const toModel = models[i]
          const node = graph[toModel]

          if (node.parent === null) {
            // No possible conversion, or this node is the source model.
            continue
          }

          conversion[toModel] = wrapConversion(toModel, graph)
        }

        return conversion
      }

      /***/
    },

    /***/ 78510: /***/ (module) => {
      "use strict"

      module.exports = {
        aliceblue: [240, 248, 255],
        antiquewhite: [250, 235, 215],
        aqua: [0, 255, 255],
        aquamarine: [127, 255, 212],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        bisque: [255, 228, 196],
        black: [0, 0, 0],
        blanchedalmond: [255, 235, 205],
        blue: [0, 0, 255],
        blueviolet: [138, 43, 226],
        brown: [165, 42, 42],
        burlywood: [222, 184, 135],
        cadetblue: [95, 158, 160],
        chartreuse: [127, 255, 0],
        chocolate: [210, 105, 30],
        coral: [255, 127, 80],
        cornflowerblue: [100, 149, 237],
        cornsilk: [255, 248, 220],
        crimson: [220, 20, 60],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgoldenrod: [184, 134, 11],
        darkgray: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkgrey: [169, 169, 169],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkseagreen: [143, 188, 143],
        darkslateblue: [72, 61, 139],
        darkslategray: [47, 79, 79],
        darkslategrey: [47, 79, 79],
        darkturquoise: [0, 206, 209],
        darkviolet: [148, 0, 211],
        deeppink: [255, 20, 147],
        deepskyblue: [0, 191, 255],
        dimgray: [105, 105, 105],
        dimgrey: [105, 105, 105],
        dodgerblue: [30, 144, 255],
        firebrick: [178, 34, 34],
        floralwhite: [255, 250, 240],
        forestgreen: [34, 139, 34],
        fuchsia: [255, 0, 255],
        gainsboro: [220, 220, 220],
        ghostwhite: [248, 248, 255],
        gold: [255, 215, 0],
        goldenrod: [218, 165, 32],
        gray: [128, 128, 128],
        green: [0, 128, 0],
        greenyellow: [173, 255, 47],
        grey: [128, 128, 128],
        honeydew: [240, 255, 240],
        hotpink: [255, 105, 180],
        indianred: [205, 92, 92],
        indigo: [75, 0, 130],
        ivory: [255, 255, 240],
        khaki: [240, 230, 140],
        lavender: [230, 230, 250],
        lavenderblush: [255, 240, 245],
        lawngreen: [124, 252, 0],
        lemonchiffon: [255, 250, 205],
        lightblue: [173, 216, 230],
        lightcoral: [240, 128, 128],
        lightcyan: [224, 255, 255],
        lightgoldenrodyellow: [250, 250, 210],
        lightgray: [211, 211, 211],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightsalmon: [255, 160, 122],
        lightseagreen: [32, 178, 170],
        lightskyblue: [135, 206, 250],
        lightslategray: [119, 136, 153],
        lightslategrey: [119, 136, 153],
        lightsteelblue: [176, 196, 222],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        limegreen: [50, 205, 50],
        linen: [250, 240, 230],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        mediumaquamarine: [102, 205, 170],
        mediumblue: [0, 0, 205],
        mediumorchid: [186, 85, 211],
        mediumpurple: [147, 112, 219],
        mediumseagreen: [60, 179, 113],
        mediumslateblue: [123, 104, 238],
        mediumspringgreen: [0, 250, 154],
        mediumturquoise: [72, 209, 204],
        mediumvioletred: [199, 21, 133],
        midnightblue: [25, 25, 112],
        mintcream: [245, 255, 250],
        mistyrose: [255, 228, 225],
        moccasin: [255, 228, 181],
        navajowhite: [255, 222, 173],
        navy: [0, 0, 128],
        oldlace: [253, 245, 230],
        olive: [128, 128, 0],
        olivedrab: [107, 142, 35],
        orange: [255, 165, 0],
        orangered: [255, 69, 0],
        orchid: [218, 112, 214],
        palegoldenrod: [238, 232, 170],
        palegreen: [152, 251, 152],
        paleturquoise: [175, 238, 238],
        palevioletred: [219, 112, 147],
        papayawhip: [255, 239, 213],
        peachpuff: [255, 218, 185],
        peru: [205, 133, 63],
        pink: [255, 192, 203],
        plum: [221, 160, 221],
        powderblue: [176, 224, 230],
        purple: [128, 0, 128],
        rebeccapurple: [102, 51, 153],
        red: [255, 0, 0],
        rosybrown: [188, 143, 143],
        royalblue: [65, 105, 225],
        saddlebrown: [139, 69, 19],
        salmon: [250, 128, 114],
        sandybrown: [244, 164, 96],
        seagreen: [46, 139, 87],
        seashell: [255, 245, 238],
        sienna: [160, 82, 45],
        silver: [192, 192, 192],
        skyblue: [135, 206, 235],
        slateblue: [106, 90, 205],
        slategray: [112, 128, 144],
        slategrey: [112, 128, 144],
        snow: [255, 250, 250],
        springgreen: [0, 255, 127],
        steelblue: [70, 130, 180],
        tan: [210, 180, 140],
        teal: [0, 128, 128],
        thistle: [216, 191, 216],
        tomato: [255, 99, 71],
        turquoise: [64, 224, 208],
        violet: [238, 130, 238],
        wheat: [245, 222, 179],
        white: [255, 255, 255],
        whitesmoke: [245, 245, 245],
        yellow: [255, 255, 0],
        yellowgreen: [154, 205, 50]
      }

      /***/
    },

    /***/ 24623: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var arrayify = __nccwpck_require__(28912)
      var dotPropGet = __nccwpck_require__(82042).get

      function compareFunc(prop) {
        return function (a, b) {
          var ret = 0

          arrayify(prop).some(function (el) {
            var x
            var y

            if (typeof el === "function") {
              x = el(a)
              y = el(b)
            } else if (typeof el === "string") {
              x = dotPropGet(a, el)
              y = dotPropGet(b, el)
            } else {
              x = a
              y = b
            }

            if (x === y) {
              ret = 0
              return
            }

            if (typeof x === "string" && typeof y === "string") {
              ret = x.localeCompare(y)
              return ret !== 0
            }

            ret = x < y ? -1 : 1
            return true
          })

          return ret
        }
      }

      module.exports = compareFunc

      /***/
    },

    /***/ 5290: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const Q = __nccwpck_require__(56172)
      const parserOpts = __nccwpck_require__(24593)
      const writerOpts = __nccwpck_require__(38631)

      module.exports = Q.all([parserOpts, writerOpts]).spread((parserOpts, writerOpts) => {
        return { parserOpts, writerOpts }
      })

      /***/
    },

    /***/ 93625: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const parserOpts = __nccwpck_require__(24593)

      module.exports = {
        parserOpts,

        whatBump: (commits) => {
          let level = 2
          let breakings = 0
          let features = 0

          commits.forEach((commit) => {
            if (commit.notes.length > 0) {
              breakings += commit.notes.length
              level = 0
            } else if (commit.type === "feat") {
              features += 1
              if (level === 2) {
                level = 1
              }
            }
          })

          return {
            level: level,
            reason:
              breakings === 1
                ? `There is ${breakings} BREAKING CHANGE and ${features} features`
                : `There are ${breakings} BREAKING CHANGES and ${features} features`
          }
        }
      }

      /***/
    },

    /***/ 18143: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const Q = __nccwpck_require__(56172)
      const conventionalChangelog = __nccwpck_require__(5290)
      const parserOpts = __nccwpck_require__(24593)
      const recommendedBumpOpts = __nccwpck_require__(93625)
      const writerOpts = __nccwpck_require__(38631)

      module.exports = Q.all([
        conventionalChangelog,
        parserOpts,
        recommendedBumpOpts,
        writerOpts
      ]).spread((conventionalChangelog, parserOpts, recommendedBumpOpts, writerOpts) => {
        return { conventionalChangelog, parserOpts, recommendedBumpOpts, writerOpts }
      })

      /***/
    },

    /***/ 24593: /***/ (module) => {
      "use strict"

      module.exports = {
        headerPattern: /^(\w*)(?:\((.*)\))?: (.*)$/,
        headerCorrespondence: ["type", "scope", "subject"],
        noteKeywords: ["BREAKING CHANGE"],
        revertPattern: /^(?:Revert|revert:)\s"?([\s\S]+?)"?\s*This reverts commit (\w*)\./i,
        revertCorrespondence: ["header", "hash"]
      }

      /***/
    },

    /***/ 38631: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const compareFunc = __nccwpck_require__(24623)
      const Q = __nccwpck_require__(56172)
      const readFile = Q.denodeify(__nccwpck_require__(57147).readFile)
      const resolve = __nccwpck_require__(71017).resolve

      module.exports = Q.all([
        readFile(__nccwpck_require__.ab + "template1.hbs", "utf-8"),
        readFile(__nccwpck_require__.ab + "header1.hbs", "utf-8"),
        readFile(__nccwpck_require__.ab + "commit1.hbs", "utf-8"),
        readFile(__nccwpck_require__.ab + "footer1.hbs", "utf-8")
      ]).spread((template, header, commit, footer) => {
        const writerOpts = getWriterOpts()

        writerOpts.mainTemplate = template
        writerOpts.headerPartial = header
        writerOpts.commitPartial = commit
        writerOpts.footerPartial = footer

        return writerOpts
      })

      function getWriterOpts() {
        return {
          transform: (commit, context) => {
            let discard = true
            const issues = []

            commit.notes.forEach((note) => {
              note.title = "BREAKING CHANGES"
              discard = false
            })

            if (commit.type === "feat") {
              commit.type = "Features"
            } else if (commit.type === "fix") {
              commit.type = "Bug Fixes"
            } else if (commit.type === "perf") {
              commit.type = "Performance Improvements"
            } else if (commit.type === "revert" || commit.revert) {
              commit.type = "Reverts"
            } else if (discard) {
              return
            } else if (commit.type === "docs") {
              commit.type = "Documentation"
            } else if (commit.type === "style") {
              commit.type = "Styles"
            } else if (commit.type === "refactor") {
              commit.type = "Code Refactoring"
            } else if (commit.type === "test") {
              commit.type = "Tests"
            } else if (commit.type === "build") {
              commit.type = "Build System"
            } else if (commit.type === "ci") {
              commit.type = "Continuous Integration"
            }

            if (commit.scope === "*") {
              commit.scope = ""
            }

            if (typeof commit.hash === "string") {
              commit.shortHash = commit.hash.substring(0, 7)
            }

            if (typeof commit.subject === "string") {
              let url = context.repository
                ? `${context.host}/${context.owner}/${context.repository}`
                : context.repoUrl
              if (url) {
                url = `${url}/issues/`
                // Issue URLs.
                commit.subject = commit.subject.replace(/#([0-9]+)/g, (_, issue) => {
                  issues.push(issue)
                  return `[#${issue}](${url}${issue})`
                })
              }
              if (context.host) {
                // User URLs.
                commit.subject = commit.subject.replace(
                  /\B@([a-z0-9](?:-?[a-z0-9/]){0,38})/g,
                  (_, username) => {
                    if (username.includes("/")) {
                      return `@${username}`
                    }

                    return `[@${username}](${context.host}/${username})`
                  }
                )
              }
            }

            // remove references that already appear in the subject
            commit.references = commit.references.filter((reference) => {
              if (issues.indexOf(reference.issue) === -1) {
                return true
              }

              return false
            })

            return commit
          },
          groupBy: "type",
          commitGroupsSort: "title",
          commitsSort: ["scope", "subject"],
          noteGroupsSort: "title",
          notesSort: compareFunc
        }
      }

      /***/
    },

    /***/ 82429: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const { breakingHeaderPattern } = __nccwpck_require__(88236)()

      module.exports = (commit) => {
        const match = commit.header.match(breakingHeaderPattern)
        if (match && commit.notes.length === 0) {
          const noteText = match[3] // the description of the change.
          commit.notes.push({
            text: noteText
          })
        }
      }

      /***/
    },

    /***/ 87333: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const Q = __nccwpck_require__(56172)
      const parserOpts = __nccwpck_require__(88236)
      const writerOpts = __nccwpck_require__(10382)

      module.exports = function (config) {
        return Q.all([parserOpts(config), writerOpts(config)]).spread((parserOpts, writerOpts) => {
          return { parserOpts, writerOpts }
        })
      }

      /***/
    },

    /***/ 97620: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const addBangNotes = __nccwpck_require__(82429)
      const parserOpts = __nccwpck_require__(88236)

      module.exports = function (config) {
        return {
          parserOpts: parserOpts(config),

          whatBump: (commits) => {
            let level = 2
            let breakings = 0
            let features = 0

            commits.forEach((commit) => {
              // adds additional breaking change notes
              // for the special case, test(system)!: hello world, where there is
              // a '!' but no 'BREAKING CHANGE' in body:
              addBangNotes(commit)
              if (commit.notes.length > 0) {
                breakings += commit.notes.length
                level = 0
              } else if (commit.type === "feat" || commit.type === "feature") {
                features += 1
                if (level === 2) {
                  level = 1
                }
              }
            })

            if (config.preMajor && level < 2) {
              level++
            }

            return {
              level: level,
              reason:
                breakings === 1
                  ? `There is ${breakings} BREAKING CHANGE and ${features} features`
                  : `There are ${breakings} BREAKING CHANGES and ${features} features`
            }
          }
        }
      }

      /***/
    },

    /***/ 88761: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const Q = __nccwpck_require__(56172)
      const _ = __nccwpck_require__(90250)
      const conventionalChangelog = __nccwpck_require__(87333)
      const parserOpts = __nccwpck_require__(88236)
      const recommendedBumpOpts = __nccwpck_require__(97620)
      const writerOpts = __nccwpck_require__(10382)

      module.exports = function (parameter) {
        // parameter passed can be either a config object or a callback function
        if (_.isFunction(parameter)) {
          // parameter is a callback object
          const config = {}
          // FIXME: use presetOpts(config) for callback
          Q.all([
            conventionalChangelog(config),
            parserOpts(config),
            recommendedBumpOpts(config),
            writerOpts(config)
          ]).spread((conventionalChangelog, parserOpts, recommendedBumpOpts, writerOpts) => {
            parameter(null, {
              gitRawCommitsOpts: { noMerges: null },
              conventionalChangelog,
              parserOpts,
              recommendedBumpOpts,
              writerOpts
            })
          })
        } else {
          const config = parameter || {}
          return presetOpts(config)
        }
      }

      function presetOpts(config) {
        return Q.all([
          conventionalChangelog(config),
          parserOpts(config),
          recommendedBumpOpts(config),
          writerOpts(config)
        ]).spread((conventionalChangelog, parserOpts, recommendedBumpOpts, writerOpts) => {
          return { conventionalChangelog, parserOpts, recommendedBumpOpts, writerOpts }
        })
      }

      /***/
    },

    /***/ 88236: /***/ (module) => {
      "use strict"

      module.exports = function (config) {
        config = defaultConfig(config)
        return {
          headerPattern: /^(\w*)(?:\((.*)\))?!?: (.*)$/,
          breakingHeaderPattern: /^(\w*)(?:\((.*)\))?!: (.*)$/,
          headerCorrespondence: ["type", "scope", "subject"],
          noteKeywords: ["BREAKING CHANGE", "BREAKING-CHANGE"],
          revertPattern: /^(?:Revert|revert:)\s"?([\s\S]+?)"?\s*This reverts commit (\w*)\./i,
          revertCorrespondence: ["header", "hash"],
          issuePrefixes: config.issuePrefixes
        }
      }

      // merge user set configuration with default configuration.
      function defaultConfig(config) {
        config = config || {}
        config.issuePrefixes = config.issuePrefixes || ["#"]
        return config
      }

      /***/
    },

    /***/ 10382: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const addBangNotes = __nccwpck_require__(82429)
      const compareFunc = __nccwpck_require__(24623)
      const Q = __nccwpck_require__(56172)
      const readFile = Q.denodeify(__nccwpck_require__(57147).readFile)
      const resolve = __nccwpck_require__(71017).resolve
      const releaseAsRe = /release-as:\s*\w*@?([0-9]+\.[0-9]+\.[0-9a-z]+(-[0-9a-z.]+)?)\s*/i

      /**
       * Handlebar partials for various property substitutions based on commit context.
       */
      const owner = "{{#if this.owner}}{{~this.owner}}{{else}}{{~@root.owner}}{{/if}}"
      const host = "{{~@root.host}}"
      const repository =
        "{{#if this.repository}}{{~this.repository}}{{else}}{{~@root.repository}}{{/if}}"

      module.exports = function (config) {
        config = defaultConfig(config)
        const commitUrlFormat = expandTemplate(config.commitUrlFormat, {
          host,
          owner,
          repository
        })
        const compareUrlFormat = expandTemplate(config.compareUrlFormat, {
          host,
          owner,
          repository
        })
        const issueUrlFormat = expandTemplate(config.issueUrlFormat, {
          host,
          owner,
          repository,
          id: "{{this.issue}}",
          prefix: "{{this.prefix}}"
        })

        return Q.all([
          readFile(__nccwpck_require__.ab + "template.hbs", "utf-8"),
          readFile(__nccwpck_require__.ab + "header.hbs", "utf-8"),
          readFile(__nccwpck_require__.ab + "commit.hbs", "utf-8"),
          readFile(__nccwpck_require__.ab + "footer.hbs", "utf-8")
        ]).spread((template, header, commit, footer) => {
          const writerOpts = getWriterOpts(config)

          writerOpts.mainTemplate = template
          writerOpts.headerPartial = header.replace(/{{compareUrlFormat}}/g, compareUrlFormat)
          writerOpts.commitPartial = commit
            .replace(/{{commitUrlFormat}}/g, commitUrlFormat)
            .replace(/{{issueUrlFormat}}/g, issueUrlFormat)
          writerOpts.footerPartial = footer

          return writerOpts
        })
      }

      function findTypeEntry(types, commit) {
        const typeKey = (commit.revert ? "revert" : commit.type || "").toLowerCase()
        return types.find((entry) => {
          if (entry.type !== typeKey) {
            return false
          }
          if (entry.scope && entry.scope !== commit.scope) {
            return false
          }
          return true
        })
      }

      function getWriterOpts(config) {
        config = defaultConfig(config)

        return {
          transform: (commit, context) => {
            let discard = true
            const issues = []
            const entry = findTypeEntry(config.types, commit)

            // adds additional breaking change notes
            // for the special case, test(system)!: hello world, where there is
            // a '!' but no 'BREAKING CHANGE' in body:
            addBangNotes(commit)

            // Add an entry in the CHANGELOG if special Release-As footer
            // is used:
            if (
              (commit.footer && releaseAsRe.test(commit.footer)) ||
              (commit.body && releaseAsRe.test(commit.body))
            ) {
              discard = false
            }

            commit.notes.forEach((note) => {
              note.title = "BREAKING CHANGES"
              discard = false
            })

            // breaking changes attached to any type are still displayed.
            if (discard && (entry === undefined || entry.hidden)) return

            if (entry) commit.type = entry.section

            if (commit.scope === "*") {
              commit.scope = ""
            }

            if (typeof commit.hash === "string") {
              commit.shortHash = commit.hash.substring(0, 7)
            }

            if (typeof commit.subject === "string") {
              // Issue URLs.
              config.issuePrefixes.join("|")
              const issueRegEx = "(" + config.issuePrefixes.join("|") + ")" + "([0-9]+)"
              const re = new RegExp(issueRegEx, "g")

              commit.subject = commit.subject.replace(re, (_, prefix, issue) => {
                issues.push(prefix + issue)
                const url = expandTemplate(config.issueUrlFormat, {
                  host: context.host,
                  owner: context.owner,
                  repository: context.repository,
                  id: issue,
                  prefix: prefix
                })
                return `[${prefix}${issue}](${url})`
              })
              // User URLs.
              commit.subject = commit.subject.replace(
                /\B@([a-z0-9](?:-?[a-z0-9/]){0,38})/g,
                (_, user) => {
                  // TODO: investigate why this code exists.
                  if (user.includes("/")) {
                    return `@${user}`
                  }

                  const usernameUrl = expandTemplate(config.userUrlFormat, {
                    host: context.host,
                    owner: context.owner,
                    repository: context.repository,
                    user: user
                  })

                  return `[@${user}](${usernameUrl})`
                }
              )
            }

            // remove references that already appear in the subject
            commit.references = commit.references.filter((reference) => {
              if (issues.indexOf(reference.prefix + reference.issue) === -1) {
                return true
              }

              return false
            })

            return commit
          },
          groupBy: "type",
          // the groupings of commit messages, e.g., Features vs., Bug Fixes, are
          // sorted based on their probable importance:
          commitGroupsSort: (a, b) => {
            const commitGroupOrder = [
              "Reverts",
              "Performance Improvements",
              "Bug Fixes",
              "Features"
            ]
            const gRankA = commitGroupOrder.indexOf(a.title)
            const gRankB = commitGroupOrder.indexOf(b.title)
            if (gRankA >= gRankB) {
              return -1
            } else {
              return 1
            }
          },
          commitsSort: ["scope", "subject"],
          noteGroupsSort: "title",
          notesSort: compareFunc
        }
      }

      // merge user set configuration with default configuration.
      function defaultConfig(config) {
        config = config || {}
        config.types = config.types || [
          { type: "feat", section: "Features" },
          { type: "feature", section: "Features" },
          { type: "fix", section: "Bug Fixes" },
          { type: "perf", section: "Performance Improvements" },
          { type: "revert", section: "Reverts" },
          { type: "docs", section: "Documentation", hidden: true },
          { type: "style", section: "Styles", hidden: true },
          { type: "chore", section: "Miscellaneous Chores", hidden: true },
          { type: "refactor", section: "Code Refactoring", hidden: true },
          { type: "test", section: "Tests", hidden: true },
          { type: "build", section: "Build System", hidden: true },
          { type: "ci", section: "Continuous Integration", hidden: true }
        ]
        config.issueUrlFormat =
          config.issueUrlFormat || "{{host}}/{{owner}}/{{repository}}/issues/{{id}}"
        config.commitUrlFormat =
          config.commitUrlFormat || "{{host}}/{{owner}}/{{repository}}/commit/{{hash}}"
        config.compareUrlFormat =
          config.compareUrlFormat ||
          "{{host}}/{{owner}}/{{repository}}/compare/{{previousTag}}...{{currentTag}}"
        config.userUrlFormat = config.userUrlFormat || "{{host}}/{{user}}"
        config.issuePrefixes = config.issuePrefixes || ["#"]

        return config
      }

      // expand on the simple mustache-style templates supported in
      // configuration (we may eventually want to use handlebars for this).
      function expandTemplate(template, context) {
        let expanded = template
        Object.keys(context).forEach((key) => {
          expanded = expanded.replace(new RegExp(`{{${key}}}`, "g"), context[key])
        })
        return expanded
      }

      /***/
    },

    /***/ 55003: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const isMatch = __nccwpck_require__(15100)
      const modifyValues = __nccwpck_require__(23432)

      function modifyValue(val) {
        if (typeof val === "string") {
          return val.trim()
        }

        return val
      }

      function conventionalCommitsFilter(commits) {
        if (!Array.isArray(commits)) {
          throw new TypeError("Expected an array")
        }

        let ret = []
        const ignores = []
        const remove = []
        commits.forEach(function (commit) {
          if (commit.revert) {
            ignores.push(commit)
          }

          ret.push(commit)
        })

        // Filter out reverted commits
        ret = ret.filter(function (commit) {
          let ignoreThis = false

          commit = commit.raw
            ? modifyValues(commit.raw, modifyValue)
            : modifyValues(commit, modifyValue)

          ignores.some(function (ignoreCommit) {
            const ignore = modifyValues(ignoreCommit.revert, modifyValue)

            ignoreThis = isMatch(commit, ignore)

            if (ignoreThis) {
              remove.push(ignoreCommit.hash)
            }

            return ignoreThis
          })

          return !ignoreThis
        })

        // Filter out the commits that reverted something otherwise keep the revert commits
        ret = ret.filter(function (commit) {
          return remove.indexOf(commit.hash) !== 0
        })

        return ret
      }

      module.exports = conventionalCommitsFilter

      /***/
    },

    /***/ 41655: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const parser = __nccwpck_require__(51080)
      const regex = __nccwpck_require__(31411)
      const through = __nccwpck_require__(18180)
      const _ = __nccwpck_require__(90250)

      function assignOpts(options) {
        options = _.extend(
          {
            headerPattern: /^(\w*)(?:\(([\w$.\-*/ ]*)\))?: (.*)$/,
            headerCorrespondence: ["type", "scope", "subject"],
            referenceActions: [
              "close",
              "closes",
              "closed",
              "fix",
              "fixes",
              "fixed",
              "resolve",
              "resolves",
              "resolved"
            ],
            issuePrefixes: ["#"],
            noteKeywords: ["BREAKING CHANGE", "BREAKING-CHANGE"],
            fieldPattern: /^-(.*?)-$/,
            revertPattern: /^Revert\s"([\s\S]*)"\s*This reverts commit (\w*)\./,
            revertCorrespondence: ["header", "hash"],
            warn: function () {},
            mergePattern: null,
            mergeCorrespondence: null
          },
          options
        )

        if (typeof options.headerPattern === "string") {
          options.headerPattern = new RegExp(options.headerPattern)
        }

        if (typeof options.headerCorrespondence === "string") {
          options.headerCorrespondence = options.headerCorrespondence.split(",")
        }

        if (typeof options.referenceActions === "string") {
          options.referenceActions = options.referenceActions.split(",")
        }

        if (typeof options.issuePrefixes === "string") {
          options.issuePrefixes = options.issuePrefixes.split(",")
        }

        if (typeof options.noteKeywords === "string") {
          options.noteKeywords = options.noteKeywords.split(",")
        }

        if (typeof options.fieldPattern === "string") {
          options.fieldPattern = new RegExp(options.fieldPattern)
        }

        if (typeof options.revertPattern === "string") {
          options.revertPattern = new RegExp(options.revertPattern)
        }

        if (typeof options.revertCorrespondence === "string") {
          options.revertCorrespondence = options.revertCorrespondence.split(",")
        }

        if (typeof options.mergePattern === "string") {
          options.mergePattern = new RegExp(options.mergePattern)
        }

        return options
      }

      function conventionalCommitsParser(options) {
        options = assignOpts(options)
        const reg = regex(options)

        return through.obj(function (data, enc, cb) {
          let commit

          try {
            commit = parser(data.toString(), options, reg)
            cb(null, commit)
          } catch (err) {
            if (options.warn === true) {
              cb(err)
            } else {
              options.warn(err.toString())
              cb(null, "")
            }
          }
        })
      }

      function sync(commit, options) {
        options = assignOpts(options)
        const reg = regex(options)

        return parser(commit, options, reg)
      }

      module.exports = conventionalCommitsParser
      module.exports.sync = sync

      /***/
    },

    /***/ 51080: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const _ = __nccwpck_require__(90250)

      const CATCH_ALL = /()(.+)/gi
      const SCISSOR = "# ------------------------ >8 ------------------------"

      function trimOffNewlines(input) {
        const result = input.match(/[^\r\n]/)
        if (!result) {
          return ""
        }
        const firstIndex = result.index
        let lastIndex = input.length - 1
        while (input[lastIndex] === "\r" || input[lastIndex] === "\n") {
          lastIndex--
        }
        return input.substring(firstIndex, lastIndex + 1)
      }

      function append(src, line) {
        if (src) {
          src += "\n" + line
        } else {
          src = line
        }

        return src
      }

      function getCommentFilter(char) {
        return function (line) {
          return line.charAt(0) !== char
        }
      }

      function truncateToScissor(lines) {
        const scissorIndex = lines.indexOf(SCISSOR)

        if (scissorIndex === -1) {
          return lines
        }

        return lines.slice(0, scissorIndex)
      }

      function getReferences(input, regex) {
        const references = []
        let referenceSentences
        let referenceMatch

        const reApplicable = input.match(regex.references) !== null ? regex.references : CATCH_ALL

        while ((referenceSentences = reApplicable.exec(input))) {
          const action = referenceSentences[1] || null
          const sentence = referenceSentences[2]

          while ((referenceMatch = regex.referenceParts.exec(sentence))) {
            let owner = null
            let repository = referenceMatch[1] || ""
            const ownerRepo = repository.split("/")

            if (ownerRepo.length > 1) {
              owner = ownerRepo.shift()
              repository = ownerRepo.join("/")
            }

            const reference = {
              action: action,
              owner: owner,
              repository: repository || null,
              issue: referenceMatch[3],
              raw: referenceMatch[0],
              prefix: referenceMatch[2]
            }

            references.push(reference)
          }
        }

        return references
      }

      function passTrough() {
        return true
      }

      function parser(raw, options, regex) {
        if (!raw || !raw.trim()) {
          throw new TypeError("Expected a raw commit")
        }

        if (_.isEmpty(options)) {
          throw new TypeError("Expected options")
        }

        if (_.isEmpty(regex)) {
          throw new TypeError("Expected regex")
        }

        let currentProcessedField
        let mentionsMatch
        const otherFields = {}
        const commentFilter =
          typeof options.commentChar === "string"
            ? getCommentFilter(options.commentChar)
            : passTrough
        const gpgFilter = (line) => !line.match(/^\s*gpg:/)

        const rawLines = trimOffNewlines(raw).split(/\r?\n/)
        const lines = truncateToScissor(rawLines).filter(commentFilter).filter(gpgFilter)

        let continueNote = false
        let isBody = true
        const headerCorrespondence = _.map(options.headerCorrespondence, function (part) {
          return part.trim()
        })
        const revertCorrespondence = _.map(options.revertCorrespondence, function (field) {
          return field.trim()
        })
        const mergeCorrespondence = _.map(options.mergeCorrespondence, function (field) {
          return field.trim()
        })

        let body = null
        let footer = null
        let header = null
        const mentions = []
        let merge = null
        const notes = []
        const references = []
        let revert = null

        if (lines.length === 0) {
          return {
            body: body,
            footer: footer,
            header: header,
            mentions: mentions,
            merge: merge,
            notes: notes,
            references: references,
            revert: revert,
            scope: null,
            subject: null,
            type: null
          }
        }

        // msg parts
        merge = lines.shift()
        const mergeParts = {}
        const headerParts = {}
        body = ""
        footer = ""

        const mergeMatch = merge.match(options.mergePattern)
        if (mergeMatch && options.mergePattern) {
          merge = mergeMatch[0]

          header = lines.shift()
          while (header !== undefined && !header.trim()) {
            header = lines.shift()
          }
          if (!header) {
            header = ""
          }

          _.forEach(mergeCorrespondence, function (partName, index) {
            const partValue = mergeMatch[index + 1] || null
            mergeParts[partName] = partValue
          })
        } else {
          header = merge
          merge = null

          _.forEach(mergeCorrespondence, function (partName) {
            mergeParts[partName] = null
          })
        }

        const headerMatch = header.match(options.headerPattern)
        if (headerMatch) {
          _.forEach(headerCorrespondence, function (partName, index) {
            const partValue = headerMatch[index + 1] || null
            headerParts[partName] = partValue
          })
        } else {
          _.forEach(headerCorrespondence, function (partName) {
            headerParts[partName] = null
          })
        }

        Array.prototype.push.apply(
          references,
          getReferences(header, {
            references: regex.references,
            referenceParts: regex.referenceParts
          })
        )

        // body or footer
        _.forEach(lines, function (line) {
          if (options.fieldPattern) {
            const fieldMatch = options.fieldPattern.exec(line)

            if (fieldMatch) {
              currentProcessedField = fieldMatch[1]

              return
            }

            if (currentProcessedField) {
              otherFields[currentProcessedField] = append(otherFields[currentProcessedField], line)

              return
            }
          }

          let referenceMatched

          // this is a new important note
          const notesMatch = line.match(regex.notes)
          if (notesMatch) {
            continueNote = true
            isBody = false
            footer = append(footer, line)

            const note = {
              title: notesMatch[1],
              text: notesMatch[2]
            }

            notes.push(note)

            return
          }

          const lineReferences = getReferences(line, {
            references: regex.references,
            referenceParts: regex.referenceParts
          })

          if (lineReferences.length > 0) {
            isBody = false
            referenceMatched = true
            continueNote = false
          }

          Array.prototype.push.apply(references, lineReferences)

          if (referenceMatched) {
            footer = append(footer, line)

            return
          }

          if (continueNote) {
            notes[notes.length - 1].text = append(notes[notes.length - 1].text, line)
            footer = append(footer, line)

            return
          }

          if (isBody) {
            body = append(body, line)
          } else {
            footer = append(footer, line)
          }
        })

        if (options.breakingHeaderPattern && notes.length === 0) {
          const breakingHeader = header.match(options.breakingHeaderPattern)
          if (breakingHeader) {
            const noteText = breakingHeader[3] // the description of the change.
            notes.push({
              title: "BREAKING CHANGE",
              text: noteText
            })
          }
        }

        while ((mentionsMatch = regex.mentions.exec(raw))) {
          mentions.push(mentionsMatch[1])
        }

        // does this commit revert any other commit?
        const revertMatch = raw.match(options.revertPattern)
        if (revertMatch) {
          revert = {}
          _.forEach(revertCorrespondence, function (partName, index) {
            const partValue = revertMatch[index + 1] || null
            revert[partName] = partValue
          })
        } else {
          revert = null
        }

        _.map(notes, function (note) {
          note.text = trimOffNewlines(note.text)

          return note
        })

        const msg = _.merge(
          headerParts,
          mergeParts,
          {
            merge: merge,
            header: header,
            body: body ? trimOffNewlines(body) : null,
            footer: footer ? trimOffNewlines(footer) : null,
            notes: notes,
            references: references,
            mentions: mentions,
            revert: revert
          },
          otherFields
        )

        return msg
      }

      module.exports = parser

      /***/
    },

    /***/ 31411: /***/ (module) => {
      "use strict"

      const reNomatch = /(?!.*)/

      function join(array, joiner) {
        return array
          .map(function (val) {
            return val.trim()
          })
          .filter(function (val) {
            return val.length
          })
          .join(joiner)
      }

      function getNotesRegex(noteKeywords, notesPattern) {
        if (!noteKeywords) {
          return reNomatch
        }

        const noteKeywordsSelection = join(noteKeywords, "|")

        if (!notesPattern) {
          return new RegExp("^[\\s|*]*(" + noteKeywordsSelection + ")[:\\s]+(.*)", "i")
        }

        return notesPattern(noteKeywordsSelection)
      }

      function getReferencePartsRegex(issuePrefixes, issuePrefixesCaseSensitive) {
        if (!issuePrefixes) {
          return reNomatch
        }

        const flags = issuePrefixesCaseSensitive ? "g" : "gi"
        return new RegExp(
          "(?:.*?)??\\s*([\\w-\\.\\/]*?)??(" + join(issuePrefixes, "|") + ")([\\w-]*\\d+)",
          flags
        )
      }

      function getReferencesRegex(referenceActions) {
        if (!referenceActions) {
          // matches everything
          return /()(.+)/gi
        }

        const joinedKeywords = join(referenceActions, "|")
        return new RegExp(
          "(" + joinedKeywords + ")(?:\\s+(.*?))(?=(?:" + joinedKeywords + ")|$)",
          "gi"
        )
      }

      module.exports = function (options) {
        options = options || {}
        const reNotes = getNotesRegex(options.noteKeywords, options.notesPattern)
        const reReferenceParts = getReferencePartsRegex(
          options.issuePrefixes,
          options.issuePrefixesCaseSensitive
        )
        const reReferences = getReferencesRegex(options.referenceActions)

        return {
          notes: reNotes,
          referenceParts: reReferenceParts,
          references: reReferences,
          mentions: /@([\w-]+)/g
        }
      }

      /***/
    },

    /***/ 75999: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      const loader_1 = __nccwpck_require__(82159)
      exports["default"] = loader_1.TypeScriptLoader

      /***/
    },

    /***/ 82159: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.TypeScriptLoader = void 0
      const ts_node_1 = __nccwpck_require__(72719)
      const typescript_compile_error_1 = __nccwpck_require__(70465)
      function TypeScriptLoader(options) {
        return (path, content) => {
          try {
            // cosmiconfig requires the transpiled configuration to be CJS
            ;(0, ts_node_1.register)(
              Object.assign(Object.assign({}, options), { compilerOptions: { module: "commonjs" } })
            ).compile(content, path)
            const result = require(path)
            // `default` is used when exporting using export default, some modules
            // may still use `module.exports` or if in TS `export = `
            return result.default || result
          } catch (error) {
            if (error instanceof Error) {
              // Coerce generic error instance into typed error with better logging.
              throw typescript_compile_error_1.TypeScriptCompileError.fromError(error)
            }
            throw error
          }
        }
      }
      exports.TypeScriptLoader = TypeScriptLoader

      /***/
    },

    /***/ 70465: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.TypeScriptCompileError = void 0
      class TypeScriptCompileError extends Error {
        constructor(message) {
          super(message)
          this.name = this.constructor.name
          // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
          Object.setPrototypeOf(this, new.target.prototype)
        }
        static fromError(error) {
          const errMsg = error.message.replace(
            /(TypeScript compiler encountered syntax errors while transpiling\. Errors:\s?)|(⨯ Unable to compile TypeScript:\s?)/,
            ""
          )
          const message = `TypeScriptLoader failed to compile TypeScript:\n${errMsg}`
          const newError = new TypeScriptCompileError(message)
          newError.stack = error.stack
          return newError
        }
        /**
         * Support legacy usage of this method.
         * @deprecated
         */
        toObject() {
          return {
            message: this.message,
            name: this.name,
            stack: this.stack
          }
        }
      }
      exports.TypeScriptCompileError = TypeScriptCompileError

      /***/
    },

    /***/ 14638: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.Explorer = void 0

      var _path = _interopRequireDefault(__nccwpck_require__(71017))

      var _ExplorerBase = __nccwpck_require__(74135)

      var _readFile = __nccwpck_require__(91238)

      var _cacheWrapper = __nccwpck_require__(26905)

      var _getDirectory = __nccwpck_require__(96427)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      class Explorer extends _ExplorerBase.ExplorerBase {
        constructor(options) {
          super(options)
        }

        async search(searchFrom = process.cwd()) {
          const startDirectory = await (0, _getDirectory.getDirectory)(searchFrom)
          const result = await this.searchFromDirectory(startDirectory)
          return result
        }

        async searchFromDirectory(dir) {
          const absoluteDir = _path.default.resolve(process.cwd(), dir)

          const run = async () => {
            const result = await this.searchDirectory(absoluteDir)
            const nextDir = this.nextDirectoryToSearch(absoluteDir, result)

            if (nextDir) {
              return this.searchFromDirectory(nextDir)
            }

            const transformResult = await this.config.transform(result)
            return transformResult
          }

          if (this.searchCache) {
            return (0, _cacheWrapper.cacheWrapper)(this.searchCache, absoluteDir, run)
          }

          return run()
        }

        async searchDirectory(dir) {
          for await (const place of this.config.searchPlaces) {
            const placeResult = await this.loadSearchPlace(dir, place)

            if (this.shouldSearchStopWithResult(placeResult) === true) {
              return placeResult
            }
          } // config not found

          return null
        }

        async loadSearchPlace(dir, place) {
          const filepath = _path.default.join(dir, place)

          const fileContents = await (0, _readFile.readFile)(filepath)
          const result = await this.createCosmiconfigResult(filepath, fileContents)
          return result
        }

        async loadFileContent(filepath, content) {
          if (content === null) {
            return null
          }

          if (content.trim() === "") {
            return undefined
          }

          const loader = this.getLoaderEntryForFile(filepath)
          const loaderResult = await loader(filepath, content)
          return loaderResult
        }

        async createCosmiconfigResult(filepath, content) {
          const fileContent = await this.loadFileContent(filepath, content)
          const result = this.loadedContentToCosmiconfigResult(filepath, fileContent)
          return result
        }

        async load(filepath) {
          this.validateFilePath(filepath)

          const absoluteFilePath = _path.default.resolve(process.cwd(), filepath)

          const runLoad = async () => {
            const fileContents = await (0, _readFile.readFile)(absoluteFilePath, {
              throwNotFound: true
            })
            const result = await this.createCosmiconfigResult(absoluteFilePath, fileContents)
            const transformResult = await this.config.transform(result)
            return transformResult
          }

          if (this.loadCache) {
            return (0, _cacheWrapper.cacheWrapper)(this.loadCache, absoluteFilePath, runLoad)
          }

          return runLoad()
        }
      }

      exports.Explorer = Explorer
      //# sourceMappingURL=Explorer.js.map

      /***/
    },

    /***/ 74135: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.getExtensionDescription = getExtensionDescription
      exports.ExplorerBase = void 0

      var _path = _interopRequireDefault(__nccwpck_require__(71017))

      var _loaders = __nccwpck_require__(8751)

      var _getPropertyByPath = __nccwpck_require__(91719)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      class ExplorerBase {
        constructor(options) {
          if (options.cache === true) {
            this.loadCache = new Map()
            this.searchCache = new Map()
          }

          this.config = options
          this.validateConfig()
        }

        clearLoadCache() {
          if (this.loadCache) {
            this.loadCache.clear()
          }
        }

        clearSearchCache() {
          if (this.searchCache) {
            this.searchCache.clear()
          }
        }

        clearCaches() {
          this.clearLoadCache()
          this.clearSearchCache()
        }

        validateConfig() {
          const config = this.config
          config.searchPlaces.forEach((place) => {
            const loaderKey = _path.default.extname(place) || "noExt"
            const loader = config.loaders[loaderKey]

            if (!loader) {
              throw new Error(
                `No loader specified for ${getExtensionDescription(
                  place
                )}, so searchPlaces item "${place}" is invalid`
              )
            }

            if (typeof loader !== "function") {
              throw new Error(
                `loader for ${getExtensionDescription(
                  place
                )} is not a function (type provided: "${typeof loader}"), so searchPlaces item "${place}" is invalid`
              )
            }
          })
        }

        shouldSearchStopWithResult(result) {
          if (result === null) return false
          if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false
          return true
        }

        nextDirectoryToSearch(currentDir, currentResult) {
          if (this.shouldSearchStopWithResult(currentResult)) {
            return null
          }

          const nextDir = nextDirUp(currentDir)

          if (nextDir === currentDir || currentDir === this.config.stopDir) {
            return null
          }

          return nextDir
        }

        loadPackageProp(filepath, content) {
          const parsedContent = _loaders.loaders.loadJson(filepath, content)

          const packagePropValue = (0, _getPropertyByPath.getPropertyByPath)(
            parsedContent,
            this.config.packageProp
          )
          return packagePropValue || null
        }

        getLoaderEntryForFile(filepath) {
          if (_path.default.basename(filepath) === "package.json") {
            const loader = this.loadPackageProp.bind(this)
            return loader
          }

          const loaderKey = _path.default.extname(filepath) || "noExt"
          const loader = this.config.loaders[loaderKey]

          if (!loader) {
            throw new Error(`No loader specified for ${getExtensionDescription(filepath)}`)
          }

          return loader
        }

        loadedContentToCosmiconfigResult(filepath, loadedContent) {
          if (loadedContent === null) {
            return null
          }

          if (loadedContent === undefined) {
            return {
              filepath,
              config: undefined,
              isEmpty: true
            }
          }

          return {
            config: loadedContent,
            filepath
          }
        }

        validateFilePath(filepath) {
          if (!filepath) {
            throw new Error("load must pass a non-empty string")
          }
        }
      }

      exports.ExplorerBase = ExplorerBase

      function nextDirUp(dir) {
        return _path.default.dirname(dir)
      }

      function getExtensionDescription(filepath) {
        const ext = _path.default.extname(filepath)

        return ext ? `extension "${ext}"` : "files without extensions"
      }
      //# sourceMappingURL=ExplorerBase.js.map

      /***/
    },

    /***/ 56239: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.ExplorerSync = void 0

      var _path = _interopRequireDefault(__nccwpck_require__(71017))

      var _ExplorerBase = __nccwpck_require__(74135)

      var _readFile = __nccwpck_require__(91238)

      var _cacheWrapper = __nccwpck_require__(26905)

      var _getDirectory = __nccwpck_require__(96427)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      class ExplorerSync extends _ExplorerBase.ExplorerBase {
        constructor(options) {
          super(options)
        }

        searchSync(searchFrom = process.cwd()) {
          const startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom)
          const result = this.searchFromDirectorySync(startDirectory)
          return result
        }

        searchFromDirectorySync(dir) {
          const absoluteDir = _path.default.resolve(process.cwd(), dir)

          const run = () => {
            const result = this.searchDirectorySync(absoluteDir)
            const nextDir = this.nextDirectoryToSearch(absoluteDir, result)

            if (nextDir) {
              return this.searchFromDirectorySync(nextDir)
            }

            const transformResult = this.config.transform(result)
            return transformResult
          }

          if (this.searchCache) {
            return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run)
          }

          return run()
        }

        searchDirectorySync(dir) {
          for (const place of this.config.searchPlaces) {
            const placeResult = this.loadSearchPlaceSync(dir, place)

            if (this.shouldSearchStopWithResult(placeResult) === true) {
              return placeResult
            }
          } // config not found

          return null
        }

        loadSearchPlaceSync(dir, place) {
          const filepath = _path.default.join(dir, place)

          const content = (0, _readFile.readFileSync)(filepath)
          const result = this.createCosmiconfigResultSync(filepath, content)
          return result
        }

        loadFileContentSync(filepath, content) {
          if (content === null) {
            return null
          }

          if (content.trim() === "") {
            return undefined
          }

          const loader = this.getLoaderEntryForFile(filepath)
          const loaderResult = loader(filepath, content)
          return loaderResult
        }

        createCosmiconfigResultSync(filepath, content) {
          const fileContent = this.loadFileContentSync(filepath, content)
          const result = this.loadedContentToCosmiconfigResult(filepath, fileContent)
          return result
        }

        loadSync(filepath) {
          this.validateFilePath(filepath)

          const absoluteFilePath = _path.default.resolve(process.cwd(), filepath)

          const runLoadSync = () => {
            const content = (0, _readFile.readFileSync)(absoluteFilePath, {
              throwNotFound: true
            })
            const cosmiconfigResult = this.createCosmiconfigResultSync(absoluteFilePath, content)
            const transformResult = this.config.transform(cosmiconfigResult)
            return transformResult
          }

          if (this.loadCache) {
            return (0, _cacheWrapper.cacheWrapperSync)(
              this.loadCache,
              absoluteFilePath,
              runLoadSync
            )
          }

          return runLoadSync()
        }
      }

      exports.ExplorerSync = ExplorerSync
      //# sourceMappingURL=ExplorerSync.js.map

      /***/
    },

    /***/ 26905: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.cacheWrapper = cacheWrapper
      exports.cacheWrapperSync = cacheWrapperSync

      async function cacheWrapper(cache, key, fn) {
        const cached = cache.get(key)

        if (cached !== undefined) {
          return cached
        }

        const result = await fn()
        cache.set(key, result)
        return result
      }

      function cacheWrapperSync(cache, key, fn) {
        const cached = cache.get(key)

        if (cached !== undefined) {
          return cached
        }

        const result = fn()
        cache.set(key, result)
        return result
      }
      //# sourceMappingURL=cacheWrapper.js.map

      /***/
    },

    /***/ 96427: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.getDirectory = getDirectory
      exports.getDirectorySync = getDirectorySync

      var _path = _interopRequireDefault(__nccwpck_require__(71017))

      var _pathType = __nccwpck_require__(63433)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      async function getDirectory(filepath) {
        const filePathIsDirectory = await (0, _pathType.isDirectory)(filepath)

        if (filePathIsDirectory === true) {
          return filepath
        }

        const directory = _path.default.dirname(filepath)

        return directory
      }

      function getDirectorySync(filepath) {
        const filePathIsDirectory = (0, _pathType.isDirectorySync)(filepath)

        if (filePathIsDirectory === true) {
          return filepath
        }

        const directory = _path.default.dirname(filepath)

        return directory
      }
      //# sourceMappingURL=getDirectory.js.map

      /***/
    },

    /***/ 91719: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.getPropertyByPath = getPropertyByPath

      // Resolves property names or property paths defined with period-delimited
      // strings or arrays of strings. Property names that are found on the source
      // object are used directly (even if they include a period).
      // Nested property names that include periods, within a path, are only
      // understood in array paths.
      function getPropertyByPath(source, path) {
        if (typeof path === "string" && Object.prototype.hasOwnProperty.call(source, path)) {
          return source[path]
        }

        const parsedPath = typeof path === "string" ? path.split(".") : path // eslint-disable-next-line @typescript-eslint/no-explicit-any

        return parsedPath.reduce((previous, key) => {
          if (previous === undefined) {
            return previous
          }

          return previous[key]
        }, source)
      }
      //# sourceMappingURL=getPropertyByPath.js.map

      /***/
    },

    /***/ 4066: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.cosmiconfig = cosmiconfig
      exports.cosmiconfigSync = cosmiconfigSync
      exports.defaultLoaders = void 0

      var _os = _interopRequireDefault(__nccwpck_require__(22037))

      var _Explorer = __nccwpck_require__(14638)

      var _ExplorerSync = __nccwpck_require__(56239)

      var _loaders = __nccwpck_require__(8751)

      var _types = __nccwpck_require__(51943)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
      // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
      function cosmiconfig(moduleName, options = {}) {
        const normalizedOptions = normalizeOptions(moduleName, options)
        const explorer = new _Explorer.Explorer(normalizedOptions)
        return {
          search: explorer.search.bind(explorer),
          load: explorer.load.bind(explorer),
          clearLoadCache: explorer.clearLoadCache.bind(explorer),
          clearSearchCache: explorer.clearSearchCache.bind(explorer),
          clearCaches: explorer.clearCaches.bind(explorer)
        }
      } // eslint-disable-next-line @typescript-eslint/explicit-function-return-type

      function cosmiconfigSync(moduleName, options = {}) {
        const normalizedOptions = normalizeOptions(moduleName, options)
        const explorerSync = new _ExplorerSync.ExplorerSync(normalizedOptions)
        return {
          search: explorerSync.searchSync.bind(explorerSync),
          load: explorerSync.loadSync.bind(explorerSync),
          clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),
          clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),
          clearCaches: explorerSync.clearCaches.bind(explorerSync)
        }
      } // do not allow mutation of default loaders. Make sure it is set inside options

      const defaultLoaders = Object.freeze({
        ".cjs": _loaders.loaders.loadJs,
        ".js": _loaders.loaders.loadJs,
        ".json": _loaders.loaders.loadJson,
        ".yaml": _loaders.loaders.loadYaml,
        ".yml": _loaders.loaders.loadYaml,
        noExt: _loaders.loaders.loadYaml
      })
      exports.defaultLoaders = defaultLoaders

      const identity = function identity(x) {
        return x
      }

      function normalizeOptions(moduleName, options) {
        const defaults = {
          packageProp: moduleName,
          searchPlaces: [
            "package.json",
            `.${moduleName}rc`,
            `.${moduleName}rc.json`,
            `.${moduleName}rc.yaml`,
            `.${moduleName}rc.yml`,
            `.${moduleName}rc.js`,
            `.${moduleName}rc.cjs`,
            `${moduleName}.config.js`,
            `${moduleName}.config.cjs`
          ],
          ignoreEmptySearchPlaces: true,
          stopDir: _os.default.homedir(),
          cache: true,
          transform: identity,
          loaders: defaultLoaders
        }
        const normalizedOptions = {
          ...defaults,
          ...options,
          loaders: { ...defaults.loaders, ...options.loaders }
        }
        return normalizedOptions
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 8751: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.loaders = void 0

      /* eslint-disable @typescript-eslint/no-require-imports */
      let importFresh

      const loadJs = function loadJs(filepath) {
        if (importFresh === undefined) {
          importFresh = __nccwpck_require__(52714)
        }

        const result = importFresh(filepath)
        return result
      }

      let parseJson

      const loadJson = function loadJson(filepath, content) {
        if (parseJson === undefined) {
          parseJson = __nccwpck_require__(86615)
        }

        try {
          const result = parseJson(content)
          return result
        } catch (error) {
          error.message = `JSON Error in ${filepath}:\n${error.message}`
          throw error
        }
      }

      let yaml

      const loadYaml = function loadYaml(filepath, content) {
        if (yaml === undefined) {
          yaml = __nccwpck_require__(44603)
        }

        try {
          const result = yaml.parse(content, {
            prettyErrors: true
          })
          return result
        } catch (error) {
          error.message = `YAML Error in ${filepath}:\n${error.message}`
          throw error
        }
      }

      const loaders = {
        loadJs,
        loadJson,
        loadYaml
      }
      exports.loaders = loaders
      //# sourceMappingURL=loaders.js.map

      /***/
    },

    /***/ 91238: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.readFile = readFile
      exports.readFileSync = readFileSync

      var _fs = _interopRequireDefault(__nccwpck_require__(57147))

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      async function fsReadFileAsync(pathname, encoding) {
        return new Promise((resolve, reject) => {
          _fs.default.readFile(pathname, encoding, (error, contents) => {
            if (error) {
              reject(error)
              return
            }

            resolve(contents)
          })
        })
      }

      async function readFile(filepath, options = {}) {
        const throwNotFound = options.throwNotFound === true

        try {
          const content = await fsReadFileAsync(filepath, "utf8")
          return content
        } catch (error) {
          if (throwNotFound === false && (error.code === "ENOENT" || error.code === "EISDIR")) {
            return null
          }

          throw error
        }
      }

      function readFileSync(filepath, options = {}) {
        const throwNotFound = options.throwNotFound === true

        try {
          const content = _fs.default.readFileSync(filepath, "utf8")

          return content
        } catch (error) {
          if (throwNotFound === false && (error.code === "ENOENT" || error.code === "EISDIR")) {
            return null
          }

          throw error
        }
      }
      //# sourceMappingURL=readFile.js.map

      /***/
    },

    /***/ 51943: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      //# sourceMappingURL=types.js.map

      /***/
    },

    /***/ 45830: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const nativeModule = __nccwpck_require__(98188)
      const path = __nccwpck_require__(71017)
      const fs = __nccwpck_require__(57147)

      function createRequire(filename) {
        // Fallback to process.cwd() if no filename passed
        if (!filename) {
          filename = process.cwd()
        }

        // If filename is dir, createRequire goes with parent directory, so we need fakepath
        if (isDir(filename)) {
          filename = path.join(filename, "index.js")
        }

        // Added in Node v12.2.0
        if (nativeModule.createRequire) {
          return nativeModule.createRequire(filename)
        }

        // Added in Node v10.12.0 and deprecated since Node v12.2.0
        if (nativeModule.createRequireFromPath) {
          return nativeModule.createRequireFromPath(filename)
        }

        // Polyfill
        return _createRequire(filename)
      }

      // Polyfill
      function _createRequire(filename) {
        const mod = new nativeModule.Module(filename, null)
        mod.filename = filename
        mod.paths = nativeModule.Module._nodeModulePaths(path.dirname(filename))
        mod._compile("module.exports = require;", filename)
        return mod.exports
      }

      function isDir(path) {
        try {
          const stat = fs.lstatSync(path)
          return stat.isDirectory()
        } catch (e) {
          // lstatSync throws an error if path doesn't exist
          return false
        }
      }

      module.exports = createRequire

      /***/
    },

    /***/ 72746: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const cp = __nccwpck_require__(32081)
      const parse = __nccwpck_require__(66855)
      const enoent = __nccwpck_require__(44101)

      function spawn(command, args, options) {
        // Parse the arguments
        const parsed = parse(command, args, options)

        // Spawn the child process
        const spawned = cp.spawn(parsed.command, parsed.args, parsed.options)

        // Hook into child process "exit" event to emit an error if the command
        // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
        enoent.hookChildProcess(spawned, parsed)

        return spawned
      }

      function spawnSync(command, args, options) {
        // Parse the arguments
        const parsed = parse(command, args, options)

        // Spawn the child process
        const result = cp.spawnSync(parsed.command, parsed.args, parsed.options)

        // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
        result.error = result.error || enoent.verifyENOENTSync(result.status, parsed)

        return result
      }

      module.exports = spawn
      module.exports.spawn = spawn
      module.exports.sync = spawnSync

      module.exports._parse = parse
      module.exports._enoent = enoent

      /***/
    },

    /***/ 44101: /***/ (module) => {
      "use strict"

      const isWin = process.platform === "win32"

      function notFoundError(original, syscall) {
        return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
          code: "ENOENT",
          errno: "ENOENT",
          syscall: `${syscall} ${original.command}`,
          path: original.command,
          spawnargs: original.args
        })
      }

      function hookChildProcess(cp, parsed) {
        if (!isWin) {
          return
        }

        const originalEmit = cp.emit

        cp.emit = function (name, arg1) {
          // If emitting "exit" event and exit code is 1, we need to check if
          // the command exists and emit an "error" instead
          // See https://github.com/IndigoUnited/node-cross-spawn/issues/16
          if (name === "exit") {
            const err = verifyENOENT(arg1, parsed, "spawn")

            if (err) {
              return originalEmit.call(cp, "error", err)
            }
          }

          return originalEmit.apply(cp, arguments) // eslint-disable-line prefer-rest-params
        }
      }

      function verifyENOENT(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawn")
        }

        return null
      }

      function verifyENOENTSync(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawnSync")
        }

        return null
      }

      module.exports = {
        hookChildProcess,
        verifyENOENT,
        verifyENOENTSync,
        notFoundError
      }

      /***/
    },

    /***/ 66855: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const resolveCommand = __nccwpck_require__(87274)
      const escape = __nccwpck_require__(34274)
      const readShebang = __nccwpck_require__(41252)

      const isWin = process.platform === "win32"
      const isExecutableRegExp = /\.(?:com|exe)$/i
      const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i

      function detectShebang(parsed) {
        parsed.file = resolveCommand(parsed)

        const shebang = parsed.file && readShebang(parsed.file)

        if (shebang) {
          parsed.args.unshift(parsed.file)
          parsed.command = shebang

          return resolveCommand(parsed)
        }

        return parsed.file
      }

      function parseNonShell(parsed) {
        if (!isWin) {
          return parsed
        }

        // Detect & add support for shebangs
        const commandFile = detectShebang(parsed)

        // We don't need a shell if the command filename is an executable
        const needsShell = !isExecutableRegExp.test(commandFile)

        // If a shell is required, use cmd.exe and take care of escaping everything correctly
        // Note that `forceShell` is an hidden option used only in tests
        if (parsed.options.forceShell || needsShell) {
          // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`
          // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument
          // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,
          // we need to double escape them
          const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile)

          // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\bar)
          // This is necessary otherwise it will always fail with ENOENT in those cases
          parsed.command = path.normalize(parsed.command)

          // Escape command & arguments
          parsed.command = escape.command(parsed.command)
          parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars))

          const shellCommand = [parsed.command].concat(parsed.args).join(" ")

          parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`]
          parsed.command = process.env.comspec || "cmd.exe"
          parsed.options.windowsVerbatimArguments = true // Tell node's spawn that the arguments are already escaped
        }

        return parsed
      }

      function parse(command, args, options) {
        // Normalize arguments, similar to nodejs
        if (args && !Array.isArray(args)) {
          options = args
          args = null
        }

        args = args ? args.slice(0) : [] // Clone array to avoid changing the original
        options = Object.assign({}, options) // Clone object to avoid changing the original

        // Build our parsed object
        const parsed = {
          command,
          args,
          options,
          file: undefined,
          original: {
            command,
            args
          }
        }

        // Delegate further parsing to shell or non-shell
        return options.shell ? parsed : parseNonShell(parsed)
      }

      module.exports = parse

      /***/
    },

    /***/ 34274: /***/ (module) => {
      "use strict"

      // See http://www.robvanderwoude.com/escapechars.php
      const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g

      function escapeCommand(arg) {
        // Escape meta chars
        arg = arg.replace(metaCharsRegExp, "^$1")

        return arg
      }

      function escapeArgument(arg, doubleEscapeMetaChars) {
        // Convert to string
        arg = `${arg}`

        // Algorithm below is based on https://qntm.org/cmd

        // Sequence of backslashes followed by a double quote:
        // double up all the backslashes and escape the double quote
        arg = arg.replace(/(\\*)"/g, '$1$1\\"')

        // Sequence of backslashes followed by the end of the string
        // (which will become a double quote later):
        // double up all the backslashes
        arg = arg.replace(/(\\*)$/, "$1$1")

        // All other backslashes occur literally

        // Quote the whole thing:
        arg = `"${arg}"`

        // Escape meta chars
        arg = arg.replace(metaCharsRegExp, "^$1")

        // Double escape meta chars if necessary
        if (doubleEscapeMetaChars) {
          arg = arg.replace(metaCharsRegExp, "^$1")
        }

        return arg
      }

      module.exports.command = escapeCommand
      module.exports.argument = escapeArgument

      /***/
    },

    /***/ 41252: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const fs = __nccwpck_require__(57147)
      const shebangCommand = __nccwpck_require__(67032)

      function readShebang(command) {
        // Read the first 150 bytes from the file
        const size = 150
        const buffer = Buffer.alloc(size)

        let fd

        try {
          fd = fs.openSync(command, "r")
          fs.readSync(fd, buffer, 0, size, 0)
          fs.closeSync(fd)
        } catch (e) {
          /* Empty */
        }

        // Attempt to extract shebang (null is returned if not a shebang)
        return shebangCommand(buffer.toString())
      }

      module.exports = readShebang

      /***/
    },

    /***/ 87274: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const which = __nccwpck_require__(34207)
      const getPathKey = __nccwpck_require__(20539)

      function resolveCommandAttempt(parsed, withoutPathExt) {
        const env = parsed.options.env || process.env
        const cwd = process.cwd()
        const hasCustomCwd = parsed.options.cwd != null
        // Worker threads do not have process.chdir()
        const shouldSwitchCwd =
          hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled

        // If a custom `cwd` was specified, we need to change the process cwd
        // because `which` will do stat calls but does not support a custom cwd
        if (shouldSwitchCwd) {
          try {
            process.chdir(parsed.options.cwd)
          } catch (err) {
            /* Empty */
          }
        }

        let resolved

        try {
          resolved = which.sync(parsed.command, {
            path: env[getPathKey({ env })],
            pathExt: withoutPathExt ? path.delimiter : undefined
          })
        } catch (e) {
          /* Empty */
        } finally {
          if (shouldSwitchCwd) {
            process.chdir(cwd)
          }
        }

        // If we successfully resolved, ensure that an absolute path is returned
        // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it
        if (resolved) {
          resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved)
        }

        return resolved
      }

      function resolveCommand(parsed) {
        return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true)
      }

      module.exports = resolveCommand

      /***/
    },

    /***/ 28222: /***/ (module, exports, __nccwpck_require__) => {
      /* eslint-env browser */

      /**
       * This is the web browser implementation of `debug()`.
       */

      exports.formatArgs = formatArgs
      exports.save = save
      exports.load = load
      exports.useColors = useColors
      exports.storage = localstorage()
      exports.destroy = (() => {
        let warned = false

        return () => {
          if (!warned) {
            warned = true
            console.warn(
              "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
            )
          }
        }
      })()

      /**
       * Colors.
       */

      exports.colors = [
        "#0000CC",
        "#0000FF",
        "#0033CC",
        "#0033FF",
        "#0066CC",
        "#0066FF",
        "#0099CC",
        "#0099FF",
        "#00CC00",
        "#00CC33",
        "#00CC66",
        "#00CC99",
        "#00CCCC",
        "#00CCFF",
        "#3300CC",
        "#3300FF",
        "#3333CC",
        "#3333FF",
        "#3366CC",
        "#3366FF",
        "#3399CC",
        "#3399FF",
        "#33CC00",
        "#33CC33",
        "#33CC66",
        "#33CC99",
        "#33CCCC",
        "#33CCFF",
        "#6600CC",
        "#6600FF",
        "#6633CC",
        "#6633FF",
        "#66CC00",
        "#66CC33",
        "#9900CC",
        "#9900FF",
        "#9933CC",
        "#9933FF",
        "#99CC00",
        "#99CC33",
        "#CC0000",
        "#CC0033",
        "#CC0066",
        "#CC0099",
        "#CC00CC",
        "#CC00FF",
        "#CC3300",
        "#CC3333",
        "#CC3366",
        "#CC3399",
        "#CC33CC",
        "#CC33FF",
        "#CC6600",
        "#CC6633",
        "#CC9900",
        "#CC9933",
        "#CCCC00",
        "#CCCC33",
        "#FF0000",
        "#FF0033",
        "#FF0066",
        "#FF0099",
        "#FF00CC",
        "#FF00FF",
        "#FF3300",
        "#FF3333",
        "#FF3366",
        "#FF3399",
        "#FF33CC",
        "#FF33FF",
        "#FF6600",
        "#FF6633",
        "#FF9900",
        "#FF9933",
        "#FFCC00",
        "#FFCC33"
      ]

      /**
       * Currently only WebKit-based Web Inspectors, Firefox >= v31,
       * and the Firebug extension (any Firefox version) are known
       * to support "%c" CSS customizations.
       *
       * TODO: add a `localStorage` variable to explicitly enable/disable colors
       */

      // eslint-disable-next-line complexity
      function useColors() {
        // NB: In an Electron preload script, document will be defined but not fully
        // initialized. Since we know we're in Chrome, we'll just detect this case
        // explicitly
        if (
          typeof window !== "undefined" &&
          window.process &&
          (window.process.type === "renderer" || window.process.__nwjs)
        ) {
          return true
        }

        // Internet Explorer and Edge do not support colors.
        if (
          typeof navigator !== "undefined" &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
        ) {
          return false
        }

        // Is webkit? http://stackoverflow.com/a/16459606/376773
        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
        return (
          (typeof document !== "undefined" &&
            document.documentElement &&
            document.documentElement.style &&
            document.documentElement.style.WebkitAppearance) ||
          // Is firebug? http://stackoverflow.com/a/398120/376773
          (typeof window !== "undefined" &&
            window.console &&
            (window.console.firebug || (window.console.exception && window.console.table))) ||
          // Is firefox >= v31?
          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
          (typeof navigator !== "undefined" &&
            navigator.userAgent &&
            navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
            parseInt(RegExp.$1, 10) >= 31) ||
          // Double check webkit in userAgent just in case we are in a worker
          (typeof navigator !== "undefined" &&
            navigator.userAgent &&
            navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
        )
      }

      /**
       * Colorize log arguments if enabled.
       *
       * @api public
       */

      function formatArgs(args) {
        args[0] =
          (this.useColors ? "%c" : "") +
          this.namespace +
          (this.useColors ? " %c" : " ") +
          args[0] +
          (this.useColors ? "%c " : " ") +
          "+" +
          module.exports.humanize(this.diff)

        if (!this.useColors) {
          return
        }

        const c = "color: " + this.color
        args.splice(1, 0, c, "color: inherit")

        // The final "%c" is somewhat tricky, because there could be other
        // arguments passed either before or after the %c, so we need to
        // figure out the correct index to insert the CSS into
        let index = 0
        let lastC = 0
        args[0].replace(/%[a-zA-Z%]/g, (match) => {
          if (match === "%%") {
            return
          }
          index++
          if (match === "%c") {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index
          }
        })

        args.splice(lastC, 0, c)
      }

      /**
       * Invokes `console.debug()` when available.
       * No-op when `console.debug` is not a "function".
       * If `console.debug` is not available, falls back
       * to `console.log`.
       *
       * @api public
       */
      exports.log = console.debug || console.log || (() => {})

      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem("debug", namespaces)
          } else {
            exports.storage.removeItem("debug")
          }
        } catch (error) {
          // Swallow
          // XXX (@Qix-) should we be logging these?
        }
      }

      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */
      function load() {
        let r
        try {
          r = exports.storage.getItem("debug")
        } catch (error) {
          // Swallow
          // XXX (@Qix-) should we be logging these?
        }

        // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
        if (!r && typeof process !== "undefined" && "env" in process) {
          r = process.env.DEBUG
        }

        return r
      }

      /**
       * Localstorage attempts to return the localstorage.
       *
       * This is necessary because safari throws
       * when a user disables cookies/localstorage
       * and you attempt to access it.
       *
       * @return {LocalStorage}
       * @api private
       */

      function localstorage() {
        try {
          // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
          // The Browser also has localStorage in the global context.
          return localStorage
        } catch (error) {
          // Swallow
          // XXX (@Qix-) should we be logging these?
        }
      }

      module.exports = __nccwpck_require__(46243)(exports)

      const { formatters } = module.exports

      /**
       * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
       */

      formatters.j = function (v) {
        try {
          return JSON.stringify(v)
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message
        }
      }

      /***/
    },

    /***/ 46243: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      /**
       * This is the common logic for both the Node.js and web browser
       * implementations of `debug()`.
       */

      function setup(env) {
        createDebug.debug = createDebug
        createDebug.default = createDebug
        createDebug.coerce = coerce
        createDebug.disable = disable
        createDebug.enable = enable
        createDebug.enabled = enabled
        createDebug.humanize = __nccwpck_require__(80900)
        createDebug.destroy = destroy

        Object.keys(env).forEach((key) => {
          createDebug[key] = env[key]
        })

        /**
         * The currently active debug mode names, and names to skip.
         */

        createDebug.names = []
        createDebug.skips = []

        /**
         * Map of special "%n" handling functions, for the debug "format" argument.
         *
         * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
         */
        createDebug.formatters = {}

        /**
         * Selects a color for a debug namespace
         * @param {String} namespace The namespace string for the debug instance to be colored
         * @return {Number|String} An ANSI color code for the given namespace
         * @api private
         */
        function selectColor(namespace) {
          let hash = 0

          for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i)
            hash |= 0 // Convert to 32bit integer
          }

          return createDebug.colors[Math.abs(hash) % createDebug.colors.length]
        }
        createDebug.selectColor = selectColor

        /**
         * Create a debugger with the given `namespace`.
         *
         * @param {String} namespace
         * @return {Function}
         * @api public
         */
        function createDebug(namespace) {
          let prevTime
          let enableOverride = null
          let namespacesCache
          let enabledCache

          function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
              return
            }

            const self = debug

            // Set `diff` timestamp
            const curr = Number(new Date())
            const ms = curr - (prevTime || curr)
            self.diff = ms
            self.prev = prevTime
            self.curr = curr
            prevTime = curr

            args[0] = createDebug.coerce(args[0])

            if (typeof args[0] !== "string") {
              // Anything else let's inspect with %O
              args.unshift("%O")
            }

            // Apply any `formatters` transformations
            let index = 0
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              // If we encounter an escaped % then don't increase the array index
              if (match === "%%") {
                return "%"
              }
              index++
              const formatter = createDebug.formatters[format]
              if (typeof formatter === "function") {
                const val = args[index]
                match = formatter.call(self, val)

                // Now we need to remove `args[index]` since it's inlined in the `format`
                args.splice(index, 1)
                index--
              }
              return match
            })

            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args)

            const logFn = self.log || createDebug.log
            logFn.apply(self, args)
          }

          debug.namespace = namespace
          debug.useColors = createDebug.useColors()
          debug.color = createDebug.selectColor(namespace)
          debug.extend = extend
          debug.destroy = createDebug.destroy // XXX Temporary. Will be removed in the next major release.

          Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces
                enabledCache = createDebug.enabled(namespace)
              }

              return enabledCache
            },
            set: (v) => {
              enableOverride = v
            }
          })

          // Env-specific initialization logic for debug instances
          if (typeof createDebug.init === "function") {
            createDebug.init(debug)
          }

          return debug
        }

        function extend(namespace, delimiter) {
          const newDebug = createDebug(
            this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace
          )
          newDebug.log = this.log
          return newDebug
        }

        /**
         * Enables a debug mode by namespaces. This can include modes
         * separated by a colon and wildcards.
         *
         * @param {String} namespaces
         * @api public
         */
        function enable(namespaces) {
          createDebug.save(namespaces)
          createDebug.namespaces = namespaces

          createDebug.names = []
          createDebug.skips = []

          let i
          const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/)
          const len = split.length

          for (i = 0; i < len; i++) {
            if (!split[i]) {
              // ignore empty strings
              continue
            }

            namespaces = split[i].replace(/\*/g, ".*?")

            if (namespaces[0] === "-") {
              createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"))
            } else {
              createDebug.names.push(new RegExp("^" + namespaces + "$"))
            }
          }
        }

        /**
         * Disable debug output.
         *
         * @return {String} namespaces
         * @api public
         */
        function disable() {
          const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
          ].join(",")
          createDebug.enable("")
          return namespaces
        }

        /**
         * Returns true if the given mode name is enabled, false otherwise.
         *
         * @param {String} name
         * @return {Boolean}
         * @api public
         */
        function enabled(name) {
          if (name[name.length - 1] === "*") {
            return true
          }

          let i
          let len

          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false
            }
          }

          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true
            }
          }

          return false
        }

        /**
         * Convert regexp to namespace
         *
         * @param {RegExp} regxep
         * @return {String} namespace
         * @api private
         */
        function toNamespace(regexp) {
          return regexp
            .toString()
            .substring(2, regexp.toString().length - 2)
            .replace(/\.\*\?$/, "*")
        }

        /**
         * Coerce `val`.
         *
         * @param {Mixed} val
         * @return {Mixed}
         * @api private
         */
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message
          }
          return val
        }

        /**
         * XXX DO NOT USE. This is a temporary stub function.
         * XXX It WILL be removed in the next major release.
         */
        function destroy() {
          console.warn(
            "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
          )
        }

        createDebug.enable(createDebug.load())

        return createDebug
      }

      module.exports = setup

      /***/
    },

    /***/ 38237: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      /**
       * Detect Electron renderer / nwjs process, which is node, but we should
       * treat as a browser.
       */

      if (
        typeof process === "undefined" ||
        process.type === "renderer" ||
        process.browser === true ||
        process.__nwjs
      ) {
        module.exports = __nccwpck_require__(28222)
      } else {
        module.exports = __nccwpck_require__(35332)
      }

      /***/
    },

    /***/ 35332: /***/ (module, exports, __nccwpck_require__) => {
      /**
       * Module dependencies.
       */

      const tty = __nccwpck_require__(76224)
      const util = __nccwpck_require__(73837)

      /**
       * This is the Node.js implementation of `debug()`.
       */

      exports.init = init
      exports.log = log
      exports.formatArgs = formatArgs
      exports.save = save
      exports.load = load
      exports.useColors = useColors
      exports.destroy = util.deprecate(() => {},
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")

      /**
       * Colors.
       */

      exports.colors = [6, 2, 3, 4, 5, 1]

      try {
        // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
        // eslint-disable-next-line import/no-extraneous-dependencies
        const supportsColor = __nccwpck_require__(59318)

        if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
          exports.colors = [
            20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75,
            76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160,
            161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185,
            196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221
          ]
        }
      } catch (error) {
        // Swallow - we only care if `supports-color` is available; it doesn't have to be.
      }

      /**
       * Build up the default `inspectOpts` object from the environment variables.
       *
       *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
       */

      exports.inspectOpts = Object.keys(process.env)
        .filter((key) => {
          return /^debug_/i.test(key)
        })
        .reduce((obj, key) => {
          // Camel-case
          const prop = key
            .substring(6)
            .toLowerCase()
            .replace(/_([a-z])/g, (_, k) => {
              return k.toUpperCase()
            })

          // Coerce string value into JS value
          let val = process.env[key]
          if (/^(yes|on|true|enabled)$/i.test(val)) {
            val = true
          } else if (/^(no|off|false|disabled)$/i.test(val)) {
            val = false
          } else if (val === "null") {
            val = null
          } else {
            val = Number(val)
          }

          obj[prop] = val
          return obj
        }, {})

      /**
       * Is stdout a TTY? Colored output is enabled when `true`.
       */

      function useColors() {
        return "colors" in exports.inspectOpts
          ? Boolean(exports.inspectOpts.colors)
          : tty.isatty(process.stderr.fd)
      }

      /**
       * Adds ANSI color escape codes if enabled.
       *
       * @api public
       */

      function formatArgs(args) {
        const { namespace: name, useColors } = this

        if (useColors) {
          const c = this.color
          const colorCode = "\u001B[3" + (c < 8 ? c : "8;5;" + c)
          const prefix = `  ${colorCode};1m${name} \u001B[0m`

          args[0] = prefix + args[0].split("\n").join("\n" + prefix)
          args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\u001B[0m")
        } else {
          args[0] = getDate() + name + " " + args[0]
        }
      }

      function getDate() {
        if (exports.inspectOpts.hideDate) {
          return ""
        }
        return new Date().toISOString() + " "
      }

      /**
       * Invokes `util.format()` with the specified arguments and writes to stderr.
       */

      function log(...args) {
        return process.stderr.write(util.format(...args) + "\n")
      }

      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */
      function save(namespaces) {
        if (namespaces) {
          process.env.DEBUG = namespaces
        } else {
          // If you set a process.env field to null or undefined, it gets cast to the
          // string 'null' or 'undefined'. Just delete instead.
          delete process.env.DEBUG
        }
      }

      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */

      function load() {
        return process.env.DEBUG
      }

      /**
       * Init logic for `debug` instances.
       *
       * Create a new `inspectOpts` object in case `useColors` is set
       * differently for a particular `debug` instance.
       */

      function init(debug) {
        debug.inspectOpts = {}

        const keys = Object.keys(exports.inspectOpts)
        for (let i = 0; i < keys.length; i++) {
          debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]]
        }
      }

      module.exports = __nccwpck_require__(46243)(exports)

      const { formatters } = module.exports

      /**
       * Map %o to `util.inspect()`, all on a single line.
       */

      formatters.o = function (v) {
        this.inspectOpts.colors = this.useColors
        return util
          .inspect(v, this.inspectOpts)
          .split("\n")
          .map((str) => str.trim())
          .join(" ")
      }

      /**
       * Map %O to `util.inspect()`, allowing multiple lines if needed.
       */

      formatters.O = function (v) {
        this.inspectOpts.colors = this.useColors
        return util.inspect(v, this.inspectOpts)
      }

      /***/
    },

    /***/ 58932: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      class Deprecation extends Error {
        constructor(message) {
          super(message) // Maintains proper stack trace (only available on V8)

          /* istanbul ignore next */

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor)
          }

          this.name = "Deprecation"
        }
      }

      exports.Deprecation = Deprecation

      /***/
    },

    /***/ 32859: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.convertChangesToDMP = convertChangesToDMP

      /*istanbul ignore end*/
      // See: http://code.google.com/p/google-diff-match-patch/wiki/API
      function convertChangesToDMP(changes) {
        var ret = [],
          change,
          operation

        for (var i = 0; i < changes.length; i++) {
          change = changes[i]

          if (change.added) {
            operation = 1
          } else if (change.removed) {
            operation = -1
          } else {
            operation = 0
          }

          ret.push([operation, change.value])
        }

        return ret
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb252ZXJ0L2RtcC5qcyJdLCJuYW1lcyI6WyJjb252ZXJ0Q2hhbmdlc1RvRE1QIiwiY2hhbmdlcyIsInJldCIsImNoYW5nZSIsIm9wZXJhdGlvbiIsImkiLCJsZW5ndGgiLCJhZGRlZCIsInJlbW92ZWQiLCJwdXNoIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ08sU0FBU0EsbUJBQVQsQ0FBNkJDLE9BQTdCLEVBQXNDO0FBQzNDLE1BQUlDLEdBQUcsR0FBRyxFQUFWO0FBQUEsTUFDSUMsTUFESjtBQUFBLE1BRUlDLFNBRko7O0FBR0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixPQUFPLENBQUNLLE1BQTVCLEVBQW9DRCxDQUFDLEVBQXJDLEVBQXlDO0FBQ3ZDRixJQUFBQSxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0ksQ0FBRCxDQUFoQjs7QUFDQSxRQUFJRixNQUFNLENBQUNJLEtBQVgsRUFBa0I7QUFDaEJILE1BQUFBLFNBQVMsR0FBRyxDQUFaO0FBQ0QsS0FGRCxNQUVPLElBQUlELE1BQU0sQ0FBQ0ssT0FBWCxFQUFvQjtBQUN6QkosTUFBQUEsU0FBUyxHQUFHLENBQUMsQ0FBYjtBQUNELEtBRk0sTUFFQTtBQUNMQSxNQUFBQSxTQUFTLEdBQUcsQ0FBWjtBQUNEOztBQUVERixJQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBUyxDQUFDTCxTQUFELEVBQVlELE1BQU0sQ0FBQ08sS0FBbkIsQ0FBVDtBQUNEOztBQUNELFNBQU9SLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNlZTogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvb2dsZS1kaWZmLW1hdGNoLXBhdGNoL3dpa2kvQVBJXG5leHBvcnQgZnVuY3Rpb24gY29udmVydENoYW5nZXNUb0RNUChjaGFuZ2VzKSB7XG4gIGxldCByZXQgPSBbXSxcbiAgICAgIGNoYW5nZSxcbiAgICAgIG9wZXJhdGlvbjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhbmdlID0gY2hhbmdlc1tpXTtcbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICBvcGVyYXRpb24gPSAxO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIG9wZXJhdGlvbiA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVyYXRpb24gPSAwO1xuICAgIH1cblxuICAgIHJldC5wdXNoKFtvcGVyYXRpb24sIGNoYW5nZS52YWx1ZV0pO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iXX0=

      /***/
    },

    /***/ 16982: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.convertChangesToXML = convertChangesToXML

      /*istanbul ignore end*/
      function convertChangesToXML(changes) {
        var ret = []

        for (var i = 0; i < changes.length; i++) {
          var change = changes[i]

          if (change.added) {
            ret.push("<ins>")
          } else if (change.removed) {
            ret.push("<del>")
          }

          ret.push(escapeHTML(change.value))

          if (change.added) {
            ret.push("</ins>")
          } else if (change.removed) {
            ret.push("</del>")
          }
        }

        return ret.join("")
      }

      function escapeHTML(s) {
        var n = s
        n = n.replace(/&/g, "&amp;")
        n = n.replace(/</g, "&lt;")
        n = n.replace(/>/g, "&gt;")
        n = n.replace(/"/g, "&quot;")
        return n
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb252ZXJ0L3htbC5qcyJdLCJuYW1lcyI6WyJjb252ZXJ0Q2hhbmdlc1RvWE1MIiwiY2hhbmdlcyIsInJldCIsImkiLCJsZW5ndGgiLCJjaGFuZ2UiLCJhZGRlZCIsInB1c2giLCJyZW1vdmVkIiwiZXNjYXBlSFRNTCIsInZhbHVlIiwiam9pbiIsInMiLCJuIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sU0FBU0EsbUJBQVQsQ0FBNkJDLE9BQTdCLEVBQXNDO0FBQzNDLE1BQUlDLEdBQUcsR0FBRyxFQUFWOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsT0FBTyxDQUFDRyxNQUE1QixFQUFvQ0QsQ0FBQyxFQUFyQyxFQUF5QztBQUN2QyxRQUFJRSxNQUFNLEdBQUdKLE9BQU8sQ0FBQ0UsQ0FBRCxDQUFwQjs7QUFDQSxRQUFJRSxNQUFNLENBQUNDLEtBQVgsRUFBa0I7QUFDaEJKLE1BQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTLE9BQVQ7QUFDRCxLQUZELE1BRU8sSUFBSUYsTUFBTSxDQUFDRyxPQUFYLEVBQW9CO0FBQ3pCTixNQUFBQSxHQUFHLENBQUNLLElBQUosQ0FBUyxPQUFUO0FBQ0Q7O0FBRURMLElBQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTRSxVQUFVLENBQUNKLE1BQU0sQ0FBQ0ssS0FBUixDQUFuQjs7QUFFQSxRQUFJTCxNQUFNLENBQUNDLEtBQVgsRUFBa0I7QUFDaEJKLE1BQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTLFFBQVQ7QUFDRCxLQUZELE1BRU8sSUFBSUYsTUFBTSxDQUFDRyxPQUFYLEVBQW9CO0FBQ3pCTixNQUFBQSxHQUFHLENBQUNLLElBQUosQ0FBUyxRQUFUO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPTCxHQUFHLENBQUNTLElBQUosQ0FBUyxFQUFULENBQVA7QUFDRDs7QUFFRCxTQUFTRixVQUFULENBQW9CRyxDQUFwQixFQUF1QjtBQUNyQixNQUFJQyxDQUFDLEdBQUdELENBQVI7QUFDQUMsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE9BQWhCLENBQUo7QUFDQUQsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE1BQWhCLENBQUo7QUFDQUQsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE1BQWhCLENBQUo7QUFDQUQsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLFFBQWhCLENBQUo7QUFFQSxTQUFPRCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY29udmVydENoYW5nZXNUb1hNTChjaGFuZ2VzKSB7XG4gIGxldCByZXQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNoYW5nZSA9IGNoYW5nZXNbaV07XG4gICAgaWYgKGNoYW5nZS5hZGRlZCkge1xuICAgICAgcmV0LnB1c2goJzxpbnM+Jyk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2UucmVtb3ZlZCkge1xuICAgICAgcmV0LnB1c2goJzxkZWw+Jyk7XG4gICAgfVxuXG4gICAgcmV0LnB1c2goZXNjYXBlSFRNTChjaGFuZ2UudmFsdWUpKTtcblxuICAgIGlmIChjaGFuZ2UuYWRkZWQpIHtcbiAgICAgIHJldC5wdXNoKCc8L2lucz4nKTtcbiAgICB9IGVsc2UgaWYgKGNoYW5nZS5yZW1vdmVkKSB7XG4gICAgICByZXQucHVzaCgnPC9kZWw+Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUhUTUwocykge1xuICBsZXQgbiA9IHM7XG4gIG4gPSBuLnJlcGxhY2UoLyYvZywgJyZhbXA7Jyk7XG4gIG4gPSBuLnJlcGxhY2UoLzwvZywgJyZsdDsnKTtcbiAgbiA9IG4ucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICBuID0gbi5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG5cbiAgcmV0dXJuIG47XG59XG4iXX0=

      /***/
    },

    /***/ 70546: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.diffArrays = diffArrays
      exports.arrayDiff = void 0

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      var arrayDiff = new /*istanbul ignore start*/
      /*istanbul ignore end*/
      /*istanbul ignore start*/
      _base.default()
      /*istanbul ignore end*/

      /*istanbul ignore start*/
      exports.arrayDiff = arrayDiff

      /*istanbul ignore end*/
      arrayDiff.tokenize = function (value) {
        return value.slice()
      }

      arrayDiff.join = arrayDiff.removeEmpty = function (value) {
        return value
      }

      function diffArrays(oldArr, newArr, callback) {
        return arrayDiff.diff(oldArr, newArr, callback)
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2FycmF5LmpzIl0sIm5hbWVzIjpbImFycmF5RGlmZiIsIkRpZmYiLCJ0b2tlbml6ZSIsInZhbHVlIiwic2xpY2UiLCJqb2luIiwicmVtb3ZlRW1wdHkiLCJkaWZmQXJyYXlzIiwib2xkQXJyIiwibmV3QXJyIiwiY2FsbGJhY2siLCJkaWZmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFFTyxJQUFNQSxTQUFTLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBSjtBQUFBLEVBQWxCOzs7Ozs7QUFDUEQsU0FBUyxDQUFDRSxRQUFWLEdBQXFCLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbkMsU0FBT0EsS0FBSyxDQUFDQyxLQUFOLEVBQVA7QUFDRCxDQUZEOztBQUdBSixTQUFTLENBQUNLLElBQVYsR0FBaUJMLFNBQVMsQ0FBQ00sV0FBVixHQUF3QixVQUFTSCxLQUFULEVBQWdCO0FBQ3ZELFNBQU9BLEtBQVA7QUFDRCxDQUZEOztBQUlPLFNBQVNJLFVBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxNQUE1QixFQUFvQ0MsUUFBcEMsRUFBOEM7QUFBRSxTQUFPVixTQUFTLENBQUNXLElBQVYsQ0FBZUgsTUFBZixFQUF1QkMsTUFBdkIsRUFBK0JDLFFBQS9CLENBQVA7QUFBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlmZiBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgY29uc3QgYXJyYXlEaWZmID0gbmV3IERpZmYoKTtcbmFycmF5RGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5zbGljZSgpO1xufTtcbmFycmF5RGlmZi5qb2luID0gYXJyYXlEaWZmLnJlbW92ZUVtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZBcnJheXMob2xkQXJyLCBuZXdBcnIsIGNhbGxiYWNrKSB7IHJldHVybiBhcnJheURpZmYuZGlmZihvbGRBcnIsIG5ld0FyciwgY2FsbGJhY2spOyB9XG4iXX0=

      /***/
    },

    /***/ 21653: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports["default"] = Diff

      /*istanbul ignore end*/
      function Diff() {}

      Diff.prototype = {
        /*istanbul ignore start*/

        /*istanbul ignore end*/
        diff: function diff(oldString, newString) {
          /*istanbul ignore start*/
          var /*istanbul ignore end*/
            options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}
          var callback = options.callback

          if (typeof options === "function") {
            callback = options
            options = {}
          }

          this.options = options
          var self = this

          function done(value) {
            if (callback) {
              setTimeout(function () {
                callback(undefined, value)
              }, 0)
              return true
            } else {
              return value
            }
          } // Allow subclasses to massage the input prior to running

          oldString = this.castInput(oldString)
          newString = this.castInput(newString)
          oldString = this.removeEmpty(this.tokenize(oldString))
          newString = this.removeEmpty(this.tokenize(newString))
          var newLen = newString.length,
            oldLen = oldString.length
          var editLength = 1
          var maxEditLength = newLen + oldLen
          var bestPath = [
            {
              newPos: -1,
              components: []
            }
          ] // Seed editLength = 0, i.e. the content starts with the same values

          var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0)

          if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
            // Identity per the equality and tokenizer
            return done([
              {
                value: this.join(newString),
                count: newString.length
              }
            ])
          } // Main worker method. checks all permutations of a given edit length for acceptance.

          function execEditLength() {
            for (
              var diagonalPath = -1 * editLength;
              diagonalPath <= editLength;
              diagonalPath += 2
            ) {
              var basePath =
                /*istanbul ignore start*/
                void 0
              /*istanbul ignore end*/
              var addPath = bestPath[diagonalPath - 1],
                removePath = bestPath[diagonalPath + 1],
                _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath

              if (addPath) {
                // No one else is going to attempt to use this value, clear it
                bestPath[diagonalPath - 1] = undefined
              }

              var canAdd = addPath && addPath.newPos + 1 < newLen,
                canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen

              if (!canAdd && !canRemove) {
                // If this path is a terminal then prune
                bestPath[diagonalPath] = undefined
                continue
              } // Select the diagonal that we want to branch from. We select the prior
              // path whose position in the new string is the farthest from the origin
              // and does not pass the bounds of the diff graph

              if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {
                basePath = clonePath(removePath)
                self.pushComponent(basePath.components, undefined, true)
              } else {
                basePath = addPath // No need to clone, we've pulled it from the list

                basePath.newPos++
                self.pushComponent(basePath.components, true, undefined)
              }

              _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath) // If we have hit the end of both strings, then we are done

              if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
                return done(
                  buildValues(self, basePath.components, newString, oldString, self.useLongestToken)
                )
              } else {
                // Otherwise track this path as a potential candidate and continue.
                bestPath[diagonalPath] = basePath
              }
            }

            editLength++
          } // Performs the length of edit iteration. Is a bit fugly as this has to support the
          // sync and async mode which is never fun. Loops over execEditLength until a value
          // is produced.

          if (callback) {
            ;(function exec() {
              setTimeout(function () {
                // This should not happen, but we want to be safe.

                /* istanbul ignore next */
                if (editLength > maxEditLength) {
                  return callback()
                }

                if (!execEditLength()) {
                  exec()
                }
              }, 0)
            })()
          } else {
            while (editLength <= maxEditLength) {
              var ret = execEditLength()

              if (ret) {
                return ret
              }
            }
          }
        },

        /*istanbul ignore start*/

        /*istanbul ignore end*/
        pushComponent: function pushComponent(components, added, removed) {
          var last = components[components.length - 1]

          if (last && last.added === added && last.removed === removed) {
            // We need to clone here as the component clone operation is just
            // as shallow array clone
            components[components.length - 1] = {
              count: last.count + 1,
              added: added,
              removed: removed
            }
          } else {
            components.push({
              count: 1,
              added: added,
              removed: removed
            })
          }
        },

        /*istanbul ignore start*/

        /*istanbul ignore end*/
        extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
          var newLen = newString.length,
            oldLen = oldString.length,
            newPos = basePath.newPos,
            oldPos = newPos - diagonalPath,
            commonCount = 0

          while (
            newPos + 1 < newLen &&
            oldPos + 1 < oldLen &&
            this.equals(newString[newPos + 1], oldString[oldPos + 1])
          ) {
            newPos++
            oldPos++
            commonCount++
          }

          if (commonCount) {
            basePath.components.push({
              count: commonCount
            })
          }

          basePath.newPos = newPos
          return oldPos
        },

        /*istanbul ignore start*/

        /*istanbul ignore end*/
        equals: function equals(left, right) {
          if (this.options.comparator) {
            return this.options.comparator(left, right)
          } else {
            return (
              left === right ||
              (this.options.ignoreCase && left.toLowerCase() === right.toLowerCase())
            )
          }
        },

        /*istanbul ignore start*/

        /*istanbul ignore end*/
        removeEmpty: function removeEmpty(array) {
          var ret = []

          for (var i = 0; i < array.length; i++) {
            if (array[i]) {
              ret.push(array[i])
            }
          }

          return ret
        },

        /*istanbul ignore start*/

        /*istanbul ignore end*/
        castInput: function castInput(value) {
          return value
        },

        /*istanbul ignore start*/

        /*istanbul ignore end*/
        tokenize: function tokenize(value) {
          return value.split("")
        },

        /*istanbul ignore start*/

        /*istanbul ignore end*/
        join: function join(chars) {
          return chars.join("")
        }
      }

      function buildValues(diff, components, newString, oldString, useLongestToken) {
        var componentPos = 0,
          componentLen = components.length,
          newPos = 0,
          oldPos = 0

        for (; componentPos < componentLen; componentPos++) {
          var component = components[componentPos]

          if (!component.removed) {
            if (!component.added && useLongestToken) {
              var value = newString.slice(newPos, newPos + component.count)
              value = value.map(function (value, i) {
                var oldValue = oldString[oldPos + i]
                return oldValue.length > value.length ? oldValue : value
              })
              component.value = diff.join(value)
            } else {
              component.value = diff.join(newString.slice(newPos, newPos + component.count))
            }

            newPos += component.count // Common case

            if (!component.added) {
              oldPos += component.count
            }
          } else {
            component.value = diff.join(oldString.slice(oldPos, oldPos + component.count))
            oldPos += component.count // Reverse add and remove so removes are output first to match common convention
            // The diffing algorithm is tied to add then remove output and this is the simplest
            // route to get the desired output with minimal overhead.

            if (componentPos && components[componentPos - 1].added) {
              var tmp = components[componentPos - 1]
              components[componentPos - 1] = components[componentPos]
              components[componentPos] = tmp
            }
          }
        } // Special case handle for when one terminal is ignored (i.e. whitespace).
        // For this case we merge the terminal into the prior string and drop the change.
        // This is only available for string mode.

        var lastComponent = components[componentLen - 1]

        if (
          componentLen > 1 &&
          typeof lastComponent.value === "string" &&
          (lastComponent.added || lastComponent.removed) &&
          diff.equals("", lastComponent.value)
        ) {
          components[componentLen - 2].value += lastComponent.value
          components.pop()
        }

        return components
      }

      function clonePath(path) {
        return {
          newPos: path.newPos,
          components: path.components.slice(0)
        }
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,

      /***/
    },

    /***/ 22081: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.diffChars = diffChars
      exports.characterDiff = void 0

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      var characterDiff = new /*istanbul ignore start*/
      /*istanbul ignore end*/
      /*istanbul ignore start*/
      _base.default()
      /*istanbul ignore end*/

      /*istanbul ignore start*/
      exports.characterDiff = characterDiff

      /*istanbul ignore end*/
      function diffChars(oldStr, newStr, options) {
        return characterDiff.diff(oldStr, newStr, options)
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2NoYXJhY3Rlci5qcyJdLCJuYW1lcyI6WyJjaGFyYWN0ZXJEaWZmIiwiRGlmZiIsImRpZmZDaGFycyIsIm9sZFN0ciIsIm5ld1N0ciIsIm9wdGlvbnMiLCJkaWZmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFFTyxJQUFNQSxhQUFhLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBSjtBQUFBLEVBQXRCOzs7Ozs7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxNQUFuQixFQUEyQkMsTUFBM0IsRUFBbUNDLE9BQW5DLEVBQTRDO0FBQUUsU0FBT0wsYUFBYSxDQUFDTSxJQUFkLENBQW1CSCxNQUFuQixFQUEyQkMsTUFBM0IsRUFBbUNDLE9BQW5DLENBQVA7QUFBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlmZiBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgY29uc3QgY2hhcmFjdGVyRGlmZiA9IG5ldyBEaWZmKCk7XG5leHBvcnQgZnVuY3Rpb24gZGlmZkNoYXJzKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKSB7IHJldHVybiBjaGFyYWN0ZXJEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIG9wdGlvbnMpOyB9XG4iXX0=

      /***/
    },

    /***/ 48941: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.diffCss = diffCss
      exports.cssDiff = void 0

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      var cssDiff = new /*istanbul ignore start*/
      /*istanbul ignore end*/
      /*istanbul ignore start*/
      _base.default()
      /*istanbul ignore end*/

      /*istanbul ignore start*/
      exports.cssDiff = cssDiff

      /*istanbul ignore end*/
      cssDiff.tokenize = function (value) {
        return value.split(/([{}:;,]|\s+)/)
      }

      function diffCss(oldStr, newStr, callback) {
        return cssDiff.diff(oldStr, newStr, callback)
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2Nzcy5qcyJdLCJuYW1lcyI6WyJjc3NEaWZmIiwiRGlmZiIsInRva2VuaXplIiwidmFsdWUiLCJzcGxpdCIsImRpZmZDc3MiLCJvbGRTdHIiLCJuZXdTdHIiLCJjYWxsYmFjayIsImRpZmYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQUVPLElBQU1BLE9BQU8sR0FBRztBQUFJQztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFKO0FBQUEsRUFBaEI7Ozs7OztBQUNQRCxPQUFPLENBQUNFLFFBQVIsR0FBbUIsVUFBU0MsS0FBVCxFQUFnQjtBQUNqQyxTQUFPQSxLQUFLLENBQUNDLEtBQU4sQ0FBWSxlQUFaLENBQVA7QUFDRCxDQUZEOztBQUlPLFNBQVNDLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCQyxNQUF6QixFQUFpQ0MsUUFBakMsRUFBMkM7QUFBRSxTQUFPUixPQUFPLENBQUNTLElBQVIsQ0FBYUgsTUFBYixFQUFxQkMsTUFBckIsRUFBNkJDLFFBQTdCLENBQVA7QUFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlmZiBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgY29uc3QgY3NzRGlmZiA9IG5ldyBEaWZmKCk7XG5jc3NEaWZmLnRva2VuaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnNwbGl0KC8oW3t9OjssXXxcXHMrKS8pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZDc3Mob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7IHJldHVybiBjc3NEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTsgfVxuIl19

      /***/
    },

    /***/ 86335: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.diffJson = diffJson
      exports.canonicalize = canonicalize
      exports.jsonDiff = void 0

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _line = __nccwpck_require__(41591)
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj
          }
        } else {
          _typeof = function _typeof(obj) {
            return obj &&
              typeof Symbol === "function" &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj
          }
        }
        return _typeof(obj)
      }

      /*istanbul ignore end*/
      var objectPrototypeToString = Object.prototype.toString
      var jsonDiff = new /*istanbul ignore start*/
      /*istanbul ignore end*/
      /*istanbul ignore start*/
      _base.default()
      /*istanbul ignore end*/ // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
      // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:

      /*istanbul ignore start*/
      exports.jsonDiff = jsonDiff

      /*istanbul ignore end*/
      jsonDiff.useLongestToken = true
      jsonDiff.tokenize =
        /*istanbul ignore start*/
        /*istanbul ignore end*/
        /*istanbul ignore end*/
        /*istanbul ignore start*/
        _line.lineDiff.tokenize

      jsonDiff.castInput = function (value) {
        /*istanbul ignore start*/
        var _this$options =
            /*istanbul ignore end*/
            this.options,
          undefinedReplacement = _this$options.undefinedReplacement,
          _this$options$stringi = _this$options.stringifyReplacer,
          stringifyReplacer =
            _this$options$stringi === void 0
              ? function (k, v) /*istanbul ignore start*/
                {
                  return (
                    /*istanbul ignore end*/
                    typeof v === "undefined" ? undefinedReplacement : v
                  )
                }
              : _this$options$stringi
        return typeof value === "string"
          ? value
          : JSON.stringify(
              canonicalize(value, null, null, stringifyReplacer),
              stringifyReplacer,
              "  "
            )
      }

      jsonDiff.equals = function (left, right) {
        return (
          /*istanbul ignore start*/
          _base/*istanbul ignore end*/
          /*istanbul ignore start*/
          .default/*istanbul ignore end*/
          .prototype.equals
            .call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"))
        )
      }

      function diffJson(oldObj, newObj, options) {
        return jsonDiff.diff(oldObj, newObj, options)
      } // This function handles the presence of circular references by bailing out when encountering an
      // object that is already on the "stack" of items being processed. Accepts an optional replacer

      function canonicalize(obj, stack, replacementStack, replacer, key) {
        stack = stack || []
        replacementStack = replacementStack || []

        if (replacer) {
          obj = replacer(key, obj)
        }

        var i

        for (i = 0; i < stack.length; i += 1) {
          if (stack[i] === obj) {
            return replacementStack[i]
          }
        }

        var canonicalizedObj

        if ("[object Array]" === objectPrototypeToString.call(obj)) {
          stack.push(obj)
          canonicalizedObj = new Array(obj.length)
          replacementStack.push(canonicalizedObj)

          for (i = 0; i < obj.length; i += 1) {
            canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key)
          }

          stack.pop()
          replacementStack.pop()
          return canonicalizedObj
        }

        if (obj && obj.toJSON) {
          obj = obj.toJSON()
        }

        if (
          /*istanbul ignore start*/
          _typeof(
            /*istanbul ignore end*/
            obj
          ) === "object" &&
          obj !== null
        ) {
          stack.push(obj)
          canonicalizedObj = {}
          replacementStack.push(canonicalizedObj)

          var sortedKeys = [],
            _key

          for (_key in obj) {
            /* istanbul ignore else */
            if (obj.hasOwnProperty(_key)) {
              sortedKeys.push(_key)
            }
          }

          sortedKeys.sort()

          for (i = 0; i < sortedKeys.length; i += 1) {
            _key = sortedKeys[i]
            canonicalizedObj[_key] = canonicalize(
              obj[_key],
              stack,
              replacementStack,
              replacer,
              _key
            )
          }

          stack.pop()
          replacementStack.pop()
        } else {
          canonicalizedObj = obj
        }

        return canonicalizedObj
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,

      /***/
    },

    /***/ 41591: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.diffLines = diffLines
      exports.diffTrimmedLines = diffTrimmedLines
      exports.lineDiff = void 0

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _params = __nccwpck_require__(45704)
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      var lineDiff = new /*istanbul ignore start*/
      /*istanbul ignore end*/
      /*istanbul ignore start*/
      _base.default()
      /*istanbul ignore end*/

      /*istanbul ignore start*/
      exports.lineDiff = lineDiff

      /*istanbul ignore end*/
      lineDiff.tokenize = function (value) {
        var retLines = [],
          linesAndNewlines = value.split(/(\n|\r\n)/) // Ignore the final empty token that occurs if the string ends with a new line

        if (!linesAndNewlines[linesAndNewlines.length - 1]) {
          linesAndNewlines.pop()
        } // Merge the content and line separators into single tokens

        for (var i = 0; i < linesAndNewlines.length; i++) {
          var line = linesAndNewlines[i]

          if (i % 2 && !this.options.newlineIsToken) {
            retLines[retLines.length - 1] += line
          } else {
            if (this.options.ignoreWhitespace) {
              line = line.trim()
            }

            retLines.push(line)
          }
        }

        return retLines
      }

      function diffLines(oldStr, newStr, callback) {
        return lineDiff.diff(oldStr, newStr, callback)
      }

      function diffTrimmedLines(oldStr, newStr, callback) {
        var options =
          /*istanbul ignore start*/
          (0,
          /*istanbul ignore end*/

          /*istanbul ignore start*/
          /*istanbul ignore end*/
          /*istanbul ignore start*/
          _params.generateOptions)(
            /*istanbul ignore end*/
            callback,
            {
              ignoreWhitespace: true
            }
          )
        return lineDiff.diff(oldStr, newStr, options)
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2xpbmUuanMiXSwibmFtZXMiOlsibGluZURpZmYiLCJEaWZmIiwidG9rZW5pemUiLCJ2YWx1ZSIsInJldExpbmVzIiwibGluZXNBbmROZXdsaW5lcyIsInNwbGl0IiwibGVuZ3RoIiwicG9wIiwiaSIsImxpbmUiLCJvcHRpb25zIiwibmV3bGluZUlzVG9rZW4iLCJpZ25vcmVXaGl0ZXNwYWNlIiwidHJpbSIsInB1c2giLCJkaWZmTGluZXMiLCJvbGRTdHIiLCJuZXdTdHIiLCJjYWxsYmFjayIsImRpZmYiLCJkaWZmVHJpbW1lZExpbmVzIiwiZ2VuZXJhdGVPcHRpb25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFFTyxJQUFNQSxRQUFRLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBSjtBQUFBLEVBQWpCOzs7Ozs7QUFDUEQsUUFBUSxDQUFDRSxRQUFULEdBQW9CLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbEMsTUFBSUMsUUFBUSxHQUFHLEVBQWY7QUFBQSxNQUNJQyxnQkFBZ0IsR0FBR0YsS0FBSyxDQUFDRyxLQUFOLENBQVksV0FBWixDQUR2QixDQURrQyxDQUlsQzs7QUFDQSxNQUFJLENBQUNELGdCQUFnQixDQUFDQSxnQkFBZ0IsQ0FBQ0UsTUFBakIsR0FBMEIsQ0FBM0IsQ0FBckIsRUFBb0Q7QUFDbERGLElBQUFBLGdCQUFnQixDQUFDRyxHQUFqQjtBQUNELEdBUGlDLENBU2xDOzs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdKLGdCQUFnQixDQUFDRSxNQUFyQyxFQUE2Q0UsQ0FBQyxFQUE5QyxFQUFrRDtBQUNoRCxRQUFJQyxJQUFJLEdBQUdMLGdCQUFnQixDQUFDSSxDQUFELENBQTNCOztBQUVBLFFBQUlBLENBQUMsR0FBRyxDQUFKLElBQVMsQ0FBQyxLQUFLRSxPQUFMLENBQWFDLGNBQTNCLEVBQTJDO0FBQ3pDUixNQUFBQSxRQUFRLENBQUNBLFFBQVEsQ0FBQ0csTUFBVCxHQUFrQixDQUFuQixDQUFSLElBQWlDRyxJQUFqQztBQUNELEtBRkQsTUFFTztBQUNMLFVBQUksS0FBS0MsT0FBTCxDQUFhRSxnQkFBakIsRUFBbUM7QUFDakNILFFBQUFBLElBQUksR0FBR0EsSUFBSSxDQUFDSSxJQUFMLEVBQVA7QUFDRDs7QUFDRFYsTUFBQUEsUUFBUSxDQUFDVyxJQUFULENBQWNMLElBQWQ7QUFDRDtBQUNGOztBQUVELFNBQU9OLFFBQVA7QUFDRCxDQXhCRDs7QUEwQk8sU0FBU1ksU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLE1BQTNCLEVBQW1DQyxRQUFuQyxFQUE2QztBQUFFLFNBQU9uQixRQUFRLENBQUNvQixJQUFULENBQWNILE1BQWQsRUFBc0JDLE1BQXRCLEVBQThCQyxRQUE5QixDQUFQO0FBQWlEOztBQUNoRyxTQUFTRSxnQkFBVCxDQUEwQkosTUFBMUIsRUFBa0NDLE1BQWxDLEVBQTBDQyxRQUExQyxFQUFvRDtBQUN6RCxNQUFJUixPQUFPO0FBQUc7QUFBQTtBQUFBOztBQUFBVztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBO0FBQUEsR0FBZ0JILFFBQWhCLEVBQTBCO0FBQUNOLElBQUFBLGdCQUFnQixFQUFFO0FBQW5CLEdBQTFCLENBQWQ7QUFDQSxTQUFPYixRQUFRLENBQUNvQixJQUFULENBQWNILE1BQWQsRUFBc0JDLE1BQXRCLEVBQThCUCxPQUE5QixDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlmZiBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHtnZW5lcmF0ZU9wdGlvbnN9IGZyb20gJy4uL3V0aWwvcGFyYW1zJztcblxuZXhwb3J0IGNvbnN0IGxpbmVEaWZmID0gbmV3IERpZmYoKTtcbmxpbmVEaWZmLnRva2VuaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgbGV0IHJldExpbmVzID0gW10sXG4gICAgICBsaW5lc0FuZE5ld2xpbmVzID0gdmFsdWUuc3BsaXQoLyhcXG58XFxyXFxuKS8pO1xuXG4gIC8vIElnbm9yZSB0aGUgZmluYWwgZW1wdHkgdG9rZW4gdGhhdCBvY2N1cnMgaWYgdGhlIHN0cmluZyBlbmRzIHdpdGggYSBuZXcgbGluZVxuICBpZiAoIWxpbmVzQW5kTmV3bGluZXNbbGluZXNBbmROZXdsaW5lcy5sZW5ndGggLSAxXSkge1xuICAgIGxpbmVzQW5kTmV3bGluZXMucG9wKCk7XG4gIH1cblxuICAvLyBNZXJnZSB0aGUgY29udGVudCBhbmQgbGluZSBzZXBhcmF0b3JzIGludG8gc2luZ2xlIHRva2Vuc1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzQW5kTmV3bGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgbGluZSA9IGxpbmVzQW5kTmV3bGluZXNbaV07XG5cbiAgICBpZiAoaSAlIDIgJiYgIXRoaXMub3B0aW9ucy5uZXdsaW5lSXNUb2tlbikge1xuICAgICAgcmV0TGluZXNbcmV0TGluZXMubGVuZ3RoIC0gMV0gKz0gbGluZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmVXaGl0ZXNwYWNlKSB7XG4gICAgICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcbiAgICAgIH1cbiAgICAgIHJldExpbmVzLnB1c2gobGluZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldExpbmVzO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZMaW5lcyhvbGRTdHIsIG5ld1N0ciwgY2FsbGJhY2spIHsgcmV0dXJuIGxpbmVEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZUcmltbWVkTGluZXMob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7XG4gIGxldCBvcHRpb25zID0gZ2VuZXJhdGVPcHRpb25zKGNhbGxiYWNrLCB7aWdub3JlV2hpdGVzcGFjZTogdHJ1ZX0pO1xuICByZXR1cm4gbGluZURpZmYuZGlmZihvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucyk7XG59XG4iXX0=

      /***/
    },

    /***/ 33577: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.diffSentences = diffSentences
      exports.sentenceDiff = void 0

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      var sentenceDiff = new /*istanbul ignore start*/
      /*istanbul ignore end*/
      /*istanbul ignore start*/
      _base.default()
      /*istanbul ignore end*/

      /*istanbul ignore start*/
      exports.sentenceDiff = sentenceDiff

      /*istanbul ignore end*/
      sentenceDiff.tokenize = function (value) {
        return value.split(/(\S.+?[.!?])(?=\s+|$)/)
      }

      function diffSentences(oldStr, newStr, callback) {
        return sentenceDiff.diff(oldStr, newStr, callback)
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL3NlbnRlbmNlLmpzIl0sIm5hbWVzIjpbInNlbnRlbmNlRGlmZiIsIkRpZmYiLCJ0b2tlbml6ZSIsInZhbHVlIiwic3BsaXQiLCJkaWZmU2VudGVuY2VzIiwib2xkU3RyIiwibmV3U3RyIiwiY2FsbGJhY2siLCJkaWZmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFHTyxJQUFNQSxZQUFZLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBSjtBQUFBLEVBQXJCOzs7Ozs7QUFDUEQsWUFBWSxDQUFDRSxRQUFiLEdBQXdCLFVBQVNDLEtBQVQsRUFBZ0I7QUFDdEMsU0FBT0EsS0FBSyxDQUFDQyxLQUFOLENBQVksdUJBQVosQ0FBUDtBQUNELENBRkQ7O0FBSU8sU0FBU0MsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0JDLE1BQS9CLEVBQXVDQyxRQUF2QyxFQUFpRDtBQUFFLFNBQU9SLFlBQVksQ0FBQ1MsSUFBYixDQUFrQkgsTUFBbEIsRUFBMEJDLE1BQTFCLEVBQWtDQyxRQUFsQyxDQUFQO0FBQXFEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcblxuXG5leHBvcnQgY29uc3Qgc2VudGVuY2VEaWZmID0gbmV3IERpZmYoKTtcbnNlbnRlbmNlRGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5zcGxpdCgvKFxcUy4rP1suIT9dKSg/PVxccyt8JCkvKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmU2VudGVuY2VzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykgeyByZXR1cm4gc2VudGVuY2VEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTsgfVxuIl19

      /***/
    },

    /***/ 46992: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.diffWords = diffWords
      exports.diffWordsWithSpace = diffWordsWithSpace
      exports.wordDiff = void 0

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _params = __nccwpck_require__(45704)
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      // Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
      //
      // Ranges and exceptions:
      // Latin-1 Supplement, 0080–00FF
      //  - U+00D7  × Multiplication sign
      //  - U+00F7  ÷ Division sign
      // Latin Extended-A, 0100–017F
      // Latin Extended-B, 0180–024F
      // IPA Extensions, 0250–02AF
      // Spacing Modifier Letters, 02B0–02FF
      //  - U+02C7  ˇ &#711;  Caron
      //  - U+02D8  ˘ &#728;  Breve
      //  - U+02D9  ˙ &#729;  Dot Above
      //  - U+02DA  ˚ &#730;  Ring Above
      //  - U+02DB  ˛ &#731;  Ogonek
      //  - U+02DC  ˜ &#732;  Small Tilde
      //  - U+02DD  ˝ &#733;  Double Acute Accent
      // Latin Extended Additional, 1E00–1EFF
      var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/
      var reWhitespace = /\S/
      var wordDiff = new /*istanbul ignore start*/
      /*istanbul ignore end*/
      /*istanbul ignore start*/
      _base.default()
      /*istanbul ignore end*/

      /*istanbul ignore start*/
      exports.wordDiff = wordDiff

      /*istanbul ignore end*/
      wordDiff.equals = function (left, right) {
        if (this.options.ignoreCase) {
          left = left.toLowerCase()
          right = right.toLowerCase()
        }

        return (
          left === right ||
          (this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right))
        )
      }

      wordDiff.tokenize = function (value) {
        var tokens = value.split(/(\s+|[()[\]{}'"]|\b)/) // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.

        for (var i = 0; i < tokens.length - 1; i++) {
          // If we have an empty string in the next field and we have only word chars before and after, merge
          if (
            !tokens[i + 1] &&
            tokens[i + 2] &&
            extendedWordChars.test(tokens[i]) &&
            extendedWordChars.test(tokens[i + 2])
          ) {
            tokens[i] += tokens[i + 2]
            tokens.splice(i + 1, 2)
            i--
          }
        }

        return tokens
      }

      function diffWords(oldStr, newStr, options) {
        options =
          /*istanbul ignore start*/
          (0,
          /*istanbul ignore end*/

          /*istanbul ignore start*/
          /*istanbul ignore end*/
          /*istanbul ignore start*/
          _params.generateOptions)(
            /*istanbul ignore end*/
            options,
            {
              ignoreWhitespace: true
            }
          )
        return wordDiff.diff(oldStr, newStr, options)
      }

      function diffWordsWithSpace(oldStr, newStr, options) {
        return wordDiff.diff(oldStr, newStr, options)
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL3dvcmQuanMiXSwibmFtZXMiOlsiZXh0ZW5kZWRXb3JkQ2hhcnMiLCJyZVdoaXRlc3BhY2UiLCJ3b3JkRGlmZiIsIkRpZmYiLCJlcXVhbHMiLCJsZWZ0IiwicmlnaHQiLCJvcHRpb25zIiwiaWdub3JlQ2FzZSIsInRvTG93ZXJDYXNlIiwiaWdub3JlV2hpdGVzcGFjZSIsInRlc3QiLCJ0b2tlbml6ZSIsInZhbHVlIiwidG9rZW5zIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwic3BsaWNlIiwiZGlmZldvcmRzIiwib2xkU3RyIiwibmV3U3RyIiwiZ2VuZXJhdGVPcHRpb25zIiwiZGlmZiIsImRpZmZXb3Jkc1dpdGhTcGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsaUJBQWlCLEdBQUcsK0RBQTFCO0FBRUEsSUFBTUMsWUFBWSxHQUFHLElBQXJCO0FBRU8sSUFBTUMsUUFBUSxHQUFHO0FBQUlDO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUo7QUFBQSxFQUFqQjs7Ozs7O0FBQ1BELFFBQVEsQ0FBQ0UsTUFBVCxHQUFrQixVQUFTQyxJQUFULEVBQWVDLEtBQWYsRUFBc0I7QUFDdEMsTUFBSSxLQUFLQyxPQUFMLENBQWFDLFVBQWpCLEVBQTZCO0FBQzNCSCxJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0ksV0FBTCxFQUFQO0FBQ0FILElBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDRyxXQUFOLEVBQVI7QUFDRDs7QUFDRCxTQUFPSixJQUFJLEtBQUtDLEtBQVQsSUFBbUIsS0FBS0MsT0FBTCxDQUFhRyxnQkFBYixJQUFpQyxDQUFDVCxZQUFZLENBQUNVLElBQWIsQ0FBa0JOLElBQWxCLENBQWxDLElBQTZELENBQUNKLFlBQVksQ0FBQ1UsSUFBYixDQUFrQkwsS0FBbEIsQ0FBeEY7QUFDRCxDQU5EOztBQU9BSixRQUFRLENBQUNVLFFBQVQsR0FBb0IsVUFBU0MsS0FBVCxFQUFnQjtBQUNsQyxNQUFJQyxNQUFNLEdBQUdELEtBQUssQ0FBQ0UsS0FBTixDQUFZLHNCQUFaLENBQWIsQ0FEa0MsQ0FHbEM7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixNQUFNLENBQUNHLE1BQVAsR0FBZ0IsQ0FBcEMsRUFBdUNELENBQUMsRUFBeEMsRUFBNEM7QUFDMUM7QUFDQSxRQUFJLENBQUNGLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBUCxJQUFrQkYsTUFBTSxDQUFDRSxDQUFDLEdBQUcsQ0FBTCxDQUF4QixJQUNLaEIsaUJBQWlCLENBQUNXLElBQWxCLENBQXVCRyxNQUFNLENBQUNFLENBQUQsQ0FBN0IsQ0FETCxJQUVLaEIsaUJBQWlCLENBQUNXLElBQWxCLENBQXVCRyxNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFMLENBQTdCLENBRlQsRUFFZ0Q7QUFDOUNGLE1BQUFBLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFOLElBQWFGLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBbkI7QUFDQUYsTUFBQUEsTUFBTSxDQUFDSSxNQUFQLENBQWNGLENBQUMsR0FBRyxDQUFsQixFQUFxQixDQUFyQjtBQUNBQSxNQUFBQSxDQUFDO0FBQ0Y7QUFDRjs7QUFFRCxTQUFPRixNQUFQO0FBQ0QsQ0FoQkQ7O0FBa0JPLFNBQVNLLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCQyxNQUEzQixFQUFtQ2QsT0FBbkMsRUFBNEM7QUFDakRBLEVBQUFBLE9BQU87QUFBRztBQUFBO0FBQUE7O0FBQUFlO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUE7QUFBQSxHQUFnQmYsT0FBaEIsRUFBeUI7QUFBQ0csSUFBQUEsZ0JBQWdCLEVBQUU7QUFBbkIsR0FBekIsQ0FBVjtBQUNBLFNBQU9SLFFBQVEsQ0FBQ3FCLElBQVQsQ0FBY0gsTUFBZCxFQUFzQkMsTUFBdEIsRUFBOEJkLE9BQTlCLENBQVA7QUFDRDs7QUFFTSxTQUFTaUIsa0JBQVQsQ0FBNEJKLE1BQTVCLEVBQW9DQyxNQUFwQyxFQUE0Q2QsT0FBNUMsRUFBcUQ7QUFDMUQsU0FBT0wsUUFBUSxDQUFDcUIsSUFBVCxDQUFjSCxNQUFkLEVBQXNCQyxNQUF0QixFQUE4QmQsT0FBOUIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7Z2VuZXJhdGVPcHRpb25zfSBmcm9tICcuLi91dGlsL3BhcmFtcyc7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX3NjcmlwdF9pbl9Vbmljb2RlXG4vL1xuLy8gUmFuZ2VzIGFuZCBleGNlcHRpb25zOlxuLy8gTGF0aW4tMSBTdXBwbGVtZW50LCAwMDgw4oCTMDBGRlxuLy8gIC0gVSswMEQ3ICDDlyBNdWx0aXBsaWNhdGlvbiBzaWduXG4vLyAgLSBVKzAwRjcgIMO3IERpdmlzaW9uIHNpZ25cbi8vIExhdGluIEV4dGVuZGVkLUEsIDAxMDDigJMwMTdGXG4vLyBMYXRpbiBFeHRlbmRlZC1CLCAwMTgw4oCTMDI0RlxuLy8gSVBBIEV4dGVuc2lvbnMsIDAyNTDigJMwMkFGXG4vLyBTcGFjaW5nIE1vZGlmaWVyIExldHRlcnMsIDAyQjDigJMwMkZGXG4vLyAgLSBVKzAyQzcgIMuHICYjNzExOyAgQ2Fyb25cbi8vICAtIFUrMDJEOCAgy5ggJiM3Mjg7ICBCcmV2ZVxuLy8gIC0gVSswMkQ5ICDLmSAmIzcyOTsgIERvdCBBYm92ZVxuLy8gIC0gVSswMkRBICDLmiAmIzczMDsgIFJpbmcgQWJvdmVcbi8vICAtIFUrMDJEQiAgy5sgJiM3MzE7ICBPZ29uZWtcbi8vICAtIFUrMDJEQyAgy5wgJiM3MzI7ICBTbWFsbCBUaWxkZVxuLy8gIC0gVSswMkREICDLnSAmIzczMzsgIERvdWJsZSBBY3V0ZSBBY2NlbnRcbi8vIExhdGluIEV4dGVuZGVkIEFkZGl0aW9uYWwsIDFFMDDigJMxRUZGXG5jb25zdCBleHRlbmRlZFdvcmRDaGFycyA9IC9eW2EtekEtWlxcdXtDMH0tXFx1e0ZGfVxcdXtEOH0tXFx1e0Y2fVxcdXtGOH0tXFx1ezJDNn1cXHV7MkM4fS1cXHV7MkQ3fVxcdXsyREV9LVxcdXsyRkZ9XFx1ezFFMDB9LVxcdXsxRUZGfV0rJC91O1xuXG5jb25zdCByZVdoaXRlc3BhY2UgPSAvXFxTLztcblxuZXhwb3J0IGNvbnN0IHdvcmREaWZmID0gbmV3IERpZmYoKTtcbndvcmREaWZmLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlQ2FzZSkge1xuICAgIGxlZnQgPSBsZWZ0LnRvTG93ZXJDYXNlKCk7XG4gICAgcmlnaHQgPSByaWdodC50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCAodGhpcy5vcHRpb25zLmlnbm9yZVdoaXRlc3BhY2UgJiYgIXJlV2hpdGVzcGFjZS50ZXN0KGxlZnQpICYmICFyZVdoaXRlc3BhY2UudGVzdChyaWdodCkpO1xufTtcbndvcmREaWZmLnRva2VuaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgbGV0IHRva2VucyA9IHZhbHVlLnNwbGl0KC8oXFxzK3xbKClbXFxde30nXCJdfFxcYikvKTtcblxuICAvLyBKb2luIHRoZSBib3VuZGFyeSBzcGxpdHMgdGhhdCB3ZSBkbyBub3QgY29uc2lkZXIgdG8gYmUgYm91bmRhcmllcy4gVGhpcyBpcyBwcmltYXJpbHkgdGhlIGV4dGVuZGVkIExhdGluIGNoYXJhY3RlciBzZXQuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIC8vIElmIHdlIGhhdmUgYW4gZW1wdHkgc3RyaW5nIGluIHRoZSBuZXh0IGZpZWxkIGFuZCB3ZSBoYXZlIG9ubHkgd29yZCBjaGFycyBiZWZvcmUgYW5kIGFmdGVyLCBtZXJnZVxuICAgIGlmICghdG9rZW5zW2kgKyAxXSAmJiB0b2tlbnNbaSArIDJdXG4gICAgICAgICAgJiYgZXh0ZW5kZWRXb3JkQ2hhcnMudGVzdCh0b2tlbnNbaV0pXG4gICAgICAgICAgJiYgZXh0ZW5kZWRXb3JkQ2hhcnMudGVzdCh0b2tlbnNbaSArIDJdKSkge1xuICAgICAgdG9rZW5zW2ldICs9IHRva2Vuc1tpICsgMl07XG4gICAgICB0b2tlbnMuc3BsaWNlKGkgKyAxLCAyKTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZXb3JkcyhvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucykge1xuICBvcHRpb25zID0gZ2VuZXJhdGVPcHRpb25zKG9wdGlvbnMsIHtpZ25vcmVXaGl0ZXNwYWNlOiB0cnVlfSk7XG4gIHJldHVybiB3b3JkRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZXb3Jkc1dpdGhTcGFjZShvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucykge1xuICByZXR1cm4gd29yZERpZmYuZGlmZihvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucyk7XG59XG4iXX0=

      /***/
    },

    /***/ 71672: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      Object.defineProperty(exports, "Diff", {
        enumerable: true,
        get: function get() {
          return _base.default
        }
      })
      Object.defineProperty(exports, "diffChars", {
        enumerable: true,
        get: function get() {
          return _character.diffChars
        }
      })
      Object.defineProperty(exports, "diffWords", {
        enumerable: true,
        get: function get() {
          return _word.diffWords
        }
      })
      Object.defineProperty(exports, "diffWordsWithSpace", {
        enumerable: true,
        get: function get() {
          return _word.diffWordsWithSpace
        }
      })
      Object.defineProperty(exports, "diffLines", {
        enumerable: true,
        get: function get() {
          return _line.diffLines
        }
      })
      Object.defineProperty(exports, "diffTrimmedLines", {
        enumerable: true,
        get: function get() {
          return _line.diffTrimmedLines
        }
      })
      Object.defineProperty(exports, "diffSentences", {
        enumerable: true,
        get: function get() {
          return _sentence.diffSentences
        }
      })
      Object.defineProperty(exports, "diffCss", {
        enumerable: true,
        get: function get() {
          return _css.diffCss
        }
      })
      Object.defineProperty(exports, "diffJson", {
        enumerable: true,
        get: function get() {
          return _json.diffJson
        }
      })
      Object.defineProperty(exports, "canonicalize", {
        enumerable: true,
        get: function get() {
          return _json.canonicalize
        }
      })
      Object.defineProperty(exports, "diffArrays", {
        enumerable: true,
        get: function get() {
          return _array.diffArrays
        }
      })
      Object.defineProperty(exports, "applyPatch", {
        enumerable: true,
        get: function get() {
          return _apply.applyPatch
        }
      })
      Object.defineProperty(exports, "applyPatches", {
        enumerable: true,
        get: function get() {
          return _apply.applyPatches
        }
      })
      Object.defineProperty(exports, "parsePatch", {
        enumerable: true,
        get: function get() {
          return _parse.parsePatch
        }
      })
      Object.defineProperty(exports, "merge", {
        enumerable: true,
        get: function get() {
          return _merge.merge
        }
      })
      Object.defineProperty(exports, "structuredPatch", {
        enumerable: true,
        get: function get() {
          return _create.structuredPatch
        }
      })
      Object.defineProperty(exports, "createTwoFilesPatch", {
        enumerable: true,
        get: function get() {
          return _create.createTwoFilesPatch
        }
      })
      Object.defineProperty(exports, "createPatch", {
        enumerable: true,
        get: function get() {
          return _create.createPatch
        }
      })
      Object.defineProperty(exports, "convertChangesToDMP", {
        enumerable: true,
        get: function get() {
          return _dmp.convertChangesToDMP
        }
      })
      Object.defineProperty(exports, "convertChangesToXML", {
        enumerable: true,
        get: function get() {
          return _xml.convertChangesToXML
        }
      })

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _base = _interopRequireDefault(__nccwpck_require__(21653))
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _character = __nccwpck_require__(22081)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _word = __nccwpck_require__(46992)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _line = __nccwpck_require__(41591)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _sentence = __nccwpck_require__(33577)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _css = __nccwpck_require__(48941)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _json = __nccwpck_require__(86335)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _array = __nccwpck_require__(70546)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _apply = __nccwpck_require__(17429)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _parse = __nccwpck_require__(15870)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _merge = __nccwpck_require__(22640)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _create = __nccwpck_require__(64543)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _dmp = __nccwpck_require__(32859)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _xml = __nccwpck_require__(16982)
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBTZWUgTElDRU5TRSBmaWxlIGZvciB0ZXJtcyBvZiB1c2UgKi9cblxuLypcbiAqIFRleHQgZGlmZiBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBBUElTOlxuICogSnNEaWZmLmRpZmZDaGFyczogQ2hhcmFjdGVyIGJ5IGNoYXJhY3RlciBkaWZmXG4gKiBKc0RpZmYuZGlmZldvcmRzOiBXb3JkIChhcyBkZWZpbmVkIGJ5IFxcYiByZWdleCkgZGlmZiB3aGljaCBpZ25vcmVzIHdoaXRlc3BhY2VcbiAqIEpzRGlmZi5kaWZmTGluZXM6IExpbmUgYmFzZWQgZGlmZlxuICpcbiAqIEpzRGlmZi5kaWZmQ3NzOiBEaWZmIHRhcmdldGVkIGF0IENTUyBjb250ZW50XG4gKlxuICogVGhlc2UgbWV0aG9kcyBhcmUgYmFzZWQgb24gdGhlIGltcGxlbWVudGF0aW9uIHByb3Bvc2VkIGluXG4gKiBcIkFuIE8oTkQpIERpZmZlcmVuY2UgQWxnb3JpdGhtIGFuZCBpdHMgVmFyaWF0aW9uc1wiIChNeWVycywgMTk4NikuXG4gKiBodHRwOi8vY2l0ZXNlZXJ4LmlzdC5wc3UuZWR1L3ZpZXdkb2Mvc3VtbWFyeT9kb2k9MTAuMS4xLjQuNjkyN1xuICovXG5pbXBvcnQgRGlmZiBmcm9tICcuL2RpZmYvYmFzZSc7XG5pbXBvcnQge2RpZmZDaGFyc30gZnJvbSAnLi9kaWZmL2NoYXJhY3Rlcic7XG5pbXBvcnQge2RpZmZXb3JkcywgZGlmZldvcmRzV2l0aFNwYWNlfSBmcm9tICcuL2RpZmYvd29yZCc7XG5pbXBvcnQge2RpZmZMaW5lcywgZGlmZlRyaW1tZWRMaW5lc30gZnJvbSAnLi9kaWZmL2xpbmUnO1xuaW1wb3J0IHtkaWZmU2VudGVuY2VzfSBmcm9tICcuL2RpZmYvc2VudGVuY2UnO1xuXG5pbXBvcnQge2RpZmZDc3N9IGZyb20gJy4vZGlmZi9jc3MnO1xuaW1wb3J0IHtkaWZmSnNvbiwgY2Fub25pY2FsaXplfSBmcm9tICcuL2RpZmYvanNvbic7XG5cbmltcG9ydCB7ZGlmZkFycmF5c30gZnJvbSAnLi9kaWZmL2FycmF5JztcblxuaW1wb3J0IHthcHBseVBhdGNoLCBhcHBseVBhdGNoZXN9IGZyb20gJy4vcGF0Y2gvYXBwbHknO1xuaW1wb3J0IHtwYXJzZVBhdGNofSBmcm9tICcuL3BhdGNoL3BhcnNlJztcbmltcG9ydCB7bWVyZ2V9IGZyb20gJy4vcGF0Y2gvbWVyZ2UnO1xuaW1wb3J0IHtzdHJ1Y3R1cmVkUGF0Y2gsIGNyZWF0ZVR3b0ZpbGVzUGF0Y2gsIGNyZWF0ZVBhdGNofSBmcm9tICcuL3BhdGNoL2NyZWF0ZSc7XG5cbmltcG9ydCB7Y29udmVydENoYW5nZXNUb0RNUH0gZnJvbSAnLi9jb252ZXJ0L2RtcCc7XG5pbXBvcnQge2NvbnZlcnRDaGFuZ2VzVG9YTUx9IGZyb20gJy4vY29udmVydC94bWwnO1xuXG5leHBvcnQge1xuICBEaWZmLFxuXG4gIGRpZmZDaGFycyxcbiAgZGlmZldvcmRzLFxuICBkaWZmV29yZHNXaXRoU3BhY2UsXG4gIGRpZmZMaW5lcyxcbiAgZGlmZlRyaW1tZWRMaW5lcyxcbiAgZGlmZlNlbnRlbmNlcyxcblxuICBkaWZmQ3NzLFxuICBkaWZmSnNvbixcblxuICBkaWZmQXJyYXlzLFxuXG4gIHN0cnVjdHVyZWRQYXRjaCxcbiAgY3JlYXRlVHdvRmlsZXNQYXRjaCxcbiAgY3JlYXRlUGF0Y2gsXG4gIGFwcGx5UGF0Y2gsXG4gIGFwcGx5UGF0Y2hlcyxcbiAgcGFyc2VQYXRjaCxcbiAgbWVyZ2UsXG4gIGNvbnZlcnRDaGFuZ2VzVG9ETVAsXG4gIGNvbnZlcnRDaGFuZ2VzVG9YTUwsXG4gIGNhbm9uaWNhbGl6ZVxufTtcbiJdfQ==

      /***/
    },

    /***/ 17429: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.applyPatch = applyPatch
      exports.applyPatches = applyPatches

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _parse = __nccwpck_require__(15870)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _distanceIterator = _interopRequireDefault(__nccwpck_require__(75512))
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /*istanbul ignore end*/
      function applyPatch(source, uniDiff) {
        /*istanbul ignore start*/
        var /*istanbul ignore end*/
          options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}

        if (typeof uniDiff === "string") {
          uniDiff =
            /*istanbul ignore start*/
            (0,
            /*istanbul ignore end*/

            /*istanbul ignore start*/
            /*istanbul ignore end*/
            /*istanbul ignore start*/
            _parse.parsePatch)(
              /*istanbul ignore end*/
              uniDiff
            )
        }

        if (Array.isArray(uniDiff)) {
          if (uniDiff.length > 1) {
            throw new Error("applyPatch only works with a single input.")
          }

          uniDiff = uniDiff[0]
        } // Apply the diff to the input

        var lines = source.split(/\r\n|[\n\v\f\r\x85]/),
          delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [],
          hunks = uniDiff.hunks,
          compareLine =
            options.compareLine ||
            function (lineNumber, line, operation, patchContent) /*istanbul ignore start*/
            {
              return (
                /*istanbul ignore end*/
                line === patchContent
              )
            },
          errorCount = 0,
          fuzzFactor = options.fuzzFactor || 0,
          minLine = 0,
          offset = 0,
          removeEOFNL,
          addEOFNL
        /**
         * Checks if the hunk exactly fits on the provided location
         */

        function hunkFits(hunk, toPos) {
          for (var j = 0; j < hunk.lines.length; j++) {
            var line = hunk.lines[j],
              operation = line.length > 0 ? line[0] : " ",
              content = line.length > 0 ? line.substr(1) : line

            if (operation === " " || operation === "-") {
              // Context sanity check
              if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
                errorCount++

                if (errorCount > fuzzFactor) {
                  return false
                }
              }

              toPos++
            }
          }

          return true
        } // Search best fit offsets for each hunk based on the previous ones

        for (var i = 0; i < hunks.length; i++) {
          var hunk = hunks[i],
            maxLine = lines.length - hunk.oldLines,
            localOffset = 0,
            toPos = offset + hunk.oldStart - 1
          var iterator =
            /*istanbul ignore start*/
            (0,
            /*istanbul ignore end*/

            /*istanbul ignore start*/
            /*istanbul ignore end*/
            /*istanbul ignore start*/
            _distanceIterator.default)(
              /*istanbul ignore end*/
              toPos,
              minLine,
              maxLine
            )

          for (; localOffset !== undefined; localOffset = iterator()) {
            if (hunkFits(hunk, toPos + localOffset)) {
              hunk.offset = offset += localOffset
              break
            }
          }

          if (localOffset === undefined) {
            return false
          } // Set lower text limit to end of the current hunk, so next ones don't try
          // to fit over already patched text

          minLine = hunk.offset + hunk.oldStart + hunk.oldLines
        } // Apply patch hunks

        var diffOffset = 0

        for (var _i = 0; _i < hunks.length; _i++) {
          var _hunk = hunks[_i],
            _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1

          diffOffset += _hunk.newLines - _hunk.oldLines

          if (_toPos < 0) {
            // Creating a new file
            _toPos = 0
          }

          for (var j = 0; j < _hunk.lines.length; j++) {
            var line = _hunk.lines[j],
              operation = line.length > 0 ? line[0] : " ",
              content = line.length > 0 ? line.substr(1) : line,
              delimiter = _hunk.linedelimiters[j]

            if (operation === " ") {
              _toPos++
            } else if (operation === "-") {
              lines.splice(_toPos, 1)
              delimiters.splice(_toPos, 1)
              /* istanbul ignore else */
            } else if (operation === "+") {
              lines.splice(_toPos, 0, content)
              delimiters.splice(_toPos, 0, delimiter)
              _toPos++
            } else if (operation === "\\") {
              var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null

              if (previousOperation === "+") {
                removeEOFNL = true
              } else if (previousOperation === "-") {
                addEOFNL = true
              }
            }
          }
        } // Handle EOFNL insertion/removal

        if (removeEOFNL) {
          while (!lines[lines.length - 1]) {
            lines.pop()
            delimiters.pop()
          }
        } else if (addEOFNL) {
          lines.push("")
          delimiters.push("\n")
        }

        for (var _k = 0; _k < lines.length - 1; _k++) {
          lines[_k] = lines[_k] + delimiters[_k]
        }

        return lines.join("")
      } // Wrapper that supports multiple file patches via callbacks.

      function applyPatches(uniDiff, options) {
        if (typeof uniDiff === "string") {
          uniDiff =
            /*istanbul ignore start*/
            (0,
            /*istanbul ignore end*/

            /*istanbul ignore start*/
            /*istanbul ignore end*/
            /*istanbul ignore start*/
            _parse.parsePatch)(
              /*istanbul ignore end*/
              uniDiff
            )
        }

        var currentIndex = 0

        function processIndex() {
          var index = uniDiff[currentIndex++]

          if (!index) {
            return options.complete()
          }

          options.loadFile(index, function (err, data) {
            if (err) {
              return options.complete(err)
            }

            var updatedContent = applyPatch(data, index, options)
            options.patched(index, updatedContent, function (err) {
              if (err) {
                return options.complete(err)
              }

              processIndex()
            })
          })
        }

        processIndex()
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRjaC9hcHBseS5qcyJdLCJuYW1lcyI6WyJhcHBseVBhdGNoIiwic291cmNlIiwidW5pRGlmZiIsIm9wdGlvbnMiLCJwYXJzZVBhdGNoIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiRXJyb3IiLCJsaW5lcyIsInNwbGl0IiwiZGVsaW1pdGVycyIsIm1hdGNoIiwiaHVua3MiLCJjb21wYXJlTGluZSIsImxpbmVOdW1iZXIiLCJsaW5lIiwib3BlcmF0aW9uIiwicGF0Y2hDb250ZW50IiwiZXJyb3JDb3VudCIsImZ1enpGYWN0b3IiLCJtaW5MaW5lIiwib2Zmc2V0IiwicmVtb3ZlRU9GTkwiLCJhZGRFT0ZOTCIsImh1bmtGaXRzIiwiaHVuayIsInRvUG9zIiwiaiIsImNvbnRlbnQiLCJzdWJzdHIiLCJpIiwibWF4TGluZSIsIm9sZExpbmVzIiwibG9jYWxPZmZzZXQiLCJvbGRTdGFydCIsIml0ZXJhdG9yIiwiZGlzdGFuY2VJdGVyYXRvciIsInVuZGVmaW5lZCIsImRpZmZPZmZzZXQiLCJuZXdMaW5lcyIsImRlbGltaXRlciIsImxpbmVkZWxpbWl0ZXJzIiwic3BsaWNlIiwicHJldmlvdXNPcGVyYXRpb24iLCJwb3AiLCJwdXNoIiwiX2siLCJqb2luIiwiYXBwbHlQYXRjaGVzIiwiY3VycmVudEluZGV4IiwicHJvY2Vzc0luZGV4IiwiaW5kZXgiLCJjb21wbGV0ZSIsImxvYWRGaWxlIiwiZXJyIiwiZGF0YSIsInVwZGF0ZWRDb250ZW50IiwicGF0Y2hlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFFTyxTQUFTQSxVQUFULENBQW9CQyxNQUFwQixFQUE0QkMsT0FBNUIsRUFBbUQ7QUFBQTtBQUFBO0FBQUE7QUFBZEMsRUFBQUEsT0FBYyx1RUFBSixFQUFJOztBQUN4RCxNQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDL0JBLElBQUFBLE9BQU87QUFBRztBQUFBO0FBQUE7O0FBQUFFO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUE7QUFBQSxLQUFXRixPQUFYLENBQVY7QUFDRDs7QUFFRCxNQUFJRyxLQUFLLENBQUNDLE9BQU4sQ0FBY0osT0FBZCxDQUFKLEVBQTRCO0FBQzFCLFFBQUlBLE9BQU8sQ0FBQ0ssTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUN0QixZQUFNLElBQUlDLEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0Q7O0FBRUROLElBQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDLENBQUQsQ0FBakI7QUFDRCxHQVh1RCxDQWF4RDs7O0FBQ0EsTUFBSU8sS0FBSyxHQUFHUixNQUFNLENBQUNTLEtBQVAsQ0FBYSxxQkFBYixDQUFaO0FBQUEsTUFDSUMsVUFBVSxHQUFHVixNQUFNLENBQUNXLEtBQVAsQ0FBYSxzQkFBYixLQUF3QyxFQUR6RDtBQUFBLE1BRUlDLEtBQUssR0FBR1gsT0FBTyxDQUFDVyxLQUZwQjtBQUFBLE1BSUlDLFdBQVcsR0FBR1gsT0FBTyxDQUFDVyxXQUFSLElBQXdCLFVBQUNDLFVBQUQsRUFBYUMsSUFBYixFQUFtQkMsU0FBbkIsRUFBOEJDLFlBQTlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBK0NGLE1BQUFBLElBQUksS0FBS0U7QUFBeEQ7QUFBQSxHQUoxQztBQUFBLE1BS0lDLFVBQVUsR0FBRyxDQUxqQjtBQUFBLE1BTUlDLFVBQVUsR0FBR2pCLE9BQU8sQ0FBQ2lCLFVBQVIsSUFBc0IsQ0FOdkM7QUFBQSxNQU9JQyxPQUFPLEdBQUcsQ0FQZDtBQUFBLE1BUUlDLE1BQU0sR0FBRyxDQVJiO0FBQUEsTUFVSUMsV0FWSjtBQUFBLE1BV0lDLFFBWEo7QUFhQTs7Ozs7QUFHQSxXQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixJQUFJLENBQUNqQixLQUFMLENBQVdGLE1BQS9CLEVBQXVDcUIsQ0FBQyxFQUF4QyxFQUE0QztBQUMxQyxVQUFJWixJQUFJLEdBQUdVLElBQUksQ0FBQ2pCLEtBQUwsQ0FBV21CLENBQVgsQ0FBWDtBQUFBLFVBQ0lYLFNBQVMsR0FBSUQsSUFBSSxDQUFDVCxNQUFMLEdBQWMsQ0FBZCxHQUFrQlMsSUFBSSxDQUFDLENBQUQsQ0FBdEIsR0FBNEIsR0FEN0M7QUFBQSxVQUVJYSxPQUFPLEdBQUliLElBQUksQ0FBQ1QsTUFBTCxHQUFjLENBQWQsR0FBa0JTLElBQUksQ0FBQ2MsTUFBTCxDQUFZLENBQVosQ0FBbEIsR0FBbUNkLElBRmxEOztBQUlBLFVBQUlDLFNBQVMsS0FBSyxHQUFkLElBQXFCQSxTQUFTLEtBQUssR0FBdkMsRUFBNEM7QUFDMUM7QUFDQSxZQUFJLENBQUNILFdBQVcsQ0FBQ2EsS0FBSyxHQUFHLENBQVQsRUFBWWxCLEtBQUssQ0FBQ2tCLEtBQUQsQ0FBakIsRUFBMEJWLFNBQTFCLEVBQXFDWSxPQUFyQyxDQUFoQixFQUErRDtBQUM3RFYsVUFBQUEsVUFBVTs7QUFFVixjQUFJQSxVQUFVLEdBQUdDLFVBQWpCLEVBQTZCO0FBQzNCLG1CQUFPLEtBQVA7QUFDRDtBQUNGOztBQUNETyxRQUFBQSxLQUFLO0FBQ047QUFDRjs7QUFFRCxXQUFPLElBQVA7QUFDRCxHQWxEdUQsQ0FvRHhEOzs7QUFDQSxPQUFLLElBQUlJLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdsQixLQUFLLENBQUNOLE1BQTFCLEVBQWtDd0IsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJTCxJQUFJLEdBQUdiLEtBQUssQ0FBQ2tCLENBQUQsQ0FBaEI7QUFBQSxRQUNJQyxPQUFPLEdBQUd2QixLQUFLLENBQUNGLE1BQU4sR0FBZW1CLElBQUksQ0FBQ08sUUFEbEM7QUFBQSxRQUVJQyxXQUFXLEdBQUcsQ0FGbEI7QUFBQSxRQUdJUCxLQUFLLEdBQUdMLE1BQU0sR0FBR0ksSUFBSSxDQUFDUyxRQUFkLEdBQXlCLENBSHJDO0FBS0EsUUFBSUMsUUFBUTtBQUFHO0FBQUE7QUFBQTs7QUFBQUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQTtBQUFBLEtBQWlCVixLQUFqQixFQUF3Qk4sT0FBeEIsRUFBaUNXLE9BQWpDLENBQWY7O0FBRUEsV0FBT0UsV0FBVyxLQUFLSSxTQUF2QixFQUFrQ0osV0FBVyxHQUFHRSxRQUFRLEVBQXhELEVBQTREO0FBQzFELFVBQUlYLFFBQVEsQ0FBQ0MsSUFBRCxFQUFPQyxLQUFLLEdBQUdPLFdBQWYsQ0FBWixFQUF5QztBQUN2Q1IsUUFBQUEsSUFBSSxDQUFDSixNQUFMLEdBQWNBLE1BQU0sSUFBSVksV0FBeEI7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsUUFBSUEsV0FBVyxLQUFLSSxTQUFwQixFQUErQjtBQUM3QixhQUFPLEtBQVA7QUFDRCxLQWpCb0MsQ0FtQnJDO0FBQ0E7OztBQUNBakIsSUFBQUEsT0FBTyxHQUFHSyxJQUFJLENBQUNKLE1BQUwsR0FBY0ksSUFBSSxDQUFDUyxRQUFuQixHQUE4QlQsSUFBSSxDQUFDTyxRQUE3QztBQUNELEdBM0V1RCxDQTZFeEQ7OztBQUNBLE1BQUlNLFVBQVUsR0FBRyxDQUFqQjs7QUFDQSxPQUFLLElBQUlSLEVBQUMsR0FBRyxDQUFiLEVBQWdCQSxFQUFDLEdBQUdsQixLQUFLLENBQUNOLE1BQTFCLEVBQWtDd0IsRUFBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJTCxLQUFJLEdBQUdiLEtBQUssQ0FBQ2tCLEVBQUQsQ0FBaEI7QUFBQSxRQUNJSixNQUFLLEdBQUdELEtBQUksQ0FBQ1MsUUFBTCxHQUFnQlQsS0FBSSxDQUFDSixNQUFyQixHQUE4QmlCLFVBQTlCLEdBQTJDLENBRHZEOztBQUVBQSxJQUFBQSxVQUFVLElBQUliLEtBQUksQ0FBQ2MsUUFBTCxHQUFnQmQsS0FBSSxDQUFDTyxRQUFuQzs7QUFFQSxRQUFJTixNQUFLLEdBQUcsQ0FBWixFQUFlO0FBQUU7QUFDZkEsTUFBQUEsTUFBSyxHQUFHLENBQVI7QUFDRDs7QUFFRCxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLEtBQUksQ0FBQ2pCLEtBQUwsQ0FBV0YsTUFBL0IsRUFBdUNxQixDQUFDLEVBQXhDLEVBQTRDO0FBQzFDLFVBQUlaLElBQUksR0FBR1UsS0FBSSxDQUFDakIsS0FBTCxDQUFXbUIsQ0FBWCxDQUFYO0FBQUEsVUFDSVgsU0FBUyxHQUFJRCxJQUFJLENBQUNULE1BQUwsR0FBYyxDQUFkLEdBQWtCUyxJQUFJLENBQUMsQ0FBRCxDQUF0QixHQUE0QixHQUQ3QztBQUFBLFVBRUlhLE9BQU8sR0FBSWIsSUFBSSxDQUFDVCxNQUFMLEdBQWMsQ0FBZCxHQUFrQlMsSUFBSSxDQUFDYyxNQUFMLENBQVksQ0FBWixDQUFsQixHQUFtQ2QsSUFGbEQ7QUFBQSxVQUdJeUIsU0FBUyxHQUFHZixLQUFJLENBQUNnQixjQUFMLENBQW9CZCxDQUFwQixDQUhoQjs7QUFLQSxVQUFJWCxTQUFTLEtBQUssR0FBbEIsRUFBdUI7QUFDckJVLFFBQUFBLE1BQUs7QUFDTixPQUZELE1BRU8sSUFBSVYsU0FBUyxLQUFLLEdBQWxCLEVBQXVCO0FBQzVCUixRQUFBQSxLQUFLLENBQUNrQyxNQUFOLENBQWFoQixNQUFiLEVBQW9CLENBQXBCO0FBQ0FoQixRQUFBQSxVQUFVLENBQUNnQyxNQUFYLENBQWtCaEIsTUFBbEIsRUFBeUIsQ0FBekI7QUFDRjtBQUNDLE9BSk0sTUFJQSxJQUFJVixTQUFTLEtBQUssR0FBbEIsRUFBdUI7QUFDNUJSLFFBQUFBLEtBQUssQ0FBQ2tDLE1BQU4sQ0FBYWhCLE1BQWIsRUFBb0IsQ0FBcEIsRUFBdUJFLE9BQXZCO0FBQ0FsQixRQUFBQSxVQUFVLENBQUNnQyxNQUFYLENBQWtCaEIsTUFBbEIsRUFBeUIsQ0FBekIsRUFBNEJjLFNBQTVCO0FBQ0FkLFFBQUFBLE1BQUs7QUFDTixPQUpNLE1BSUEsSUFBSVYsU0FBUyxLQUFLLElBQWxCLEVBQXdCO0FBQzdCLFlBQUkyQixpQkFBaUIsR0FBR2xCLEtBQUksQ0FBQ2pCLEtBQUwsQ0FBV21CLENBQUMsR0FBRyxDQUFmLElBQW9CRixLQUFJLENBQUNqQixLQUFMLENBQVdtQixDQUFDLEdBQUcsQ0FBZixFQUFrQixDQUFsQixDQUFwQixHQUEyQyxJQUFuRTs7QUFDQSxZQUFJZ0IsaUJBQWlCLEtBQUssR0FBMUIsRUFBK0I7QUFDN0JyQixVQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNELFNBRkQsTUFFTyxJQUFJcUIsaUJBQWlCLEtBQUssR0FBMUIsRUFBK0I7QUFDcENwQixVQUFBQSxRQUFRLEdBQUcsSUFBWDtBQUNEO0FBQ0Y7QUFDRjtBQUNGLEdBakh1RCxDQW1IeEQ7OztBQUNBLE1BQUlELFdBQUosRUFBaUI7QUFDZixXQUFPLENBQUNkLEtBQUssQ0FBQ0EsS0FBSyxDQUFDRixNQUFOLEdBQWUsQ0FBaEIsQ0FBYixFQUFpQztBQUMvQkUsTUFBQUEsS0FBSyxDQUFDb0MsR0FBTjtBQUNBbEMsTUFBQUEsVUFBVSxDQUFDa0MsR0FBWDtBQUNEO0FBQ0YsR0FMRCxNQUtPLElBQUlyQixRQUFKLEVBQWM7QUFDbkJmLElBQUFBLEtBQUssQ0FBQ3FDLElBQU4sQ0FBVyxFQUFYO0FBQ0FuQyxJQUFBQSxVQUFVLENBQUNtQyxJQUFYLENBQWdCLElBQWhCO0FBQ0Q7O0FBQ0QsT0FBSyxJQUFJQyxFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHdEMsS0FBSyxDQUFDRixNQUFOLEdBQWUsQ0FBckMsRUFBd0N3QyxFQUFFLEVBQTFDLEVBQThDO0FBQzVDdEMsSUFBQUEsS0FBSyxDQUFDc0MsRUFBRCxDQUFMLEdBQVl0QyxLQUFLLENBQUNzQyxFQUFELENBQUwsR0FBWXBDLFVBQVUsQ0FBQ29DLEVBQUQsQ0FBbEM7QUFDRDs7QUFDRCxTQUFPdEMsS0FBSyxDQUFDdUMsSUFBTixDQUFXLEVBQVgsQ0FBUDtBQUNELEMsQ0FFRDs7O0FBQ08sU0FBU0MsWUFBVCxDQUFzQi9DLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUM3QyxNQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDL0JBLElBQUFBLE9BQU87QUFBRztBQUFBO0FBQUE7O0FBQUFFO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUE7QUFBQSxLQUFXRixPQUFYLENBQVY7QUFDRDs7QUFFRCxNQUFJZ0QsWUFBWSxHQUFHLENBQW5COztBQUNBLFdBQVNDLFlBQVQsR0FBd0I7QUFDdEIsUUFBSUMsS0FBSyxHQUFHbEQsT0FBTyxDQUFDZ0QsWUFBWSxFQUFiLENBQW5COztBQUNBLFFBQUksQ0FBQ0UsS0FBTCxFQUFZO0FBQ1YsYUFBT2pELE9BQU8sQ0FBQ2tELFFBQVIsRUFBUDtBQUNEOztBQUVEbEQsSUFBQUEsT0FBTyxDQUFDbUQsUUFBUixDQUFpQkYsS0FBakIsRUFBd0IsVUFBU0csR0FBVCxFQUFjQyxJQUFkLEVBQW9CO0FBQzFDLFVBQUlELEdBQUosRUFBUztBQUNQLGVBQU9wRCxPQUFPLENBQUNrRCxRQUFSLENBQWlCRSxHQUFqQixDQUFQO0FBQ0Q7O0FBRUQsVUFBSUUsY0FBYyxHQUFHekQsVUFBVSxDQUFDd0QsSUFBRCxFQUFPSixLQUFQLEVBQWNqRCxPQUFkLENBQS9CO0FBQ0FBLE1BQUFBLE9BQU8sQ0FBQ3VELE9BQVIsQ0FBZ0JOLEtBQWhCLEVBQXVCSyxjQUF2QixFQUF1QyxVQUFTRixHQUFULEVBQWM7QUFDbkQsWUFBSUEsR0FBSixFQUFTO0FBQ1AsaUJBQU9wRCxPQUFPLENBQUNrRCxRQUFSLENBQWlCRSxHQUFqQixDQUFQO0FBQ0Q7O0FBRURKLFFBQUFBLFlBQVk7QUFDYixPQU5EO0FBT0QsS0FiRDtBQWNEOztBQUNEQSxFQUFBQSxZQUFZO0FBQ2IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3BhcnNlUGF0Y2h9IGZyb20gJy4vcGFyc2UnO1xuaW1wb3J0IGRpc3RhbmNlSXRlcmF0b3IgZnJvbSAnLi4vdXRpbC9kaXN0YW5jZS1pdGVyYXRvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhdGNoKHNvdXJjZSwgdW5pRGlmZiwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2YgdW5pRGlmZiA9PT0gJ3N0cmluZycpIHtcbiAgICB1bmlEaWZmID0gcGFyc2VQYXRjaCh1bmlEaWZmKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHVuaURpZmYpKSB7XG4gICAgaWYgKHVuaURpZmYubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcHBseVBhdGNoIG9ubHkgd29ya3Mgd2l0aCBhIHNpbmdsZSBpbnB1dC4nKTtcbiAgICB9XG5cbiAgICB1bmlEaWZmID0gdW5pRGlmZlswXTtcbiAgfVxuXG4gIC8vIEFwcGx5IHRoZSBkaWZmIHRvIHRoZSBpbnB1dFxuICBsZXQgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xcclxcbnxbXFxuXFx2XFxmXFxyXFx4ODVdLyksXG4gICAgICBkZWxpbWl0ZXJzID0gc291cmNlLm1hdGNoKC9cXHJcXG58W1xcblxcdlxcZlxcclxceDg1XS9nKSB8fCBbXSxcbiAgICAgIGh1bmtzID0gdW5pRGlmZi5odW5rcyxcblxuICAgICAgY29tcGFyZUxpbmUgPSBvcHRpb25zLmNvbXBhcmVMaW5lIHx8ICgobGluZU51bWJlciwgbGluZSwgb3BlcmF0aW9uLCBwYXRjaENvbnRlbnQpID0+IGxpbmUgPT09IHBhdGNoQ29udGVudCksXG4gICAgICBlcnJvckNvdW50ID0gMCxcbiAgICAgIGZ1enpGYWN0b3IgPSBvcHRpb25zLmZ1enpGYWN0b3IgfHwgMCxcbiAgICAgIG1pbkxpbmUgPSAwLFxuICAgICAgb2Zmc2V0ID0gMCxcblxuICAgICAgcmVtb3ZlRU9GTkwsXG4gICAgICBhZGRFT0ZOTDtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBodW5rIGV4YWN0bHkgZml0cyBvbiB0aGUgcHJvdmlkZWQgbG9jYXRpb25cbiAgICovXG4gIGZ1bmN0aW9uIGh1bmtGaXRzKGh1bmssIHRvUG9zKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBodW5rLmxpbmVzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgbGluZSA9IGh1bmsubGluZXNbal0sXG4gICAgICAgICAgb3BlcmF0aW9uID0gKGxpbmUubGVuZ3RoID4gMCA/IGxpbmVbMF0gOiAnICcpLFxuICAgICAgICAgIGNvbnRlbnQgPSAobGluZS5sZW5ndGggPiAwID8gbGluZS5zdWJzdHIoMSkgOiBsaW5lKTtcblxuICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gJyAnIHx8IG9wZXJhdGlvbiA9PT0gJy0nKSB7XG4gICAgICAgIC8vIENvbnRleHQgc2FuaXR5IGNoZWNrXG4gICAgICAgIGlmICghY29tcGFyZUxpbmUodG9Qb3MgKyAxLCBsaW5lc1t0b1Bvc10sIG9wZXJhdGlvbiwgY29udGVudCkpIHtcbiAgICAgICAgICBlcnJvckNvdW50Kys7XG5cbiAgICAgICAgICBpZiAoZXJyb3JDb3VudCA+IGZ1enpGYWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG9Qb3MrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFNlYXJjaCBiZXN0IGZpdCBvZmZzZXRzIGZvciBlYWNoIGh1bmsgYmFzZWQgb24gdGhlIHByZXZpb3VzIG9uZXNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBodW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBodW5rID0gaHVua3NbaV0sXG4gICAgICAgIG1heExpbmUgPSBsaW5lcy5sZW5ndGggLSBodW5rLm9sZExpbmVzLFxuICAgICAgICBsb2NhbE9mZnNldCA9IDAsXG4gICAgICAgIHRvUG9zID0gb2Zmc2V0ICsgaHVuay5vbGRTdGFydCAtIDE7XG5cbiAgICBsZXQgaXRlcmF0b3IgPSBkaXN0YW5jZUl0ZXJhdG9yKHRvUG9zLCBtaW5MaW5lLCBtYXhMaW5lKTtcblxuICAgIGZvciAoOyBsb2NhbE9mZnNldCAhPT0gdW5kZWZpbmVkOyBsb2NhbE9mZnNldCA9IGl0ZXJhdG9yKCkpIHtcbiAgICAgIGlmIChodW5rRml0cyhodW5rLCB0b1BvcyArIGxvY2FsT2Zmc2V0KSkge1xuICAgICAgICBodW5rLm9mZnNldCA9IG9mZnNldCArPSBsb2NhbE9mZnNldDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxvY2FsT2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBTZXQgbG93ZXIgdGV4dCBsaW1pdCB0byBlbmQgb2YgdGhlIGN1cnJlbnQgaHVuaywgc28gbmV4dCBvbmVzIGRvbid0IHRyeVxuICAgIC8vIHRvIGZpdCBvdmVyIGFscmVhZHkgcGF0Y2hlZCB0ZXh0XG4gICAgbWluTGluZSA9IGh1bmsub2Zmc2V0ICsgaHVuay5vbGRTdGFydCArIGh1bmsub2xkTGluZXM7XG4gIH1cblxuICAvLyBBcHBseSBwYXRjaCBodW5rc1xuICBsZXQgZGlmZk9mZnNldCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaHVuayA9IGh1bmtzW2ldLFxuICAgICAgICB0b1BvcyA9IGh1bmsub2xkU3RhcnQgKyBodW5rLm9mZnNldCArIGRpZmZPZmZzZXQgLSAxO1xuICAgIGRpZmZPZmZzZXQgKz0gaHVuay5uZXdMaW5lcyAtIGh1bmsub2xkTGluZXM7XG5cbiAgICBpZiAodG9Qb3MgPCAwKSB7IC8vIENyZWF0aW5nIGEgbmV3IGZpbGVcbiAgICAgIHRvUG9zID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGh1bmsubGluZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCBsaW5lID0gaHVuay5saW5lc1tqXSxcbiAgICAgICAgICBvcGVyYXRpb24gPSAobGluZS5sZW5ndGggPiAwID8gbGluZVswXSA6ICcgJyksXG4gICAgICAgICAgY29udGVudCA9IChsaW5lLmxlbmd0aCA+IDAgPyBsaW5lLnN1YnN0cigxKSA6IGxpbmUpLFxuICAgICAgICAgIGRlbGltaXRlciA9IGh1bmsubGluZWRlbGltaXRlcnNbal07XG5cbiAgICAgIGlmIChvcGVyYXRpb24gPT09ICcgJykge1xuICAgICAgICB0b1BvcysrO1xuICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb24gPT09ICctJykge1xuICAgICAgICBsaW5lcy5zcGxpY2UodG9Qb3MsIDEpO1xuICAgICAgICBkZWxpbWl0ZXJzLnNwbGljZSh0b1BvcywgMSk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb24gPT09ICcrJykge1xuICAgICAgICBsaW5lcy5zcGxpY2UodG9Qb3MsIDAsIGNvbnRlbnQpO1xuICAgICAgICBkZWxpbWl0ZXJzLnNwbGljZSh0b1BvcywgMCwgZGVsaW1pdGVyKTtcbiAgICAgICAgdG9Qb3MrKztcbiAgICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uID09PSAnXFxcXCcpIHtcbiAgICAgICAgbGV0IHByZXZpb3VzT3BlcmF0aW9uID0gaHVuay5saW5lc1tqIC0gMV0gPyBodW5rLmxpbmVzW2ogLSAxXVswXSA6IG51bGw7XG4gICAgICAgIGlmIChwcmV2aW91c09wZXJhdGlvbiA9PT0gJysnKSB7XG4gICAgICAgICAgcmVtb3ZlRU9GTkwgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzT3BlcmF0aW9uID09PSAnLScpIHtcbiAgICAgICAgICBhZGRFT0ZOTCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBIYW5kbGUgRU9GTkwgaW5zZXJ0aW9uL3JlbW92YWxcbiAgaWYgKHJlbW92ZUVPRk5MKSB7XG4gICAgd2hpbGUgKCFsaW5lc1tsaW5lcy5sZW5ndGggLSAxXSkge1xuICAgICAgbGluZXMucG9wKCk7XG4gICAgICBkZWxpbWl0ZXJzLnBvcCgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhZGRFT0ZOTCkge1xuICAgIGxpbmVzLnB1c2goJycpO1xuICAgIGRlbGltaXRlcnMucHVzaCgnXFxuJyk7XG4gIH1cbiAgZm9yIChsZXQgX2sgPSAwOyBfayA8IGxpbmVzLmxlbmd0aCAtIDE7IF9rKyspIHtcbiAgICBsaW5lc1tfa10gPSBsaW5lc1tfa10gKyBkZWxpbWl0ZXJzW19rXTtcbiAgfVxuICByZXR1cm4gbGluZXMuam9pbignJyk7XG59XG5cbi8vIFdyYXBwZXIgdGhhdCBzdXBwb3J0cyBtdWx0aXBsZSBmaWxlIHBhdGNoZXMgdmlhIGNhbGxiYWNrcy5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhdGNoZXModW5pRGlmZiwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHVuaURpZmYgPT09ICdzdHJpbmcnKSB7XG4gICAgdW5pRGlmZiA9IHBhcnNlUGF0Y2godW5pRGlmZik7XG4gIH1cblxuICBsZXQgY3VycmVudEluZGV4ID0gMDtcbiAgZnVuY3Rpb24gcHJvY2Vzc0luZGV4KCkge1xuICAgIGxldCBpbmRleCA9IHVuaURpZmZbY3VycmVudEluZGV4KytdO1xuICAgIGlmICghaW5kZXgpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5sb2FkRmlsZShpbmRleCwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmNvbXBsZXRlKGVycik7XG4gICAgICB9XG5cbiAgICAgIGxldCB1cGRhdGVkQ29udGVudCA9IGFwcGx5UGF0Y2goZGF0YSwgaW5kZXgsIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5wYXRjaGVkKGluZGV4LCB1cGRhdGVkQ29udGVudCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5jb21wbGV0ZShlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzc0luZGV4KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBwcm9jZXNzSW5kZXgoKTtcbn1cbiJdfQ==

      /***/
    },

    /***/ 64543: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.structuredPatch = structuredPatch
      exports.createTwoFilesPatch = createTwoFilesPatch
      exports.createPatch = createPatch

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _line = __nccwpck_require__(41591)
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread()
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance")
      }

      function _iterableToArray(iter) {
        if (
          Symbol.iterator in Object(iter) ||
          Object.prototype.toString.call(iter) === "[object Arguments]"
        )
          return Array.from(iter)
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i]
          }
          return arr2
        }
      }

      /*istanbul ignore end*/
      function structuredPatch(
        oldFileName,
        newFileName,
        oldStr,
        newStr,
        oldHeader,
        newHeader,
        options
      ) {
        if (!options) {
          options = {}
        }

        if (typeof options.context === "undefined") {
          options.context = 4
        }

        var diff =
          /*istanbul ignore start*/
          (0,
          /*istanbul ignore end*/

          /*istanbul ignore start*/
          /*istanbul ignore end*/
          /*istanbul ignore start*/
          _line.diffLines)(
            /*istanbul ignore end*/
            oldStr,
            newStr,
            options
          )
        diff.push({
          value: "",
          lines: []
        }) // Append an empty value to make cleanup easier

        function contextLines(lines) {
          return lines.map(function (entry) {
            return " " + entry
          })
        }

        var hunks = []
        var oldRangeStart = 0,
          newRangeStart = 0,
          curRange = [],
          oldLine = 1,
          newLine = 1

        /*istanbul ignore start*/
        var _loop = function _loop(
          /*istanbul ignore end*/
          i
        ) {
          var current = diff[i],
            lines = current.lines || current.value.replace(/\n$/, "").split("\n")
          current.lines = lines

          if (current.added || current.removed) {
            /*istanbul ignore start*/
            var _curRange

            /*istanbul ignore end*/
            // If we have previous context, start with that
            if (!oldRangeStart) {
              var prev = diff[i - 1]
              oldRangeStart = oldLine
              newRangeStart = newLine

              if (prev) {
                curRange =
                  options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : []
                oldRangeStart -= curRange.length
                newRangeStart -= curRange.length
              }
            } // Output our changes

            /*istanbul ignore start*/
            ;(_curRange =
              /*istanbul ignore end*/
              curRange).push
              /*istanbul ignore start*/
              .apply(
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _curRange,
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _toConsumableArray(
                  /*istanbul ignore end*/
                  lines.map(function (entry) {
                    return (current.added ? "+" : "-") + entry
                  })
                )
              ) // Track the updated file position

            if (current.added) {
              newLine += lines.length
            } else {
              oldLine += lines.length
            }
          } else {
            // Identical context lines. Track line changes
            if (oldRangeStart) {
              // Close out any changes that have been output (or join overlapping)
              if (lines.length <= options.context * 2 && i < diff.length - 2) {
                /*istanbul ignore start*/
                var _curRange2

                /*istanbul ignore end*/
                // Overlapping

                /*istanbul ignore start*/
                ;(_curRange2 =
                  /*istanbul ignore end*/
                  curRange).push
                  /*istanbul ignore start*/
                  .apply(
                    /*istanbul ignore end*/
                    /*istanbul ignore start*/
                    _curRange2,
                    /*istanbul ignore end*/
                    /*istanbul ignore start*/
                    _toConsumableArray(
                      /*istanbul ignore end*/
                      contextLines(lines)
                    )
                  )
              } else {
                /*istanbul ignore start*/
                var _curRange3

                /*istanbul ignore end*/
                // end the range and output
                var contextSize = Math.min(lines.length, options.context)

                /*istanbul ignore start*/
                ;(_curRange3 =
                  /*istanbul ignore end*/
                  curRange).push
                  /*istanbul ignore start*/
                  .apply(
                    /*istanbul ignore end*/
                    /*istanbul ignore start*/
                    _curRange3,
                    /*istanbul ignore end*/
                    /*istanbul ignore start*/
                    _toConsumableArray(
                      /*istanbul ignore end*/
                      contextLines(lines.slice(0, contextSize))
                    )
                  )

                var hunk = {
                  oldStart: oldRangeStart,
                  oldLines: oldLine - oldRangeStart + contextSize,
                  newStart: newRangeStart,
                  newLines: newLine - newRangeStart + contextSize,
                  lines: curRange
                }

                if (i >= diff.length - 2 && lines.length <= options.context) {
                  // EOF is inside this hunk
                  var oldEOFNewline = /\n$/.test(oldStr)
                  var newEOFNewline = /\n$/.test(newStr)
                  var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines

                  if (!oldEOFNewline && noNlBeforeAdds) {
                    // special case: old has no eol and no trailing context; no-nl can end up before adds
                    curRange.splice(hunk.oldLines, 0, "\\ No newline at end of file")
                  }

                  if ((!oldEOFNewline && !noNlBeforeAdds) || !newEOFNewline) {
                    curRange.push("\\ No newline at end of file")
                  }
                }

                hunks.push(hunk)
                oldRangeStart = 0
                newRangeStart = 0
                curRange = []
              }
            }

            oldLine += lines.length
            newLine += lines.length
          }
        }

        for (var i = 0; i < diff.length; i++) {
          /*istanbul ignore start*/
          _loop(
            /*istanbul ignore end*/
            i
          )
        }

        return {
          oldFileName: oldFileName,
          newFileName: newFileName,
          oldHeader: oldHeader,
          newHeader: newHeader,
          hunks: hunks
        }
      }

      function createTwoFilesPatch(
        oldFileName,
        newFileName,
        oldStr,
        newStr,
        oldHeader,
        newHeader,
        options
      ) {
        var diff = structuredPatch(
          oldFileName,
          newFileName,
          oldStr,
          newStr,
          oldHeader,
          newHeader,
          options
        )
        var ret = []

        if (oldFileName == newFileName) {
          ret.push("Index: " + oldFileName)
        }

        ret.push("===================================================================")
        ret.push(
          "--- " +
            diff.oldFileName +
            (typeof diff.oldHeader === "undefined" ? "" : "\t" + diff.oldHeader)
        )
        ret.push(
          "+++ " +
            diff.newFileName +
            (typeof diff.newHeader === "undefined" ? "" : "\t" + diff.newHeader)
        )

        for (var i = 0; i < diff.hunks.length; i++) {
          var hunk = diff.hunks[i]
          ret.push(
            "@@ -" +
              hunk.oldStart +
              "," +
              hunk.oldLines +
              " +" +
              hunk.newStart +
              "," +
              hunk.newLines +
              " @@"
          )
          ret.push.apply(ret, hunk.lines)
        }

        return ret.join("\n") + "\n"
      }

      function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
        return createTwoFilesPatch(
          fileName,
          fileName,
          oldStr,
          newStr,
          oldHeader,
          newHeader,
          options
        )
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,

      /***/
    },

    /***/ 22640: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.calcLineCount = calcLineCount
      exports.merge = merge

      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _create = __nccwpck_require__(64543)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _parse = __nccwpck_require__(15870)
      /*istanbul ignore end*/
      var /*istanbul ignore start*/
        _array = __nccwpck_require__(78935)
      /*istanbul ignore end*/
      /*istanbul ignore start*/ function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread()
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance")
      }

      function _iterableToArray(iter) {
        if (
          Symbol.iterator in Object(iter) ||
          Object.prototype.toString.call(iter) === "[object Arguments]"
        )
          return Array.from(iter)
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i]
          }
          return arr2
        }
      }

      /*istanbul ignore end*/
      function calcLineCount(hunk) {
        /*istanbul ignore start*/
        var _calcOldNewLineCount =
            /*istanbul ignore end*/
            calcOldNewLineCount(hunk.lines),
          oldLines = _calcOldNewLineCount.oldLines,
          newLines = _calcOldNewLineCount.newLines

        if (oldLines !== undefined) {
          hunk.oldLines = oldLines
        } else {
          delete hunk.oldLines
        }

        if (newLines !== undefined) {
          hunk.newLines = newLines
        } else {
          delete hunk.newLines
        }
      }

      function merge(mine, theirs, base) {
        mine = loadPatch(mine, base)
        theirs = loadPatch(theirs, base)
        var ret = {} // For index we just let it pass through as it doesn't have any necessary meaning.
        // Leaving sanity checks on this to the API consumer that may know more about the
        // meaning in their own context.

        if (mine.index || theirs.index) {
          ret.index = mine.index || theirs.index
        }

        if (mine.newFileName || theirs.newFileName) {
          if (!fileNameChanged(mine)) {
            // No header or no change in ours, use theirs (and ours if theirs does not exist)
            ret.oldFileName = theirs.oldFileName || mine.oldFileName
            ret.newFileName = theirs.newFileName || mine.newFileName
            ret.oldHeader = theirs.oldHeader || mine.oldHeader
            ret.newHeader = theirs.newHeader || mine.newHeader
          } else if (!fileNameChanged(theirs)) {
            // No header or no change in theirs, use ours
            ret.oldFileName = mine.oldFileName
            ret.newFileName = mine.newFileName
            ret.oldHeader = mine.oldHeader
            ret.newHeader = mine.newHeader
          } else {
            // Both changed... figure it out
            ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName)
            ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName)
            ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader)
            ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader)
          }
        }

        ret.hunks = []
        var mineIndex = 0,
          theirsIndex = 0,
          mineOffset = 0,
          theirsOffset = 0

        while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
          var mineCurrent = mine.hunks[mineIndex] || {
              oldStart: Infinity
            },
            theirsCurrent = theirs.hunks[theirsIndex] || {
              oldStart: Infinity
            }

          if (hunkBefore(mineCurrent, theirsCurrent)) {
            // This patch does not overlap with any of the others, yay.
            ret.hunks.push(cloneHunk(mineCurrent, mineOffset))
            mineIndex++
            theirsOffset += mineCurrent.newLines - mineCurrent.oldLines
          } else if (hunkBefore(theirsCurrent, mineCurrent)) {
            // This patch does not overlap with any of the others, yay.
            ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset))
            theirsIndex++
            mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines
          } else {
            // Overlap, merge as best we can
            var mergedHunk = {
              oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
              oldLines: 0,
              newStart: Math.min(
                mineCurrent.newStart + mineOffset,
                theirsCurrent.oldStart + theirsOffset
              ),
              newLines: 0,
              lines: []
            }
            mergeLines(
              mergedHunk,
              mineCurrent.oldStart,
              mineCurrent.lines,
              theirsCurrent.oldStart,
              theirsCurrent.lines
            )
            theirsIndex++
            mineIndex++
            ret.hunks.push(mergedHunk)
          }
        }

        return ret
      }

      function loadPatch(param, base) {
        if (typeof param === "string") {
          if (/^@@/m.test(param) || /^Index:/m.test(param)) {
            return (
              /*istanbul ignore start*/
              (0,
              /*istanbul ignore end*/

              /*istanbul ignore start*/
              /*istanbul ignore end*/
              /*istanbul ignore start*/
              _parse.parsePatch)(
                /*istanbul ignore end*/
                param
              )[0]
            )
          }

          if (!base) {
            throw new Error("Must provide a base reference or pass in a patch")
          }

          return (
            /*istanbul ignore start*/
            (0,
            /*istanbul ignore end*/

            /*istanbul ignore start*/
            /*istanbul ignore end*/
            /*istanbul ignore start*/
            _create.structuredPatch)(
              /*istanbul ignore end*/
              undefined,
              undefined,
              base,
              param
            )
          )
        }

        return param
      }

      function fileNameChanged(patch) {
        return patch.newFileName && patch.newFileName !== patch.oldFileName
      }

      function selectField(index, mine, theirs) {
        if (mine === theirs) {
          return mine
        } else {
          index.conflict = true
          return {
            mine: mine,
            theirs: theirs
          }
        }
      }

      function hunkBefore(test, check) {
        return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart
      }

      function cloneHunk(hunk, offset) {
        return {
          oldStart: hunk.oldStart,
          oldLines: hunk.oldLines,
          newStart: hunk.newStart + offset,
          newLines: hunk.newLines,
          lines: hunk.lines
        }
      }

      function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
        // This will generally result in a conflicted hunk, but there are cases where the context
        // is the only overlap where we can successfully merge the content here.
        var mine = {
            offset: mineOffset,
            lines: mineLines,
            index: 0
          },
          their = {
            offset: theirOffset,
            lines: theirLines,
            index: 0
          } // Handle any leading content

        insertLeading(hunk, mine, their)
        insertLeading(hunk, their, mine) // Now in the overlap content. Scan through and select the best changes from each.

        while (mine.index < mine.lines.length && their.index < their.lines.length) {
          var mineCurrent = mine.lines[mine.index],
            theirCurrent = their.lines[their.index]

          if (
            (mineCurrent[0] === "-" || mineCurrent[0] === "+") &&
            (theirCurrent[0] === "-" || theirCurrent[0] === "+")
          ) {
            // Both modified ...
            mutualChange(hunk, mine, their)
          } else if (mineCurrent[0] === "+" && theirCurrent[0] === " ") {
            /*istanbul ignore start*/
            var _hunk$lines

            /*istanbul ignore end*/
            // Mine inserted

            /*istanbul ignore start*/
            ;(_hunk$lines =
              /*istanbul ignore end*/
              hunk.lines).push
              /*istanbul ignore start*/
              .apply(
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _hunk$lines,
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _toConsumableArray(
                  /*istanbul ignore end*/
                  collectChange(mine)
                )
              )
          } else if (theirCurrent[0] === "+" && mineCurrent[0] === " ") {
            /*istanbul ignore start*/
            var _hunk$lines2

            /*istanbul ignore end*/
            // Theirs inserted

            /*istanbul ignore start*/
            ;(_hunk$lines2 =
              /*istanbul ignore end*/
              hunk.lines).push
              /*istanbul ignore start*/
              .apply(
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _hunk$lines2,
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _toConsumableArray(
                  /*istanbul ignore end*/
                  collectChange(their)
                )
              )
          } else if (mineCurrent[0] === "-" && theirCurrent[0] === " ") {
            // Mine removed or edited
            removal(hunk, mine, their)
          } else if (theirCurrent[0] === "-" && mineCurrent[0] === " ") {
            // Their removed or edited
            removal(hunk, their, mine, true)
          } else if (mineCurrent === theirCurrent) {
            // Context identity
            hunk.lines.push(mineCurrent)
            mine.index++
            their.index++
          } else {
            // Context mismatch
            conflict(hunk, collectChange(mine), collectChange(their))
          }
        } // Now push anything that may be remaining

        insertTrailing(hunk, mine)
        insertTrailing(hunk, their)
        calcLineCount(hunk)
      }

      function mutualChange(hunk, mine, their) {
        var myChanges = collectChange(mine),
          theirChanges = collectChange(their)

        if (allRemoves(myChanges) && allRemoves(theirChanges)) {
          // Special case for remove changes that are supersets of one another
          if (
            /*istanbul ignore start*/
            (0,
            /*istanbul ignore end*/

            /*istanbul ignore start*/
            /*istanbul ignore end*/
            /*istanbul ignore start*/
            _array.arrayStartsWith)(
              /*istanbul ignore end*/
              myChanges,
              theirChanges
            ) &&
            skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)
          ) {
            /*istanbul ignore start*/
            var _hunk$lines3

            /*istanbul ignore end*/

            /*istanbul ignore start*/
            ;(_hunk$lines3 =
              /*istanbul ignore end*/
              hunk.lines).push
              /*istanbul ignore start*/
              .apply(
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _hunk$lines3,
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _toConsumableArray(
                  /*istanbul ignore end*/
                  myChanges
                )
              )

            return
          } else if (
            /*istanbul ignore start*/
            (0,
            /*istanbul ignore end*/

            /*istanbul ignore start*/
            /*istanbul ignore end*/
            /*istanbul ignore start*/
            _array.arrayStartsWith)(
              /*istanbul ignore end*/
              theirChanges,
              myChanges
            ) &&
            skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)
          ) {
            /*istanbul ignore start*/
            var _hunk$lines4

            /*istanbul ignore end*/

            /*istanbul ignore start*/
            ;(_hunk$lines4 =
              /*istanbul ignore end*/
              hunk.lines).push
              /*istanbul ignore start*/
              .apply(
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _hunk$lines4,
                /*istanbul ignore end*/
                /*istanbul ignore start*/
                _toConsumableArray(
                  /*istanbul ignore end*/
                  theirChanges
                )
              )

            return
          }
        } else if (
          /*istanbul ignore start*/
          (0,
          /*istanbul ignore end*/

          /*istanbul ignore start*/
          /*istanbul ignore end*/
          /*istanbul ignore start*/
          _array.arrayEqual)(
            /*istanbul ignore end*/
            myChanges,
            theirChanges
          )
        ) {
          /*istanbul ignore start*/
          var _hunk$lines5

          /*istanbul ignore end*/

          /*istanbul ignore start*/
          ;(_hunk$lines5 =
            /*istanbul ignore end*/
            hunk.lines).push
            /*istanbul ignore start*/
            .apply(
              /*istanbul ignore end*/
              /*istanbul ignore start*/
              _hunk$lines5,
              /*istanbul ignore end*/
              /*istanbul ignore start*/
              _toConsumableArray(
                /*istanbul ignore end*/
                myChanges
              )
            )

          return
        }

        conflict(hunk, myChanges, theirChanges)
      }

      function removal(hunk, mine, their, swap) {
        var myChanges = collectChange(mine),
          theirChanges = collectContext(their, myChanges)

        if (theirChanges.merged) {
          /*istanbul ignore start*/
          var _hunk$lines6

          /*istanbul ignore end*/

          /*istanbul ignore start*/
          ;(_hunk$lines6 =
            /*istanbul ignore end*/
            hunk.lines).push
            /*istanbul ignore start*/
            .apply(
              /*istanbul ignore end*/
              /*istanbul ignore start*/
              _hunk$lines6,
              /*istanbul ignore end*/
              /*istanbul ignore start*/
              _toConsumableArray(
                /*istanbul ignore end*/
                theirChanges.merged
              )
            )
        } else {
          conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges)
        }
      }

      function conflict(hunk, mine, their) {
        hunk.conflict = true
        hunk.lines.push({
          conflict: true,
          mine: mine,
          theirs: their
        })
      }

      function insertLeading(hunk, insert, their) {
        while (insert.offset < their.offset && insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++]
          hunk.lines.push(line)
          insert.offset++
        }
      }

      function insertTrailing(hunk, insert) {
        while (insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++]
          hunk.lines.push(line)
        }
      }

      function collectChange(state) {
        var ret = [],
          operation = state.lines[state.index][0]

        while (state.index < state.lines.length) {
          var line = state.lines[state.index] // Group additions that are immediately after subtractions and treat them as one "atomic" modify change.

          if (operation === "-" && line[0] === "+") {
            operation = "+"
          }

          if (operation === line[0]) {
            ret.push(line)
            state.index++
          } else {
            break
          }
        }

        return ret
      }

      function collectContext(state, matchChanges) {
        var changes = [],
          merged = [],
          matchIndex = 0,
          contextChanges = false,
          conflicted = false

        while (matchIndex < matchChanges.length && state.index < state.lines.length) {
          var change = state.lines[state.index],
            match = matchChanges[matchIndex] // Once we've hit our add, then we are done

          if (match[0] === "+") {
            break
          }

          contextChanges = contextChanges || change[0] !== " "
          merged.push(match)
          matchIndex++ // Consume any additions in the other block as a conflict to attempt
          // to pull in the remaining context after this

          if (change[0] === "+") {
            conflicted = true

            while (change[0] === "+") {
              changes.push(change)
              change = state.lines[++state.index]
            }
          }

          if (match.substr(1) === change.substr(1)) {
            changes.push(change)
            state.index++
          } else {
            conflicted = true
          }
        }

        if ((matchChanges[matchIndex] || "")[0] === "+" && contextChanges) {
          conflicted = true
        }

        if (conflicted) {
          return changes
        }

        while (matchIndex < matchChanges.length) {
          merged.push(matchChanges[matchIndex++])
        }

        return {
          merged: merged,
          changes: changes
        }
      }

      function allRemoves(changes) {
        return changes.reduce(function (prev, change) {
          return prev && change[0] === "-"
        }, true)
      }

      function skipRemoveSuperset(state, removeChanges, delta) {
        for (var i = 0; i < delta; i++) {
          var changeContent = removeChanges[removeChanges.length - delta + i].substr(1)

          if (state.lines[state.index + i] !== " " + changeContent) {
            return false
          }
        }

        state.index += delta
        return true
      }

      function calcOldNewLineCount(lines) {
        var oldLines = 0
        var newLines = 0
        lines.forEach(function (line) {
          if (typeof line !== "string") {
            var myCount = calcOldNewLineCount(line.mine)
            var theirCount = calcOldNewLineCount(line.theirs)

            if (oldLines !== undefined) {
              if (myCount.oldLines === theirCount.oldLines) {
                oldLines += myCount.oldLines
              } else {
                oldLines = undefined
              }
            }

            if (newLines !== undefined) {
              if (myCount.newLines === theirCount.newLines) {
                newLines += myCount.newLines
              } else {
                newLines = undefined
              }
            }
          } else {
            if (newLines !== undefined && (line[0] === "+" || line[0] === " ")) {
              newLines++
            }

            if (oldLines !== undefined && (line[0] === "-" || line[0] === " ")) {
              oldLines++
            }
          }
        })
        return {
          oldLines: oldLines,
          newLines: newLines
        }
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,

      /***/
    },

    /***/ 15870: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.parsePatch = parsePatch

      /*istanbul ignore end*/
      function parsePatch(uniDiff) {
        /*istanbul ignore start*/
        var /*istanbul ignore end*/
          options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}
        var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/),
          delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [],
          list = [],
          i = 0

        function parseIndex() {
          var index = {}
          list.push(index) // Parse diff metadata

          while (i < diffstr.length) {
            var line = diffstr[i] // File header found, end parsing diff metadata

            if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
              break
            } // Diff index

            var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line)

            if (header) {
              index.index = header[1]
            }

            i++
          } // Parse file headers if they are defined. Unified diff requires them, but
          // there's no technical issues to have an isolated hunk without file header

          parseFileHeader(index)
          parseFileHeader(index) // Parse hunks

          index.hunks = []

          while (i < diffstr.length) {
            var _line = diffstr[i]

            if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
              break
            } else if (/^@@/.test(_line)) {
              index.hunks.push(parseHunk())
            } else if (_line && options.strict) {
              // Ignore unexpected content unless in strict mode
              throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(_line))
            } else {
              i++
            }
          }
        } // Parses the --- and +++ headers, if none are found, no lines
        // are consumed.

        function parseFileHeader(index) {
          var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i])

          if (fileHeader) {
            var keyPrefix = fileHeader[1] === "---" ? "old" : "new"
            var data = fileHeader[2].split("\t", 2)
            var fileName = data[0].replace(/\\\\/g, "\\")

            if (/^".*"$/.test(fileName)) {
              fileName = fileName.substr(1, fileName.length - 2)
            }

            index[keyPrefix + "FileName"] = fileName
            index[keyPrefix + "Header"] = (data[1] || "").trim()
            i++
          }
        } // Parses a hunk
        // This assumes that we are at the start of a hunk.

        function parseHunk() {
          var chunkHeaderIndex = i,
            chunkHeaderLine = diffstr[i++],
            chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/)
          var hunk = {
            oldStart: +chunkHeader[1],
            oldLines: +chunkHeader[2] || 1,
            newStart: +chunkHeader[3],
            newLines: +chunkHeader[4] || 1,
            lines: [],
            linedelimiters: []
          }
          var addCount = 0,
            removeCount = 0

          for (; i < diffstr.length; i++) {
            // Lines starting with '---' could be mistaken for the "remove line" operation
            // But they could be the header for the next file. Therefore prune such cases out.
            if (
              diffstr[i].indexOf("--- ") === 0 &&
              i + 2 < diffstr.length &&
              diffstr[i + 1].indexOf("+++ ") === 0 &&
              diffstr[i + 2].indexOf("@@") === 0
            ) {
              break
            }

            var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? " " : diffstr[i][0]

            if (operation === "+" || operation === "-" || operation === " " || operation === "\\") {
              hunk.lines.push(diffstr[i])
              hunk.linedelimiters.push(delimiters[i] || "\n")

              if (operation === "+") {
                addCount++
              } else if (operation === "-") {
                removeCount++
              } else if (operation === " ") {
                addCount++
                removeCount++
              }
            } else {
              break
            }
          } // Handle the empty block count case

          if (!addCount && hunk.newLines === 1) {
            hunk.newLines = 0
          }

          if (!removeCount && hunk.oldLines === 1) {
            hunk.oldLines = 0
          } // Perform optional sanity checking

          if (options.strict) {
            if (addCount !== hunk.newLines) {
              throw new Error(
                "Added line count did not match for hunk at line " + (chunkHeaderIndex + 1)
              )
            }

            if (removeCount !== hunk.oldLines) {
              throw new Error(
                "Removed line count did not match for hunk at line " + (chunkHeaderIndex + 1)
              )
            }
          }

          return hunk
        }

        while (i < diffstr.length) {
          parseIndex()
        }

        return list
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,

      /***/
    },

    /***/ 78935: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.arrayEqual = arrayEqual
      exports.arrayStartsWith = arrayStartsWith

      /*istanbul ignore end*/
      function arrayEqual(a, b) {
        if (a.length !== b.length) {
          return false
        }

        return arrayStartsWith(a, b)
      }

      function arrayStartsWith(array, start) {
        if (start.length > array.length) {
          return false
        }

        for (var i = 0; i < start.length; i++) {
          if (start[i] !== array[i]) {
            return false
          }
        }

        return true
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2FycmF5LmpzIl0sIm5hbWVzIjpbImFycmF5RXF1YWwiLCJhIiwiYiIsImxlbmd0aCIsImFycmF5U3RhcnRzV2l0aCIsImFycmF5Iiwic3RhcnQiLCJpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQU8sU0FBU0EsVUFBVCxDQUFvQkMsQ0FBcEIsRUFBdUJDLENBQXZCLEVBQTBCO0FBQy9CLE1BQUlELENBQUMsQ0FBQ0UsTUFBRixLQUFhRCxDQUFDLENBQUNDLE1BQW5CLEVBQTJCO0FBQ3pCLFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU9DLGVBQWUsQ0FBQ0gsQ0FBRCxFQUFJQyxDQUFKLENBQXRCO0FBQ0Q7O0FBRU0sU0FBU0UsZUFBVCxDQUF5QkMsS0FBekIsRUFBZ0NDLEtBQWhDLEVBQXVDO0FBQzVDLE1BQUlBLEtBQUssQ0FBQ0gsTUFBTixHQUFlRSxLQUFLLENBQUNGLE1BQXpCLEVBQWlDO0FBQy9CLFdBQU8sS0FBUDtBQUNEOztBQUVELE9BQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDSCxNQUExQixFQUFrQ0ksQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJRCxLQUFLLENBQUNDLENBQUQsQ0FBTCxLQUFhRixLQUFLLENBQUNFLENBQUQsQ0FBdEIsRUFBMkI7QUFDekIsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBhcnJheUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBhcnJheVN0YXJ0c1dpdGgoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVN0YXJ0c1dpdGgoYXJyYXksIHN0YXJ0KSB7XG4gIGlmIChzdGFydC5sZW5ndGggPiBhcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0YXJ0W2ldICE9PSBhcnJheVtpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIl19

      /***/
    },

    /***/ 75512: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports["default"] = _default

      /*istanbul ignore end*/
      // Iterator that traverses in the range of [min, max], stepping
      // by distance from a given start position. I.e. for [0, 4], with
      // start of 2, this will iterate 2, 3, 1, 4, 0.
      function /*istanbul ignore start*/
      _default(
        /*istanbul ignore end*/
        start,
        minLine,
        maxLine
      ) {
        var wantForward = true,
          backwardExhausted = false,
          forwardExhausted = false,
          localOffset = 1
        return function iterator() {
          if (wantForward && !forwardExhausted) {
            if (backwardExhausted) {
              localOffset++
            } else {
              wantForward = false
            } // Check if trying to fit beyond text length, and if not, check it fits
            // after offset location (or desired location on first iteration)

            if (start + localOffset <= maxLine) {
              return localOffset
            }

            forwardExhausted = true
          }

          if (!backwardExhausted) {
            if (!forwardExhausted) {
              wantForward = true
            } // Check if trying to fit before text beginning, and if not, check it fits
            // before offset location

            if (minLine <= start - localOffset) {
              return -localOffset++
            }

            backwardExhausted = true
            return iterator()
          } // We tried to fit hunk before text beginning and beyond text length, then
          // hunk can't fit on the text. Return undefined
        }
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Rpc3RhbmNlLWl0ZXJhdG9yLmpzIl0sIm5hbWVzIjpbInN0YXJ0IiwibWluTGluZSIsIm1heExpbmUiLCJ3YW50Rm9yd2FyZCIsImJhY2t3YXJkRXhoYXVzdGVkIiwiZm9yd2FyZEV4aGF1c3RlZCIsImxvY2FsT2Zmc2V0IiwiaXRlcmF0b3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNlO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBU0EsS0FBVCxFQUFnQkMsT0FBaEIsRUFBeUJDLE9BQXpCLEVBQWtDO0FBQy9DLE1BQUlDLFdBQVcsR0FBRyxJQUFsQjtBQUFBLE1BQ0lDLGlCQUFpQixHQUFHLEtBRHhCO0FBQUEsTUFFSUMsZ0JBQWdCLEdBQUcsS0FGdkI7QUFBQSxNQUdJQyxXQUFXLEdBQUcsQ0FIbEI7QUFLQSxTQUFPLFNBQVNDLFFBQVQsR0FBb0I7QUFDekIsUUFBSUosV0FBVyxJQUFJLENBQUNFLGdCQUFwQixFQUFzQztBQUNwQyxVQUFJRCxpQkFBSixFQUF1QjtBQUNyQkUsUUFBQUEsV0FBVztBQUNaLE9BRkQsTUFFTztBQUNMSCxRQUFBQSxXQUFXLEdBQUcsS0FBZDtBQUNELE9BTG1DLENBT3BDO0FBQ0E7OztBQUNBLFVBQUlILEtBQUssR0FBR00sV0FBUixJQUF1QkosT0FBM0IsRUFBb0M7QUFDbEMsZUFBT0ksV0FBUDtBQUNEOztBQUVERCxNQUFBQSxnQkFBZ0IsR0FBRyxJQUFuQjtBQUNEOztBQUVELFFBQUksQ0FBQ0QsaUJBQUwsRUFBd0I7QUFDdEIsVUFBSSxDQUFDQyxnQkFBTCxFQUF1QjtBQUNyQkYsUUFBQUEsV0FBVyxHQUFHLElBQWQ7QUFDRCxPQUhxQixDQUt0QjtBQUNBOzs7QUFDQSxVQUFJRixPQUFPLElBQUlELEtBQUssR0FBR00sV0FBdkIsRUFBb0M7QUFDbEMsZUFBTyxDQUFDQSxXQUFXLEVBQW5CO0FBQ0Q7O0FBRURGLE1BQUFBLGlCQUFpQixHQUFHLElBQXBCO0FBQ0EsYUFBT0csUUFBUSxFQUFmO0FBQ0QsS0E5QndCLENBZ0N6QjtBQUNBOztBQUNELEdBbENEO0FBbUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSXRlcmF0b3IgdGhhdCB0cmF2ZXJzZXMgaW4gdGhlIHJhbmdlIG9mIFttaW4sIG1heF0sIHN0ZXBwaW5nXG4vLyBieSBkaXN0YW5jZSBmcm9tIGEgZ2l2ZW4gc3RhcnQgcG9zaXRpb24uIEkuZS4gZm9yIFswLCA0XSwgd2l0aFxuLy8gc3RhcnQgb2YgMiwgdGhpcyB3aWxsIGl0ZXJhdGUgMiwgMywgMSwgNCwgMC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBtaW5MaW5lLCBtYXhMaW5lKSB7XG4gIGxldCB3YW50Rm9yd2FyZCA9IHRydWUsXG4gICAgICBiYWNrd2FyZEV4aGF1c3RlZCA9IGZhbHNlLFxuICAgICAgZm9yd2FyZEV4aGF1c3RlZCA9IGZhbHNlLFxuICAgICAgbG9jYWxPZmZzZXQgPSAxO1xuXG4gIHJldHVybiBmdW5jdGlvbiBpdGVyYXRvcigpIHtcbiAgICBpZiAod2FudEZvcndhcmQgJiYgIWZvcndhcmRFeGhhdXN0ZWQpIHtcbiAgICAgIGlmIChiYWNrd2FyZEV4aGF1c3RlZCkge1xuICAgICAgICBsb2NhbE9mZnNldCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FudEZvcndhcmQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGZpdCBiZXlvbmQgdGV4dCBsZW5ndGgsIGFuZCBpZiBub3QsIGNoZWNrIGl0IGZpdHNcbiAgICAgIC8vIGFmdGVyIG9mZnNldCBsb2NhdGlvbiAob3IgZGVzaXJlZCBsb2NhdGlvbiBvbiBmaXJzdCBpdGVyYXRpb24pXG4gICAgICBpZiAoc3RhcnQgKyBsb2NhbE9mZnNldCA8PSBtYXhMaW5lKSB7XG4gICAgICAgIHJldHVybiBsb2NhbE9mZnNldDtcbiAgICAgIH1cblxuICAgICAgZm9yd2FyZEV4aGF1c3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFiYWNrd2FyZEV4aGF1c3RlZCkge1xuICAgICAgaWYgKCFmb3J3YXJkRXhoYXVzdGVkKSB7XG4gICAgICAgIHdhbnRGb3J3YXJkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGZpdCBiZWZvcmUgdGV4dCBiZWdpbm5pbmcsIGFuZCBpZiBub3QsIGNoZWNrIGl0IGZpdHNcbiAgICAgIC8vIGJlZm9yZSBvZmZzZXQgbG9jYXRpb25cbiAgICAgIGlmIChtaW5MaW5lIDw9IHN0YXJ0IC0gbG9jYWxPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIC1sb2NhbE9mZnNldCsrO1xuICAgICAgfVxuXG4gICAgICBiYWNrd2FyZEV4aGF1c3RlZCA9IHRydWU7XG4gICAgICByZXR1cm4gaXRlcmF0b3IoKTtcbiAgICB9XG5cbiAgICAvLyBXZSB0cmllZCB0byBmaXQgaHVuayBiZWZvcmUgdGV4dCBiZWdpbm5pbmcgYW5kIGJleW9uZCB0ZXh0IGxlbmd0aCwgdGhlblxuICAgIC8vIGh1bmsgY2FuJ3QgZml0IG9uIHRoZSB0ZXh0LiBSZXR1cm4gdW5kZWZpbmVkXG4gIH07XG59XG4iXX0=

      /***/
    },

    /***/ 45704: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      /*istanbul ignore start*/

      Object.defineProperty(exports, "__esModule", {
        value: true
      })
      exports.generateOptions = generateOptions

      /*istanbul ignore end*/
      function generateOptions(options, defaults) {
        if (typeof options === "function") {
          defaults.callback = options
        } else if (options) {
          for (var name in options) {
            /* istanbul ignore else */
            if (options.hasOwnProperty(name)) {
              defaults[name] = options[name]
            }
          }
        }

        return defaults
      }
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3BhcmFtcy5qcyJdLCJuYW1lcyI6WyJnZW5lcmF0ZU9wdGlvbnMiLCJvcHRpb25zIiwiZGVmYXVsdHMiLCJjYWxsYmFjayIsIm5hbWUiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sU0FBU0EsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0NDLFFBQWxDLEVBQTRDO0FBQ2pELE1BQUksT0FBT0QsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ0MsSUFBQUEsUUFBUSxDQUFDQyxRQUFULEdBQW9CRixPQUFwQjtBQUNELEdBRkQsTUFFTyxJQUFJQSxPQUFKLEVBQWE7QUFDbEIsU0FBSyxJQUFJRyxJQUFULElBQWlCSCxPQUFqQixFQUEwQjtBQUN4QjtBQUNBLFVBQUlBLE9BQU8sQ0FBQ0ksY0FBUixDQUF1QkQsSUFBdkIsQ0FBSixFQUFrQztBQUNoQ0YsUUFBQUEsUUFBUSxDQUFDRSxJQUFELENBQVIsR0FBaUJILE9BQU8sQ0FBQ0csSUFBRCxDQUF4QjtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPRixRQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVPcHRpb25zKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlZmF1bHRzLmNhbGxiYWNrID0gb3B0aW9ucztcbiAgfSBlbHNlIGlmIChvcHRpb25zKSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZGVmYXVsdHNbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdHM7XG59XG4iXX0=

      /***/
    },

    /***/ 82042: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const isObj = __nccwpck_require__(51389)

      const disallowedKeys = ["__proto__", "prototype", "constructor"]

      const isValidPath = (pathSegments) =>
        !pathSegments.some((segment) => disallowedKeys.includes(segment))

      function getPathSegments(path) {
        const pathArray = path.split(".")
        const parts = []

        for (let i = 0; i < pathArray.length; i++) {
          let p = pathArray[i]

          while (p[p.length - 1] === "\\" && pathArray[i + 1] !== undefined) {
            p = p.slice(0, -1) + "."
            p += pathArray[++i]
          }

          parts.push(p)
        }

        if (!isValidPath(parts)) {
          return []
        }

        return parts
      }

      module.exports = {
        get(object, path, value) {
          if (!isObj(object) || typeof path !== "string") {
            return value === undefined ? object : value
          }

          const pathArray = getPathSegments(path)
          if (pathArray.length === 0) {
            return
          }

          for (let i = 0; i < pathArray.length; i++) {
            if (!Object.prototype.propertyIsEnumerable.call(object, pathArray[i])) {
              return value
            }

            object = object[pathArray[i]]

            if (object === undefined || object === null) {
              // `object` is either `undefined` or `null` so we want to stop the loop, and
              // if this is not the last bit of the path, and
              // if it did't return `undefined`
              // it would return `null` if `object` is `null`
              // but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`
              if (i !== pathArray.length - 1) {
                return value
              }

              break
            }
          }

          return object
        },

        set(object, path, value) {
          if (!isObj(object) || typeof path !== "string") {
            return object
          }

          const root = object
          const pathArray = getPathSegments(path)

          for (let i = 0; i < pathArray.length; i++) {
            const p = pathArray[i]

            if (!isObj(object[p])) {
              object[p] = {}
            }

            if (i === pathArray.length - 1) {
              object[p] = value
            }

            object = object[p]
          }

          return root
        },

        delete(object, path) {
          if (!isObj(object) || typeof path !== "string") {
            return false
          }

          const pathArray = getPathSegments(path)

          for (let i = 0; i < pathArray.length; i++) {
            const p = pathArray[i]

            if (i === pathArray.length - 1) {
              delete object[p]
              return true
            }

            object = object[p]

            if (!isObj(object)) {
              return false
            }
          }
        },

        has(object, path) {
          if (!isObj(object) || typeof path !== "string") {
            return false
          }

          const pathArray = getPathSegments(path)
          if (pathArray.length === 0) {
            return false
          }

          // eslint-disable-next-line unicorn/no-for-loop
          for (let i = 0; i < pathArray.length; i++) {
            if (isObj(object)) {
              if (!(pathArray[i] in object)) {
                return false
              }

              object = object[pathArray[i]]
            } else {
              return false
            }
          }

          return true
        }
      }

      /***/
    },

    /***/ 23505: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var util = __nccwpck_require__(73837)
      var isArrayish = __nccwpck_require__(7604)

      var errorEx = function errorEx(name, properties) {
        if (!name || name.constructor !== String) {
          properties = name || {}
          name = Error.name
        }

        var errorExError = function ErrorEXError(message) {
          if (!this) {
            return new ErrorEXError(message)
          }

          message = message instanceof Error ? message.message : message || this.message

          Error.call(this, message)
          Error.captureStackTrace(this, errorExError)

          this.name = name

          Object.defineProperty(this, "message", {
            configurable: true,
            enumerable: false,
            get: function () {
              var newMessage = message.split(/\r?\n/g)

              for (var key in properties) {
                if (!properties.hasOwnProperty(key)) {
                  continue
                }

                var modifier = properties[key]

                if ("message" in modifier) {
                  newMessage = modifier.message(this[key], newMessage) || newMessage
                  if (!isArrayish(newMessage)) {
                    newMessage = [newMessage]
                  }
                }
              }

              return newMessage.join("\n")
            },
            set: function (v) {
              message = v
            }
          })

          var overwrittenStack = null

          var stackDescriptor = Object.getOwnPropertyDescriptor(this, "stack")
          var stackGetter = stackDescriptor.get
          var stackValue = stackDescriptor.value
          delete stackDescriptor.value
          delete stackDescriptor.writable

          stackDescriptor.set = function (newstack) {
            overwrittenStack = newstack
          }

          stackDescriptor.get = function () {
            var stack = (
              overwrittenStack || (stackGetter ? stackGetter.call(this) : stackValue)
            ).split(/\r?\n+/g)

            // starting in Node 7, the stack builder caches the message.
            // just replace it.
            if (!overwrittenStack) {
              stack[0] = this.name + ": " + this.message
            }

            var lineCount = 1
            for (var key in properties) {
              if (!properties.hasOwnProperty(key)) {
                continue
              }

              var modifier = properties[key]

              if ("line" in modifier) {
                var line = modifier.line(this[key])
                if (line) {
                  stack.splice(lineCount++, 0, "    " + line)
                }
              }

              if ("stack" in modifier) {
                modifier.stack(this[key], stack)
              }
            }

            return stack.join("\n")
          }

          Object.defineProperty(this, "stack", stackDescriptor)
        }

        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(errorExError.prototype, Error.prototype)
          Object.setPrototypeOf(errorExError, Error)
        } else {
          util.inherits(errorExError, Error)
        }

        return errorExError
      }

      errorEx.append = function (str, def) {
        return {
          message: function (v, message) {
            v = v || def

            if (v) {
              message[0] += " " + str.replace("%s", v.toString())
            }

            return message
          }
        }
      }

      errorEx.line = function (str, def) {
        return {
          line: function (v) {
            v = v || def

            if (v) {
              return str.replace("%s", v.toString())
            }

            return null
          }
        }
      }

      module.exports = errorEx

      /***/
    },

    /***/ 55447: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const childProcess = __nccwpck_require__(32081)
      const crossSpawn = __nccwpck_require__(72746)
      const stripFinalNewline = __nccwpck_require__(88174)
      const npmRunPath = __nccwpck_require__(20502)
      const onetime = __nccwpck_require__(89082)
      const makeError = __nccwpck_require__(62187)
      const normalizeStdio = __nccwpck_require__(10166)
      const { spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler } =
        __nccwpck_require__(39819)
      const { handleInput, getSpawnedResult, makeAllStream, validateInputSync } =
        __nccwpck_require__(32592)
      const { mergePromise, getSpawnedPromise } = __nccwpck_require__(97814)
      const { joinCommand, parseCommand, getEscapedCommand } = __nccwpck_require__(88286)

      const DEFAULT_MAX_BUFFER = 1000 * 1000 * 100

      const getEnv = ({ env: envOption, extendEnv, preferLocal, localDir, execPath }) => {
        const env = extendEnv ? { ...process.env, ...envOption } : envOption

        if (preferLocal) {
          return npmRunPath.env({ env, cwd: localDir, execPath })
        }

        return env
      }

      const handleArguments = (file, args, options = {}) => {
        const parsed = crossSpawn._parse(file, args, options)
        file = parsed.command
        args = parsed.args
        options = parsed.options

        options = {
          maxBuffer: DEFAULT_MAX_BUFFER,
          buffer: true,
          stripFinalNewline: true,
          extendEnv: true,
          preferLocal: false,
          localDir: options.cwd || process.cwd(),
          execPath: process.execPath,
          encoding: "utf8",
          reject: true,
          cleanup: true,
          all: false,
          windowsHide: true,
          ...options
        }

        options.env = getEnv(options)

        options.stdio = normalizeStdio(options)

        if (process.platform === "win32" && path.basename(file, ".exe") === "cmd") {
          // #116
          args.unshift("/q")
        }

        return { file, args, options, parsed }
      }

      const handleOutput = (options, value, error) => {
        if (typeof value !== "string" && !Buffer.isBuffer(value)) {
          // When `execa.sync()` errors, we normalize it to '' to mimic `execa()`
          return error === undefined ? undefined : ""
        }

        if (options.stripFinalNewline) {
          return stripFinalNewline(value)
        }

        return value
      }

      const execa = (file, args, options) => {
        const parsed = handleArguments(file, args, options)
        const command = joinCommand(file, args)
        const escapedCommand = getEscapedCommand(file, args)

        validateTimeout(parsed.options)

        let spawned
        try {
          spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options)
        } catch (error) {
          // Ensure the returned error is always both a promise and a child process
          const dummySpawned = new childProcess.ChildProcess()
          const errorPromise = Promise.reject(
            makeError({
              error,
              stdout: "",
              stderr: "",
              all: "",
              command,
              escapedCommand,
              parsed,
              timedOut: false,
              isCanceled: false,
              killed: false
            })
          )
          return mergePromise(dummySpawned, errorPromise)
        }

        const spawnedPromise = getSpawnedPromise(spawned)
        const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise)
        const processDone = setExitHandler(spawned, parsed.options, timedPromise)

        const context = { isCanceled: false }

        spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned))
        spawned.cancel = spawnedCancel.bind(null, spawned, context)

        const handlePromise = async () => {
          const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult, allResult] =
            await getSpawnedResult(spawned, parsed.options, processDone)
          const stdout = handleOutput(parsed.options, stdoutResult)
          const stderr = handleOutput(parsed.options, stderrResult)
          const all = handleOutput(parsed.options, allResult)

          if (error || exitCode !== 0 || signal !== null) {
            const returnedError = makeError({
              error,
              exitCode,
              signal,
              stdout,
              stderr,
              all,
              command,
              escapedCommand,
              parsed,
              timedOut,
              isCanceled: context.isCanceled,
              killed: spawned.killed
            })

            if (!parsed.options.reject) {
              return returnedError
            }

            throw returnedError
          }

          return {
            command,
            escapedCommand,
            exitCode: 0,
            stdout,
            stderr,
            all,
            failed: false,
            timedOut: false,
            isCanceled: false,
            killed: false
          }
        }

        const handlePromiseOnce = onetime(handlePromise)

        handleInput(spawned, parsed.options.input)

        spawned.all = makeAllStream(spawned, parsed.options)

        return mergePromise(spawned, handlePromiseOnce)
      }

      module.exports = execa

      module.exports.sync = (file, args, options) => {
        const parsed = handleArguments(file, args, options)
        const command = joinCommand(file, args)
        const escapedCommand = getEscapedCommand(file, args)

        validateInputSync(parsed.options)

        let result
        try {
          result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options)
        } catch (error) {
          throw makeError({
            error,
            stdout: "",
            stderr: "",
            all: "",
            command,
            escapedCommand,
            parsed,
            timedOut: false,
            isCanceled: false,
            killed: false
          })
        }

        const stdout = handleOutput(parsed.options, result.stdout, result.error)
        const stderr = handleOutput(parsed.options, result.stderr, result.error)

        if (result.error || result.status !== 0 || result.signal !== null) {
          const error = makeError({
            stdout,
            stderr,
            error: result.error,
            signal: result.signal,
            exitCode: result.status,
            command,
            escapedCommand,
            parsed,
            timedOut: result.error && result.error.code === "ETIMEDOUT",
            isCanceled: false,
            killed: result.signal !== null
          })

          if (!parsed.options.reject) {
            return error
          }

          throw error
        }

        return {
          command,
          escapedCommand,
          exitCode: 0,
          stdout,
          stderr,
          failed: false,
          timedOut: false,
          isCanceled: false,
          killed: false
        }
      }

      module.exports.command = (command, options) => {
        const [file, ...args] = parseCommand(command)
        return execa(file, args, options)
      }

      module.exports.commandSync = (command, options) => {
        const [file, ...args] = parseCommand(command)
        return execa.sync(file, args, options)
      }

      module.exports.node = (scriptPath, args, options = {}) => {
        if (args && !Array.isArray(args) && typeof args === "object") {
          options = args
          args = []
        }

        const stdio = normalizeStdio.node(options)
        const defaultExecArgv = process.execArgv.filter((arg) => !arg.startsWith("--inspect"))

        const { nodePath = process.execPath, nodeOptions = defaultExecArgv } = options

        return execa(nodePath, [...nodeOptions, scriptPath, ...(Array.isArray(args) ? args : [])], {
          ...options,
          stdin: undefined,
          stdout: undefined,
          stderr: undefined,
          stdio,
          shell: false
        })
      }

      /***/
    },

    /***/ 88286: /***/ (module) => {
      "use strict"

      const normalizeArgs = (file, args = []) => {
        if (!Array.isArray(args)) {
          return [file]
        }

        return [file, ...args]
      }

      const NO_ESCAPE_REGEXP = /^[\w.-]+$/
      const DOUBLE_QUOTES_REGEXP = /"/g

      const escapeArg = (arg) => {
        if (typeof arg !== "string" || NO_ESCAPE_REGEXP.test(arg)) {
          return arg
        }

        return `"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\"')}"`
      }

      const joinCommand = (file, args) => {
        return normalizeArgs(file, args).join(" ")
      }

      const getEscapedCommand = (file, args) => {
        return normalizeArgs(file, args)
          .map((arg) => escapeArg(arg))
          .join(" ")
      }

      const SPACES_REGEXP = / +/g

      // Handle `execa.command()`
      const parseCommand = (command) => {
        const tokens = []
        for (const token of command.trim().split(SPACES_REGEXP)) {
          // Allow spaces to be escaped by a backslash if not meant as a delimiter
          const previousToken = tokens[tokens.length - 1]
          if (previousToken && previousToken.endsWith("\\")) {
            // Merge previous token with current one
            tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`
          } else {
            tokens.push(token)
          }
        }

        return tokens
      }

      module.exports = {
        joinCommand,
        getEscapedCommand,
        parseCommand
      }

      /***/
    },

    /***/ 62187: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const { signalsByName } = __nccwpck_require__(2779)

      const getErrorPrefix = ({
        timedOut,
        timeout,
        errorCode,
        signal,
        signalDescription,
        exitCode,
        isCanceled
      }) => {
        if (timedOut) {
          return `timed out after ${timeout} milliseconds`
        }

        if (isCanceled) {
          return "was canceled"
        }

        if (errorCode !== undefined) {
          return `failed with ${errorCode}`
        }

        if (signal !== undefined) {
          return `was killed with ${signal} (${signalDescription})`
        }

        if (exitCode !== undefined) {
          return `failed with exit code ${exitCode}`
        }

        return "failed"
      }

      const makeError = ({
        stdout,
        stderr,
        all,
        error,
        signal,
        exitCode,
        command,
        escapedCommand,
        timedOut,
        isCanceled,
        killed,
        parsed: {
          options: { timeout }
        }
      }) => {
        // `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.
        // We normalize them to `undefined`
        exitCode = exitCode === null ? undefined : exitCode
        signal = signal === null ? undefined : signal
        const signalDescription =
          signal === undefined ? undefined : signalsByName[signal].description

        const errorCode = error && error.code

        const prefix = getErrorPrefix({
          timedOut,
          timeout,
          errorCode,
          signal,
          signalDescription,
          exitCode,
          isCanceled
        })
        const execaMessage = `Command ${prefix}: ${command}`
        const isError = Object.prototype.toString.call(error) === "[object Error]"
        const shortMessage = isError ? `${execaMessage}\n${error.message}` : execaMessage
        const message = [shortMessage, stderr, stdout].filter(Boolean).join("\n")

        if (isError) {
          error.originalMessage = error.message
          error.message = message
        } else {
          error = new Error(message)
        }

        error.shortMessage = shortMessage
        error.command = command
        error.escapedCommand = escapedCommand
        error.exitCode = exitCode
        error.signal = signal
        error.signalDescription = signalDescription
        error.stdout = stdout
        error.stderr = stderr

        if (all !== undefined) {
          error.all = all
        }

        if ("bufferedData" in error) {
          delete error.bufferedData
        }

        error.failed = true
        error.timedOut = Boolean(timedOut)
        error.isCanceled = isCanceled
        error.killed = killed && !timedOut

        return error
      }

      module.exports = makeError

      /***/
    },

    /***/ 39819: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const os = __nccwpck_require__(22037)
      const onExit = __nccwpck_require__(24931)

      const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5

      // Monkey-patches `childProcess.kill()` to add `forceKillAfterTimeout` behavior
      const spawnedKill = (kill, signal = "SIGTERM", options = {}) => {
        const killResult = kill(signal)
        setKillTimeout(kill, signal, options, killResult)
        return killResult
      }

      const setKillTimeout = (kill, signal, options, killResult) => {
        if (!shouldForceKill(signal, options, killResult)) {
          return
        }

        const timeout = getForceKillAfterTimeout(options)
        const t = setTimeout(() => {
          kill("SIGKILL")
        }, timeout)

        // Guarded because there's no `.unref()` when `execa` is used in the renderer
        // process in Electron. This cannot be tested since we don't run tests in
        // Electron.
        // istanbul ignore else
        if (t.unref) {
          t.unref()
        }
      }

      const shouldForceKill = (signal, { forceKillAfterTimeout }, killResult) => {
        return isSigterm(signal) && forceKillAfterTimeout !== false && killResult
      }

      const isSigterm = (signal) => {
        return (
          signal === os.constants.signals.SIGTERM ||
          (typeof signal === "string" && signal.toUpperCase() === "SIGTERM")
        )
      }

      const getForceKillAfterTimeout = ({ forceKillAfterTimeout = true }) => {
        if (forceKillAfterTimeout === true) {
          return DEFAULT_FORCE_KILL_TIMEOUT
        }

        if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
          throw new TypeError(
            `Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`
          )
        }

        return forceKillAfterTimeout
      }

      // `childProcess.cancel()`
      const spawnedCancel = (spawned, context) => {
        const killResult = spawned.kill()

        if (killResult) {
          context.isCanceled = true
        }
      }

      const timeoutKill = (spawned, signal, reject) => {
        spawned.kill(signal)
        reject(Object.assign(new Error("Timed out"), { timedOut: true, signal }))
      }

      // `timeout` option handling
      const setupTimeout = (spawned, { timeout, killSignal = "SIGTERM" }, spawnedPromise) => {
        if (timeout === 0 || timeout === undefined) {
          return spawnedPromise
        }

        let timeoutId
        const timeoutPromise = new Promise((resolve, reject) => {
          timeoutId = setTimeout(() => {
            timeoutKill(spawned, killSignal, reject)
          }, timeout)
        })

        const safeSpawnedPromise = spawnedPromise.finally(() => {
          clearTimeout(timeoutId)
        })

        return Promise.race([timeoutPromise, safeSpawnedPromise])
      }

      const validateTimeout = ({ timeout }) => {
        if (timeout !== undefined && (!Number.isFinite(timeout) || timeout < 0)) {
          throw new TypeError(
            `Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`
          )
        }
      }

      // `cleanup` option handling
      const setExitHandler = async (spawned, { cleanup, detached }, timedPromise) => {
        if (!cleanup || detached) {
          return timedPromise
        }

        const removeExitHandler = onExit(() => {
          spawned.kill()
        })

        return timedPromise.finally(() => {
          removeExitHandler()
        })
      }

      module.exports = {
        spawnedKill,
        spawnedCancel,
        setupTimeout,
        validateTimeout,
        setExitHandler
      }

      /***/
    },

    /***/ 97814: /***/ (module) => {
      "use strict"

      const nativePromisePrototype = (async () => {})().constructor.prototype
      const descriptors = ["then", "catch", "finally"].map((property) => [
        property,
        Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
      ])

      // The return value is a mixin of `childProcess` and `Promise`
      const mergePromise = (spawned, promise) => {
        for (const [property, descriptor] of descriptors) {
          // Starting the main `promise` is deferred to avoid consuming streams
          const value =
            typeof promise === "function"
              ? (...args) => Reflect.apply(descriptor.value, promise(), args)
              : descriptor.value.bind(promise)

          Reflect.defineProperty(spawned, property, { ...descriptor, value })
        }

        return spawned
      }

      // Use promises instead of `child_process` events
      const getSpawnedPromise = (spawned) => {
        return new Promise((resolve, reject) => {
          spawned.on("exit", (exitCode, signal) => {
            resolve({ exitCode, signal })
          })

          spawned.on("error", (error) => {
            reject(error)
          })

          if (spawned.stdin) {
            spawned.stdin.on("error", (error) => {
              reject(error)
            })
          }
        })
      }

      module.exports = {
        mergePromise,
        getSpawnedPromise
      }

      /***/
    },

    /***/ 10166: /***/ (module) => {
      "use strict"

      const aliases = ["stdin", "stdout", "stderr"]

      const hasAlias = (options) => aliases.some((alias) => options[alias] !== undefined)

      const normalizeStdio = (options) => {
        if (!options) {
          return
        }

        const { stdio } = options

        if (stdio === undefined) {
          return aliases.map((alias) => options[alias])
        }

        if (hasAlias(options)) {
          throw new Error(
            `It's not possible to provide \`stdio\` in combination with one of ${aliases
              .map((alias) => `\`${alias}\``)
              .join(", ")}`
          )
        }

        if (typeof stdio === "string") {
          return stdio
        }

        if (!Array.isArray(stdio)) {
          throw new TypeError(
            `Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``
          )
        }

        const length = Math.max(stdio.length, aliases.length)
        return Array.from({ length }, (value, index) => stdio[index])
      }

      module.exports = normalizeStdio

      // `ipc` is pushed unless it is already present
      module.exports.node = (options) => {
        const stdio = normalizeStdio(options)

        if (stdio === "ipc") {
          return "ipc"
        }

        if (stdio === undefined || typeof stdio === "string") {
          return [stdio, stdio, stdio, "ipc"]
        }

        if (stdio.includes("ipc")) {
          return stdio
        }

        return [...stdio, "ipc"]
      }

      /***/
    },

    /***/ 32592: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const isStream = __nccwpck_require__(41554)
      const getStream = __nccwpck_require__(21766)
      const mergeStream = __nccwpck_require__(2621)

      // `input` option
      const handleInput = (spawned, input) => {
        // Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852
        // @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0
        if (input === undefined || spawned.stdin === undefined) {
          return
        }

        if (isStream(input)) {
          input.pipe(spawned.stdin)
        } else {
          spawned.stdin.end(input)
        }
      }

      // `all` interleaves `stdout` and `stderr`
      const makeAllStream = (spawned, { all }) => {
        if (!all || (!spawned.stdout && !spawned.stderr)) {
          return
        }

        const mixed = mergeStream()

        if (spawned.stdout) {
          mixed.add(spawned.stdout)
        }

        if (spawned.stderr) {
          mixed.add(spawned.stderr)
        }

        return mixed
      }

      // On failure, `result.stdout|stderr|all` should contain the currently buffered stream
      const getBufferedData = async (stream, streamPromise) => {
        if (!stream) {
          return
        }

        stream.destroy()

        try {
          return await streamPromise
        } catch (error) {
          return error.bufferedData
        }
      }

      const getStreamPromise = (stream, { encoding, buffer, maxBuffer }) => {
        if (!stream || !buffer) {
          return
        }

        if (encoding) {
          return getStream(stream, { encoding, maxBuffer })
        }

        return getStream.buffer(stream, { maxBuffer })
      }

      // Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)
      const getSpawnedResult = async (
        { stdout, stderr, all },
        { encoding, buffer, maxBuffer },
        processDone
      ) => {
        const stdoutPromise = getStreamPromise(stdout, { encoding, buffer, maxBuffer })
        const stderrPromise = getStreamPromise(stderr, { encoding, buffer, maxBuffer })
        const allPromise = getStreamPromise(all, { encoding, buffer, maxBuffer: maxBuffer * 2 })

        try {
          return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise])
        } catch (error) {
          return Promise.all([
            { error, signal: error.signal, timedOut: error.timedOut },
            getBufferedData(stdout, stdoutPromise),
            getBufferedData(stderr, stderrPromise),
            getBufferedData(all, allPromise)
          ])
        }
      }

      const validateInputSync = ({ input }) => {
        if (isStream(input)) {
          throw new TypeError("The `input` option cannot be a stream in sync mode")
        }
      }

      module.exports = {
        handleInput,
        makeAllStream,
        getSpawnedResult,
        validateInputSync
      }

      /***/
    },

    /***/ 28206: /***/ (module) => {
      "use strict"

      // do not edit .js files directly - edit src/index.jst

      module.exports = function equal(a, b) {
        if (a === b) return true

        if (a && b && typeof a == "object" && typeof b == "object") {
          if (a.constructor !== b.constructor) return false

          var length, i, keys
          if (Array.isArray(a)) {
            length = a.length
            if (length != b.length) return false
            for (i = length; i-- !== 0; ) if (!equal(a[i], b[i])) return false
            return true
          }

          if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags
          if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf()
          if (a.toString !== Object.prototype.toString) return a.toString() === b.toString()

          keys = Object.keys(a)
          length = keys.length
          if (length !== Object.keys(b).length) return false

          for (i = length; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false

          for (i = length; i-- !== 0; ) {
            var key = keys[i]

            if (!equal(a[key], b[key])) return false
          }

          return true
        }

        // true if both NaN, false otherwise
        return a !== a && b !== b
      }

      /***/
    },

    /***/ 30969: /***/ (module) => {
      "use strict"

      module.exports = function (data, opts) {
        if (!opts) opts = {}
        if (typeof opts === "function") opts = { cmp: opts }
        var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false

        var cmp =
          opts.cmp &&
          (function (f) {
            return function (node) {
              return function (a, b) {
                var aobj = { key: a, value: node[a] }
                var bobj = { key: b, value: node[b] }
                return f(aobj, bobj)
              }
            }
          })(opts.cmp)

        var seen = []
        return (function stringify(node) {
          if (node && node.toJSON && typeof node.toJSON === "function") {
            node = node.toJSON()
          }

          if (node === undefined) return
          if (typeof node == "number") return isFinite(node) ? "" + node : "null"
          if (typeof node !== "object") return JSON.stringify(node)

          var i, out
          if (Array.isArray(node)) {
            out = "["
            for (i = 0; i < node.length; i++) {
              if (i) out += ","
              out += stringify(node[i]) || "null"
            }
            return out + "]"
          }

          if (node === null) return "null"

          if (seen.indexOf(node) !== -1) {
            if (cycles) return JSON.stringify("__cycle__")
            throw new TypeError("Converting circular structure to JSON")
          }

          var seenIndex = seen.push(node) - 1
          var keys = Object.keys(node).sort(cmp && cmp(node))
          out = ""
          for (i = 0; i < keys.length; i++) {
            var key = keys[i]
            var value = stringify(node[key])

            if (!value) continue
            if (out) out += ","
            out += JSON.stringify(key) + ":" + value
          }
          seen.splice(seenIndex, 1)
          return "{" + out + "}"
        })(data)
      }

      /***/
    },

    /***/ 6330: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      /*!
       * fill-range <https://github.com/jonschlinkert/fill-range>
       *
       * Copyright (c) 2014-present, Jon Schlinkert.
       * Licensed under the MIT License.
       */

      const util = __nccwpck_require__(73837)
      const toRegexRange = __nccwpck_require__(1861)

      const isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val)

      const transform = (toNumber) => {
        return (value) => (toNumber === true ? Number(value) : String(value))
      }

      const isValidValue = (value) => {
        return typeof value === "number" || (typeof value === "string" && value !== "")
      }

      const isNumber = (num) => Number.isInteger(+num)

      const zeros = (input) => {
        let value = `${input}`
        let index = -1
        if (value[0] === "-") value = value.slice(1)
        if (value === "0") return false
        while (value[++index] === "0");
        return index > 0
      }

      const stringify = (start, end, options) => {
        if (typeof start === "string" || typeof end === "string") {
          return true
        }
        return options.stringify === true
      }

      const pad = (input, maxLength, toNumber) => {
        if (maxLength > 0) {
          let dash = input[0] === "-" ? "-" : ""
          if (dash) input = input.slice(1)
          input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0")
        }
        if (toNumber === false) {
          return String(input)
        }
        return input
      }

      const toMaxLen = (input, maxLength) => {
        let negative = input[0] === "-" ? "-" : ""
        if (negative) {
          input = input.slice(1)
          maxLength--
        }
        while (input.length < maxLength) input = "0" + input
        return negative ? "-" + input : input
      }

      const toSequence = (parts, options) => {
        parts.negatives.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0))
        parts.positives.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0))

        let prefix = options.capture ? "" : "?:"
        let positives = ""
        let negatives = ""
        let result

        if (parts.positives.length) {
          positives = parts.positives.join("|")
        }

        if (parts.negatives.length) {
          negatives = `-(${prefix}${parts.negatives.join("|")})`
        }

        if (positives && negatives) {
          result = `${positives}|${negatives}`
        } else {
          result = positives || negatives
        }

        if (options.wrap) {
          return `(${prefix}${result})`
        }

        return result
      }

      const toRange = (a, b, isNumbers, options) => {
        if (isNumbers) {
          return toRegexRange(a, b, { wrap: false, ...options })
        }

        let start = String.fromCharCode(a)
        if (a === b) return start

        let stop = String.fromCharCode(b)
        return `[${start}-${stop}]`
      }

      const toRegex = (start, end, options) => {
        if (Array.isArray(start)) {
          let wrap = options.wrap === true
          let prefix = options.capture ? "" : "?:"
          return wrap ? `(${prefix}${start.join("|")})` : start.join("|")
        }
        return toRegexRange(start, end, options)
      }

      const rangeError = (...args) => {
        return new RangeError("Invalid range arguments: " + util.inspect(...args))
      }

      const invalidRange = (start, end, options) => {
        if (options.strictRanges === true) throw rangeError([start, end])
        return []
      }

      const invalidStep = (step, options) => {
        if (options.strictRanges === true) {
          throw new TypeError(`Expected step "${step}" to be a number`)
        }
        return []
      }

      const fillNumbers = (start, end, step = 1, options = {}) => {
        let a = Number(start)
        let b = Number(end)

        if (!Number.isInteger(a) || !Number.isInteger(b)) {
          if (options.strictRanges === true) throw rangeError([start, end])
          return []
        }

        // fix negative zero
        if (a === 0) a = 0
        if (b === 0) b = 0

        let descending = a > b
        let startString = String(start)
        let endString = String(end)
        let stepString = String(step)
        step = Math.max(Math.abs(step), 1)

        let padded = zeros(startString) || zeros(endString) || zeros(stepString)
        let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0
        let toNumber = padded === false && stringify(start, end, options) === false
        let format = options.transform || transform(toNumber)

        if (options.toRegex && step === 1) {
          return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options)
        }

        let parts = { negatives: [], positives: [] }
        let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num))
        let range = []
        let index = 0

        while (descending ? a >= b : a <= b) {
          if (options.toRegex === true && step > 1) {
            push(a)
          } else {
            range.push(pad(format(a, index), maxLen, toNumber))
          }
          a = descending ? a - step : a + step
          index++
        }

        if (options.toRegex === true) {
          return step > 1
            ? toSequence(parts, options)
            : toRegex(range, null, { wrap: false, ...options })
        }

        return range
      }

      const fillLetters = (start, end, step = 1, options = {}) => {
        if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {
          return invalidRange(start, end, options)
        }

        let format = options.transform || ((val) => String.fromCharCode(val))
        let a = `${start}`.charCodeAt(0)
        let b = `${end}`.charCodeAt(0)

        let descending = a > b
        let min = Math.min(a, b)
        let max = Math.max(a, b)

        if (options.toRegex && step === 1) {
          return toRange(min, max, false, options)
        }

        let range = []
        let index = 0

        while (descending ? a >= b : a <= b) {
          range.push(format(a, index))
          a = descending ? a - step : a + step
          index++
        }

        if (options.toRegex === true) {
          return toRegex(range, null, { wrap: false, options })
        }

        return range
      }

      const fill = (start, end, step, options = {}) => {
        if (end == null && isValidValue(start)) {
          return [start]
        }

        if (!isValidValue(start) || !isValidValue(end)) {
          return invalidRange(start, end, options)
        }

        if (typeof step === "function") {
          return fill(start, end, 1, { transform: step })
        }

        if (isObject(step)) {
          return fill(start, end, 0, step)
        }

        let opts = { ...options }
        if (opts.capture === true) opts.wrap = true
        step = step || opts.step || 1

        if (!isNumber(step)) {
          if (step != null && !isObject(step)) return invalidStep(step, opts)
          return fill(start, end, 1, step)
        }

        if (isNumber(start) && isNumber(end)) {
          return fillNumbers(start, end, step, opts)
        }

        return fillLetters(start, end, Math.max(Math.abs(step), 1), opts)
      }

      module.exports = fill

      /***/
    },

    /***/ 91585: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const { PassThrough: PassThroughStream } = __nccwpck_require__(12781)

      module.exports = (options) => {
        options = { ...options }

        const { array } = options
        let { encoding } = options
        const isBuffer = encoding === "buffer"
        let objectMode = false

        if (array) {
          objectMode = !(encoding || isBuffer)
        } else {
          encoding = encoding || "utf8"
        }

        if (isBuffer) {
          encoding = null
        }

        const stream = new PassThroughStream({ objectMode })

        if (encoding) {
          stream.setEncoding(encoding)
        }

        let length = 0
        const chunks = []

        stream.on("data", (chunk) => {
          chunks.push(chunk)

          if (objectMode) {
            length = chunks.length
          } else {
            length += chunk.length
          }
        })

        stream.getBufferedValue = () => {
          if (array) {
            return chunks
          }

          return isBuffer ? Buffer.concat(chunks, length) : chunks.join("")
        }

        stream.getBufferedLength = () => length

        return stream
      }

      /***/
    },

    /***/ 21766: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const { constants: BufferConstants } = __nccwpck_require__(14300)
      const stream = __nccwpck_require__(12781)
      const { promisify } = __nccwpck_require__(73837)
      const bufferStream = __nccwpck_require__(91585)

      const streamPipelinePromisified = promisify(stream.pipeline)

      class MaxBufferError extends Error {
        constructor() {
          super("maxBuffer exceeded")
          this.name = "MaxBufferError"
        }
      }

      async function getStream(inputStream, options) {
        if (!inputStream) {
          throw new Error("Expected a stream")
        }

        options = {
          maxBuffer: Infinity,
          ...options
        }

        const { maxBuffer } = options
        const stream = bufferStream(options)

        await new Promise((resolve, reject) => {
          const rejectPromise = (error) => {
            // Don't retrieve an oversized buffer.
            if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
              error.bufferedData = stream.getBufferedValue()
            }

            reject(error)
          }

          ;(async () => {
            try {
              await streamPipelinePromisified(inputStream, stream)
              resolve()
            } catch (error) {
              rejectPromise(error)
            }
          })()

          stream.on("data", () => {
            if (stream.getBufferedLength() > maxBuffer) {
              rejectPromise(new MaxBufferError())
            }
          })
        })

        return stream.getBufferedValue()
      }

      module.exports = getStream
      module.exports.buffer = (stream, options) =>
        getStream(stream, { ...options, encoding: "buffer" })
      module.exports.array = (stream, options) => getStream(stream, { ...options, array: true })
      module.exports.MaxBufferError = MaxBufferError

      /***/
    },

    /***/ 80891: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const os = __nccwpck_require__(22037)
      const fs = __nccwpck_require__(57147)
      const ini = __nccwpck_require__(28885)

      const readRc = (fp) => {
        try {
          return ini.parse(fs.readFileSync(fp, "utf8")).prefix
        } catch (err) {}
      }

      const defaultNpmPrefix = (() => {
        if (process.env.PREFIX) {
          return process.env.PREFIX
        }

        if (process.platform === "win32") {
          // `c:\node\node.exe` → `prefix=c:\node\`
          return path.dirname(process.execPath)
        }

        // `/usr/local/bin/node` → `prefix=/usr/local`
        return path.dirname(path.dirname(process.execPath))
      })()

      const getNpmPrefix = () => {
        if (process.env.PREFIX) {
          return process.env.PREFIX
        }

        const homePrefix = readRc(path.join(os.homedir(), ".npmrc"))
        if (homePrefix) {
          return homePrefix
        }

        const globalConfigPrefix = readRc(path.resolve(defaultNpmPrefix, "etc", "npmrc"))
        if (globalConfigPrefix) {
          return globalConfigPrefix
        }

        if (process.platform === "win32" && process.env.APPDATA) {
          // Hardcoded contents of `c:\Program Files\nodejs\node_modules\npm\.npmrc`
          const prefix = path.join(process.env.APPDATA, "npm")
          if (fs.existsSync(prefix)) {
            return prefix
          }
        }

        return defaultNpmPrefix
      }

      const npmPrefix = path.resolve(getNpmPrefix())

      const getYarnPrefix = () => {
        if (process.env.PREFIX) {
          return process.env.PREFIX
        }

        if (process.platform === "win32" && process.env.LOCALAPPDATA) {
          const prefix = path.join(process.env.LOCALAPPDATA, "Yarn")
          if (fs.existsSync(prefix)) {
            return prefix
          }
        }

        const configPrefix = path.join(os.homedir(), ".config/yarn")
        if (fs.existsSync(configPrefix)) {
          return configPrefix
        }

        const homePrefix = path.join(os.homedir(), ".yarn-config")
        if (fs.existsSync(homePrefix)) {
          return homePrefix
        }

        // Yarn supports the npm conventions but the inverse is not true
        return npmPrefix
      }

      exports.npm = {}
      exports.npm.prefix = npmPrefix
      exports.npm.packages = path.join(
        npmPrefix,
        process.platform === "win32" ? "node_modules" : "lib/node_modules"
      )
      exports.npm.binaries = process.platform === "win32" ? npmPrefix : path.join(npmPrefix, "bin")

      const yarnPrefix = path.resolve(getYarnPrefix())
      exports.yarn = {}
      exports.yarn.prefix = yarnPrefix
      exports.yarn.packages = path.join(
        yarnPrefix,
        process.platform === "win32" ? "config/global/node_modules" : "global/node_modules"
      )
      exports.yarn.binaries = path.join(exports.yarn.packages, ".bin")

      /***/
    },

    /***/ 31621: /***/ (module) => {
      "use strict"

      module.exports = (flag, argv = process.argv) => {
        const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--"
        const position = argv.indexOf(prefix + flag)
        const terminatorPosition = argv.indexOf("--")
        return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition)
      }

      /***/
    },

    /***/ 28213: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.SIGNALS = void 0

      const SIGNALS = [
        {
          name: "SIGHUP",
          number: 1,
          action: "terminate",
          description: "Terminal closed",
          standard: "posix"
        },

        {
          name: "SIGINT",
          number: 2,
          action: "terminate",
          description: "User interruption with CTRL-C",
          standard: "ansi"
        },

        {
          name: "SIGQUIT",
          number: 3,
          action: "core",
          description: "User interruption with CTRL-\\",
          standard: "posix"
        },

        {
          name: "SIGILL",
          number: 4,
          action: "core",
          description: "Invalid machine instruction",
          standard: "ansi"
        },

        {
          name: "SIGTRAP",
          number: 5,
          action: "core",
          description: "Debugger breakpoint",
          standard: "posix"
        },

        {
          name: "SIGABRT",
          number: 6,
          action: "core",
          description: "Aborted",
          standard: "ansi"
        },

        {
          name: "SIGIOT",
          number: 6,
          action: "core",
          description: "Aborted",
          standard: "bsd"
        },

        {
          name: "SIGBUS",
          number: 7,
          action: "core",
          description: "Bus error due to misaligned, non-existing address or paging error",
          standard: "bsd"
        },

        {
          name: "SIGEMT",
          number: 7,
          action: "terminate",
          description: "Command should be emulated but is not implemented",
          standard: "other"
        },

        {
          name: "SIGFPE",
          number: 8,
          action: "core",
          description: "Floating point arithmetic error",
          standard: "ansi"
        },

        {
          name: "SIGKILL",
          number: 9,
          action: "terminate",
          description: "Forced termination",
          standard: "posix",
          forced: true
        },

        {
          name: "SIGUSR1",
          number: 10,
          action: "terminate",
          description: "Application-specific signal",
          standard: "posix"
        },

        {
          name: "SIGSEGV",
          number: 11,
          action: "core",
          description: "Segmentation fault",
          standard: "ansi"
        },

        {
          name: "SIGUSR2",
          number: 12,
          action: "terminate",
          description: "Application-specific signal",
          standard: "posix"
        },

        {
          name: "SIGPIPE",
          number: 13,
          action: "terminate",
          description: "Broken pipe or socket",
          standard: "posix"
        },

        {
          name: "SIGALRM",
          number: 14,
          action: "terminate",
          description: "Timeout or timer",
          standard: "posix"
        },

        {
          name: "SIGTERM",
          number: 15,
          action: "terminate",
          description: "Termination",
          standard: "ansi"
        },

        {
          name: "SIGSTKFLT",
          number: 16,
          action: "terminate",
          description: "Stack is empty or overflowed",
          standard: "other"
        },

        {
          name: "SIGCHLD",
          number: 17,
          action: "ignore",
          description: "Child process terminated, paused or unpaused",
          standard: "posix"
        },

        {
          name: "SIGCLD",
          number: 17,
          action: "ignore",
          description: "Child process terminated, paused or unpaused",
          standard: "other"
        },

        {
          name: "SIGCONT",
          number: 18,
          action: "unpause",
          description: "Unpaused",
          standard: "posix",
          forced: true
        },

        {
          name: "SIGSTOP",
          number: 19,
          action: "pause",
          description: "Paused",
          standard: "posix",
          forced: true
        },

        {
          name: "SIGTSTP",
          number: 20,
          action: "pause",
          description: 'Paused using CTRL-Z or "suspend"',
          standard: "posix"
        },

        {
          name: "SIGTTIN",
          number: 21,
          action: "pause",
          description: "Background process cannot read terminal input",
          standard: "posix"
        },

        {
          name: "SIGBREAK",
          number: 21,
          action: "terminate",
          description: "User interruption with CTRL-BREAK",
          standard: "other"
        },

        {
          name: "SIGTTOU",
          number: 22,
          action: "pause",
          description: "Background process cannot write to terminal output",
          standard: "posix"
        },

        {
          name: "SIGURG",
          number: 23,
          action: "ignore",
          description: "Socket received out-of-band data",
          standard: "bsd"
        },

        {
          name: "SIGXCPU",
          number: 24,
          action: "core",
          description: "Process timed out",
          standard: "bsd"
        },

        {
          name: "SIGXFSZ",
          number: 25,
          action: "core",
          description: "File too big",
          standard: "bsd"
        },

        {
          name: "SIGVTALRM",
          number: 26,
          action: "terminate",
          description: "Timeout or timer",
          standard: "bsd"
        },

        {
          name: "SIGPROF",
          number: 27,
          action: "terminate",
          description: "Timeout or timer",
          standard: "bsd"
        },

        {
          name: "SIGWINCH",
          number: 28,
          action: "ignore",
          description: "Terminal window size changed",
          standard: "bsd"
        },

        {
          name: "SIGIO",
          number: 29,
          action: "terminate",
          description: "I/O is available",
          standard: "other"
        },

        {
          name: "SIGPOLL",
          number: 29,
          action: "terminate",
          description: "Watched event",
          standard: "other"
        },

        {
          name: "SIGINFO",
          number: 29,
          action: "ignore",
          description: "Request for process information",
          standard: "other"
        },

        {
          name: "SIGPWR",
          number: 30,
          action: "terminate",
          description: "Device running out of power",
          standard: "systemv"
        },

        {
          name: "SIGSYS",
          number: 31,
          action: "core",
          description: "Invalid system call",
          standard: "other"
        },

        {
          name: "SIGUNUSED",
          number: 31,
          action: "terminate",
          description: "Invalid system call",
          standard: "other"
        }
      ]
      exports.SIGNALS = SIGNALS
      //# sourceMappingURL=core.js.map

      /***/
    },

    /***/ 2779: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.signalsByNumber = exports.signalsByName = void 0
      var _os = __nccwpck_require__(22037)

      var _signals = __nccwpck_require__(86435)
      var _realtime = __nccwpck_require__(25295)

      const getSignalsByName = function () {
        const signals = (0, _signals.getSignals)()
        return signals.reduce(getSignalByName, {})
      }

      const getSignalByName = function (
        signalByNameMemo,
        { name, number, description, supported, action, forced, standard }
      ) {
        return {
          ...signalByNameMemo,
          [name]: { name, number, description, supported, action, forced, standard }
        }
      }

      const signalsByName = getSignalsByName()
      exports.signalsByName = signalsByName

      const getSignalsByNumber = function () {
        const signals = (0, _signals.getSignals)()
        const length = _realtime.SIGRTMAX + 1
        const signalsA = Array.from({ length }, (value, number) =>
          getSignalByNumber(number, signals)
        )

        return Object.assign({}, ...signalsA)
      }

      const getSignalByNumber = function (number, signals) {
        const signal = findSignalByNumber(number, signals)

        if (signal === undefined) {
          return {}
        }

        const { name, description, supported, action, forced, standard } = signal
        return {
          [number]: {
            name,
            number,
            description,
            supported,
            action,
            forced,
            standard
          }
        }
      }

      const findSignalByNumber = function (number, signals) {
        const signal = signals.find(({ name }) => _os.constants.signals[name] === number)

        if (signal !== undefined) {
          return signal
        }

        return signals.find((signalA) => signalA.number === number)
      }

      const signalsByNumber = getSignalsByNumber()
      exports.signalsByNumber = signalsByNumber
      //# sourceMappingURL=main.js.map

      /***/
    },

    /***/ 25295: /***/ (__unused_webpack_module, exports) => {
      "use strict"
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.SIGRTMAX = exports.getRealtimeSignals = void 0
      const getRealtimeSignals = function () {
        const length = SIGRTMAX - SIGRTMIN + 1
        return Array.from({ length }, getRealtimeSignal)
      }
      exports.getRealtimeSignals = getRealtimeSignals

      const getRealtimeSignal = function (value, index) {
        return {
          name: `SIGRT${index + 1}`,
          number: SIGRTMIN + index,
          action: "terminate",
          description: "Application-specific signal (realtime)",
          standard: "posix"
        }
      }

      const SIGRTMIN = 34
      const SIGRTMAX = 64
      exports.SIGRTMAX = SIGRTMAX
      //# sourceMappingURL=realtime.js.map

      /***/
    },

    /***/ 86435: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getSignals = void 0
      var _os = __nccwpck_require__(22037)

      var _core = __nccwpck_require__(28213)
      var _realtime = __nccwpck_require__(25295)

      const getSignals = function () {
        const realtimeSignals = (0, _realtime.getRealtimeSignals)()
        const signals = [..._core.SIGNALS, ...realtimeSignals].map(normalizeSignal)
        return signals
      }
      exports.getSignals = getSignals

      const normalizeSignal = function ({
        name,
        number: defaultNumber,
        description,
        action,
        forced = false,
        standard
      }) {
        const {
          signals: { [name]: constantSignal }
        } = _os.constants
        const supported = constantSignal !== undefined
        const number = supported ? constantSignal : defaultNumber
        return { name, number, description, supported, action, forced, standard }
      }
      //# sourceMappingURL=signals.js.map

      /***/
    },

    /***/ 52714: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const resolveFrom = __nccwpck_require__(34417)
      const parentModule = __nccwpck_require__(79069)

      module.exports = (moduleId) => {
        if (typeof moduleId !== "string") {
          throw new TypeError("Expected a string")
        }

        const parentPath = parentModule(__filename)

        const cwd = parentPath ? path.dirname(parentPath) : __dirname
        const filePath = resolveFrom(cwd, moduleId)

        const oldModule = require.cache[filePath]
        // Delete itself from module parent
        if (oldModule && oldModule.parent) {
          let i = oldModule.parent.children.length

          while (i--) {
            if (oldModule.parent.children[i].id === filePath) {
              oldModule.parent.children.splice(i, 1)
            }
          }
        }

        delete require.cache[filePath] // Delete module from cache

        const parent = require.cache[parentPath] // If `filePath` and `parentPath` are the same, cache will already be deleted so we won't get a memory leak in next step

        return parent === undefined ? require(filePath) : parent.require(filePath) // In case cache doesn't have parent, fall back to normal require
      }

      /***/
    },

    /***/ 62197: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const { createRequire } = __nccwpck_require__(98188)

      module.exports = (fromDirectory, moduleId) =>
        createRequire(path.resolve(fromDirectory, "noop.js"))(moduleId)

      module.exports.silent = (fromDirectory, moduleId) => {
        try {
          return createRequire(path.resolve(fromDirectory, "noop.js"))(moduleId)
        } catch {}
      }

      /***/
    },

    /***/ 44124: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      try {
        var util = __nccwpck_require__(73837)
        /* istanbul ignore next */
        if (typeof util.inherits !== "function") throw ""
        module.exports = util.inherits
      } catch (e) {
        /* istanbul ignore next */
        module.exports = __nccwpck_require__(8544)
      }

      /***/
    },

    /***/ 8544: /***/ (module) => {
      if (typeof Object.create === "function") {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            })
          }
        }
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor
            var TempCtor = function () {}
            TempCtor.prototype = superCtor.prototype
            ctor.prototype = new TempCtor()
            ctor.prototype.constructor = ctor
          }
        }
      }

      /***/
    },

    /***/ 28885: /***/ (__unused_webpack_module, exports) => {
      exports.parse = exports.decode = decode

      exports.stringify = exports.encode = encode

      exports.safe = safe
      exports.unsafe = unsafe

      var eol = typeof process !== "undefined" && process.platform === "win32" ? "\r\n" : "\n"

      function encode(obj, opt) {
        var children = []
        var out = ""

        if (typeof opt === "string") {
          opt = {
            section: opt,
            whitespace: false
          }
        } else {
          opt = opt || {}
          opt.whitespace = opt.whitespace === true
        }

        var separator = opt.whitespace ? " = " : "="

        Object.keys(obj).forEach(function (k, _, __) {
          var val = obj[k]
          if (val && Array.isArray(val)) {
            val.forEach(function (item) {
              out += safe(k + "[]") + separator + safe(item) + "\n"
            })
          } else if (val && typeof val === "object") children.push(k)
          else out += safe(k) + separator + safe(val) + eol
        })

        if (opt.section && out.length) out = "[" + safe(opt.section) + "]" + eol + out

        children.forEach(function (k, _, __) {
          var nk = dotSplit(k).join("\\.")
          var section = (opt.section ? opt.section + "." : "") + nk
          var child = encode(obj[k], {
            section: section,
            whitespace: opt.whitespace
          })
          if (out.length && child.length) out += eol

          out += child
        })

        return out
      }

      function dotSplit(str) {
        return str
          .replace(/\1/g, "\u0002LITERAL\\1LITERAL\u0002")
          .replace(/\\\./g, "\u0001")
          .split(/\./)
          .map(function (part) {
            return part.replace(/\1/g, "\\.").replace(/\2LITERAL\\1LITERAL\2/g, "\u0001")
          })
      }

      function decode(str) {
        var out = {}
        var p = out
        var section = null
        //          section     |key      = value
        var re = /^\[([^\]]*)\]$|^([^=]+)(=(.*))?$/i
        var lines = str.split(/[\r\n]+/g)

        lines.forEach(function (line, _, __) {
          if (!line || line.match(/^\s*[;#]/)) return
          var match = line.match(re)
          if (!match) return
          if (match[1] !== undefined) {
            section = unsafe(match[1])
            if (section === "__proto__") {
              // not allowed
              // keep parsing the section, but don't attach it.
              p = {}
              return
            }
            p = out[section] = out[section] || {}
            return
          }
          var key = unsafe(match[2])
          if (key === "__proto__") return
          var value = match[3] ? unsafe(match[4]) : true
          switch (value) {
            case "true":
            case "false":
            case "null":
              value = JSON.parse(value)
          }

          // Convert keys with '[]' suffix to an array
          if (key.length > 2 && key.slice(-2) === "[]") {
            key = key.substring(0, key.length - 2)
            if (key === "__proto__") return
            if (!p[key]) p[key] = []
            else if (!Array.isArray(p[key])) p[key] = [p[key]]
          }

          // safeguard against resetting a previously defined
          // array by accidentally forgetting the brackets
          if (Array.isArray(p[key])) p[key].push(value)
          else p[key] = value
        })

        // {a:{y:1},"a.b":{x:2}} --> {a:{y:1,b:{x:2}}}
        // use a filter to return the keys that have to be deleted.
        Object.keys(out)
          .filter(function (k, _, __) {
            if (!out[k] || typeof out[k] !== "object" || Array.isArray(out[k])) return false

            // see if the parent section is also an object.
            // if so, add it to that, and mark this one for deletion
            var parts = dotSplit(k)
            var p = out
            var l = parts.pop()
            var nl = l.replace(/\\\./g, ".")
            parts.forEach(function (part, _, __) {
              if (part === "__proto__") return
              if (!p[part] || typeof p[part] !== "object") p[part] = {}
              p = p[part]
            })
            if (p === out && nl === l) return false

            p[nl] = out[k]
            return true
          })
          .forEach(function (del, _, __) {
            delete out[del]
          })

        return out
      }

      function isQuoted(val) {
        return (
          (val.charAt(0) === '"' && val.slice(-1) === '"') ||
          (val.charAt(0) === "'" && val.slice(-1) === "'")
        )
      }

      function safe(val) {
        return typeof val !== "string" ||
          val.match(/[=\r\n]/) ||
          val.match(/^\[/) ||
          (val.length > 1 && isQuoted(val)) ||
          val !== val.trim()
          ? JSON.stringify(val)
          : val.replace(/;/g, "\\;").replace(/#/g, "\\#")
      }

      function unsafe(val, doUnesc) {
        val = (val || "").trim()
        if (isQuoted(val)) {
          // remove the single quotes before calling JSON.parse
          if (val.charAt(0) === "'") val = val.substr(1, val.length - 2)

          try {
            val = JSON.parse(val)
          } catch (_) {}
        } else {
          // walk the val to find the first not-escaped ; character
          var esc = false
          var unesc = ""
          for (var i = 0, l = val.length; i < l; i++) {
            var c = val.charAt(i)
            if (esc) {
              if ("\\;#".indexOf(c) !== -1) unesc += c
              else unesc += "\\" + c

              esc = false
            } else if (";#".indexOf(c) !== -1) break
            else if (c === "\\") esc = true
            else unesc += c
          }
          if (esc) unesc += "\\"

          return unesc.trim()
        }
        return val
      }

      /***/
    },

    /***/ 7604: /***/ (module) => {
      "use strict"

      module.exports = function isArrayish(obj) {
        if (!obj) {
          return false
        }

        return (
          obj instanceof Array ||
          Array.isArray(obj) ||
          (obj.length >= 0 && obj.splice instanceof Function)
        )
      }

      /***/
    },

    /***/ 75680: /***/ (module) => {
      "use strict"
      /*!
       * is-number <https://github.com/jonschlinkert/is-number>
       *
       * Copyright (c) 2014-present, Jon Schlinkert.
       * Released under the MIT License.
       */

      module.exports = function (num) {
        if (typeof num === "number") {
          return num - num === 0
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isFinite ? Number.isFinite(+num) : isFinite(+num)
        }
        return false
      }

      /***/
    },

    /***/ 51389: /***/ (module) => {
      "use strict"

      module.exports = (value) => {
        const type = typeof value
        return value !== null && (type === "object" || type === "function")
      }

      /***/
    },

    /***/ 63287: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      /*!
       * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
       *
       * Copyright (c) 2014-2017, Jon Schlinkert.
       * Released under the MIT License.
       */

      function isObject(o) {
        return Object.prototype.toString.call(o) === "[object Object]"
      }

      function isPlainObject(o) {
        var ctor, prot

        if (isObject(o) === false) return false

        // If has modified constructor
        ctor = o.constructor
        if (ctor === undefined) return true

        // If has modified prototype
        prot = ctor.prototype
        if (isObject(prot) === false) return false

        // If constructor does not have an Object-specific method
        if (prot.hasOwnProperty("isPrototypeOf") === false) {
          return false
        }

        // Most likely a plain Object
        return true
      }

      exports.isPlainObject = isPlainObject

      /***/
    },

    /***/ 41554: /***/ (module) => {
      "use strict"

      const isStream = (stream) =>
        stream !== null && typeof stream === "object" && typeof stream.pipe === "function"

      isStream.writable = (stream) =>
        isStream(stream) &&
        stream.writable !== false &&
        typeof stream._write === "function" &&
        typeof stream._writableState === "object"

      isStream.readable = (stream) =>
        isStream(stream) &&
        stream.readable !== false &&
        typeof stream._read === "function" &&
        typeof stream._readableState === "object"

      isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream)

      isStream.transform = (stream) =>
        isStream.duplex(stream) && typeof stream._transform === "function"

      module.exports = isStream

      /***/
    },

    /***/ 97126: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var fs = __nccwpck_require__(57147)
      var core
      if (process.platform === "win32" || global.TESTING_WINDOWS) {
        core = __nccwpck_require__(42001)
      } else {
        core = __nccwpck_require__(9728)
      }

      module.exports = isexe
      isexe.sync = sync

      function isexe(path, options, cb) {
        if (typeof options === "function") {
          cb = options
          options = {}
        }

        if (!cb) {
          if (typeof Promise !== "function") {
            throw new TypeError("callback not provided")
          }

          return new Promise(function (resolve, reject) {
            isexe(path, options || {}, function (er, is) {
              if (er) {
                reject(er)
              } else {
                resolve(is)
              }
            })
          })
        }

        core(path, options || {}, function (er, is) {
          // ignore EACCES because that just means we aren't allowed to run it
          if (er) {
            if (er.code === "EACCES" || (options && options.ignoreErrors)) {
              er = null
              is = false
            }
          }
          cb(er, is)
        })
      }

      function sync(path, options) {
        // my kingdom for a filtered catch
        try {
          return core.sync(path, options || {})
        } catch (er) {
          if ((options && options.ignoreErrors) || er.code === "EACCES") {
            return false
          } else {
            throw er
          }
        }
      }

      /***/
    },

    /***/ 9728: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      module.exports = isexe
      isexe.sync = sync

      var fs = __nccwpck_require__(57147)

      function isexe(path, options, cb) {
        fs.stat(path, function (er, stat) {
          cb(er, er ? false : checkStat(stat, options))
        })
      }

      function sync(path, options) {
        return checkStat(fs.statSync(path), options)
      }

      function checkStat(stat, options) {
        return stat.isFile() && checkMode(stat, options)
      }

      function checkMode(stat, options) {
        var mod = stat.mode
        var uid = stat.uid
        var gid = stat.gid

        var myUid = options.uid !== undefined ? options.uid : process.getuid && process.getuid()
        var myGid = options.gid !== undefined ? options.gid : process.getgid && process.getgid()

        var u = parseInt("100", 8)
        var g = parseInt("010", 8)
        var o = parseInt("001", 8)
        var ug = u | g

        var ret =
          mod & o ||
          (mod & g && gid === myGid) ||
          (mod & u && uid === myUid) ||
          (mod & ug && myUid === 0)

        return ret
      }

      /***/
    },

    /***/ 42001: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      module.exports = isexe
      isexe.sync = sync

      var fs = __nccwpck_require__(57147)

      function checkPathExt(path, options) {
        var pathext = options.pathExt !== undefined ? options.pathExt : process.env.PATHEXT

        if (!pathext) {
          return true
        }

        pathext = pathext.split(";")
        if (pathext.indexOf("") !== -1) {
          return true
        }
        for (var i = 0; i < pathext.length; i++) {
          var p = pathext[i].toLowerCase()
          if (p && path.substr(-p.length).toLowerCase() === p) {
            return true
          }
        }
        return false
      }

      function checkStat(stat, path, options) {
        if (!stat.isSymbolicLink() && !stat.isFile()) {
          return false
        }
        return checkPathExt(path, options)
      }

      function isexe(path, options, cb) {
        fs.stat(path, function (er, stat) {
          cb(er, er ? false : checkStat(stat, path, options))
        })
      }

      function sync(path, options) {
        return checkStat(fs.statSync(path), path, options)
      }

      /***/
    },

    /***/ 51531: /***/ (__unused_webpack_module, exports) => {
      // Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell
      // License: MIT. (See LICENSE.)

      Object.defineProperty(exports, "__esModule", {
        value: true
      })

      // This regex comes from regex.coffee, and is inserted here by generate-index.js
      // (run `npm run build`).
      exports["default"] =
        /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g

      exports.matchToToken = function (match) {
        var token = { type: "invalid", value: match[0], closed: undefined }
        if (match[1]) (token.type = "string"), (token.closed = !!(match[3] || match[4]))
        else if (match[5]) token.type = "comment"
        else if (match[6]) (token.type = "comment"), (token.closed = !!match[7])
        else if (match[8]) token.type = "regex"
        else if (match[9]) token.type = "number"
        else if (match[10]) token.type = "name"
        else if (match[11]) token.type = "punctuator"
        else if (match[12]) token.type = "whitespace"
        return token
      }

      /***/
    },

    /***/ 89062: /***/ (module) => {
      "use strict"

      const hexify = (char) => {
        const h = char.charCodeAt(0).toString(16).toUpperCase()
        return "0x" + (h.length % 2 ? "0" : "") + h
      }

      const parseError = (e, txt, context) => {
        if (!txt) {
          return {
            message: e.message + " while parsing empty string",
            position: 0
          }
        }
        const badToken = e.message.match(/^Unexpected token (.) .*position\s+(\d+)/i)
        const errIdx = badToken
          ? +badToken[2]
          : e.message.match(/^Unexpected end of JSON.*/i)
          ? txt.length - 1
          : null

        const msg = badToken
          ? e.message.replace(
              /^Unexpected token ./,
              `Unexpected token ${JSON.stringify(badToken[1])} (${hexify(badToken[1])})`
            )
          : e.message

        if (errIdx !== null && errIdx !== undefined) {
          const start = errIdx <= context ? 0 : errIdx - context

          const end = errIdx + context >= txt.length ? txt.length : errIdx + context

          const slice =
            (start === 0 ? "" : "...") + txt.slice(start, end) + (end === txt.length ? "" : "...")

          const near = txt === slice ? "" : "near "

          return {
            message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,
            position: errIdx
          }
        } else {
          return {
            message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,
            position: 0
          }
        }
      }

      class JSONParseError extends SyntaxError {
        constructor(er, txt, context, caller) {
          context = context || 20
          const metadata = parseError(er, txt, context)
          super(metadata.message)
          Object.assign(this, metadata)
          this.code = "EJSONPARSE"
          this.systemError = er
          Error.captureStackTrace(this, caller || this.constructor)
        }
        get name() {
          return this.constructor.name
        }
        set name(n) {}
        get [Symbol.toStringTag]() {
          return this.constructor.name
        }
      }

      const kIndent = Symbol.for("indent")
      const kNewline = Symbol.for("newline")
      // only respect indentation if we got a line break, otherwise squash it
      // things other than objects and arrays aren't indented, so ignore those
      // Important: in both of these regexps, the $1 capture group is the newline
      // or undefined, and the $2 capture group is the indent, or undefined.
      const formatRE = /^\s*[{\[]((?:\r?\n)+)([\s\t]*)/
      const emptyRE = /^(?:\{\}|\[\])((?:\r?\n)+)?$/

      const parseJson = (txt, reviver, context) => {
        const parseText = stripBOM(txt)
        context = context || 20
        try {
          // get the indentation so that we can save it back nicely
          // if the file starts with {" then we have an indent of '', ie, none
          // otherwise, pick the indentation of the next line after the first \n
          // If the pattern doesn't match, then it means no indentation.
          // JSON.stringify ignores symbols, so this is reasonably safe.
          // if the string is '{}' or '[]', then use the default 2-space indent.
          const [, newline = "\n", indent = "  "] = parseText.match(emptyRE) ||
            parseText.match(formatRE) || [, "", ""]

          const result = JSON.parse(parseText, reviver)
          if (result && typeof result === "object") {
            result[kNewline] = newline
            result[kIndent] = indent
          }
          return result
        } catch (e) {
          if (typeof txt !== "string" && !Buffer.isBuffer(txt)) {
            const isEmptyArray = Array.isArray(txt) && txt.length === 0
            throw Object.assign(
              new TypeError(`Cannot parse ${isEmptyArray ? "an empty array" : String(txt)}`),
              {
                code: "EJSONPARSE",
                systemError: e
              }
            )
          }

          throw new JSONParseError(e, parseText, context, parseJson)
        }
      }

      // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
      // because the buffer-to-string conversion in `fs.readFileSync()`
      // translates it to FEFF, the UTF-16 BOM.
      const stripBOM = (txt) => String(txt).replace(/^\uFEFF/, "")

      module.exports = parseJson
      parseJson.JSONParseError = JSONParseError

      parseJson.noExceptions = (txt, reviver) => {
        try {
          return JSON.parse(stripBOM(txt), reviver)
        } catch (e) {}
      }

      /***/
    },

    /***/ 52533: /***/ (module) => {
      "use strict"

      var traverse = (module.exports = function (schema, opts, cb) {
        // Legacy support for v0.3.1 and earlier.
        if (typeof opts == "function") {
          cb = opts
          opts = {}
        }

        cb = opts.cb || cb
        var pre = typeof cb == "function" ? cb : cb.pre || function () {}
        var post = cb.post || function () {}

        _traverse(opts, pre, post, schema, "", schema)
      })

      traverse.keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true
      }

      traverse.arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      }

      traverse.propsKeywords = {
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true
      }

      traverse.skipKeywords = {
        default: true,
        enum: true,
        const: true,
        required: true,
        maximum: true,
        minimum: true,
        exclusiveMaximum: true,
        exclusiveMinimum: true,
        multipleOf: true,
        maxLength: true,
        minLength: true,
        pattern: true,
        format: true,
        maxItems: true,
        minItems: true,
        uniqueItems: true,
        maxProperties: true,
        minProperties: true
      }

      function _traverse(
        opts,
        pre,
        post,
        schema,
        jsonPtr,
        rootSchema,
        parentJsonPtr,
        parentKeyword,
        parentSchema,
        keyIndex
      ) {
        if (schema && typeof schema == "object" && !Array.isArray(schema)) {
          pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex)
          for (var key in schema) {
            var sch = schema[key]
            if (Array.isArray(sch)) {
              if (key in traverse.arrayKeywords) {
                for (var i = 0; i < sch.length; i++)
                  _traverse(
                    opts,
                    pre,
                    post,
                    sch[i],
                    jsonPtr + "/" + key + "/" + i,
                    rootSchema,
                    jsonPtr,
                    key,
                    schema,
                    i
                  )
              }
            } else if (key in traverse.propsKeywords) {
              if (sch && typeof sch == "object") {
                for (var prop in sch)
                  _traverse(
                    opts,
                    pre,
                    post,
                    sch[prop],
                    jsonPtr + "/" + key + "/" + escapeJsonPtr(prop),
                    rootSchema,
                    jsonPtr,
                    key,
                    schema,
                    prop
                  )
              }
            } else if (
              key in traverse.keywords ||
              (opts.allKeys && !(key in traverse.skipKeywords))
            ) {
              _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema)
            }
          }
          post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex)
        }
      }

      function escapeJsonPtr(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1")
      }

      /***/
    },

    /***/ 3042: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      exports.__esModule = true
      exports.LinesAndColumns = void 0
      var LF = "\n"
      var CR = "\r"
      var LinesAndColumns = /** @class */ (function () {
        function LinesAndColumns(string) {
          this.string = string
          var offsets = [0]
          for (var offset = 0; offset < string.length; ) {
            switch (string[offset]) {
              case LF:
                offset += LF.length
                offsets.push(offset)
                break
              case CR:
                offset += CR.length
                if (string[offset] === LF) {
                  offset += LF.length
                }
                offsets.push(offset)
                break
              default:
                offset++
                break
            }
          }
          this.offsets = offsets
        }
        LinesAndColumns.prototype.locationForIndex = function (index) {
          if (index < 0 || index > this.string.length) {
            return null
          }
          var line = 0
          var offsets = this.offsets
          while (offsets[line + 1] <= index) {
            line++
          }
          var column = index - offsets[line]
          return { line: line, column: column }
        }
        LinesAndColumns.prototype.indexForLocation = function (location) {
          var line = location.line,
            column = location.column
          if (line < 0 || line >= this.offsets.length) {
            return null
          }
          if (column < 0 || column > this.lengthOfLine(line)) {
            return null
          }
          return this.offsets[line] + column
        }
        LinesAndColumns.prototype.lengthOfLine = function (line) {
          var offset = this.offsets[line]
          var nextOffset =
            line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1]
          return nextOffset - offset
        }
        return LinesAndColumns
      })()
      exports.LinesAndColumns = LinesAndColumns
      exports["default"] = LinesAndColumns

      /***/
    },

    /***/ 15100: /***/ (module, exports, __nccwpck_require__) => {
      /* module decorator */ module = __nccwpck_require__.nmd(module)
      /**
       * lodash (Custom Build) <https://lodash.com/>
       * Build: `lodash modularize exports="npm" -o ./`
       * Copyright jQuery Foundation and other contributors <https://jquery.org/>
       * Released under MIT license <https://lodash.com/license>
       * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
       * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
       */

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = "__lodash_hash_undefined__"

      /** Used to compose bitmasks for comparison styles. */
      var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2

      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER = 9007199254740991

      /** `Object#toString` result references. */
      var argsTag = "[object Arguments]",
        arrayTag = "[object Array]",
        boolTag = "[object Boolean]",
        dateTag = "[object Date]",
        errorTag = "[object Error]",
        funcTag = "[object Function]",
        genTag = "[object GeneratorFunction]",
        mapTag = "[object Map]",
        numberTag = "[object Number]",
        objectTag = "[object Object]",
        promiseTag = "[object Promise]",
        regexpTag = "[object RegExp]",
        setTag = "[object Set]",
        stringTag = "[object String]",
        symbolTag = "[object Symbol]",
        weakMapTag = "[object WeakMap]"

      var arrayBufferTag = "[object ArrayBuffer]",
        dataViewTag = "[object DataView]",
        float32Tag = "[object Float32Array]",
        float64Tag = "[object Float64Array]",
        int8Tag = "[object Int8Array]",
        int16Tag = "[object Int16Array]",
        int32Tag = "[object Int32Array]",
        uint8Tag = "[object Uint8Array]",
        uint8ClampedTag = "[object Uint8ClampedArray]",
        uint16Tag = "[object Uint16Array]",
        uint32Tag = "[object Uint32Array]"

      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g

      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/

      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/

      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {}
      typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
          true
      typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
          false

      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global

      /** Detect free variable `self`. */
      var freeSelf = typeof self == "object" && self && self.Object === Object && self

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function("return this")()

      /** Detect free variable `exports`. */
      var freeExports = true && exports && !exports.nodeType && exports

      /** Detect free variable `module`. */
      var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports

      /** Detect free variable `process` from Node.js. */
      var freeProcess = moduleExports && freeGlobal.process

      /** Used to access faster Node.js helpers. */
      var nodeUtil = (function () {
        try {
          return freeProcess && freeProcess.binding("util")
        } catch (e) {}
      })()

      /* Node.js helper references. */
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray

      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
          length = array ? array.length : 0

        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true
          }
        }
        return false
      }

      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
          result = Array(n)

        while (++index < n) {
          result[index] = iteratee(index)
        }
        return result
      }

      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function (value) {
          return func(value)
        }
      }

      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key]
      }

      /**
       * Checks if `value` is a host object in IE < 9.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
       */
      function isHostObject(value) {
        // Many host objects are `Object` objects that can coerce to strings
        // despite having improperly defined `toString` methods.
        var result = false
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "")
          } catch (e) {}
        }
        return result
      }

      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
          result = Array(map.size)

        map.forEach(function (value, key) {
          result[++index] = [key, value]
        })
        return result
      }

      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg))
        }
      }

      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
          result = Array(set.size)

        set.forEach(function (value) {
          result[++index] = value
        })
        return result
      }

      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype

      /** Used to detect overreaching core-js shims. */
      var coreJsData = root["__core-js_shared__"]

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function () {
        var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || "")
        return uid ? "Symbol(src)_1." + uid : ""
      })()

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var objectToString = objectProto.toString

      /** Used to detect if a method is native. */
      var reIsNative = RegExp(
        "^" +
          funcToString
            .call(hasOwnProperty)
            .replace(reRegExpChar, "\\$&")
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
          "$"
      )

      /** Built-in value references. */
      var Symbol = root.Symbol,
        Uint8Array = root.Uint8Array,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeKeys = overArg(Object.keys, Object)

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(root, "DataView"),
        Map = getNative(root, "Map"),
        Promise = getNative(root, "Promise"),
        Set = getNative(root, "Set"),
        WeakMap = getNative(root, "WeakMap"),
        nativeCreate = getNative(Object, "create")

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap)

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
          length = entries ? entries.length : 0

        this.clear()
        while (++index < length) {
          var entry = entries[index]
          this.set(entry[0], entry[1])
        }
      }

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {}
      }

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key]
      }

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__
        if (nativeCreate) {
          var result = data[key]
          return result === HASH_UNDEFINED ? undefined : result
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined
      }

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key)
      }

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value
        return this
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear
      Hash.prototype["delete"] = hashDelete
      Hash.prototype.get = hashGet
      Hash.prototype.has = hashHas
      Hash.prototype.set = hashSet

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0

        this.clear()
        while (++index < length) {
          var entry = entries[index]
          this.set(entry[0], entry[1])
        }
      }

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = []
      }

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
          index = assocIndexOf(data, key)

        if (index < 0) {
          return false
        }
        var lastIndex = data.length - 1
        if (index == lastIndex) {
          data.pop()
        } else {
          splice.call(data, index, 1)
        }
        return true
      }

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
          index = assocIndexOf(data, key)

        return index < 0 ? undefined : data[index][1]
      }

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1
      }

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
          index = assocIndexOf(data, key)

        if (index < 0) {
          data.push([key, value])
        } else {
          data[index][1] = value
        }
        return this
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear
      ListCache.prototype["delete"] = listCacheDelete
      ListCache.prototype.get = listCacheGet
      ListCache.prototype.has = listCacheHas
      ListCache.prototype.set = listCacheSet

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0

        this.clear()
        while (++index < length) {
          var entry = entries[index]
          this.set(entry[0], entry[1])
        }
      }

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.__data__ = {
          hash: new Hash(),
          map: new (Map || ListCache)(),
          string: new Hash()
        }
      }

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key)
      }

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key)
      }

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key)
      }

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value)
        return this
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear
      MapCache.prototype["delete"] = mapCacheDelete
      MapCache.prototype.get = mapCacheGet
      MapCache.prototype.has = mapCacheHas
      MapCache.prototype.set = mapCacheSet

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
          length = values ? values.length : 0

        this.__data__ = new MapCache()
        while (++index < length) {
          this.add(values[index])
        }
      }

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED)
        return this
      }

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value)
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd
      SetCache.prototype.has = setCacheHas

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        this.__data__ = new ListCache(entries)
      }

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache()
      }

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        return this.__data__["delete"](key)
      }

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key)
      }

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key)
      }

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var cache = this.__data__
        if (cache instanceof ListCache) {
          var pairs = cache.__data__
          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value])
            return this
          }
          cache = this.__data__ = new MapCache(pairs)
        }
        cache.set(key, value)
        return this
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear
      Stack.prototype["delete"] = stackDelete
      Stack.prototype.get = stackGet
      Stack.prototype.has = stackHas
      Stack.prototype.set = stackSet

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
        // Safari 9 makes `arguments.length` enumerable in strict mode.
        var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : []

        var length = result.length,
          skipIndexes = !!length

        for (var key in value) {
          if (
            (inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (key == "length" || isIndex(key, length)))
          ) {
            result.push(key)
          }
        }
        return result
      }

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length
        while (length--) {
          if (eq(array[length][0], key)) {
            return length
          }
        }
        return -1
      }

      /**
       * The base implementation of `getTag`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        return objectToString.call(value)
      }

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {boolean} [bitmask] The bitmask of comparison flags.
       *  The bitmask may be composed of the following flags:
       *     1 - Unordered comparison
       *     2 - Partial comparison
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, customizer, bitmask, stack) {
        if (value === other) {
          return true
        }
        if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
          return value !== value && other !== other
        }
        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack)
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
        var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag

        if (!objIsArr) {
          objTag = getTag(object)
          objTag = objTag == argsTag ? objectTag : objTag
        }
        if (!othIsArr) {
          othTag = getTag(other)
          othTag = othTag == argsTag ? objectTag : othTag
        }
        var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack())
          return objIsArr || isTypedArray(object)
            ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
            : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack)
        }
        if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__")

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other

            stack || (stack = new Stack())
            return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack)
          }
        }
        if (!isSameTag) {
          return false
        }
        stack || (stack = new Stack())
        return equalObjects(object, other, equalFunc, customizer, bitmask, stack)
      }

      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
          length = index,
          noCustomizer = !customizer

        if (object == null) {
          return !length
        }
        object = Object(object)
        while (index--) {
          var data = matchData[index]
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false
          }
        }
        while (++index < length) {
          data = matchData[index]
          var key = data[0],
            objValue = object[key],
            srcValue = data[1]

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false
            }
          } else {
            var stack = new Stack()
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack)
            }
            if (
              !(result === undefined
                ? baseIsEqual(
                    srcValue,
                    objValue,
                    customizer,
                    UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG,
                    stack
                  )
                : result)
            ) {
              return false
            }
          }
        }
        return true
      }

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor
        return pattern.test(toSource(value))
      }

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return (
          isObjectLike(value) &&
          isLength(value.length) &&
          !!typedArrayTags[objectToString.call(value)]
        )
      }

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object)
        }
        var result = []
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result.push(key)
          }
        }
        return result
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} customizer The function to customize comparisons.
       * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array)
        if (stacked && stack.get(other)) {
          return stacked == other
        }
        var index = -1,
          result = true,
          seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined

        stack.set(array, other)
        stack.set(other, array)

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
            othValue = other[index]

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack)
          }
          if (compared !== undefined) {
            if (compared) {
              continue
            }
            result = false
            break
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (
              !arraySome(other, function (othValue, othIndex) {
                if (
                  !seen.has(othIndex) &&
                  (arrValue === othValue ||
                    equalFunc(arrValue, othValue, customizer, bitmask, stack))
                ) {
                  return seen.add(othIndex)
                }
              })
            ) {
              result = false
              break
            }
          } else if (
            !(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))
          ) {
            result = false
            break
          }
        }
        stack["delete"](array)
        stack["delete"](other)
        return result
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} customizer The function to customize comparisons.
       * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false
            }
            object = object.buffer
            other = other.buffer

          case arrayBufferTag:
            if (
              object.byteLength != other.byteLength ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))
            ) {
              return false
            }
            return true

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other)

          case errorTag:
            return object.name == other.name && object.message == other.message

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + ""

          case mapTag:
            var convert = mapToArray

          case setTag:
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG
            convert || (convert = setToArray)

            if (object.size != other.size && !isPartial) {
              return false
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object)
            if (stacked) {
              return stacked == other
            }
            bitmask |= UNORDERED_COMPARE_FLAG

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other)
            var result = equalArrays(
              convert(object),
              convert(other),
              equalFunc,
              customizer,
              bitmask,
              stack
            )
            stack["delete"](object)
            return result

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other)
            }
        }
        return false
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} customizer The function to customize comparisons.
       * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length

        if (objLength != othLength && !isPartial) {
          return false
        }
        var index = objLength
        while (index--) {
          var key = objProps[index]
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false
          }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object)
        if (stacked && stack.get(other)) {
          return stacked == other
        }
        var result = true
        stack.set(object, other)
        stack.set(other, object)

        var skipCtor = isPartial
        while (++index < objLength) {
          key = objProps[index]
          var objValue = object[key],
            othValue = other[key]

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key, other, object, stack)
              : customizer(objValue, othValue, key, object, other, stack)
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (
            !(compared === undefined
              ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack)
              : compared)
          ) {
            result = false
            break
          }
          skipCtor || (skipCtor = key == "constructor")
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
            othCtor = other.constructor

          // Non `Object` object instances with different constructors are not equal.
          if (
            objCtor != othCtor &&
            "constructor" in object &&
            "constructor" in other &&
            !(
              typeof objCtor == "function" &&
              objCtor instanceof objCtor &&
              typeof othCtor == "function" &&
              othCtor instanceof othCtor
            )
          ) {
            result = false
          }
        }
        stack["delete"](object)
        stack["delete"](other)
        return result
      }

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map
      }

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
          length = result.length

        while (length--) {
          var key = result[length],
            value = object[key]

          result[length] = [key, value, isStrictComparable(value)]
        }
        return result
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key)
        return baseIsNative(value) ? value : undefined
      }

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag

      // Fallback for data views, maps, sets, and weak maps in IE 11,
      // for data views in Edge < 14, and promises in Node.js.
      if (
        (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map()) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set()) != setTag) ||
        (WeakMap && getTag(new WeakMap()) != weakMapTag)
      ) {
        getTag = function (value) {
          var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag
              case mapCtorString:
                return mapTag
              case promiseCtorString:
                return promiseTag
              case setCtorString:
                return setTag
              case weakMapCtorString:
                return weakMapTag
            }
          }
          return result
        }
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length
        return (
          !!length &&
          (typeof value == "number" || reIsUint.test(value)) &&
          value > -1 &&
          value % 1 == 0 &&
          value < length
        )
      }

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value
        return type == "string" || type == "number" || type == "symbol" || type == "boolean"
          ? value !== "__proto__"
          : value === null
      }

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func
      }

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
          proto = (typeof Ctor == "function" && Ctor.prototype) || objectProto

        return value === proto
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value)
      }

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to process.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func)
          } catch (e) {}
          try {
            return func + ""
          } catch (e) {}
        }
        return ""
      }

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other)
      }

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      function isArguments(value) {
        // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
        return (
          isArrayLikeObject(value) &&
          hasOwnProperty.call(value, "callee") &&
          (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag)
        )
      }

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value)
      }

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value)
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 8-9 which returns 'object' for typed array and other constructors.
        var tag = isObject(value) ? objectToString.call(value) : ""
        return tag == funcTag || tag == genTag
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value
        return !!value && (type == "object" || type == "function")
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return !!value && typeof value == "object"
      }

      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source))
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object)
      }

      module.exports = isMatch

      /***/
    },

    /***/ 35902: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var hashClear = __nccwpck_require__(11789),
        hashDelete = __nccwpck_require__(60712),
        hashGet = __nccwpck_require__(45395),
        hashHas = __nccwpck_require__(35232),
        hashSet = __nccwpck_require__(47320)

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
          length = entries == null ? 0 : entries.length

        this.clear()
        while (++index < length) {
          var entry = entries[index]
          this.set(entry[0], entry[1])
        }
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear
      Hash.prototype["delete"] = hashDelete
      Hash.prototype.get = hashGet
      Hash.prototype.has = hashHas
      Hash.prototype.set = hashSet

      module.exports = Hash

      /***/
    },

    /***/ 96608: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var listCacheClear = __nccwpck_require__(69792),
        listCacheDelete = __nccwpck_require__(97716),
        listCacheGet = __nccwpck_require__(45789),
        listCacheHas = __nccwpck_require__(59386),
        listCacheSet = __nccwpck_require__(17399)

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
          length = entries == null ? 0 : entries.length

        this.clear()
        while (++index < length) {
          var entry = entries[index]
          this.set(entry[0], entry[1])
        }
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear
      ListCache.prototype["delete"] = listCacheDelete
      ListCache.prototype.get = listCacheGet
      ListCache.prototype.has = listCacheHas
      ListCache.prototype.set = listCacheSet

      module.exports = ListCache

      /***/
    },

    /***/ 80881: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getNative = __nccwpck_require__(24479),
        root = __nccwpck_require__(89882)

      /* Built-in method references that are verified to be native. */
      var Map = getNative(root, "Map")

      module.exports = Map

      /***/
    },

    /***/ 80938: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var mapCacheClear = __nccwpck_require__(1610),
        mapCacheDelete = __nccwpck_require__(56657),
        mapCacheGet = __nccwpck_require__(81372),
        mapCacheHas = __nccwpck_require__(40609),
        mapCacheSet = __nccwpck_require__(45582)

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
          length = entries == null ? 0 : entries.length

        this.clear()
        while (++index < length) {
          var entry = entries[index]
          this.set(entry[0], entry[1])
        }
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear
      MapCache.prototype["delete"] = mapCacheDelete
      MapCache.prototype.get = mapCacheGet
      MapCache.prototype.has = mapCacheHas
      MapCache.prototype.set = mapCacheSet

      module.exports = MapCache

      /***/
    },

    /***/ 35793: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getNative = __nccwpck_require__(24479),
        root = __nccwpck_require__(89882)

      /* Built-in method references that are verified to be native. */
      var Set = getNative(root, "Set")

      module.exports = Set

      /***/
    },

    /***/ 72158: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var MapCache = __nccwpck_require__(80938),
        setCacheAdd = __nccwpck_require__(16895),
        setCacheHas = __nccwpck_require__(60804)

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
          length = values == null ? 0 : values.length

        this.__data__ = new MapCache()
        while (++index < length) {
          this.add(values[index])
        }
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd
      SetCache.prototype.has = setCacheHas

      module.exports = SetCache

      /***/
    },

    /***/ 5323: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var ListCache = __nccwpck_require__(96608),
        stackClear = __nccwpck_require__(62843),
        stackDelete = __nccwpck_require__(14717),
        stackGet = __nccwpck_require__(80021),
        stackHas = __nccwpck_require__(3910),
        stackSet = __nccwpck_require__(69955)

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = (this.__data__ = new ListCache(entries))
        this.size = data.size
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear
      Stack.prototype["delete"] = stackDelete
      Stack.prototype.get = stackGet
      Stack.prototype.has = stackHas
      Stack.prototype.set = stackSet

      module.exports = Stack

      /***/
    },

    /***/ 19213: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var root = __nccwpck_require__(89882)

      /** Built-in value references. */
      var Symbol = root.Symbol

      module.exports = Symbol

      /***/
    },

    /***/ 93261: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var root = __nccwpck_require__(89882)

      /** Built-in value references. */
      var Uint8Array = root.Uint8Array

      module.exports = Uint8Array

      /***/
    },

    /***/ 69647: /***/ (module) => {
      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg)
          case 1:
            return func.call(thisArg, args[0])
          case 2:
            return func.call(thisArg, args[0], args[1])
          case 3:
            return func.call(thisArg, args[0], args[1], args[2])
        }
        return func.apply(thisArg, args)
      }

      module.exports = apply

      /***/
    },

    /***/ 17183: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseIndexOf = __nccwpck_require__(25425)

      /**
       * A specialized version of `_.includes` for arrays without support for
       * specifying an index to search from.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length
        return !!length && baseIndexOf(array, value, 0) > -1
      }

      module.exports = arrayIncludes

      /***/
    },

    /***/ 86732: /***/ (module) => {
      /**
       * This function is like `arrayIncludes` except that it accepts a comparator.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
          length = array == null ? 0 : array.length

        while (++index < length) {
          if (comparator(value, array[index])) {
            return true
          }
        }
        return false
      }

      module.exports = arrayIncludesWith

      /***/
    },

    /***/ 32237: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseTimes = __nccwpck_require__(37765),
        isArguments = __nccwpck_require__(78495),
        isArray = __nccwpck_require__(44869),
        isBuffer = __nccwpck_require__(74190),
        isIndex = __nccwpck_require__(32936),
        isTypedArray = __nccwpck_require__(2496)

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length

        for (var key in value) {
          if (
            (inherited || hasOwnProperty.call(value, key)) &&
            !(
              skipIndexes &&
              // Safari 9 has enumerable `arguments.length` in strict mode.
              (key == "length" ||
                // Node.js 0.10 has enumerable non-index properties on buffers.
                (isBuff && (key == "offset" || key == "parent")) ||
                // PhantomJS 2 has enumerable non-index properties on typed arrays.
                (isType && (key == "buffer" || key == "byteLength" || key == "byteOffset")) ||
                // Skip index properties.
                isIndex(key, length))
            )
          ) {
            result.push(key)
          }
        }
        return result
      }

      module.exports = arrayLikeKeys

      /***/
    },

    /***/ 94356: /***/ (module) => {
      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length)

        while (++index < length) {
          result[index] = iteratee(array[index], index, array)
        }
        return result
      }

      module.exports = arrayMap

      /***/
    },

    /***/ 98018: /***/ (module) => {
      /**
       * A specialized version of `_.reduce` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the first element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
          length = array == null ? 0 : array.length

        if (initAccum && length) {
          accumulator = array[++index]
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array)
        }
        return accumulator
      }

      module.exports = arrayReduce

      /***/
    },

    /***/ 22187: /***/ (module) => {
      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split("")
      }

      module.exports = asciiToArray

      /***/
    },

    /***/ 42560: /***/ (module) => {
      /** Used to match words composed of alphanumeric characters. */
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g

      /**
       * Splits an ASCII `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function asciiWords(string) {
        return string.match(reAsciiWord) || []
      }

      module.exports = asciiWords

      /***/
    },

    /***/ 91950: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseAssignValue = __nccwpck_require__(13868),
        eq = __nccwpck_require__(61901)

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if (
          (value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))
        ) {
          baseAssignValue(object, key, value)
        }
      }

      module.exports = assignMergeValue

      /***/
    },

    /***/ 39725: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseAssignValue = __nccwpck_require__(13868),
        eq = __nccwpck_require__(61901)

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key]
        if (
          !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))
        ) {
          baseAssignValue(object, key, value)
        }
      }

      module.exports = assignValue

      /***/
    },

    /***/ 96752: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var eq = __nccwpck_require__(61901)

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length
        while (length--) {
          if (eq(array[length][0], key)) {
            return length
          }
        }
        return -1
      }

      module.exports = assocIndexOf

      /***/
    },

    /***/ 13868: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var defineProperty = __nccwpck_require__(416)

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            configurable: true,
            enumerable: true,
            value: value,
            writable: true
          })
        } else {
          object[key] = value
        }
      }

      module.exports = baseAssignValue

      /***/
    },

    /***/ 86706: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var isObject = __nccwpck_require__(33334)

      /** Built-in value references. */
      var objectCreate = Object.create

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function () {
        function object() {}
        return function (proto) {
          if (!isObject(proto)) {
            return {}
          }
          if (objectCreate) {
            return objectCreate(proto)
          }
          object.prototype = proto
          var result = new object()
          object.prototype = undefined
          return result
        }
      })()

      module.exports = baseCreate

      /***/
    },

    /***/ 87265: /***/ (module) => {
      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1)

        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index
          }
        }
        return -1
      }

      module.exports = baseFindIndex

      /***/
    },

    /***/ 56588: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var createBaseFor = __nccwpck_require__(5709)

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor()

      module.exports = baseFor

      /***/
    },

    /***/ 97497: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var Symbol = __nccwpck_require__(19213),
        getRawTag = __nccwpck_require__(80923),
        objectToString = __nccwpck_require__(14200)

      /** `Object#toString` result references. */
      var nullTag = "[object Null]",
        undefinedTag = "[object Undefined]"

      /** Built-in value references. */
      var symToStringTag = Symbol ? Symbol.toStringTag : undefined

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag
        }
        return symToStringTag && symToStringTag in Object(value)
          ? getRawTag(value)
          : objectToString(value)
      }

      module.exports = baseGetTag

      /***/
    },

    /***/ 25425: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseFindIndex = __nccwpck_require__(87265),
        baseIsNaN = __nccwpck_require__(18048),
        strictIndexOf = __nccwpck_require__(58868)

      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex)
      }

      module.exports = baseIndexOf

      /***/
    },

    /***/ 92177: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseGetTag = __nccwpck_require__(97497),
        isObjectLike = __nccwpck_require__(85926)

      /** `Object#toString` result references. */
      var argsTag = "[object Arguments]"

      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag
      }

      module.exports = baseIsArguments

      /***/
    },

    /***/ 18048: /***/ (module) => {
      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value
      }

      module.exports = baseIsNaN

      /***/
    },

    /***/ 50411: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var isFunction = __nccwpck_require__(17799),
        isMasked = __nccwpck_require__(29058),
        isObject = __nccwpck_require__(33334),
        toSource = __nccwpck_require__(96928)

      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g

      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/

      /** Used for built-in method references. */
      var funcProto = Function.prototype,
        objectProto = Object.prototype

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /** Used to detect if a method is native. */
      var reIsNative = RegExp(
        "^" +
          funcToString
            .call(hasOwnProperty)
            .replace(reRegExpChar, "\\$&")
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
          "$"
      )

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor
        return pattern.test(toSource(value))
      }

      module.exports = baseIsNative

      /***/
    },

    /***/ 11528: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseGetTag = __nccwpck_require__(97497),
        isLength = __nccwpck_require__(64530),
        isObjectLike = __nccwpck_require__(85926)

      /** `Object#toString` result references. */
      var argsTag = "[object Arguments]",
        arrayTag = "[object Array]",
        boolTag = "[object Boolean]",
        dateTag = "[object Date]",
        errorTag = "[object Error]",
        funcTag = "[object Function]",
        mapTag = "[object Map]",
        numberTag = "[object Number]",
        objectTag = "[object Object]",
        regexpTag = "[object RegExp]",
        setTag = "[object Set]",
        stringTag = "[object String]",
        weakMapTag = "[object WeakMap]"

      var arrayBufferTag = "[object ArrayBuffer]",
        dataViewTag = "[object DataView]",
        float32Tag = "[object Float32Array]",
        float64Tag = "[object Float64Array]",
        int8Tag = "[object Int8Array]",
        int16Tag = "[object Int16Array]",
        int32Tag = "[object Int32Array]",
        uint8Tag = "[object Uint8Array]",
        uint8ClampedTag = "[object Uint8ClampedArray]",
        uint16Tag = "[object Uint16Array]",
        uint32Tag = "[object Uint32Array]"

      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {}
      typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
          true
      typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
          false

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)]
      }

      module.exports = baseIsTypedArray

      /***/
    },

    /***/ 90297: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var isObject = __nccwpck_require__(33334),
        isPrototype = __nccwpck_require__(60010),
        nativeKeysIn = __nccwpck_require__(45383)

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object)
        }
        var isProto = isPrototype(object),
          result = []

        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key)
          }
        }
        return result
      }

      module.exports = baseKeysIn

      /***/
    },

    /***/ 15451: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var Stack = __nccwpck_require__(5323),
        assignMergeValue = __nccwpck_require__(91950),
        baseFor = __nccwpck_require__(56588),
        baseMergeDeep = __nccwpck_require__(85254),
        isObject = __nccwpck_require__(33334),
        keysIn = __nccwpck_require__(69109),
        safeGet = __nccwpck_require__(49020)

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return
        }
        baseFor(
          source,
          function (srcValue, key) {
            stack || (stack = new Stack())
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack)
            } else {
              var newValue = customizer
                ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack)
                : undefined

              if (newValue === undefined) {
                newValue = srcValue
              }
              assignMergeValue(object, key, newValue)
            }
          },
          keysIn
        )
      }

      module.exports = baseMerge

      /***/
    },

    /***/ 85254: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var assignMergeValue = __nccwpck_require__(91950),
        cloneBuffer = __nccwpck_require__(72974),
        cloneTypedArray = __nccwpck_require__(37764),
        copyArray = __nccwpck_require__(75157),
        initCloneObject = __nccwpck_require__(71532),
        isArguments = __nccwpck_require__(78495),
        isArray = __nccwpck_require__(44869),
        isArrayLikeObject = __nccwpck_require__(87996),
        isBuffer = __nccwpck_require__(74190),
        isFunction = __nccwpck_require__(17799),
        isObject = __nccwpck_require__(33334),
        isPlainObject = __nccwpck_require__(46169),
        isTypedArray = __nccwpck_require__(2496),
        safeGet = __nccwpck_require__(49020),
        toPlainObject = __nccwpck_require__(29321)

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue)

        if (stacked) {
          assignMergeValue(object, key, stacked)
          return
        }
        var newValue = customizer
          ? customizer(objValue, srcValue, key + "", object, source, stack)
          : undefined

        var isCommon = newValue === undefined

        if (isCommon) {
          var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue)

          newValue = srcValue
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue)
            } else if (isBuff) {
              isCommon = false
              newValue = cloneBuffer(srcValue, true)
            } else if (isTyped) {
              isCommon = false
              newValue = cloneTypedArray(srcValue, true)
            } else {
              newValue = []
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue)
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue)
            }
          } else {
            isCommon = false
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue)
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack)
          stack["delete"](srcValue)
        }
        assignMergeValue(object, key, newValue)
      }

      module.exports = baseMergeDeep

      /***/
    },

    /***/ 46610: /***/ (module) => {
      /**
       * The base implementation of `_.propertyOf` without support for deep paths.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyOf(object) {
        return function (key) {
          return object == null ? undefined : object[key]
        }
      }

      module.exports = basePropertyOf

      /***/
    },

    /***/ 42936: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var identity = __nccwpck_require__(57822),
        overRest = __nccwpck_require__(12417),
        setToString = __nccwpck_require__(98416)

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "")
      }

      module.exports = baseRest

      /***/
    },

    /***/ 40979: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var constant = __nccwpck_require__(35946),
        defineProperty = __nccwpck_require__(416),
        identity = __nccwpck_require__(57822)

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty
        ? identity
        : function (func, string) {
            return defineProperty(func, "toString", {
              configurable: true,
              enumerable: false,
              value: constant(string),
              writable: true
            })
          }

      module.exports = baseSetToString

      /***/
    },

    /***/ 8758: /***/ (module) => {
      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
          length = array.length

        if (start < 0) {
          start = -start > length ? 0 : length + start
        }
        end = end > length ? length : end
        if (end < 0) {
          end += length
        }
        length = start > end ? 0 : (end - start) >>> 0
        start >>>= 0

        var result = Array(length)
        while (++index < length) {
          result[index] = array[index + start]
        }
        return result
      }

      module.exports = baseSlice

      /***/
    },

    /***/ 37765: /***/ (module) => {
      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
          result = Array(n)

        while (++index < n) {
          result[index] = iteratee(index)
        }
        return result
      }

      module.exports = baseTimes

      /***/
    },

    /***/ 96792: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var Symbol = __nccwpck_require__(19213),
        arrayMap = __nccwpck_require__(94356),
        isArray = __nccwpck_require__(44869),
        isSymbol = __nccwpck_require__(66403)

      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == "string") {
          return value
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + ""
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : ""
        }
        var result = value + ""
        return result == "0" && 1 / value == -INFINITY ? "-0" : result
      }

      module.exports = baseToString

      /***/
    },

    /***/ 59258: /***/ (module) => {
      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function (value) {
          return func(value)
        }
      }

      module.exports = baseUnary

      /***/
    },

    /***/ 19036: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var SetCache = __nccwpck_require__(72158),
        arrayIncludes = __nccwpck_require__(17183),
        arrayIncludesWith = __nccwpck_require__(86732),
        cacheHas = __nccwpck_require__(72675),
        createSet = __nccwpck_require__(46505),
        setToArray = __nccwpck_require__(49553)

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200

      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result

        if (comparator) {
          isCommon = false
          includes = arrayIncludesWith
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array)
          if (set) {
            return setToArray(set)
          }
          isCommon = false
          includes = cacheHas
          seen = new SetCache()
        } else {
          seen = iteratee ? [] : result
        }
        outer: while (++index < length) {
          var value = array[index],
            computed = iteratee ? iteratee(value) : value

          value = comparator || value !== 0 ? value : 0
          if (isCommon && computed === computed) {
            var seenIndex = seen.length
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer
              }
            }
            if (iteratee) {
              seen.push(computed)
            }
            result.push(value)
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed)
            }
            result.push(value)
          }
        }
        return result
      }

      module.exports = baseUniq

      /***/
    },

    /***/ 72675: /***/ (module) => {
      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key)
      }

      module.exports = cacheHas

      /***/
    },

    /***/ 95557: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseSlice = __nccwpck_require__(8758)

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length
        end = end === undefined ? length : end
        return !start && end >= length ? array : baseSlice(array, start, end)
      }

      module.exports = castSlice

      /***/
    },

    /***/ 21094: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var Uint8Array = __nccwpck_require__(93261)

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength)
        new Uint8Array(result).set(new Uint8Array(arrayBuffer))
        return result
      }

      module.exports = cloneArrayBuffer

      /***/
    },

    /***/ 72974: /***/ (module, exports, __nccwpck_require__) => {
      /* module decorator */ module = __nccwpck_require__.nmd(module)
      var root = __nccwpck_require__(89882)

      /** Detect free variable `exports`. */
      var freeExports = true && exports && !exports.nodeType && exports

      /** Detect free variable `module`. */
      var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports

      /** Built-in value references. */
      var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined

      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice()
        }
        var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length)

        buffer.copy(result)
        return result
      }

      module.exports = cloneBuffer

      /***/
    },

    /***/ 37764: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var cloneArrayBuffer = __nccwpck_require__(21094)

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length)
      }

      module.exports = cloneTypedArray

      /***/
    },

    /***/ 75157: /***/ (module) => {
      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
          length = source.length

        array || (array = Array(length))
        while (++index < length) {
          array[index] = source[index]
        }
        return array
      }

      module.exports = copyArray

      /***/
    },

    /***/ 86388: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var assignValue = __nccwpck_require__(39725),
        baseAssignValue = __nccwpck_require__(13868)

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object
        object || (object = {})

        var index = -1,
          length = props.length

        while (++index < length) {
          var key = props[index]

          var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined

          if (newValue === undefined) {
            newValue = source[key]
          }
          if (isNew) {
            baseAssignValue(object, key, newValue)
          } else {
            assignValue(object, key, newValue)
          }
        }
        return object
      }

      module.exports = copyObject

      /***/
    },

    /***/ 78380: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var root = __nccwpck_require__(89882)

      /** Used to detect overreaching core-js shims. */
      var coreJsData = root["__core-js_shared__"]

      module.exports = coreJsData

      /***/
    },

    /***/ 31911: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseRest = __nccwpck_require__(42936),
        isIterateeCall = __nccwpck_require__(8494)

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined

          customizer =
            assigner.length > 3 && typeof customizer == "function"
              ? (length--, customizer)
              : undefined

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer
            length = 1
          }
          object = Object(object)
          while (++index < length) {
            var source = sources[index]
            if (source) {
              assigner(object, source, index, customizer)
            }
          }
          return object
        })
      }

      module.exports = createAssigner

      /***/
    },

    /***/ 5709: /***/ (module) => {
      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length

          while (length--) {
            var key = props[fromRight ? length : ++index]
            if (iteratee(iterable[key], key, iterable) === false) {
              break
            }
          }
          return object
        }
      }

      module.exports = createBaseFor

      /***/
    },

    /***/ 55898: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var castSlice = __nccwpck_require__(95557),
        hasUnicode = __nccwpck_require__(69489),
        stringToArray = __nccwpck_require__(1296),
        toString = __nccwpck_require__(32931)

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string)

          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined

          var chr = strSymbols ? strSymbols[0] : string.charAt(0)

          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1)

          return chr[methodName]() + trailing
        }
      }

      module.exports = createCaseFirst

      /***/
    },

    /***/ 53702: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var arrayReduce = __nccwpck_require__(98018),
        deburr = __nccwpck_require__(833),
        words = __nccwpck_require__(76454)

      /** Used to compose unicode capture groups. */
      var rsApos = "['\u2019]"

      /** Used to match apostrophes. */
      var reApos = RegExp(rsApos, "g")

      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "")
        }
      }

      module.exports = createCompounder

      /***/
    },

    /***/ 46505: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var Set = __nccwpck_require__(35793),
        noop = __nccwpck_require__(51901),
        setToArray = __nccwpck_require__(49553)

      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0

      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY)
        ? noop
        : function (values) {
            return new Set(values)
          }

      module.exports = createSet

      /***/
    },

    /***/ 91683: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var basePropertyOf = __nccwpck_require__(46610)

      /** Used to map Latin Unicode letters to basic Latin letters. */
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xc0": "A",
        "\xc1": "A",
        "\xc2": "A",
        "\xc3": "A",
        "\xc4": "A",
        "\xc5": "A",
        "\xe0": "a",
        "\xe1": "a",
        "\xe2": "a",
        "\xe3": "a",
        "\xe4": "a",
        "\xe5": "a",
        "\xc7": "C",
        "\xe7": "c",
        "\xd0": "D",
        "\xf0": "d",
        "\xc8": "E",
        "\xc9": "E",
        "\xca": "E",
        "\xcb": "E",
        "\xe8": "e",
        "\xe9": "e",
        "\xea": "e",
        "\xeb": "e",
        "\xcc": "I",
        "\xcd": "I",
        "\xce": "I",
        "\xcf": "I",
        "\xec": "i",
        "\xed": "i",
        "\xee": "i",
        "\xef": "i",
        "\xd1": "N",
        "\xf1": "n",
        "\xd2": "O",
        "\xd3": "O",
        "\xd4": "O",
        "\xd5": "O",
        "\xd6": "O",
        "\xd8": "O",
        "\xf2": "o",
        "\xf3": "o",
        "\xf4": "o",
        "\xf5": "o",
        "\xf6": "o",
        "\xf8": "o",
        "\xd9": "U",
        "\xda": "U",
        "\xdb": "U",
        "\xdc": "U",
        "\xf9": "u",
        "\xfa": "u",
        "\xfb": "u",
        "\xfc": "u",
        "\xdd": "Y",
        "\xfd": "y",
        "\xff": "y",
        "\xc6": "Ae",
        "\xe6": "ae",
        "\xde": "Th",
        "\xfe": "th",
        "\xdf": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010a": "C",
        "\u010c": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010b": "c",
        "\u010d": "c",
        "\u010e": "D",
        "\u0110": "D",
        "\u010f": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011a": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011b": "e",
        "\u011c": "G",
        "\u011e": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011d": "g",
        "\u011f": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012a": "I",
        "\u012c": "I",
        "\u012e": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012b": "i",
        "\u012d": "i",
        "\u012f": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013b": "L",
        "\u013d": "L",
        "\u013f": "L",
        "\u0141": "L",
        "\u013a": "l",
        "\u013c": "l",
        "\u013e": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014a": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014b": "n",
        "\u014c": "O",
        "\u014e": "O",
        "\u0150": "O",
        "\u014d": "o",
        "\u014f": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015a": "S",
        "\u015c": "S",
        "\u015e": "S",
        "\u0160": "S",
        "\u015b": "s",
        "\u015d": "s",
        "\u015f": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016a": "U",
        "\u016c": "U",
        "\u016e": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016b": "u",
        "\u016d": "u",
        "\u016f": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017b": "Z",
        "\u017d": "Z",
        "\u017a": "z",
        "\u017c": "z",
        "\u017e": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017f": "s"
      }

      /**
       * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
       * letters to basic Latin letters.
       *
       * @private
       * @param {string} letter The matched letter to deburr.
       * @returns {string} Returns the deburred letter.
       */
      var deburrLetter = basePropertyOf(deburredLetters)

      module.exports = deburrLetter

      /***/
    },

    /***/ 416: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getNative = __nccwpck_require__(24479)

      var defineProperty = (function () {
        try {
          var func = getNative(Object, "defineProperty")
          func({}, "", {})
          return func
        } catch (e) {}
      })()

      module.exports = defineProperty

      /***/
    },

    /***/ 52085: /***/ (module) => {
      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global

      module.exports = freeGlobal

      /***/
    },

    /***/ 69980: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var isKeyable = __nccwpck_require__(13308)

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map
      }

      module.exports = getMapData

      /***/
    },

    /***/ 24479: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseIsNative = __nccwpck_require__(50411),
        getValue = __nccwpck_require__(13542)

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key)
        return baseIsNative(value) ? value : undefined
      }

      module.exports = getNative

      /***/
    },

    /***/ 86271: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var overArg = __nccwpck_require__(6320)

      /** Built-in value references. */
      var getPrototype = overArg(Object.getPrototypeOf, Object)

      module.exports = getPrototype

      /***/
    },

    /***/ 80923: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var Symbol = __nccwpck_require__(19213)

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString

      /** Built-in value references. */
      var symToStringTag = Symbol ? Symbol.toStringTag : undefined

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag]

        try {
          value[symToStringTag] = undefined
          var unmasked = true
        } catch (e) {}

        var result = nativeObjectToString.call(value)
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag
          } else {
            delete value[symToStringTag]
          }
        }
        return result
      }

      module.exports = getRawTag

      /***/
    },

    /***/ 13542: /***/ (module) => {
      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key]
      }

      module.exports = getValue

      /***/
    },

    /***/ 69489: /***/ (module) => {
      /** Used to compose unicode character classes. */
      var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = "\\ufe0e\\ufe0f"

      /** Used to compose unicode capture groups. */
      var rsZWJ = "\\u200d"

      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]")

      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string)
      }

      module.exports = hasUnicode

      /***/
    },

    /***/ 54632: /***/ (module) => {
      /** Used to detect strings that need a more robust regexp to match words. */
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/

      /**
       * Checks if `string` contains a word composed of Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a word is found, else `false`.
       */
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string)
      }

      module.exports = hasUnicodeWord

      /***/
    },

    /***/ 11789: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var nativeCreate = __nccwpck_require__(93041)

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {}
        this.size = 0
      }

      module.exports = hashClear

      /***/
    },

    /***/ 60712: /***/ (module) => {
      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key]
        this.size -= result ? 1 : 0
        return result
      }

      module.exports = hashDelete

      /***/
    },

    /***/ 45395: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var nativeCreate = __nccwpck_require__(93041)

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = "__lodash_hash_undefined__"

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__
        if (nativeCreate) {
          var result = data[key]
          return result === HASH_UNDEFINED ? undefined : result
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined
      }

      module.exports = hashGet

      /***/
    },

    /***/ 35232: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var nativeCreate = __nccwpck_require__(93041)

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key)
      }

      module.exports = hashHas

      /***/
    },

    /***/ 47320: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var nativeCreate = __nccwpck_require__(93041)

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = "__lodash_hash_undefined__"

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__
        this.size += this.has(key) ? 0 : 1
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value
        return this
      }

      module.exports = hashSet

      /***/
    },

    /***/ 71532: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseCreate = __nccwpck_require__(86706),
        getPrototype = __nccwpck_require__(86271),
        isPrototype = __nccwpck_require__(60010)

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object)
          ? baseCreate(getPrototype(object))
          : {}
      }

      module.exports = initCloneObject

      /***/
    },

    /***/ 32936: /***/ (module) => {
      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER = 9007199254740991

      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        var type = typeof value
        length = length == null ? MAX_SAFE_INTEGER : length

        return (
          !!length &&
          (type == "number" || (type != "symbol" && reIsUint.test(value))) &&
          value > -1 &&
          value % 1 == 0 &&
          value < length
        )
      }

      module.exports = isIndex

      /***/
    },

    /***/ 8494: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var eq = __nccwpck_require__(61901),
        isArrayLike = __nccwpck_require__(18017),
        isIndex = __nccwpck_require__(32936),
        isObject = __nccwpck_require__(33334)

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false
        }
        var type = typeof index
        if (
          type == "number"
            ? isArrayLike(object) && isIndex(index, object.length)
            : type == "string" && index in object
        ) {
          return eq(object[index], value)
        }
        return false
      }

      module.exports = isIterateeCall

      /***/
    },

    /***/ 13308: /***/ (module) => {
      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value
        return type == "string" || type == "number" || type == "symbol" || type == "boolean"
          ? value !== "__proto__"
          : value === null
      }

      module.exports = isKeyable

      /***/
    },

    /***/ 29058: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var coreJsData = __nccwpck_require__(78380)

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function () {
        var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || "")
        return uid ? "Symbol(src)_1." + uid : ""
      })()

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func
      }

      module.exports = isMasked

      /***/
    },

    /***/ 60010: /***/ (module) => {
      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
          proto = (typeof Ctor == "function" && Ctor.prototype) || objectProto

        return value === proto
      }

      module.exports = isPrototype

      /***/
    },

    /***/ 69792: /***/ (module) => {
      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = []
        this.size = 0
      }

      module.exports = listCacheClear

      /***/
    },

    /***/ 97716: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var assocIndexOf = __nccwpck_require__(96752)

      /** Used for built-in method references. */
      var arrayProto = Array.prototype

      /** Built-in value references. */
      var splice = arrayProto.splice

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
          index = assocIndexOf(data, key)

        if (index < 0) {
          return false
        }
        var lastIndex = data.length - 1
        if (index == lastIndex) {
          data.pop()
        } else {
          splice.call(data, index, 1)
        }
        --this.size
        return true
      }

      module.exports = listCacheDelete

      /***/
    },

    /***/ 45789: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var assocIndexOf = __nccwpck_require__(96752)

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
          index = assocIndexOf(data, key)

        return index < 0 ? undefined : data[index][1]
      }

      module.exports = listCacheGet

      /***/
    },

    /***/ 59386: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var assocIndexOf = __nccwpck_require__(96752)

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1
      }

      module.exports = listCacheHas

      /***/
    },

    /***/ 17399: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var assocIndexOf = __nccwpck_require__(96752)

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
          index = assocIndexOf(data, key)

        if (index < 0) {
          ++this.size
          data.push([key, value])
        } else {
          data[index][1] = value
        }
        return this
      }

      module.exports = listCacheSet

      /***/
    },

    /***/ 1610: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var Hash = __nccwpck_require__(35902),
        ListCache = __nccwpck_require__(96608),
        Map = __nccwpck_require__(80881)

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0
        this.__data__ = {
          hash: new Hash(),
          map: new (Map || ListCache)(),
          string: new Hash()
        }
      }

      module.exports = mapCacheClear

      /***/
    },

    /***/ 56657: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getMapData = __nccwpck_require__(69980)

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key)
        this.size -= result ? 1 : 0
        return result
      }

      module.exports = mapCacheDelete

      /***/
    },

    /***/ 81372: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getMapData = __nccwpck_require__(69980)

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key)
      }

      module.exports = mapCacheGet

      /***/
    },

    /***/ 40609: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getMapData = __nccwpck_require__(69980)

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key)
      }

      module.exports = mapCacheHas

      /***/
    },

    /***/ 45582: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getMapData = __nccwpck_require__(69980)

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
          size = data.size

        data.set(key, value)
        this.size += data.size == size ? 0 : 1
        return this
      }

      module.exports = mapCacheSet

      /***/
    },

    /***/ 93041: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var getNative = __nccwpck_require__(24479)

      /* Built-in method references that are verified to be native. */
      var nativeCreate = getNative(Object, "create")

      module.exports = nativeCreate

      /***/
    },

    /***/ 45383: /***/ (module) => {
      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = []
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key)
          }
        }
        return result
      }

      module.exports = nativeKeysIn

      /***/
    },

    /***/ 34643: /***/ (module, exports, __nccwpck_require__) => {
      /* module decorator */ module = __nccwpck_require__.nmd(module)
      var freeGlobal = __nccwpck_require__(52085)

      /** Detect free variable `exports`. */
      var freeExports = true && exports && !exports.nodeType && exports

      /** Detect free variable `module`. */
      var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports

      /** Detect free variable `process` from Node.js. */
      var freeProcess = moduleExports && freeGlobal.process

      /** Used to access faster Node.js helpers. */
      var nodeUtil = (function () {
        try {
          // Use `util.types` for Node.js 10+.
          var types = freeModule && freeModule.require && freeModule.require("util").types

          if (types) {
            return types
          }

          // Legacy `process.binding('util')` for Node.js < 10.
          return freeProcess && freeProcess.binding && freeProcess.binding("util")
        } catch (e) {}
      })()

      module.exports = nodeUtil

      /***/
    },

    /***/ 14200: /***/ (module) => {
      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value)
      }

      module.exports = objectToString

      /***/
    },

    /***/ 6320: /***/ (module) => {
      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg))
        }
      }

      module.exports = overArg

      /***/
    },

    /***/ 12417: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var apply = __nccwpck_require__(69647)

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeMax = Math.max

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0)
        return function () {
          var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length)

          while (++index < length) {
            array[index] = args[start + index]
          }
          index = -1
          var otherArgs = Array(start + 1)
          while (++index < start) {
            otherArgs[index] = args[index]
          }
          otherArgs[start] = transform(array)
          return apply(func, this, otherArgs)
        }
      }

      module.exports = overRest

      /***/
    },

    /***/ 89882: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var freeGlobal = __nccwpck_require__(52085)

      /** Detect free variable `self`. */
      var freeSelf = typeof self == "object" && self && self.Object === Object && self

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function("return this")()

      module.exports = root

      /***/
    },

    /***/ 49020: /***/ (module) => {
      /**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return
        }

        if (key == "__proto__") {
          return
        }

        return object[key]
      }

      module.exports = safeGet

      /***/
    },

    /***/ 16895: /***/ (module) => {
      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = "__lodash_hash_undefined__"

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED)
        return this
      }

      module.exports = setCacheAdd

      /***/
    },

    /***/ 60804: /***/ (module) => {
      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value)
      }

      module.exports = setCacheHas

      /***/
    },

    /***/ 49553: /***/ (module) => {
      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
          result = Array(set.size)

        set.forEach(function (value) {
          result[++index] = value
        })
        return result
      }

      module.exports = setToArray

      /***/
    },

    /***/ 98416: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseSetToString = __nccwpck_require__(40979),
        shortOut = __nccwpck_require__(17882)

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString)

      module.exports = setToString

      /***/
    },

    /***/ 17882: /***/ (module) => {
      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
        HOT_SPAN = 16

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeNow = Date.now

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
          lastCalled = 0

        return function () {
          var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled)

          lastCalled = stamp
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0]
            }
          } else {
            count = 0
          }
          return func.apply(undefined, arguments)
        }
      }

      module.exports = shortOut

      /***/
    },

    /***/ 62843: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var ListCache = __nccwpck_require__(96608)

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache()
        this.size = 0
      }

      module.exports = stackClear

      /***/
    },

    /***/ 14717: /***/ (module) => {
      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
          result = data["delete"](key)

        this.size = data.size
        return result
      }

      module.exports = stackDelete

      /***/
    },

    /***/ 80021: /***/ (module) => {
      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key)
      }

      module.exports = stackGet

      /***/
    },

    /***/ 3910: /***/ (module) => {
      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key)
      }

      module.exports = stackHas

      /***/
    },

    /***/ 69955: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var ListCache = __nccwpck_require__(96608),
        Map = __nccwpck_require__(80881),
        MapCache = __nccwpck_require__(80938)

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__
        if (data instanceof ListCache) {
          var pairs = data.__data__
          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value])
            this.size = ++data.size
            return this
          }
          data = this.__data__ = new MapCache(pairs)
        }
        data.set(key, value)
        this.size = data.size
        return this
      }

      module.exports = stackSet

      /***/
    },

    /***/ 58868: /***/ (module) => {
      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
          length = array.length

        while (++index < length) {
          if (array[index] === value) {
            return index
          }
        }
        return -1
      }

      module.exports = strictIndexOf

      /***/
    },

    /***/ 1296: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var asciiToArray = __nccwpck_require__(22187),
        hasUnicode = __nccwpck_require__(69489),
        unicodeToArray = __nccwpck_require__(41990)

      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string)
      }

      module.exports = stringToArray

      /***/
    },

    /***/ 96928: /***/ (module) => {
      /** Used for built-in method references. */
      var funcProto = Function.prototype

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func)
          } catch (e) {}
          try {
            return func + ""
          } catch (e) {}
        }
        return ""
      }

      module.exports = toSource

      /***/
    },

    /***/ 41990: /***/ (module) => {
      /** Used to compose unicode character classes. */
      var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = "\\ufe0e\\ufe0f"

      /** Used to compose unicode capture groups. */
      var rsAstral = "[" + rsAstralRange + "]",
        rsCombo = "[" + rsComboRange + "]",
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
        rsNonAstral = "[^" + rsAstralRange + "]",
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsZWJ = "\\u200d"

      /** Used to compose unicode regexes. */
      var reOptMod = rsModifier + "?",
        rsOptVar = "[" + rsVarRange + "]?",
        rsOptJoin =
          "(?:" +
          rsZWJ +
          "(?:" +
          [rsNonAstral, rsRegional, rsSurrPair].join("|") +
          ")" +
          rsOptVar +
          reOptMod +
          ")*",
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol =
          "(?:" +
          [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") +
          ")"

      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g")

      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || []
      }

      module.exports = unicodeToArray

      /***/
    },

    /***/ 85423: /***/ (module) => {
      /** Used to compose unicode character classes. */
      var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff",
        rsMathOpRange = "\\xac\\xb1\\xd7\\xf7",
        rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange =
          " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde",
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange

      /** Used to compose unicode capture groups. */
      var rsApos = "['\u2019]",
        rsBreak = "[" + rsBreakRange + "]",
        rsCombo = "[" + rsComboRange + "]",
        rsDigits = "\\d+",
        rsDingbat = "[" + rsDingbatRange + "]",
        rsLower = "[" + rsLowerRange + "]",
        rsMisc =
          "[^" +
          rsAstralRange +
          rsBreakRange +
          rsDigits +
          rsDingbatRange +
          rsLowerRange +
          rsUpperRange +
          "]",
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
        rsNonAstral = "[^" + rsAstralRange + "]",
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = "[" + rsUpperRange + "]",
        rsZWJ = "\\u200d"

      /** Used to compose unicode regexes. */
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")",
        rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")",
        rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?",
        rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?",
        reOptMod = rsModifier + "?",
        rsOptVar = "[" + rsVarRange + "]?",
        rsOptJoin =
          "(?:" +
          rsZWJ +
          "(?:" +
          [rsNonAstral, rsRegional, rsSurrPair].join("|") +
          ")" +
          rsOptVar +
          reOptMod +
          ")*",
        rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
        rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq

      /** Used to match complex or compound words. */
      var reUnicodeWord = RegExp(
        [
          rsUpper +
            "?" +
            rsLower +
            "+" +
            rsOptContrLower +
            "(?=" +
            [rsBreak, rsUpper, "$"].join("|") +
            ")",
          rsMiscUpper +
            "+" +
            rsOptContrUpper +
            "(?=" +
            [rsBreak, rsUpper + rsMiscLower, "$"].join("|") +
            ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"),
        "g"
      )

      /**
       * Splits a Unicode `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || []
      }

      module.exports = unicodeWords

      /***/
    },

    /***/ 45769: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var capitalize = __nccwpck_require__(33622),
        createCompounder = __nccwpck_require__(53702)

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase()
        return result + (index ? capitalize(word) : word)
      })

      module.exports = camelCase

      /***/
    },

    /***/ 33622: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var toString = __nccwpck_require__(32931),
        upperFirst = __nccwpck_require__(72598)

      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase())
      }

      module.exports = capitalize

      /***/
    },

    /***/ 35946: /***/ (module) => {
      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function () {
          return value
        }
      }

      module.exports = constant

      /***/
    },

    /***/ 833: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var deburrLetter = __nccwpck_require__(91683),
        toString = __nccwpck_require__(32931)

      /** Used to match Latin Unicode letters (excluding mathematical operators). */
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g

      /** Used to compose unicode character classes. */
      var rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange

      /** Used to compose unicode capture groups. */
      var rsCombo = "[" + rsComboRange + "]"

      /**
       * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
       * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
       */
      var reComboMark = RegExp(rsCombo, "g")

      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string)
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "")
      }

      module.exports = deburr

      /***/
    },

    /***/ 61901: /***/ (module) => {
      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other)
      }

      module.exports = eq

      /***/
    },

    /***/ 57822: /***/ (module) => {
      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value
      }

      module.exports = identity

      /***/
    },

    /***/ 78495: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseIsArguments = __nccwpck_require__(92177),
        isObjectLike = __nccwpck_require__(85926)

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /** Built-in value references. */
      var propertyIsEnumerable = objectProto.propertyIsEnumerable

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(
        (function () {
          return arguments
        })()
      )
        ? baseIsArguments
        : function (value) {
            return (
              isObjectLike(value) &&
              hasOwnProperty.call(value, "callee") &&
              !propertyIsEnumerable.call(value, "callee")
            )
          }

      module.exports = isArguments

      /***/
    },

    /***/ 44869: /***/ (module) => {
      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray

      module.exports = isArray

      /***/
    },

    /***/ 18017: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var isFunction = __nccwpck_require__(17799),
        isLength = __nccwpck_require__(64530)

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value)
      }

      module.exports = isArrayLike

      /***/
    },

    /***/ 87996: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var isArrayLike = __nccwpck_require__(18017),
        isObjectLike = __nccwpck_require__(85926)

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value)
      }

      module.exports = isArrayLikeObject

      /***/
    },

    /***/ 74190: /***/ (module, exports, __nccwpck_require__) => {
      /* module decorator */ module = __nccwpck_require__.nmd(module)
      var root = __nccwpck_require__(89882),
        stubFalse = __nccwpck_require__(67744)

      /** Detect free variable `exports`. */
      var freeExports = true && exports && !exports.nodeType && exports

      /** Detect free variable `module`. */
      var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports

      /** Built-in value references. */
      var Buffer = moduleExports ? root.Buffer : undefined

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined

      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse

      module.exports = isBuffer

      /***/
    },

    /***/ 17799: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseGetTag = __nccwpck_require__(97497),
        isObject = __nccwpck_require__(33334)

      /** `Object#toString` result references. */
      var asyncTag = "[object AsyncFunction]",
        funcTag = "[object Function]",
        genTag = "[object GeneratorFunction]",
        proxyTag = "[object Proxy]"

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value)
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag
      }

      module.exports = isFunction

      /***/
    },

    /***/ 64530: /***/ (module) => {
      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER = 9007199254740991

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER
      }

      module.exports = isLength

      /***/
    },

    /***/ 33334: /***/ (module) => {
      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value
        return value != null && (type == "object" || type == "function")
      }

      module.exports = isObject

      /***/
    },

    /***/ 85926: /***/ (module) => {
      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == "object"
      }

      module.exports = isObjectLike

      /***/
    },

    /***/ 46169: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseGetTag = __nccwpck_require__(97497),
        getPrototype = __nccwpck_require__(86271),
        isObjectLike = __nccwpck_require__(85926)

      /** `Object#toString` result references. */
      var objectTag = "[object Object]"

      /** Used for built-in method references. */
      var funcProto = Function.prototype,
        objectProto = Object.prototype

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object)

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false
        }
        var proto = getPrototype(value)
        if (proto === null) {
          return true
        }
        var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor
        return (
          typeof Ctor == "function" &&
          Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString
        )
      }

      module.exports = isPlainObject

      /***/
    },

    /***/ 66403: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseGetTag = __nccwpck_require__(97497),
        isObjectLike = __nccwpck_require__(85926)

      /** `Object#toString` result references. */
      var symbolTag = "[object Symbol]"

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == "symbol" || (isObjectLike(value) && baseGetTag(value) == symbolTag)
      }

      module.exports = isSymbol

      /***/
    },

    /***/ 2496: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseIsTypedArray = __nccwpck_require__(11528),
        baseUnary = __nccwpck_require__(59258),
        nodeUtil = __nccwpck_require__(34643)

      /* Node.js helper references. */
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray

      module.exports = isTypedArray

      /***/
    },

    /***/ 35852: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var createCompounder = __nccwpck_require__(53702)

      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? "-" : "") + word.toLowerCase()
      })

      module.exports = kebabCase

      /***/
    },

    /***/ 69109: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var arrayLikeKeys = __nccwpck_require__(32237),
        baseKeysIn = __nccwpck_require__(90297),
        isArrayLike = __nccwpck_require__(18017)

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object)
      }

      module.exports = keysIn

      /***/
    },

    /***/ 90250: /***/ function (module, exports, __nccwpck_require__) {
      /* module decorator */ module = __nccwpck_require__.nmd(module)
      /**
       * @license
       * Lodash <https://lodash.com/>
       * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
       * Released under MIT license <https://lodash.com/license>
       * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
       * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
       */
      ;(function () {
        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
        var undefined

        /** Used as the semantic version number. */
        var VERSION = "4.17.21"

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200

        /** Error message constants. */
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
          FUNC_ERROR_TEXT = "Expected a function",
          INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`"

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = "__lodash_hash_undefined__"

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500

        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = "__lodash_placeholder__"

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512

        /** Used as default options for `_.truncate`. */
        var DEFAULT_TRUNC_LENGTH = 30,
          DEFAULT_TRUNC_OMISSION = "..."

        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
          HOT_SPAN = 16

        /** Used to indicate the type of lazy iteratees. */
        var LAZY_FILTER_FLAG = 1,
          LAZY_MAP_FLAG = 2,
          LAZY_WHILE_FLAG = 3

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
          MAX_SAFE_INTEGER = 9007199254740991,
          MAX_INTEGER = 1.7976931348623157e308,
          NAN = 0 / 0

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1

        /** Used to associate wrap methods with their bit flags. */
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ]

        /** `Object#toString` result references. */
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          asyncTag = "[object AsyncFunction]",
          boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          domExcTag = "[object DOMException]",
          errorTag = "[object Error]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          nullTag = "[object Null]",
          objectTag = "[object Object]",
          promiseTag = "[object Promise]",
          proxyTag = "[object Proxy]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]",
          undefinedTag = "[object Undefined]",
          weakMapTag = "[object WeakMap]",
          weakSetTag = "[object WeakSet]"

        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]"

        /** Used to match empty string literals in compiled template source. */
        var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g

        /** Used to match HTML entities and HTML characters. */
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
          reUnescapedHtml = /[&<>"']/g,
          reHasEscapedHtml = RegExp(reEscapedHtml.source),
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source)

        /** Used to match template delimiters. */
        var reEscape = /<%-([\s\S]+?)%>/g,
          reEvaluate = /<%([\s\S]+?)%>/g,
          reInterpolate = /<%=([\s\S]+?)%>/g

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/,
          rePropName =
            /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source)

        /** Used to match leading whitespace. */
        var reTrimStart = /^\s+/

        /** Used to match a single whitespace character. */
        var reWhitespace = /\s/

        /** Used to match wrap detail comments. */
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /

        /** Used to match words composed of alphanumeric characters. */
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g

        /**
         * Used to validate the `validate` option in `_.template` variable.
         *
         * Forbids characters which could potentially change the meaning of the function argument definition:
         * - "()," (modification of function parameters)
         * - "=" (default value)
         * - "[]{}" (destructuring of function parameters)
         * - "/" (beginning of a comment)
         * - whitespace
         */
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g

        /**
         * Used to match
         * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
         */
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g

        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/

        /** Used to match Latin Unicode letters (excluding mathematical operators). */
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g

        /** Used to ensure capturing order of template delimiters. */
        var reNoMatch = /($^)/

        /** Used to match unescaped characters in compiled string literals. */
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g

        /** Used to compose unicode character classes. */
        var rsAstralRange = "\\ud800-\\udfff",
          rsComboMarksRange = "\\u0300-\\u036f",
          reComboHalfMarksRange = "\\ufe20-\\ufe2f",
          rsComboSymbolsRange = "\\u20d0-\\u20ff",
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsDingbatRange = "\\u2700-\\u27bf",
          rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff",
          rsMathOpRange = "\\xac\\xb1\\xd7\\xf7",
          rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
          rsPunctuationRange = "\\u2000-\\u206f",
          rsSpaceRange =
            " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
          rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde",
          rsVarRange = "\\ufe0e\\ufe0f",
          rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange

        /** Used to compose unicode capture groups. */
        var rsApos = "['\u2019]",
          rsAstral = "[" + rsAstralRange + "]",
          rsBreak = "[" + rsBreakRange + "]",
          rsCombo = "[" + rsComboRange + "]",
          rsDigits = "\\d+",
          rsDingbat = "[" + rsDingbatRange + "]",
          rsLower = "[" + rsLowerRange + "]",
          rsMisc =
            "[^" +
            rsAstralRange +
            rsBreakRange +
            rsDigits +
            rsDingbatRange +
            rsLowerRange +
            rsUpperRange +
            "]",
          rsFitz = "\\ud83c[\\udffb-\\udfff]",
          rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
          rsNonAstral = "[^" + rsAstralRange + "]",
          rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
          rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
          rsUpper = "[" + rsUpperRange + "]",
          rsZWJ = "\\u200d"

        /** Used to compose unicode regexes. */
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")",
          rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")",
          rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?",
          rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?",
          reOptMod = rsModifier + "?",
          rsOptVar = "[" + rsVarRange + "]?",
          rsOptJoin =
            "(?:" +
            rsZWJ +
            "(?:" +
            [rsNonAstral, rsRegional, rsSurrPair].join("|") +
            ")" +
            rsOptVar +
            reOptMod +
            ")*",
          rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
          rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq,
          rsSymbol =
            "(?:" +
            [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") +
            ")"

        /** Used to match apostrophes. */
        var reApos = RegExp(rsApos, "g")

        /**
         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
         */
        var reComboMark = RegExp(rsCombo, "g")

        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g")

        /** Used to match complex or compound words. */
        var reUnicodeWord = RegExp(
          [
            rsUpper +
              "?" +
              rsLower +
              "+" +
              rsOptContrLower +
              "(?=" +
              [rsBreak, rsUpper, "$"].join("|") +
              ")",
            rsMiscUpper +
              "+" +
              rsOptContrUpper +
              "(?=" +
              [rsBreak, rsUpper + rsMiscLower, "$"].join("|") +
              ")",
            rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
            rsUpper + "+" + rsOptContrUpper,
            rsOrdUpper,
            rsOrdLower,
            rsDigits,
            rsEmoji
          ].join("|"),
          "g"
        )

        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]")

        /** Used to detect strings that need a more robust regexp to match words. */
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/

        /** Used to assign default `context` object properties. */
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ]

        /** Used to make template sourceURLs easier to identify. */
        var templateCounter = -1

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {}
        typedArrayTags[float32Tag] =
          typedArrayTags[float64Tag] =
          typedArrayTags[int8Tag] =
          typedArrayTags[int16Tag] =
          typedArrayTags[int32Tag] =
          typedArrayTags[uint8Tag] =
          typedArrayTags[uint8ClampedTag] =
          typedArrayTags[uint16Tag] =
          typedArrayTags[uint32Tag] =
            true
        typedArrayTags[argsTag] =
          typedArrayTags[arrayTag] =
          typedArrayTags[arrayBufferTag] =
          typedArrayTags[boolTag] =
          typedArrayTags[dataViewTag] =
          typedArrayTags[dateTag] =
          typedArrayTags[errorTag] =
          typedArrayTags[funcTag] =
          typedArrayTags[mapTag] =
          typedArrayTags[numberTag] =
          typedArrayTags[objectTag] =
          typedArrayTags[regexpTag] =
          typedArrayTags[setTag] =
          typedArrayTags[stringTag] =
          typedArrayTags[weakMapTag] =
            false

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {}
        cloneableTags[argsTag] =
          cloneableTags[arrayTag] =
          cloneableTags[arrayBufferTag] =
          cloneableTags[dataViewTag] =
          cloneableTags[boolTag] =
          cloneableTags[dateTag] =
          cloneableTags[float32Tag] =
          cloneableTags[float64Tag] =
          cloneableTags[int8Tag] =
          cloneableTags[int16Tag] =
          cloneableTags[int32Tag] =
          cloneableTags[mapTag] =
          cloneableTags[numberTag] =
          cloneableTags[objectTag] =
          cloneableTags[regexpTag] =
          cloneableTags[setTag] =
          cloneableTags[stringTag] =
          cloneableTags[symbolTag] =
          cloneableTags[uint8Tag] =
          cloneableTags[uint8ClampedTag] =
          cloneableTags[uint16Tag] =
          cloneableTags[uint32Tag] =
            true
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false

        /** Used to map Latin Unicode letters to basic Latin letters. */
        var deburredLetters = {
          // Latin-1 Supplement block.
          "\xc0": "A",
          "\xc1": "A",
          "\xc2": "A",
          "\xc3": "A",
          "\xc4": "A",
          "\xc5": "A",
          "\xe0": "a",
          "\xe1": "a",
          "\xe2": "a",
          "\xe3": "a",
          "\xe4": "a",
          "\xe5": "a",
          "\xc7": "C",
          "\xe7": "c",
          "\xd0": "D",
          "\xf0": "d",
          "\xc8": "E",
          "\xc9": "E",
          "\xca": "E",
          "\xcb": "E",
          "\xe8": "e",
          "\xe9": "e",
          "\xea": "e",
          "\xeb": "e",
          "\xcc": "I",
          "\xcd": "I",
          "\xce": "I",
          "\xcf": "I",
          "\xec": "i",
          "\xed": "i",
          "\xee": "i",
          "\xef": "i",
          "\xd1": "N",
          "\xf1": "n",
          "\xd2": "O",
          "\xd3": "O",
          "\xd4": "O",
          "\xd5": "O",
          "\xd6": "O",
          "\xd8": "O",
          "\xf2": "o",
          "\xf3": "o",
          "\xf4": "o",
          "\xf5": "o",
          "\xf6": "o",
          "\xf8": "o",
          "\xd9": "U",
          "\xda": "U",
          "\xdb": "U",
          "\xdc": "U",
          "\xf9": "u",
          "\xfa": "u",
          "\xfb": "u",
          "\xfc": "u",
          "\xdd": "Y",
          "\xfd": "y",
          "\xff": "y",
          "\xc6": "Ae",
          "\xe6": "ae",
          "\xde": "Th",
          "\xfe": "th",
          "\xdf": "ss",
          // Latin Extended-A block.
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010a": "C",
          "\u010c": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010b": "c",
          "\u010d": "c",
          "\u010e": "D",
          "\u0110": "D",
          "\u010f": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011a": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011b": "e",
          "\u011c": "G",
          "\u011e": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011d": "g",
          "\u011f": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012a": "I",
          "\u012c": "I",
          "\u012e": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012b": "i",
          "\u012d": "i",
          "\u012f": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013b": "L",
          "\u013d": "L",
          "\u013f": "L",
          "\u0141": "L",
          "\u013a": "l",
          "\u013c": "l",
          "\u013e": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014a": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014b": "n",
          "\u014c": "O",
          "\u014e": "O",
          "\u0150": "O",
          "\u014d": "o",
          "\u014f": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015a": "S",
          "\u015c": "S",
          "\u015e": "S",
          "\u0160": "S",
          "\u015b": "s",
          "\u015d": "s",
          "\u015f": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016a": "U",
          "\u016c": "U",
          "\u016e": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016b": "u",
          "\u016d": "u",
          "\u016f": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017b": "Z",
          "\u017d": "Z",
          "\u017a": "z",
          "\u017c": "z",
          "\u017e": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017f": "s"
        }

        /** Used to map characters to HTML entities. */
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        }

        /** Used to map HTML entities to characters. */
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        }

        /** Used to escape characters for inclusion in compiled string literals. */
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        }

        /** Built-in method references without a dependency on `root`. */
        var freeParseFloat = parseFloat,
          freeParseInt = parseInt

        /** Detect free variable `global` from Node.js. */
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global

        /** Detect free variable `self`. */
        var freeSelf = typeof self == "object" && self && self.Object === Object && self

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function("return this")()

        /** Detect free variable `exports`. */
        var freeExports = true && exports && !exports.nodeType && exports

        /** Detect free variable `module`. */
        var freeModule = freeExports && "object" == "object" && module && !module.nodeType && module

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function () {
          try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require("util").types

            if (types) {
              return types
            }

            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding("util")
          } catch (e) {}
        })()

        /* Node.js helper references. */
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
          nodeIsDate = nodeUtil && nodeUtil.isDate,
          nodeIsMap = nodeUtil && nodeUtil.isMap,
          nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
          nodeIsSet = nodeUtil && nodeUtil.isSet,
          nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray

        /*--------------------------------------------------------------------------*/

        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg)
            case 1:
              return func.call(thisArg, args[0])
            case 2:
              return func.call(thisArg, args[0], args[1])
            case 3:
              return func.call(thisArg, args[0], args[1], args[2])
          }
          return func.apply(thisArg, args)
        }

        /**
         * A specialized version of `baseAggregator` for arrays.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            var value = array[index]
            setter(accumulator, value, iteratee(value), array)
          }
          return accumulator
        }

        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break
            }
          }
          return array
        }

        /**
         * A specialized version of `_.forEachRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length

          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break
            }
          }
          return array
        }

        /**
         * A specialized version of `_.every` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */
        function arrayEvery(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false
            }
          }
          return true
        }

        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = []

          while (++index < length) {
            var value = array[index]
            if (predicate(value, index, array)) {
              result[resIndex++] = value
            }
          }
          return result
        }

        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length
          return !!length && baseIndexOf(array, value, 0) > -1
        }

        /**
         * This function is like `arrayIncludes` except that it accepts a comparator.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludesWith(array, value, comparator) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (comparator(value, array[index])) {
              return true
            }
          }
          return false
        }

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length)

          while (++index < length) {
            result[index] = iteratee(array[index], index, array)
          }
          return result
        }

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length

          while (++index < length) {
            array[offset + index] = values[index]
          }
          return array
        }

        /**
         * A specialized version of `_.reduce` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the first element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1,
            length = array == null ? 0 : array.length

          if (initAccum && length) {
            accumulator = array[++index]
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array)
          }
          return accumulator
        }

        /**
         * A specialized version of `_.reduceRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the last element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length
          if (initAccum && length) {
            accumulator = array[--length]
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array)
          }
          return accumulator
        }

        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true
            }
          }
          return false
        }

        /**
         * Gets the size of an ASCII `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        var asciiSize = baseProperty("length")

        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function asciiToArray(string) {
          return string.split("")
        }

        /**
         * Splits an ASCII `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function asciiWords(string) {
          return string.match(reAsciiWord) || []
        }

        /**
         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
         * without support for iteratee shorthands, which iterates over `collection`
         * using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */
        function baseFindKey(collection, predicate, eachFunc) {
          var result
          eachFunc(collection, function (value, key, collection) {
            if (predicate(value, key, collection)) {
              result = key
              return false
            }
          })
          return result
        }

        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1)

          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index
            }
          }
          return -1
        }

        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOf(array, value, fromIndex) {
          return value === value
            ? strictIndexOf(array, value, fromIndex)
            : baseFindIndex(array, baseIsNaN, fromIndex)
        }

        /**
         * This function is like `baseIndexOf` except that it accepts a comparator.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1,
            length = array.length

          while (++index < length) {
            if (comparator(array[index], value)) {
              return index
            }
          }
          return -1
        }

        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */
        function baseIsNaN(value) {
          return value !== value
        }

        /**
         * The base implementation of `_.mean` and `_.meanBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the mean.
         */
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length
          return length ? baseSum(array, iteratee) / length : NAN
        }

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
          return function (object) {
            return object == null ? undefined : object[key]
          }
        }

        /**
         * The base implementation of `_.propertyOf` without support for deep paths.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyOf(object) {
          return function (key) {
            return object == null ? undefined : object[key]
          }
        }

        /**
         * The base implementation of `_.reduce` and `_.reduceRight`, without support
         * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} accumulator The initial value.
         * @param {boolean} initAccum Specify using the first or last element of
         *  `collection` as the initial value.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the accumulated value.
         */
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum
              ? ((initAccum = false), value)
              : iteratee(accumulator, value, index, collection)
          })
          return accumulator
        }

        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define the
         * sort order of `array` and replaces criteria objects with their corresponding
         * values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */
        function baseSortBy(array, comparer) {
          var length = array.length

          array.sort(comparer)
          while (length--) {
            array[length] = array[length].value
          }
          return array
        }

        /**
         * The base implementation of `_.sum` and `_.sumBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function baseSum(array, iteratee) {
          var result,
            index = -1,
            length = array.length

          while (++index < length) {
            var current = iteratee(array[index])
            if (current !== undefined) {
              result = result === undefined ? current : result + current
            }
          }
          return result
        }

        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
          var index = -1,
            result = Array(n)

          while (++index < n) {
            result[index] = iteratee(index)
          }
          return result
        }

        /**
         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
         * of key-value pairs for `object` corresponding to the property names of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the key-value pairs.
         */
        function baseToPairs(object, props) {
          return arrayMap(props, function (key) {
            return [key, object[key]]
          })
        }

        /**
         * The base implementation of `_.trim`.
         *
         * @private
         * @param {string} string The string to trim.
         * @returns {string} Returns the trimmed string.
         */
        function baseTrim(string) {
          return string
            ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "")
            : string
        }

        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
          return function (value) {
            return func(value)
          }
        }

        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
          return arrayMap(props, function (key) {
            return object[key]
          })
        }

        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
          return cache.has(key)
        }

        /**
         * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the first unmatched string symbol.
         */
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1,
            length = strSymbols.length

          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
          return index
        }

        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the last unmatched string symbol.
         */
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length

          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
          return index
        }

        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */
        function countHolders(array, placeholder) {
          var length = array.length,
            result = 0

          while (length--) {
            if (array[length] === placeholder) {
              ++result
            }
          }
          return result
        }

        /**
         * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
         * letters to basic Latin letters.
         *
         * @private
         * @param {string} letter The matched letter to deburr.
         * @returns {string} Returns the deburred letter.
         */
        var deburrLetter = basePropertyOf(deburredLetters)

        /**
         * Used by `_.escape` to convert characters to HTML entities.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        var escapeHtmlChar = basePropertyOf(htmlEscapes)

        /**
         * Used by `_.template` to escape characters for inclusion in compiled string literals.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr]
        }

        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
          return object == null ? undefined : object[key]
        }

        /**
         * Checks if `string` contains Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a symbol is found, else `false`.
         */
        function hasUnicode(string) {
          return reHasUnicode.test(string)
        }

        /**
         * Checks if `string` contains a word composed of Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a word is found, else `false`.
         */
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string)
        }

        /**
         * Converts `iterator` to an array.
         *
         * @private
         * @param {Object} iterator The iterator to convert.
         * @returns {Array} Returns the converted array.
         */
        function iteratorToArray(iterator) {
          var data,
            result = []

          while (!(data = iterator.next()).done) {
            result.push(data.value)
          }
          return result
        }

        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
          var index = -1,
            result = Array(map.size)

          map.forEach(function (value, key) {
            result[++index] = [key, value]
          })
          return result
        }

        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg))
          }
        }

        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */
        function replaceHolders(array, placeholder) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result = []

          while (++index < length) {
            var value = array[index]
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER
              result[resIndex++] = index
            }
          }
          return result
        }

        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
          var index = -1,
            result = Array(set.size)

          set.forEach(function (value) {
            result[++index] = value
          })
          return result
        }

        /**
         * Converts `set` to its value-value pairs.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the value-value pairs.
         */
        function setToPairs(set) {
          var index = -1,
            result = Array(set.size)

          set.forEach(function (value) {
            result[++index] = [value, value]
          })
          return result
        }

        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
            length = array.length

          while (++index < length) {
            if (array[index] === value) {
              return index
            }
          }
          return -1
        }

        /**
         * A specialized version of `_.lastIndexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1
          while (index--) {
            if (array[index] === value) {
              return index
            }
          }
          return index
        }

        /**
         * Gets the number of symbols in `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the string size.
         */
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string)
        }

        /**
         * Converts `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string)
        }

        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
         * character of `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the index of the last non-whitespace character.
         */
        function trimmedEndIndex(string) {
          var index = string.length

          while (index-- && reWhitespace.test(string.charAt(index))) {}
          return index
        }

        /**
         * Used by `_.unescape` to convert HTML entities to characters.
         *
         * @private
         * @param {string} chr The matched character to unescape.
         * @returns {string} Returns the unescaped character.
         */
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes)

        /**
         * Gets the size of a Unicode `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        function unicodeSize(string) {
          var result = (reUnicode.lastIndex = 0)
          while (reUnicode.test(string)) {
            ++result
          }
          return result
        }

        /**
         * Converts a Unicode `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function unicodeToArray(string) {
          return string.match(reUnicode) || []
        }

        /**
         * Splits a Unicode `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || []
        }

        /*--------------------------------------------------------------------------*/

        /**
         * Create a new pristine `lodash` function using the `context` object.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Util
         * @param {Object} [context=root] The context object.
         * @returns {Function} Returns a new `lodash` function.
         * @example
         *
         * _.mixin({ 'foo': _.constant('foo') });
         *
         * var lodash = _.runInContext();
         * lodash.mixin({ 'bar': lodash.constant('bar') });
         *
         * _.isFunction(_.foo);
         * // => true
         * _.isFunction(_.bar);
         * // => false
         *
         * lodash.isFunction(lodash.foo);
         * // => false
         * lodash.isFunction(lodash.bar);
         * // => true
         *
         * // Create a suped-up `defer` in Node.js.
         * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
         */
        var runInContext = function runInContext(context) {
          context =
            context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps))

          /** Built-in constructor references. */
          var Array = context.Array,
            Date = context.Date,
            Error = context.Error,
            Function = context.Function,
            Math = context.Math,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError

          /** Used for built-in method references. */
          var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype

          /** Used to detect overreaching core-js shims. */
          var coreJsData = context["__core-js_shared__"]

          /** Used to resolve the decompiled source of functions. */
          var funcToString = funcProto.toString

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty

          /** Used to generate unique IDs. */
          var idCounter = 0

          /** Used to detect methods masquerading as native. */
          var maskSrcKey = (function () {
            var uid = /[^.]+$/.exec(
              (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""
            )
            return uid ? "Symbol(src)_1." + uid : ""
          })()

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var nativeObjectToString = objectProto.toString

          /** Used to infer the `Object` constructor. */
          var objectCtorString = funcToString.call(Object)

          /** Used to restore the original `_` reference in `_.noConflict`. */
          var oldDash = root._

          /** Used to detect if a method is native. */
          var reIsNative = RegExp(
            "^" +
              funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, "\\$&")
                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
              "$"
          )

          /** Built-in value references. */
          var Buffer = moduleExports ? context.Buffer : undefined,
            Symbol = context.Symbol,
            Uint8Array = context.Uint8Array,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice,
            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
            symIterator = Symbol ? Symbol.iterator : undefined,
            symToStringTag = Symbol ? Symbol.toStringTag : undefined

          var defineProperty = (function () {
            try {
              var func = getNative(Object, "defineProperty")
              func({}, "", {})
              return func
            } catch (e) {}
          })()

          /** Mocked built-ins. */
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
            ctxNow = Date && Date.now !== root.Date.now && Date.now,
            ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeCeil = Math.ceil,
            nativeFloor = Math.floor,
            nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
            nativeIsFinite = context.isFinite,
            nativeJoin = arrayProto.join,
            nativeKeys = overArg(Object.keys, Object),
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeNow = Date.now,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random,
            nativeReverse = arrayProto.reverse

          /* Built-in method references that are verified to be native. */
          var DataView = getNative(context, "DataView"),
            Map = getNative(context, "Map"),
            Promise = getNative(context, "Promise"),
            Set = getNative(context, "Set"),
            WeakMap = getNative(context, "WeakMap"),
            nativeCreate = getNative(Object, "create")

          /** Used to store function metadata. */
          var metaMap = WeakMap && new WeakMap()

          /** Used to lookup unminified function names. */
          var realNames = {}

          /** Used to detect maps, sets, and weakmaps. */
          var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap)

          /** Used to convert symbols to primitives and strings. */
          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined

          /*------------------------------------------------------------------------*/

          /**
           * Creates a `lodash` object which wraps `value` to enable implicit method
           * chain sequences. Methods that operate on and return arrays, collections,
           * and functions can be chained together. Methods that retrieve a single value
           * or may return a primitive value will automatically end the chain sequence
           * and return the unwrapped value. Otherwise, the value must be unwrapped
           * with `_#value`.
           *
           * Explicit chain sequences, which must be unwrapped with `_#value`, may be
           * enabled using `_.chain`.
           *
           * The execution of chained methods is lazy, that is, it's deferred until
           * `_#value` is implicitly or explicitly called.
           *
           * Lazy evaluation allows several methods to support shortcut fusion.
           * Shortcut fusion is an optimization to merge iteratee calls; this avoids
           * the creation of intermediate arrays and can greatly reduce the number of
           * iteratee executions. Sections of a chain sequence qualify for shortcut
           * fusion if the section is applied to an array and iteratees accept only
           * one argument. The heuristic for whether a section qualifies for shortcut
           * fusion is subject to change.
           *
           * Chaining is supported in custom builds as long as the `_#value` method is
           * directly or indirectly included in the build.
           *
           * In addition to lodash methods, wrappers have `Array` and `String` methods.
           *
           * The wrapper `Array` methods are:
           * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
           *
           * The wrapper `String` methods are:
           * `replace` and `split`
           *
           * The wrapper methods that support shortcut fusion are:
           * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
           * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
           * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
           *
           * The chainable wrapper methods are:
           * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
           * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
           * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
           * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
           * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
           * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
           * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
           * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
           * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
           * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
           * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
           * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
           * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
           * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
           * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
           * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
           * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
           * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
           * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
           * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
           * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
           * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
           * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
           * `zipObject`, `zipObjectDeep`, and `zipWith`
           *
           * The wrapper methods that are **not** chainable by default are:
           * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
           * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
           * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
           * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
           * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
           * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
           * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
           * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
           * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
           * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
           * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
           * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
           * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
           * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
           * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
           * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
           * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
           * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
           * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
           * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
           * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
           * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
           * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
           * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
           * `upperFirst`, `value`, and `words`
           *
           * @name _
           * @constructor
           * @category Seq
           * @param {*} value The value to wrap in a `lodash` instance.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var wrapped = _([1, 2, 3]);
           *
           * // Returns an unwrapped value.
           * wrapped.reduce(_.add);
           * // => 6
           *
           * // Returns a wrapped value.
           * var squares = wrapped.map(square);
           *
           * _.isArray(squares);
           * // => false
           *
           * _.isArray(squares.value());
           * // => true
           */
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value
              }
              if (hasOwnProperty.call(value, "__wrapped__")) {
                return wrapperClone(value)
              }
            }
            return new LodashWrapper(value)
          }

          /**
           * The base implementation of `_.create` without support for assigning
           * properties to the created object.
           *
           * @private
           * @param {Object} proto The object to inherit from.
           * @returns {Object} Returns the new object.
           */
          var baseCreate = (function () {
            function object() {}
            return function (proto) {
              if (!isObject(proto)) {
                return {}
              }
              if (objectCreate) {
                return objectCreate(proto)
              }
              object.prototype = proto
              var result = new object()
              object.prototype = undefined
              return result
            }
          })()

          /**
           * The function whose prototype chain sequence wrappers inherit from.
           *
           * @private
           */
          function baseLodash() {
            // No operation performed.
          }

          /**
           * The base constructor for creating `lodash` wrapper objects.
           *
           * @private
           * @param {*} value The value to wrap.
           * @param {boolean} [chainAll] Enable explicit method chain sequences.
           */
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value
            this.__actions__ = []
            this.__chain__ = !!chainAll
            this.__index__ = 0
            this.__values__ = undefined
          }

          /**
           * By default, the template delimiters used by lodash are like those in
           * embedded Ruby (ERB) as well as ES2015 template strings. Change the
           * following template settings to use alternative delimiters.
           *
           * @static
           * @memberOf _
           * @type {Object}
           */
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            escape: reEscape,

            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            evaluate: reEvaluate,

            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            interpolate: reInterpolate,

            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            variable: "",

            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            imports: {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              _: lodash
            }
          }

          // Ensure wrappers are instances of `baseLodash`.
          lodash.prototype = baseLodash.prototype
          lodash.prototype.constructor = lodash

          LodashWrapper.prototype = baseCreate(baseLodash.prototype)
          LodashWrapper.prototype.constructor = LodashWrapper

          /*------------------------------------------------------------------------*/

          /**
           * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
           *
           * @private
           * @constructor
           * @param {*} value The value to wrap.
           */
          function LazyWrapper(value) {
            this.__wrapped__ = value
            this.__actions__ = []
            this.__dir__ = 1
            this.__filtered__ = false
            this.__iteratees__ = []
            this.__takeCount__ = MAX_ARRAY_LENGTH
            this.__views__ = []
          }

          /**
           * Creates a clone of the lazy wrapper object.
           *
           * @private
           * @name clone
           * @memberOf LazyWrapper
           * @returns {Object} Returns the cloned `LazyWrapper` object.
           */
          function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__)
            result.__actions__ = copyArray(this.__actions__)
            result.__dir__ = this.__dir__
            result.__filtered__ = this.__filtered__
            result.__iteratees__ = copyArray(this.__iteratees__)
            result.__takeCount__ = this.__takeCount__
            result.__views__ = copyArray(this.__views__)
            return result
          }

          /**
           * Reverses the direction of lazy iteration.
           *
           * @private
           * @name reverse
           * @memberOf LazyWrapper
           * @returns {Object} Returns the new reversed `LazyWrapper` object.
           */
          function lazyReverse() {
            if (this.__filtered__) {
              var result = new LazyWrapper(this)
              result.__dir__ = -1
              result.__filtered__ = true
            } else {
              result = this.clone()
              result.__dir__ *= -1
            }
            return result
          }

          /**
           * Extracts the unwrapped value from its lazy wrapper.
           *
           * @private
           * @name value
           * @memberOf LazyWrapper
           * @returns {*} Returns the unwrapped value.
           */
          function lazyValue() {
            var array = this.__wrapped__.value(),
              dir = this.__dir__,
              isArr = isArray(array),
              isRight = dir < 0,
              arrLength = isArr ? array.length : 0,
              view = getView(0, arrLength, this.__views__),
              start = view.start,
              end = view.end,
              length = end - start,
              index = isRight ? end : start - 1,
              iteratees = this.__iteratees__,
              iterLength = iteratees.length,
              resIndex = 0,
              takeCount = nativeMin(length, this.__takeCount__)

            if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
              return baseWrapperValue(array, this.__actions__)
            }
            var result = []

            outer: while (length-- && resIndex < takeCount) {
              index += dir

              var iterIndex = -1,
                value = array[index]

              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value)

                if (type == LAZY_MAP_FLAG) {
                  value = computed
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer
                  } else {
                    break outer
                  }
                }
              }
              result[resIndex++] = value
            }
            return result
          }

          // Ensure `LazyWrapper` is an instance of `baseLodash`.
          LazyWrapper.prototype = baseCreate(baseLodash.prototype)
          LazyWrapper.prototype.constructor = LazyWrapper

          /*------------------------------------------------------------------------*/

          /**
           * Creates a hash object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Hash(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length

            this.clear()
            while (++index < length) {
              var entry = entries[index]
              this.set(entry[0], entry[1])
            }
          }

          /**
           * Removes all key-value entries from the hash.
           *
           * @private
           * @name clear
           * @memberOf Hash
           */
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {}
            this.size = 0
          }

          /**
           * Removes `key` and its value from the hash.
           *
           * @private
           * @name delete
           * @memberOf Hash
           * @param {Object} hash The hash to modify.
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key]
            this.size -= result ? 1 : 0
            return result
          }

          /**
           * Gets the hash value for `key`.
           *
           * @private
           * @name get
           * @memberOf Hash
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function hashGet(key) {
            var data = this.__data__
            if (nativeCreate) {
              var result = data[key]
              return result === HASH_UNDEFINED ? undefined : result
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined
          }

          /**
           * Checks if a hash value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Hash
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function hashHas(key) {
            var data = this.__data__
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key)
          }

          /**
           * Sets the hash `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Hash
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the hash instance.
           */
          function hashSet(key, value) {
            var data = this.__data__
            this.size += this.has(key) ? 0 : 1
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value
            return this
          }

          // Add methods to `Hash`.
          Hash.prototype.clear = hashClear
          Hash.prototype["delete"] = hashDelete
          Hash.prototype.get = hashGet
          Hash.prototype.has = hashHas
          Hash.prototype.set = hashSet

          /*------------------------------------------------------------------------*/

          /**
           * Creates an list cache object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function ListCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length

            this.clear()
            while (++index < length) {
              var entry = entries[index]
              this.set(entry[0], entry[1])
            }
          }

          /**
           * Removes all key-value entries from the list cache.
           *
           * @private
           * @name clear
           * @memberOf ListCache
           */
          function listCacheClear() {
            this.__data__ = []
            this.size = 0
          }

          /**
           * Removes `key` and its value from the list cache.
           *
           * @private
           * @name delete
           * @memberOf ListCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function listCacheDelete(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key)

            if (index < 0) {
              return false
            }
            var lastIndex = data.length - 1
            if (index == lastIndex) {
              data.pop()
            } else {
              splice.call(data, index, 1)
            }
            --this.size
            return true
          }

          /**
           * Gets the list cache value for `key`.
           *
           * @private
           * @name get
           * @memberOf ListCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function listCacheGet(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key)

            return index < 0 ? undefined : data[index][1]
          }

          /**
           * Checks if a list cache value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf ListCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1
          }

          /**
           * Sets the list cache `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf ListCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the list cache instance.
           */
          function listCacheSet(key, value) {
            var data = this.__data__,
              index = assocIndexOf(data, key)

            if (index < 0) {
              ++this.size
              data.push([key, value])
            } else {
              data[index][1] = value
            }
            return this
          }

          // Add methods to `ListCache`.
          ListCache.prototype.clear = listCacheClear
          ListCache.prototype["delete"] = listCacheDelete
          ListCache.prototype.get = listCacheGet
          ListCache.prototype.has = listCacheHas
          ListCache.prototype.set = listCacheSet

          /*------------------------------------------------------------------------*/

          /**
           * Creates a map cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function MapCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length

            this.clear()
            while (++index < length) {
              var entry = entries[index]
              this.set(entry[0], entry[1])
            }
          }

          /**
           * Removes all key-value entries from the map.
           *
           * @private
           * @name clear
           * @memberOf MapCache
           */
          function mapCacheClear() {
            this.size = 0
            this.__data__ = {
              hash: new Hash(),
              map: new (Map || ListCache)(),
              string: new Hash()
            }
          }

          /**
           * Removes `key` and its value from the map.
           *
           * @private
           * @name delete
           * @memberOf MapCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function mapCacheDelete(key) {
            var result = getMapData(this, key)["delete"](key)
            this.size -= result ? 1 : 0
            return result
          }

          /**
           * Gets the map value for `key`.
           *
           * @private
           * @name get
           * @memberOf MapCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function mapCacheGet(key) {
            return getMapData(this, key).get(key)
          }

          /**
           * Checks if a map value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf MapCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function mapCacheHas(key) {
            return getMapData(this, key).has(key)
          }

          /**
           * Sets the map `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf MapCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the map cache instance.
           */
          function mapCacheSet(key, value) {
            var data = getMapData(this, key),
              size = data.size

            data.set(key, value)
            this.size += data.size == size ? 0 : 1
            return this
          }

          // Add methods to `MapCache`.
          MapCache.prototype.clear = mapCacheClear
          MapCache.prototype["delete"] = mapCacheDelete
          MapCache.prototype.get = mapCacheGet
          MapCache.prototype.has = mapCacheHas
          MapCache.prototype.set = mapCacheSet

          /*------------------------------------------------------------------------*/

          /**
           *
           * Creates an array cache object to store unique values.
           *
           * @private
           * @constructor
           * @param {Array} [values] The values to cache.
           */
          function SetCache(values) {
            var index = -1,
              length = values == null ? 0 : values.length

            this.__data__ = new MapCache()
            while (++index < length) {
              this.add(values[index])
            }
          }

          /**
           * Adds `value` to the array cache.
           *
           * @private
           * @name add
           * @memberOf SetCache
           * @alias push
           * @param {*} value The value to cache.
           * @returns {Object} Returns the cache instance.
           */
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED)
            return this
          }

          /**
           * Checks if `value` is in the array cache.
           *
           * @private
           * @name has
           * @memberOf SetCache
           * @param {*} value The value to search for.
           * @returns {number} Returns `true` if `value` is found, else `false`.
           */
          function setCacheHas(value) {
            return this.__data__.has(value)
          }

          // Add methods to `SetCache`.
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd
          SetCache.prototype.has = setCacheHas

          /*------------------------------------------------------------------------*/

          /**
           * Creates a stack cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Stack(entries) {
            var data = (this.__data__ = new ListCache(entries))
            this.size = data.size
          }

          /**
           * Removes all key-value entries from the stack.
           *
           * @private
           * @name clear
           * @memberOf Stack
           */
          function stackClear() {
            this.__data__ = new ListCache()
            this.size = 0
          }

          /**
           * Removes `key` and its value from the stack.
           *
           * @private
           * @name delete
           * @memberOf Stack
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function stackDelete(key) {
            var data = this.__data__,
              result = data["delete"](key)

            this.size = data.size
            return result
          }

          /**
           * Gets the stack value for `key`.
           *
           * @private
           * @name get
           * @memberOf Stack
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function stackGet(key) {
            return this.__data__.get(key)
          }

          /**
           * Checks if a stack value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Stack
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function stackHas(key) {
            return this.__data__.has(key)
          }

          /**
           * Sets the stack `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Stack
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the stack cache instance.
           */
          function stackSet(key, value) {
            var data = this.__data__
            if (data instanceof ListCache) {
              var pairs = data.__data__
              if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value])
                this.size = ++data.size
                return this
              }
              data = this.__data__ = new MapCache(pairs)
            }
            data.set(key, value)
            this.size = data.size
            return this
          }

          // Add methods to `Stack`.
          Stack.prototype.clear = stackClear
          Stack.prototype["delete"] = stackDelete
          Stack.prototype.get = stackGet
          Stack.prototype.has = stackHas
          Stack.prototype.set = stackSet

          /*------------------------------------------------------------------------*/

          /**
           * Creates an array of the enumerable property names of the array-like `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @param {boolean} inherited Specify returning inherited property names.
           * @returns {Array} Returns the array of property names.
           */
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length

            for (var key in value) {
              if (
                (inherited || hasOwnProperty.call(value, key)) &&
                !(
                  skipIndexes &&
                  // Safari 9 has enumerable `arguments.length` in strict mode.
                  (key == "length" ||
                    // Node.js 0.10 has enumerable non-index properties on buffers.
                    (isBuff && (key == "offset" || key == "parent")) ||
                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                    (isType && (key == "buffer" || key == "byteLength" || key == "byteOffset")) ||
                    // Skip index properties.
                    isIndex(key, length))
                )
              ) {
                result.push(key)
              }
            }
            return result
          }

          /**
           * A specialized version of `_.sample` for arrays.
           *
           * @private
           * @param {Array} array The array to sample.
           * @returns {*} Returns the random element.
           */
          function arraySample(array) {
            var length = array.length
            return length ? array[baseRandom(0, length - 1)] : undefined
          }

          /**
           * A specialized version of `_.sampleSize` for arrays.
           *
           * @private
           * @param {Array} array The array to sample.
           * @param {number} n The number of elements to sample.
           * @returns {Array} Returns the random elements.
           */
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length))
          }

          /**
           * A specialized version of `_.shuffle` for arrays.
           *
           * @private
           * @param {Array} array The array to shuffle.
           * @returns {Array} Returns the new shuffled array.
           */
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array))
          }

          /**
           * This function is like `assignValue` except that it doesn't assign
           * `undefined` values.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function assignMergeValue(object, key, value) {
            if (
              (value !== undefined && !eq(object[key], value)) ||
              (value === undefined && !(key in object))
            ) {
              baseAssignValue(object, key, value)
            }
          }

          /**
           * Assigns `value` to `key` of `object` if the existing value is not equivalent
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function assignValue(object, key, value) {
            var objValue = object[key]
            if (
              !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined && !(key in object))
            ) {
              baseAssignValue(object, key, value)
            }
          }

          /**
           * Gets the index at which the `key` is found in `array` of key-value pairs.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} key The key to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function assocIndexOf(array, key) {
            var length = array.length
            while (length--) {
              if (eq(array[length][0], key)) {
                return length
              }
            }
            return -1
          }

          /**
           * Aggregates elements of `collection` on `accumulator` with keys transformed
           * by `iteratee` and values set by `setter`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */
          function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function (value, key, collection) {
              setter(accumulator, value, iteratee(value), collection)
            })
            return accumulator
          }

          /**
           * The base implementation of `_.assign` without support for multiple sources
           * or `customizer` functions.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @returns {Object} Returns `object`.
           */
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object)
          }

          /**
           * The base implementation of `_.assignIn` without support for multiple sources
           * or `customizer` functions.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @returns {Object} Returns `object`.
           */
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object)
          }

          /**
           * The base implementation of `assignValue` and `assignMergeValue` without
           * value checks.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true
              })
            } else {
              object[key] = value
            }
          }

          /**
           * The base implementation of `_.at` without support for individual paths.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {string[]} paths The property paths to pick.
           * @returns {Array} Returns the picked elements.
           */
          function baseAt(object, paths) {
            var index = -1,
              length = paths.length,
              result = Array(length),
              skip = object == null

            while (++index < length) {
              result[index] = skip ? undefined : get(object, paths[index])
            }
            return result
          }

          /**
           * The base implementation of `_.clamp` which doesn't coerce arguments.
           *
           * @private
           * @param {number} number The number to clamp.
           * @param {number} [lower] The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the clamped number.
           */
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined) {
                number = number <= upper ? number : upper
              }
              if (lower !== undefined) {
                number = number >= lower ? number : lower
              }
            }
            return number
          }

          /**
           * The base implementation of `_.clone` and `_.cloneDeep` which tracks
           * traversed objects.
           *
           * @private
           * @param {*} value The value to clone.
           * @param {boolean} bitmask The bitmask flags.
           *  1 - Deep clone
           *  2 - Flatten inherited properties
           *  4 - Clone symbols
           * @param {Function} [customizer] The function to customize cloning.
           * @param {string} [key] The key of `value`.
           * @param {Object} [object] The parent object of `value`.
           * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
           * @returns {*} Returns the cloned value.
           */
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG

            if (customizer) {
              result = object ? customizer(value, key, object, stack) : customizer(value)
            }
            if (result !== undefined) {
              return result
            }
            if (!isObject(value)) {
              return value
            }
            var isArr = isArray(value)
            if (isArr) {
              result = initCloneArray(value)
              if (!isDeep) {
                return copyArray(value, result)
              }
            } else {
              var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag

              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep)
              }
              if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                result = isFlat || isFunc ? {} : initCloneObject(value)
                if (!isDeep) {
                  return isFlat
                    ? copySymbolsIn(value, baseAssignIn(result, value))
                    : copySymbols(value, baseAssign(result, value))
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {}
                }
                result = initCloneByTag(value, tag, isDeep)
              }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack())
            var stacked = stack.get(value)
            if (stacked) {
              return stacked
            }
            stack.set(value, result)

            if (isSet(value)) {
              value.forEach(function (subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack))
              })
            } else if (isMap(value)) {
              value.forEach(function (subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack))
              })
            }

            var keysFunc = isFull ? (isFlat ? getAllKeysIn : getAllKeys) : isFlat ? keysIn : keys

            var props = isArr ? undefined : keysFunc(value)
            arrayEach(props || value, function (subValue, key) {
              if (props) {
                key = subValue
                subValue = value[key]
              }
              // Recursively populate clone (susceptible to call stack limits).
              assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack))
            })
            return result
          }

          /**
           * The base implementation of `_.conforms` which doesn't clone `source`.
           *
           * @private
           * @param {Object} source The object of property predicates to conform to.
           * @returns {Function} Returns the new spec function.
           */
          function baseConforms(source) {
            var props = keys(source)
            return function (object) {
              return baseConformsTo(object, source, props)
            }
          }

          /**
           * The base implementation of `_.conformsTo` which accepts `props` to check.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property predicates to conform to.
           * @returns {boolean} Returns `true` if `object` conforms, else `false`.
           */
          function baseConformsTo(object, source, props) {
            var length = props.length
            if (object == null) {
              return !length
            }
            object = Object(object)
            while (length--) {
              var key = props[length],
                predicate = source[key],
                value = object[key]

              if ((value === undefined && !(key in object)) || !predicate(value)) {
                return false
              }
            }
            return true
          }

          /**
           * The base implementation of `_.delay` and `_.defer` which accepts `args`
           * to provide to `func`.
           *
           * @private
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @param {Array} args The arguments to provide to `func`.
           * @returns {number|Object} Returns the timer id or timeout object.
           */
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            return setTimeout(function () {
              func.apply(undefined, args)
            }, wait)
          }

          /**
           * The base implementation of methods like `_.difference` without support
           * for excluding multiple arrays or iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Array} values The values to exclude.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           */
          function baseDifference(array, values, iteratee, comparator) {
            var index = -1,
              includes = arrayIncludes,
              isCommon = true,
              length = array.length,
              result = [],
              valuesLength = values.length

            if (!length) {
              return result
            }
            if (iteratee) {
              values = arrayMap(values, baseUnary(iteratee))
            }
            if (comparator) {
              includes = arrayIncludesWith
              isCommon = false
            } else if (values.length >= LARGE_ARRAY_SIZE) {
              includes = cacheHas
              isCommon = false
              values = new SetCache(values)
            }
            outer: while (++index < length) {
              var value = array[index],
                computed = iteratee == null ? value : iteratee(value)

              value = comparator || value !== 0 ? value : 0
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength
                while (valuesIndex--) {
                  if (values[valuesIndex] === computed) {
                    continue outer
                  }
                }
                result.push(value)
              } else if (!includes(values, computed, comparator)) {
                result.push(value)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.forEach` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           */
          var baseEach = createBaseEach(baseForOwn)

          /**
           * The base implementation of `_.forEachRight` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           */
          var baseEachRight = createBaseEach(baseForOwnRight, true)

          /**
           * The base implementation of `_.every` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`
           */
          function baseEvery(collection, predicate) {
            var result = true
            baseEach(collection, function (value, index, collection) {
              result = !!predicate(value, index, collection)
              return result
            })
            return result
          }

          /**
           * The base implementation of methods like `_.max` and `_.min` which accepts a
           * `comparator` to determine the extremum value.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The iteratee invoked per iteration.
           * @param {Function} comparator The comparator used to compare values.
           * @returns {*} Returns the extremum value.
           */
          function baseExtremum(array, iteratee, comparator) {
            var index = -1,
              length = array.length

            while (++index < length) {
              var value = array[index],
                current = iteratee(value)

              if (
                current != null &&
                (computed === undefined
                  ? current === current && !isSymbol(current)
                  : comparator(current, computed))
              ) {
                var computed = current,
                  result = value
              }
            }
            return result
          }

          /**
           * The base implementation of `_.fill` without an iteratee call guard.
           *
           * @private
           * @param {Array} array The array to fill.
           * @param {*} value The value to fill `array` with.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns `array`.
           */
          function baseFill(array, value, start, end) {
            var length = array.length

            start = toInteger(start)
            if (start < 0) {
              start = -start > length ? 0 : length + start
            }
            end = end === undefined || end > length ? length : toInteger(end)
            if (end < 0) {
              end += length
            }
            end = start > end ? 0 : toLength(end)
            while (start < end) {
              array[start++] = value
            }
            return array
          }

          /**
           * The base implementation of `_.filter` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function baseFilter(collection, predicate) {
            var result = []
            baseEach(collection, function (value, index, collection) {
              if (predicate(value, index, collection)) {
                result.push(value)
              }
            })
            return result
          }

          /**
           * The base implementation of `_.flatten` with support for restricting flattening.
           *
           * @private
           * @param {Array} array The array to flatten.
           * @param {number} depth The maximum recursion depth.
           * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
           * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
           * @param {Array} [result=[]] The initial result value.
           * @returns {Array} Returns the new flattened array.
           */
          function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1,
              length = array.length

            predicate || (predicate = isFlattenable)
            result || (result = [])

            while (++index < length) {
              var value = array[index]
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  // Recursively flatten arrays (susceptible to call stack limits).
                  baseFlatten(value, depth - 1, predicate, isStrict, result)
                } else {
                  arrayPush(result, value)
                }
              } else if (!isStrict) {
                result[result.length] = value
              }
            }
            return result
          }

          /**
           * The base implementation of `baseForOwn` which iterates over `object`
           * properties returned by `keysFunc` and invokes `iteratee` for each property.
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @returns {Object} Returns `object`.
           */
          var baseFor = createBaseFor()

          /**
           * This function is like `baseFor` except that it iterates over properties
           * in the opposite order.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @returns {Object} Returns `object`.
           */
          var baseForRight = createBaseFor(true)

          /**
           * The base implementation of `_.forOwn` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Object} Returns `object`.
           */
          function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys)
          }

          /**
           * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Object} Returns `object`.
           */
          function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys)
          }

          /**
           * The base implementation of `_.functions` which creates an array of
           * `object` function property names filtered from `props`.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Array} props The property names to filter.
           * @returns {Array} Returns the function names.
           */
          function baseFunctions(object, props) {
            return arrayFilter(props, function (key) {
              return isFunction(object[key])
            })
          }

          /**
           * The base implementation of `_.get` without support for default values.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @returns {*} Returns the resolved value.
           */
          function baseGet(object, path) {
            path = castPath(path, object)

            var index = 0,
              length = path.length

            while (object != null && index < length) {
              object = object[toKey(path[index++])]
            }
            return index && index == length ? object : undefined
          }

          /**
           * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
           * `keysFunc` and `symbolsFunc` to get the enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @param {Function} symbolsFunc The function to get the symbols of `object`.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object)
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object))
          }

          /**
           * The base implementation of `getTag` without fallbacks for buggy environments.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined ? undefinedTag : nullTag
            }
            return symToStringTag && symToStringTag in Object(value)
              ? getRawTag(value)
              : objectToString(value)
          }

          /**
           * The base implementation of `_.gt` which doesn't coerce arguments.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than `other`,
           *  else `false`.
           */
          function baseGt(value, other) {
            return value > other
          }

          /**
           * The base implementation of `_.has` without support for deep paths.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {Array|string} key The key to check.
           * @returns {boolean} Returns `true` if `key` exists, else `false`.
           */
          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key)
          }

          /**
           * The base implementation of `_.hasIn` without support for deep paths.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {Array|string} key The key to check.
           * @returns {boolean} Returns `true` if `key` exists, else `false`.
           */
          function baseHasIn(object, key) {
            return object != null && key in Object(object)
          }

          /**
           * The base implementation of `_.inRange` which doesn't coerce arguments.
           *
           * @private
           * @param {number} number The number to check.
           * @param {number} start The start of the range.
           * @param {number} end The end of the range.
           * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
           */
          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end)
          }

          /**
           * The base implementation of methods like `_.intersection`, without support
           * for iteratee shorthands, that accepts an array of arrays to inspect.
           *
           * @private
           * @param {Array} arrays The arrays to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of shared values.
           */
          function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes,
              length = arrays[0].length,
              othLength = arrays.length,
              othIndex = othLength,
              caches = Array(othLength),
              maxLength = Infinity,
              result = []

            while (othIndex--) {
              var array = arrays[othIndex]
              if (othIndex && iteratee) {
                array = arrayMap(array, baseUnary(iteratee))
              }
              maxLength = nativeMin(array.length, maxLength)
              caches[othIndex] =
                !comparator && (iteratee || (length >= 120 && array.length >= 120))
                  ? new SetCache(othIndex && array)
                  : undefined
            }
            array = arrays[0]

            var index = -1,
              seen = caches[0]

            outer: while (++index < length && result.length < maxLength) {
              var value = array[index],
                computed = iteratee ? iteratee(value) : value

              value = comparator || value !== 0 ? value : 0
              if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                othIndex = othLength
                while (--othIndex) {
                  var cache = caches[othIndex]
                  if (
                    !(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                  ) {
                    continue outer
                  }
                }
                if (seen) {
                  seen.push(computed)
                }
                result.push(value)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.invert` and `_.invertBy` which inverts
           * `object` with values transformed by `iteratee` and set by `setter`.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform values.
           * @param {Object} accumulator The initial inverted object.
           * @returns {Function} Returns `accumulator`.
           */
          function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function (value, key, object) {
              setter(accumulator, iteratee(value), key, object)
            })
            return accumulator
          }

          /**
           * The base implementation of `_.invoke` without support for individual
           * method arguments.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the method to invoke.
           * @param {Array} args The arguments to invoke the method with.
           * @returns {*} Returns the result of the invoked method.
           */
          function baseInvoke(object, path, args) {
            path = castPath(path, object)
            object = parent(object, path)
            var func = object == null ? object : object[toKey(last(path))]
            return func == null ? undefined : apply(func, object, args)
          }

          /**
           * The base implementation of `_.isArguments`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           */
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag
          }

          /**
           * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
           */
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag
          }

          /**
           * The base implementation of `_.isDate` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
           */
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag
          }

          /**
           * The base implementation of `_.isEqual` which supports partial comparisons
           * and tracks traversed objects.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {boolean} bitmask The bitmask flags.
           *  1 - Unordered comparison
           *  2 - Partial comparison
           * @param {Function} [customizer] The function to customize comparisons.
           * @param {Object} [stack] Tracks traversed `value` and `other` objects.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           */
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true
            }
            if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
              return value !== value && other !== other
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack)
          }

          /**
           * A specialized version of `baseIsEqual` for arrays and objects which performs
           * deep comparisons and tracks traversed objects enabling objects with circular
           * references to be compared.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} [stack] Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other)

            objTag = objTag == argsTag ? objectTag : objTag
            othTag = othTag == argsTag ? objectTag : othTag

            var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag

            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false
              }
              objIsArr = true
              objIsObj = false
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack())
              return objIsArr || isTypedArray(object)
                ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack)
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__")

              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other

                stack || (stack = new Stack())
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack)
              }
            }
            if (!isSameTag) {
              return false
            }
            stack || (stack = new Stack())
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack)
          }

          /**
           * The base implementation of `_.isMap` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a map, else `false`.
           */
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag
          }

          /**
           * The base implementation of `_.isMatch` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @param {Array} matchData The property names, values, and compare flags to match.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           */
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
              length = index,
              noCustomizer = !customizer

            if (object == null) {
              return !length
            }
            object = Object(object)
            while (index--) {
              var data = matchData[index]
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false
              }
            }
            while (++index < length) {
              data = matchData[index]
              var key = data[0],
                objValue = object[key],
                srcValue = data[1]

              if (noCustomizer && data[2]) {
                if (objValue === undefined && !(key in object)) {
                  return false
                }
              } else {
                var stack = new Stack()
                if (customizer) {
                  var result = customizer(objValue, srcValue, key, object, source, stack)
                }
                if (
                  !(result === undefined
                    ? baseIsEqual(
                        srcValue,
                        objValue,
                        COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                        customizer,
                        stack
                      )
                    : result)
                ) {
                  return false
                }
              }
            }
            return true
          }

          /**
           * The base implementation of `_.isNative` without bad shim checks.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           */
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor
            return pattern.test(toSource(value))
          }

          /**
           * The base implementation of `_.isRegExp` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
           */
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag
          }

          /**
           * The base implementation of `_.isSet` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a set, else `false`.
           */
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag
          }

          /**
           * The base implementation of `_.isTypedArray` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           */
          function baseIsTypedArray(value) {
            return (
              isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)]
            )
          }

          /**
           * The base implementation of `_.iteratee`.
           *
           * @private
           * @param {*} [value=_.identity] The value to convert to an iteratee.
           * @returns {Function} Returns the iteratee.
           */
          function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == "function") {
              return value
            }
            if (value == null) {
              return identity
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value)
            }
            return property(value)
          }

          /**
           * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object)
            }
            var result = []
            for (var key in Object(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result.push(key)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object)
            }
            var isProto = isPrototype(object),
              result = []

            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                result.push(key)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.lt` which doesn't coerce arguments.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than `other`,
           *  else `false`.
           */
          function baseLt(value, other) {
            return value < other
          }

          /**
           * The base implementation of `_.map` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function baseMap(collection, iteratee) {
            var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : []

            baseEach(collection, function (value, key, collection) {
              result[++index] = iteratee(value, key, collection)
            })
            return result
          }

          /**
           * The base implementation of `_.matches` which doesn't clone `source`.
           *
           * @private
           * @param {Object} source The object of property values to match.
           * @returns {Function} Returns the new spec function.
           */
          function baseMatches(source) {
            var matchData = getMatchData(source)
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1])
            }
            return function (object) {
              return object === source || baseIsMatch(object, source, matchData)
            }
          }

          /**
           * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
           *
           * @private
           * @param {string} path The path of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue)
            }
            return function (object) {
              var objValue = get(object, path)
              return objValue === undefined && objValue === srcValue
                ? hasIn(object, path)
                : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG)
            }
          }

          /**
           * The base implementation of `_.merge` without support for multiple sources.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @param {number} srcIndex The index of `source`.
           * @param {Function} [customizer] The function to customize merged values.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           */
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return
            }
            baseFor(
              source,
              function (srcValue, key) {
                stack || (stack = new Stack())
                if (isObject(srcValue)) {
                  baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack)
                } else {
                  var newValue = customizer
                    ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack)
                    : undefined

                  if (newValue === undefined) {
                    newValue = srcValue
                  }
                  assignMergeValue(object, key, newValue)
                }
              },
              keysIn
            )
          }

          /**
           * A specialized version of `baseMerge` for arrays and objects which performs
           * deep merges and tracks traversed objects enabling objects with circular
           * references to be merged.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @param {string} key The key of the value to merge.
           * @param {number} srcIndex The index of `source`.
           * @param {Function} mergeFunc The function to merge values.
           * @param {Function} [customizer] The function to customize assigned values.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           */
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key),
              srcValue = safeGet(source, key),
              stacked = stack.get(srcValue)

            if (stacked) {
              assignMergeValue(object, key, stacked)
              return
            }
            var newValue = customizer
              ? customizer(objValue, srcValue, key + "", object, source, stack)
              : undefined

            var isCommon = newValue === undefined

            if (isCommon) {
              var isArr = isArray(srcValue),
                isBuff = !isArr && isBuffer(srcValue),
                isTyped = !isArr && !isBuff && isTypedArray(srcValue)

              newValue = srcValue
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue)
                } else if (isBuff) {
                  isCommon = false
                  newValue = cloneBuffer(srcValue, true)
                } else if (isTyped) {
                  isCommon = false
                  newValue = cloneTypedArray(srcValue, true)
                } else {
                  newValue = []
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue)
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue)
                }
              } else {
                isCommon = false
              }
            }
            if (isCommon) {
              // Recursively merge objects and arrays (susceptible to call stack limits).
              stack.set(srcValue, newValue)
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack)
              stack["delete"](srcValue)
            }
            assignMergeValue(object, key, newValue)
          }

          /**
           * The base implementation of `_.nth` which doesn't coerce arguments.
           *
           * @private
           * @param {Array} array The array to query.
           * @param {number} n The index of the element to return.
           * @returns {*} Returns the nth element of `array`.
           */
          function baseNth(array, n) {
            var length = array.length
            if (!length) {
              return
            }
            n += n < 0 ? length : 0
            return isIndex(n, length) ? array[n] : undefined
          }

          /**
           * The base implementation of `_.orderBy` without param guards.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
           * @param {string[]} orders The sort orders of `iteratees`.
           * @returns {Array} Returns the new sorted array.
           */
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function (iteratee) {
                if (isArray(iteratee)) {
                  return function (value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee)
                  }
                }
                return iteratee
              })
            } else {
              iteratees = [identity]
            }

            var index = -1
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()))

            var result = baseMap(collection, function (value, key, collection) {
              var criteria = arrayMap(iteratees, function (iteratee) {
                return iteratee(value)
              })
              return { criteria: criteria, index: ++index, value: value }
            })

            return baseSortBy(result, function (object, other) {
              return compareMultiple(object, other, orders)
            })
          }

          /**
           * The base implementation of `_.pick` without support for individual
           * property identifiers.
           *
           * @private
           * @param {Object} object The source object.
           * @param {string[]} paths The property paths to pick.
           * @returns {Object} Returns the new object.
           */
          function basePick(object, paths) {
            return basePickBy(object, paths, function (value, path) {
              return hasIn(object, path)
            })
          }

          /**
           * The base implementation of  `_.pickBy` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The source object.
           * @param {string[]} paths The property paths to pick.
           * @param {Function} predicate The function invoked per property.
           * @returns {Object} Returns the new object.
           */
          function basePickBy(object, paths, predicate) {
            var index = -1,
              length = paths.length,
              result = {}

            while (++index < length) {
              var path = paths[index],
                value = baseGet(object, path)

              if (predicate(value, path)) {
                baseSet(result, castPath(path, object), value)
              }
            }
            return result
          }

          /**
           * A specialized version of `baseProperty` which supports deep paths.
           *
           * @private
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyDeep(path) {
            return function (object) {
              return baseGet(object, path)
            }
          }

          /**
           * The base implementation of `_.pullAllBy` without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns `array`.
           */
          function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
              index = -1,
              length = values.length,
              seen = array

            if (array === values) {
              values = copyArray(values)
            }
            if (iteratee) {
              seen = arrayMap(array, baseUnary(iteratee))
            }
            while (++index < length) {
              var fromIndex = 0,
                value = values[index],
                computed = iteratee ? iteratee(value) : value

              while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1)
                }
                splice.call(array, fromIndex, 1)
              }
            }
            return array
          }

          /**
           * The base implementation of `_.pullAt` without support for individual
           * indexes or capturing the removed elements.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {number[]} indexes The indexes of elements to remove.
           * @returns {Array} Returns `array`.
           */
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0,
              lastIndex = length - 1

            while (length--) {
              var index = indexes[length]
              if (length == lastIndex || index !== previous) {
                var previous = index
                if (isIndex(index)) {
                  splice.call(array, index, 1)
                } else {
                  baseUnset(array, index)
                }
              }
            }
            return array
          }

          /**
           * The base implementation of `_.random` without support for returning
           * floating-point numbers.
           *
           * @private
           * @param {number} lower The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the random number.
           */
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1))
          }

          /**
           * The base implementation of `_.range` and `_.rangeRight` which doesn't
           * coerce arguments.
           *
           * @private
           * @param {number} start The start of the range.
           * @param {number} end The end of the range.
           * @param {number} step The value to increment or decrement by.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Array} Returns the range of numbers.
           */
          function baseRange(start, end, step, fromRight) {
            var index = -1,
              length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
              result = Array(length)

            while (length--) {
              result[fromRight ? length : ++index] = start
              start += step
            }
            return result
          }

          /**
           * The base implementation of `_.repeat` which doesn't coerce arguments.
           *
           * @private
           * @param {string} string The string to repeat.
           * @param {number} n The number of times to repeat the string.
           * @returns {string} Returns the repeated string.
           */
          function baseRepeat(string, n) {
            var result = ""
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result
            }
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
              if (n % 2) {
                result += string
              }
              n = nativeFloor(n / 2)
              if (n) {
                string += string
              }
            } while (n)

            return result
          }

          /**
           * The base implementation of `_.rest` which doesn't validate or coerce arguments.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @returns {Function} Returns the new function.
           */
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "")
          }

          /**
           * The base implementation of `_.sample`.
           *
           * @private
           * @param {Array|Object} collection The collection to sample.
           * @returns {*} Returns the random element.
           */
          function baseSample(collection) {
            return arraySample(values(collection))
          }

          /**
           * The base implementation of `_.sampleSize` without param guards.
           *
           * @private
           * @param {Array|Object} collection The collection to sample.
           * @param {number} n The number of elements to sample.
           * @returns {Array} Returns the random elements.
           */
          function baseSampleSize(collection, n) {
            var array = values(collection)
            return shuffleSelf(array, baseClamp(n, 0, array.length))
          }

          /**
           * The base implementation of `_.set`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @param {Function} [customizer] The function to customize path creation.
           * @returns {Object} Returns `object`.
           */
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object
            }
            path = castPath(path, object)

            var index = -1,
              length = path.length,
              lastIndex = length - 1,
              nested = object

            while (nested != null && ++index < length) {
              var key = toKey(path[index]),
                newValue = value

              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object
              }

              if (index != lastIndex) {
                var objValue = nested[key]
                newValue = customizer ? customizer(objValue, key, nested) : undefined
                if (newValue === undefined) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {}
                }
              }
              assignValue(nested, key, newValue)
              nested = nested[key]
            }
            return object
          }

          /**
           * The base implementation of `setData` without support for hot loop shorting.
           *
           * @private
           * @param {Function} func The function to associate metadata with.
           * @param {*} data The metadata.
           * @returns {Function} Returns `func`.
           */
          var baseSetData = !metaMap
            ? identity
            : function (func, data) {
                metaMap.set(func, data)
                return func
              }

          /**
           * The base implementation of `setToString` without support for hot loop shorting.
           *
           * @private
           * @param {Function} func The function to modify.
           * @param {Function} string The `toString` result.
           * @returns {Function} Returns `func`.
           */
          var baseSetToString = !defineProperty
            ? identity
            : function (func, string) {
                return defineProperty(func, "toString", {
                  configurable: true,
                  enumerable: false,
                  value: constant(string),
                  writable: true
                })
              }

          /**
           * The base implementation of `_.shuffle`.
           *
           * @private
           * @param {Array|Object} collection The collection to shuffle.
           * @returns {Array} Returns the new shuffled array.
           */
          function baseShuffle(collection) {
            return shuffleSelf(values(collection))
          }

          /**
           * The base implementation of `_.slice` without an iteratee call guard.
           *
           * @private
           * @param {Array} array The array to slice.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the slice of `array`.
           */
          function baseSlice(array, start, end) {
            var index = -1,
              length = array.length

            if (start < 0) {
              start = -start > length ? 0 : length + start
            }
            end = end > length ? length : end
            if (end < 0) {
              end += length
            }
            length = start > end ? 0 : (end - start) >>> 0
            start >>>= 0

            var result = Array(length)
            while (++index < length) {
              result[index] = array[index + start]
            }
            return result
          }

          /**
           * The base implementation of `_.some` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function baseSome(collection, predicate) {
            var result

            baseEach(collection, function (value, index, collection) {
              result = predicate(value, index, collection)
              return !result
            })
            return !!result
          }

          /**
           * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
           * performs a binary search of `array` to determine the index at which `value`
           * should be inserted into `array` in order to maintain its sort order.
           *
           * @private
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {boolean} [retHighest] Specify returning the highest qualified index.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           */
          function baseSortedIndex(array, value, retHighest) {
            var low = 0,
              high = array == null ? low : array.length

            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = (low + high) >>> 1,
                  computed = array[mid]

                if (
                  computed !== null &&
                  !isSymbol(computed) &&
                  (retHighest ? computed <= value : computed < value)
                ) {
                  low = mid + 1
                } else {
                  high = mid
                }
              }
              return high
            }
            return baseSortedIndexBy(array, value, identity, retHighest)
          }

          /**
           * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
           * which invokes `iteratee` for `value` and each element of `array` to compute
           * their sort ranking. The iteratee is invoked with one argument; (value).
           *
           * @private
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} iteratee The iteratee invoked per element.
           * @param {boolean} [retHighest] Specify returning the highest qualified index.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           */
          function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0,
              high = array == null ? 0 : array.length
            if (high === 0) {
              return 0
            }

            value = iteratee(value)
            var valIsNaN = value !== value,
              valIsNull = value === null,
              valIsSymbol = isSymbol(value),
              valIsUndefined = value === undefined

            while (low < high) {
              var mid = nativeFloor((low + high) / 2),
                computed = iteratee(array[mid]),
                othIsDefined = computed !== undefined,
                othIsNull = computed === null,
                othIsReflexive = computed === computed,
                othIsSymbol = isSymbol(computed)

              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined)
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull)
              } else if (valIsSymbol) {
                setLow =
                  othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol)
              } else if (othIsNull || othIsSymbol) {
                setLow = false
              } else {
                setLow = retHighest ? computed <= value : computed < value
              }
              if (setLow) {
                low = mid + 1
              } else {
                high = mid
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX)
          }

          /**
           * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           */
          function baseSortedUniq(array, iteratee) {
            var index = -1,
              length = array.length,
              resIndex = 0,
              result = []

            while (++index < length) {
              var value = array[index],
                computed = iteratee ? iteratee(value) : value

              if (!index || !eq(computed, seen)) {
                var seen = computed
                result[resIndex++] = value === 0 ? 0 : value
              }
            }
            return result
          }

          /**
           * The base implementation of `_.toNumber` which doesn't ensure correct
           * conversions of binary, hexadecimal, or octal string values.
           *
           * @private
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           */
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value
            }
            if (isSymbol(value)) {
              return NAN
            }
            return +value
          }

          /**
           * The base implementation of `_.toString` which doesn't convert nullish
           * values to empty strings.
           *
           * @private
           * @param {*} value The value to process.
           * @returns {string} Returns the string.
           */
          function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == "string") {
              return value
            }
            if (isArray(value)) {
              // Recursively convert values (susceptible to call stack limits).
              return arrayMap(value, baseToString) + ""
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : ""
            }
            var result = value + ""
            return result == "0" && 1 / value == -INFINITY ? "-0" : result
          }

          /**
           * The base implementation of `_.uniqBy` without support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           */
          function baseUniq(array, iteratee, comparator) {
            var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result

            if (comparator) {
              isCommon = false
              includes = arrayIncludesWith
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set = iteratee ? null : createSet(array)
              if (set) {
                return setToArray(set)
              }
              isCommon = false
              includes = cacheHas
              seen = new SetCache()
            } else {
              seen = iteratee ? [] : result
            }
            outer: while (++index < length) {
              var value = array[index],
                computed = iteratee ? iteratee(value) : value

              value = comparator || value !== 0 ? value : 0
              if (isCommon && computed === computed) {
                var seenIndex = seen.length
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer
                  }
                }
                if (iteratee) {
                  seen.push(computed)
                }
                result.push(value)
              } else if (!includes(seen, computed, comparator)) {
                if (seen !== result) {
                  seen.push(computed)
                }
                result.push(value)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.unset`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The property path to unset.
           * @returns {boolean} Returns `true` if the property is deleted, else `false`.
           */
          function baseUnset(object, path) {
            path = castPath(path, object)
            object = parent(object, path)
            return object == null || delete object[toKey(last(path))]
          }

          /**
           * The base implementation of `_.update`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to update.
           * @param {Function} updater The function to produce the updated value.
           * @param {Function} [customizer] The function to customize path creation.
           * @returns {Object} Returns `object`.
           */
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer)
          }

          /**
           * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
           * without support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to query.
           * @param {Function} predicate The function invoked per iteration.
           * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Array} Returns the slice of `array`.
           */
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length,
              index = fromRight ? length : -1

            while (
              (fromRight ? index-- : ++index < length) &&
              predicate(array[index], index, array)
            ) {}

            return isDrop
              ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length)
              : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index)
          }

          /**
           * The base implementation of `wrapperValue` which returns the result of
           * performing a sequence of actions on the unwrapped `value`, where each
           * successive action is supplied the return value of the previous.
           *
           * @private
           * @param {*} value The unwrapped value.
           * @param {Array} actions Actions to perform to resolve the unwrapped value.
           * @returns {*} Returns the resolved value.
           */
          function baseWrapperValue(value, actions) {
            var result = value
            if (result instanceof LazyWrapper) {
              result = result.value()
            }
            return arrayReduce(
              actions,
              function (result, action) {
                return action.func.apply(action.thisArg, arrayPush([result], action.args))
              },
              result
            )
          }

          /**
           * The base implementation of methods like `_.xor`, without support for
           * iteratee shorthands, that accepts an array of arrays to inspect.
           *
           * @private
           * @param {Array} arrays The arrays to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of values.
           */
          function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : []
            }
            var index = -1,
              result = Array(length)

            while (++index < length) {
              var array = arrays[index],
                othIndex = -1

              while (++othIndex < length) {
                if (othIndex != index) {
                  result[index] = baseDifference(
                    result[index] || array,
                    arrays[othIndex],
                    iteratee,
                    comparator
                  )
                }
              }
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator)
          }

          /**
           * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
           *
           * @private
           * @param {Array} props The property identifiers.
           * @param {Array} values The property values.
           * @param {Function} assignFunc The function to assign values.
           * @returns {Object} Returns the new object.
           */
          function baseZipObject(props, values, assignFunc) {
            var index = -1,
              length = props.length,
              valsLength = values.length,
              result = {}

            while (++index < length) {
              var value = index < valsLength ? values[index] : undefined
              assignFunc(result, props[index], value)
            }
            return result
          }

          /**
           * Casts `value` to an empty array if it's not an array like object.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {Array|Object} Returns the cast array-like object.
           */
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : []
          }

          /**
           * Casts `value` to `identity` if it's not a function.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {Function} Returns cast function.
           */
          function castFunction(value) {
            return typeof value == "function" ? value : identity
          }

          /**
           * Casts `value` to a path array if it's not one.
           *
           * @private
           * @param {*} value The value to inspect.
           * @param {Object} [object] The object to query keys on.
           * @returns {Array} Returns the cast property path array.
           */
          function castPath(value, object) {
            if (isArray(value)) {
              return value
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value))
          }

          /**
           * A `baseRest` alias which can be replaced with `identity` by module
           * replacement plugins.
           *
           * @private
           * @type {Function}
           * @param {Function} func The function to apply a rest parameter to.
           * @returns {Function} Returns the new function.
           */
          var castRest = baseRest

          /**
           * Casts `array` to a slice if it's needed.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {number} start The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the cast slice.
           */
          function castSlice(array, start, end) {
            var length = array.length
            end = end === undefined ? length : end
            return !start && end >= length ? array : baseSlice(array, start, end)
          }

          /**
           * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
           *
           * @private
           * @param {number|Object} id The timer id or timeout object of the timer to clear.
           */
          var clearTimeout =
            ctxClearTimeout ||
            function (id) {
              return root.clearTimeout(id)
            }

          /**
           * Creates a clone of  `buffer`.
           *
           * @private
           * @param {Buffer} buffer The buffer to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Buffer} Returns the cloned buffer.
           */
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice()
            }
            var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length)

            buffer.copy(result)
            return result
          }

          /**
           * Creates a clone of `arrayBuffer`.
           *
           * @private
           * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
           * @returns {ArrayBuffer} Returns the cloned array buffer.
           */
          function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength)
            new Uint8Array(result).set(new Uint8Array(arrayBuffer))
            return result
          }

          /**
           * Creates a clone of `dataView`.
           *
           * @private
           * @param {Object} dataView The data view to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned data view.
           */
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength)
          }

          /**
           * Creates a clone of `regexp`.
           *
           * @private
           * @param {Object} regexp The regexp to clone.
           * @returns {Object} Returns the cloned regexp.
           */
          function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp))
            result.lastIndex = regexp.lastIndex
            return result
          }

          /**
           * Creates a clone of the `symbol` object.
           *
           * @private
           * @param {Object} symbol The symbol object to clone.
           * @returns {Object} Returns the cloned symbol object.
           */
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {}
          }

          /**
           * Creates a clone of `typedArray`.
           *
           * @private
           * @param {Object} typedArray The typed array to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned typed array.
           */
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length)
          }

          /**
           * Compares values to sort them in ascending order.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {number} Returns the sort order indicator for `value`.
           */
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value)

              var othIsDefined = other !== undefined,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other)

              if (
                (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive
              ) {
                return 1
              }
              if (
                (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive
              ) {
                return -1
              }
            }
            return 0
          }

          /**
           * Used by `_.orderBy` to compare multiple properties of a value to another
           * and stable sort them.
           *
           * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
           * specify an order of "desc" for descending or "asc" for ascending sort order
           * of corresponding values.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {boolean[]|string[]} orders The order to sort by for each property.
           * @returns {number} Returns the sort order indicator for `object`.
           */
          function compareMultiple(object, other, orders) {
            var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length

            while (++index < length) {
              var result = compareAscending(objCriteria[index], othCriteria[index])
              if (result) {
                if (index >= ordersLength) {
                  return result
                }
                var order = orders[index]
                return result * (order == "desc" ? -1 : 1)
              }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index
          }

          /**
           * Creates an array that is the composition of partially applied arguments,
           * placeholders, and provided arguments into a single array of arguments.
           *
           * @private
           * @param {Array} args The provided arguments.
           * @param {Array} partials The arguments to prepend to those provided.
           * @param {Array} holders The `partials` placeholder indexes.
           * @params {boolean} [isCurried] Specify composing for a curried function.
           * @returns {Array} Returns the new array of composed arguments.
           */
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1,
              argsLength = args.length,
              holdersLength = holders.length,
              leftIndex = -1,
              leftLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(leftLength + rangeLength),
              isUncurried = !isCurried

            while (++leftIndex < leftLength) {
              result[leftIndex] = partials[leftIndex]
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result[holders[argsIndex]] = args[argsIndex]
              }
            }
            while (rangeLength--) {
              result[leftIndex++] = args[argsIndex++]
            }
            return result
          }

          /**
           * This function is like `composeArgs` except that the arguments composition
           * is tailored for `_.partialRight`.
           *
           * @private
           * @param {Array} args The provided arguments.
           * @param {Array} partials The arguments to append to those provided.
           * @param {Array} holders The `partials` placeholder indexes.
           * @params {boolean} [isCurried] Specify composing for a curried function.
           * @returns {Array} Returns the new array of composed arguments.
           */
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1,
              argsLength = args.length,
              holdersIndex = -1,
              holdersLength = holders.length,
              rightIndex = -1,
              rightLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(rangeLength + rightLength),
              isUncurried = !isCurried

            while (++argsIndex < rangeLength) {
              result[argsIndex] = args[argsIndex]
            }
            var offset = argsIndex
            while (++rightIndex < rightLength) {
              result[offset + rightIndex] = partials[rightIndex]
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result[offset + holders[holdersIndex]] = args[argsIndex++]
              }
            }
            return result
          }

          /**
           * Copies the values of `source` to `array`.
           *
           * @private
           * @param {Array} source The array to copy values from.
           * @param {Array} [array=[]] The array to copy values to.
           * @returns {Array} Returns `array`.
           */
          function copyArray(source, array) {
            var index = -1,
              length = source.length

            array || (array = Array(length))
            while (++index < length) {
              array[index] = source[index]
            }
            return array
          }

          /**
           * Copies properties of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy properties from.
           * @param {Array} props The property identifiers to copy.
           * @param {Object} [object={}] The object to copy properties to.
           * @param {Function} [customizer] The function to customize copied values.
           * @returns {Object} Returns `object`.
           */
          function copyObject(source, props, object, customizer) {
            var isNew = !object
            object || (object = {})

            var index = -1,
              length = props.length

            while (++index < length) {
              var key = props[index]

              var newValue = customizer
                ? customizer(object[key], source[key], key, object, source)
                : undefined

              if (newValue === undefined) {
                newValue = source[key]
              }
              if (isNew) {
                baseAssignValue(object, key, newValue)
              } else {
                assignValue(object, key, newValue)
              }
            }
            return object
          }

          /**
           * Copies own symbols of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy symbols from.
           * @param {Object} [object={}] The object to copy symbols to.
           * @returns {Object} Returns `object`.
           */
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object)
          }

          /**
           * Copies own and inherited symbols of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy symbols from.
           * @param {Object} [object={}] The object to copy symbols to.
           * @returns {Object} Returns `object`.
           */
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object)
          }

          /**
           * Creates a function like `_.groupBy`.
           *
           * @private
           * @param {Function} setter The function to set accumulator values.
           * @param {Function} [initializer] The accumulator object initializer.
           * @returns {Function} Returns the new aggregator function.
           */
          function createAggregator(setter, initializer) {
            return function (collection, iteratee) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator,
                accumulator = initializer ? initializer() : {}

              return func(collection, setter, getIteratee(iteratee, 2), accumulator)
            }
          }

          /**
           * Creates a function like `_.assign`.
           *
           * @private
           * @param {Function} assigner The function to assign values.
           * @returns {Function} Returns the new assigner function.
           */
          function createAssigner(assigner) {
            return baseRest(function (object, sources) {
              var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined,
                guard = length > 2 ? sources[2] : undefined

              customizer =
                assigner.length > 3 && typeof customizer == "function"
                  ? (length--, customizer)
                  : undefined

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined : customizer
                length = 1
              }
              object = Object(object)
              while (++index < length) {
                var source = sources[index]
                if (source) {
                  assigner(object, source, index, customizer)
                }
              }
              return object
            })
          }

          /**
           * Creates a `baseEach` or `baseEachRight` function.
           *
           * @private
           * @param {Function} eachFunc The function to iterate over a collection.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new base function.
           */
          function createBaseEach(eachFunc, fromRight) {
            return function (collection, iteratee) {
              if (collection == null) {
                return collection
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee)
              }
              var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection)

              while (fromRight ? index-- : ++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                  break
                }
              }
              return collection
            }
          }

          /**
           * Creates a base function for methods like `_.forIn` and `_.forOwn`.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new base function.
           */
          function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
              var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length

              while (length--) {
                var key = props[fromRight ? length : ++index]
                if (iteratee(iterable[key], key, iterable) === false) {
                  break
                }
              }
              return object
            }
          }

          /**
           * Creates a function that wraps `func` to invoke it with the optional `this`
           * binding of `thisArg`.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func)

            function wrapper() {
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func
              return fn.apply(isBind ? thisArg : this, arguments)
            }
            return wrapper
          }

          /**
           * Creates a function like `_.lowerFirst`.
           *
           * @private
           * @param {string} methodName The name of the `String` case method to use.
           * @returns {Function} Returns the new case function.
           */
          function createCaseFirst(methodName) {
            return function (string) {
              string = toString(string)

              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined

              var chr = strSymbols ? strSymbols[0] : string.charAt(0)

              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1)

              return chr[methodName]() + trailing
            }
          }

          /**
           * Creates a function like `_.camelCase`.
           *
           * @private
           * @param {Function} callback The function to combine each word.
           * @returns {Function} Returns the new compounder function.
           */
          function createCompounder(callback) {
            return function (string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "")
            }
          }

          /**
           * Creates a function that produces an instance of `Ctor` regardless of
           * whether it was invoked as part of a `new` expression or by `call` or `apply`.
           *
           * @private
           * @param {Function} Ctor The constructor to wrap.
           * @returns {Function} Returns the new wrapped function.
           */
          function createCtor(Ctor) {
            return function () {
              // Use a `switch` statement to work with class constructors. See
              // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
              // for more details.
              var args = arguments
              switch (args.length) {
                case 0:
                  return new Ctor()
                case 1:
                  return new Ctor(args[0])
                case 2:
                  return new Ctor(args[0], args[1])
                case 3:
                  return new Ctor(args[0], args[1], args[2])
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3])
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4])
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5])
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6])
              }
              var thisBinding = baseCreate(Ctor.prototype),
                result = Ctor.apply(thisBinding, args)

              // Mimic the constructor's `return` behavior.
              // See https://es5.github.io/#x13.2.2 for more details.
              return isObject(result) ? result : thisBinding
            }
          }

          /**
           * Creates a function that wraps `func` to enable currying.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {number} arity The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func)

            function wrapper() {
              var length = arguments.length,
                args = Array(length),
                index = length,
                placeholder = getHolder(wrapper)

              while (index--) {
                args[index] = arguments[index]
              }
              var holders =
                length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder
                  ? []
                  : replaceHolders(args, placeholder)

              length -= holders.length
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined,
                  args,
                  holders,
                  undefined,
                  undefined,
                  arity - length
                )
              }
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func
              return apply(fn, this, args)
            }
            return wrapper
          }

          /**
           * Creates a `_.find` or `_.findLast` function.
           *
           * @private
           * @param {Function} findIndexFunc The function to find the collection index.
           * @returns {Function} Returns the new find function.
           */
          function createFind(findIndexFunc) {
            return function (collection, predicate, fromIndex) {
              var iterable = Object(collection)
              if (!isArrayLike(collection)) {
                var iteratee = getIteratee(predicate, 3)
                collection = keys(collection)
                predicate = function (key) {
                  return iteratee(iterable[key], key, iterable)
                }
              }
              var index = findIndexFunc(collection, predicate, fromIndex)
              return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined
            }
          }

          /**
           * Creates a `_.flow` or `_.flowRight` function.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new flow function.
           */
          function createFlow(fromRight) {
            return flatRest(function (funcs) {
              var length = funcs.length,
                index = length,
                prereq = LodashWrapper.prototype.thru

              if (fromRight) {
                funcs.reverse()
              }
              while (index--) {
                var func = funcs[index]
                if (typeof func != "function") {
                  throw new TypeError(FUNC_ERROR_TEXT)
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true)
                }
              }
              index = wrapper ? index : length
              while (++index < length) {
                func = funcs[index]

                var funcName = getFuncName(func),
                  data = funcName == "wrapper" ? getData(func) : undefined

                if (
                  data &&
                  isLaziable(data[0]) &&
                  data[1] ==
                    (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                  !data[4].length &&
                  data[9] == 1
                ) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3])
                } else {
                  wrapper =
                    func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func)
                }
              }
              return function () {
                var args = arguments,
                  value = args[0]

                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value()
                }
                var index = 0,
                  result = length ? funcs[index].apply(this, args) : value

                while (++index < length) {
                  result = funcs[index].call(this, result)
                }
                return result
              }
            })
          }

          /**
           * Creates a function that wraps `func` to invoke it with optional `this`
           * binding of `thisArg`, partial application, and currying.
           *
           * @private
           * @param {Function|string} func The function or method name to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to prepend to those provided to
           *  the new function.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [partialsRight] The arguments to append to those provided
           *  to the new function.
           * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createHybrid(
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary,
            arity
          ) {
            var isAry = bitmask & WRAP_ARY_FLAG,
              isBind = bitmask & WRAP_BIND_FLAG,
              isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
              isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
              isFlip = bitmask & WRAP_FLIP_FLAG,
              Ctor = isBindKey ? undefined : createCtor(func)

            function wrapper() {
              var length = arguments.length,
                args = Array(length),
                index = length

              while (index--) {
                args[index] = arguments[index]
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper),
                  holdersCount = countHolders(args, placeholder)
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried)
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried)
              }
              length -= holdersCount
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder)
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary,
                  arity - length
                )
              }
              var thisBinding = isBind ? thisArg : this,
                fn = isBindKey ? thisBinding[func] : func

              length = args.length
              if (argPos) {
                args = reorder(args, argPos)
              } else if (isFlip && length > 1) {
                args.reverse()
              }
              if (isAry && ary < length) {
                args.length = ary
              }
              if (this && this !== root && this instanceof wrapper) {
                fn = Ctor || createCtor(fn)
              }
              return fn.apply(thisBinding, args)
            }
            return wrapper
          }

          /**
           * Creates a function like `_.invertBy`.
           *
           * @private
           * @param {Function} setter The function to set accumulator values.
           * @param {Function} toIteratee The function to resolve iteratees.
           * @returns {Function} Returns the new inverter function.
           */
          function createInverter(setter, toIteratee) {
            return function (object, iteratee) {
              return baseInverter(object, setter, toIteratee(iteratee), {})
            }
          }

          /**
           * Creates a function that performs a mathematical operation on two values.
           *
           * @private
           * @param {Function} operator The function to perform the operation.
           * @param {number} [defaultValue] The value used for `undefined` arguments.
           * @returns {Function} Returns the new mathematical operation function.
           */
          function createMathOperation(operator, defaultValue) {
            return function (value, other) {
              var result
              if (value === undefined && other === undefined) {
                return defaultValue
              }
              if (value !== undefined) {
                result = value
              }
              if (other !== undefined) {
                if (result === undefined) {
                  return other
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value)
                  other = baseToString(other)
                } else {
                  value = baseToNumber(value)
                  other = baseToNumber(other)
                }
                result = operator(value, other)
              }
              return result
            }
          }

          /**
           * Creates a function like `_.over`.
           *
           * @private
           * @param {Function} arrayFunc The function to iterate over iteratees.
           * @returns {Function} Returns the new over function.
           */
          function createOver(arrayFunc) {
            return flatRest(function (iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()))
              return baseRest(function (args) {
                var thisArg = this
                return arrayFunc(iteratees, function (iteratee) {
                  return apply(iteratee, thisArg, args)
                })
              })
            })
          }

          /**
           * Creates the padding for `string` based on `length`. The `chars` string
           * is truncated if the number of characters exceeds `length`.
           *
           * @private
           * @param {number} length The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padding for `string`.
           */
          function createPadding(length, chars) {
            chars = chars === undefined ? " " : baseToString(chars)

            var charsLength = chars.length
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars
            }
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)))
            return hasUnicode(chars)
              ? castSlice(stringToArray(result), 0, length).join("")
              : result.slice(0, length)
          }

          /**
           * Creates a function that wraps `func` to invoke it with the `this` binding
           * of `thisArg` and `partials` prepended to the arguments it receives.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} partials The arguments to prepend to those provided to
           *  the new function.
           * @returns {Function} Returns the new wrapped function.
           */
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func)

            function wrapper() {
              var argsIndex = -1,
                argsLength = arguments.length,
                leftIndex = -1,
                leftLength = partials.length,
                args = Array(leftLength + argsLength),
                fn = this && this !== root && this instanceof wrapper ? Ctor : func

              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex]
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex]
              }
              return apply(fn, isBind ? thisArg : this, args)
            }
            return wrapper
          }

          /**
           * Creates a `_.range` or `_.rangeRight` function.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new range function.
           */
          function createRange(fromRight) {
            return function (start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined
              }
              // Ensure the sign of `-0` is preserved.
              start = toFinite(start)
              if (end === undefined) {
                end = start
                start = 0
              } else {
                end = toFinite(end)
              }
              step = step === undefined ? (start < end ? 1 : -1) : toFinite(step)
              return baseRange(start, end, step, fromRight)
            }
          }

          /**
           * Creates a function that performs a relational operation on two values.
           *
           * @private
           * @param {Function} operator The function to perform the operation.
           * @returns {Function} Returns the new relational operation function.
           */
          function createRelationalOperation(operator) {
            return function (value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value)
                other = toNumber(other)
              }
              return operator(value, other)
            }
          }

          /**
           * Creates a function that wraps `func` to continue currying.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {Function} wrapFunc The function to create the `func` wrapper.
           * @param {*} placeholder The placeholder value.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to prepend to those provided to
           *  the new function.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createRecurry(
            func,
            bitmask,
            wrapFunc,
            placeholder,
            thisArg,
            partials,
            holders,
            argPos,
            ary,
            arity
          ) {
            var isCurry = bitmask & WRAP_CURRY_FLAG,
              newHolders = isCurry ? holders : undefined,
              newHoldersRight = isCurry ? undefined : holders,
              newPartials = isCurry ? partials : undefined,
              newPartialsRight = isCurry ? undefined : partials

            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG)

            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG)
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary,
              arity
            ]

            var result = wrapFunc.apply(undefined, newData)
            if (isLaziable(func)) {
              setData(result, newData)
            }
            result.placeholder = placeholder
            return setWrapToString(result, func, bitmask)
          }

          /**
           * Creates a function like `_.round`.
           *
           * @private
           * @param {string} methodName The name of the `Math` method to use when rounding.
           * @returns {Function} Returns the new round function.
           */
          function createRound(methodName) {
            var func = Math[methodName]
            return function (number, precision) {
              number = toNumber(number)
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292)
              if (precision && nativeIsFinite(number)) {
                // Shift with exponential notation to avoid floating-point issues.
                // See [MDN](https://mdn.io/round#Examples) for more details.
                var pair = (toString(number) + "e").split("e"),
                  value = func(pair[0] + "e" + (+pair[1] + precision))

                pair = (toString(value) + "e").split("e")
                return +(pair[0] + "e" + (+pair[1] - precision))
              }
              return func(number)
            }
          }

          /**
           * Creates a set object of `values`.
           *
           * @private
           * @param {Array} values The values to add to the set.
           * @returns {Object} Returns the new set.
           */
          var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY)
            ? noop
            : function (values) {
                return new Set(values)
              }

          /**
           * Creates a `_.toPairs` or `_.toPairsIn` function.
           *
           * @private
           * @param {Function} keysFunc The function to get the keys of a given object.
           * @returns {Function} Returns the new pairs function.
           */
          function createToPairs(keysFunc) {
            return function (object) {
              var tag = getTag(object)
              if (tag == mapTag) {
                return mapToArray(object)
              }
              if (tag == setTag) {
                return setToPairs(object)
              }
              return baseToPairs(object, keysFunc(object))
            }
          }

          /**
           * Creates a function that either curries or invokes `func` with optional
           * `this` binding and partially applied arguments.
           *
           * @private
           * @param {Function|string} func The function or method name to wrap.
           * @param {number} bitmask The bitmask flags.
           *    1 - `_.bind`
           *    2 - `_.bindKey`
           *    4 - `_.curry` or `_.curryRight` of a bound function
           *    8 - `_.curry`
           *   16 - `_.curryRight`
           *   32 - `_.partial`
           *   64 - `_.partialRight`
           *  128 - `_.rearg`
           *  256 - `_.ary`
           *  512 - `_.flip`
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to be partially applied.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG
            if (!isBindKey && typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            var length = partials ? partials.length : 0
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG)
              partials = holders = undefined
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0)
            arity = arity === undefined ? arity : toInteger(arity)
            length -= holders ? holders.length : 0

            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials,
                holdersRight = holders

              partials = holders = undefined
            }
            var data = isBindKey ? undefined : getData(func)

            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary,
              arity
            ]

            if (data) {
              mergeData(newData, data)
            }
            func = newData[0]
            bitmask = newData[1]
            thisArg = newData[2]
            partials = newData[3]
            holders = newData[4]
            arity = newData[9] =
              newData[9] === undefined
                ? isBindKey
                  ? 0
                  : func.length
                : nativeMax(newData[9] - length, 0)

            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result = createBind(func, bitmask, thisArg)
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result = createCurry(func, bitmask, arity)
            } else if (
              (bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
              !holders.length
            ) {
              result = createPartial(func, bitmask, thisArg, partials)
            } else {
              result = createHybrid.apply(undefined, newData)
            }
            var setter = data ? baseSetData : setData
            return setWrapToString(setter(result, newData), func, bitmask)
          }

          /**
           * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
           * of source objects to the destination object for all destination properties
           * that resolve to `undefined`.
           *
           * @private
           * @param {*} objValue The destination value.
           * @param {*} srcValue The source value.
           * @param {string} key The key of the property to assign.
           * @param {Object} object The parent object of `objValue`.
           * @returns {*} Returns the value to assign.
           */
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (
              objValue === undefined ||
              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))
            ) {
              return srcValue
            }
            return objValue
          }

          /**
           * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
           * objects into destination objects that are passed thru.
           *
           * @private
           * @param {*} objValue The destination value.
           * @param {*} srcValue The source value.
           * @param {string} key The key of the property to merge.
           * @param {Object} object The parent object of `objValue`.
           * @param {Object} source The parent object of `srcValue`.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           * @returns {*} Returns the value to assign.
           */
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              // Recursively merge objects and arrays (susceptible to call stack limits).
              stack.set(srcValue, objValue)
              baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack)
              stack["delete"](srcValue)
            }
            return objValue
          }

          /**
           * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
           * objects.
           *
           * @private
           * @param {*} value The value to inspect.
           * @param {string} key The key of the property to inspect.
           * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
           */
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value
          }

          /**
           * A specialized version of `baseIsEqualDeep` for arrays with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Array} array The array to compare.
           * @param {Array} other The other array to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `array` and `other` objects.
           * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
           */
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length

            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false
            }
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array)
            var othStacked = stack.get(other)
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array
            }
            var index = -1,
              result = true,
              seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined

            stack.set(array, other)
            stack.set(other, array)

            // Ignore non-index properties.
            while (++index < arrLength) {
              var arrValue = array[index],
                othValue = other[index]

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, arrValue, index, other, array, stack)
                  : customizer(arrValue, othValue, index, array, other, stack)
              }
              if (compared !== undefined) {
                if (compared) {
                  continue
                }
                result = false
                break
              }
              // Recursively compare arrays (susceptible to call stack limits).
              if (seen) {
                if (
                  !arraySome(other, function (othValue, othIndex) {
                    if (
                      !cacheHas(seen, othIndex) &&
                      (arrValue === othValue ||
                        equalFunc(arrValue, othValue, bitmask, customizer, stack))
                    ) {
                      return seen.push(othIndex)
                    }
                  })
                ) {
                  result = false
                  break
                }
              } else if (
                !(
                  arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )
              ) {
                result = false
                break
              }
            }
            stack["delete"](array)
            stack["delete"](other)
            return result
          }

          /**
           * A specialized version of `baseIsEqualDeep` for comparing objects of
           * the same `toStringTag`.
           *
           * **Note:** This function only supports comparing values with tags of
           * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {string} tag The `toStringTag` of the objects to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (
                  object.byteLength != other.byteLength ||
                  object.byteOffset != other.byteOffset
                ) {
                  return false
                }
                object = object.buffer
                other = other.buffer

              case arrayBufferTag:
                if (
                  object.byteLength != other.byteLength ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))
                ) {
                  return false
                }
                return true

              case boolTag:
              case dateTag:
              case numberTag:
                // Coerce booleans to `1` or `0` and dates to milliseconds.
                // Invalid dates are coerced to `NaN`.
                return eq(+object, +other)

              case errorTag:
                return object.name == other.name && object.message == other.message

              case regexpTag:
              case stringTag:
                // Coerce regexes to strings and treat strings, primitives and objects,
                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                // for more details.
                return object == other + ""

              case mapTag:
                var convert = mapToArray

              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG
                convert || (convert = setToArray)

                if (object.size != other.size && !isPartial) {
                  return false
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object)
                if (stacked) {
                  return stacked == other
                }
                bitmask |= COMPARE_UNORDERED_FLAG

                // Recursively compare objects (susceptible to call stack limits).
                stack.set(object, other)
                var result = equalArrays(
                  convert(object),
                  convert(other),
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
                stack["delete"](object)
                return result

              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other)
                }
            }
            return false
          }

          /**
           * A specialized version of `baseIsEqualDeep` for objects with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length

            if (objLength != othLength && !isPartial) {
              return false
            }
            var index = objLength
            while (index--) {
              var key = objProps[index]
              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false
              }
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object)
            var othStacked = stack.get(other)
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object
            }
            var result = true
            stack.set(object, other)
            stack.set(other, object)

            var skipCtor = isPartial
            while (++index < objLength) {
              key = objProps[index]
              var objValue = object[key],
                othValue = other[key]

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, objValue, key, other, object, stack)
                  : customizer(objValue, othValue, key, object, other, stack)
              }
              // Recursively compare objects (susceptible to call stack limits).
              if (
                !(compared === undefined
                  ? objValue === othValue ||
                    equalFunc(objValue, othValue, bitmask, customizer, stack)
                  : compared)
              ) {
                result = false
                break
              }
              skipCtor || (skipCtor = key == "constructor")
            }
            if (result && !skipCtor) {
              var objCtor = object.constructor,
                othCtor = other.constructor

              // Non `Object` object instances with different constructors are not equal.
              if (
                objCtor != othCtor &&
                "constructor" in object &&
                "constructor" in other &&
                !(
                  typeof objCtor == "function" &&
                  objCtor instanceof objCtor &&
                  typeof othCtor == "function" &&
                  othCtor instanceof othCtor
                )
              ) {
                result = false
              }
            }
            stack["delete"](object)
            stack["delete"](other)
            return result
          }

          /**
           * A specialized version of `baseRest` which flattens the rest array.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @returns {Function} Returns the new function.
           */
          function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + "")
          }

          /**
           * Creates an array of own enumerable property names and symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols)
          }

          /**
           * Creates an array of own and inherited enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn)
          }

          /**
           * Gets metadata for `func`.
           *
           * @private
           * @param {Function} func The function to query.
           * @returns {*} Returns the metadata for `func`.
           */
          var getData = !metaMap
            ? noop
            : function (func) {
                return metaMap.get(func)
              }

          /**
           * Gets the name of `func`.
           *
           * @private
           * @param {Function} func The function to query.
           * @returns {string} Returns the function name.
           */
          function getFuncName(func) {
            var result = func.name + "",
              array = realNames[result],
              length = hasOwnProperty.call(realNames, result) ? array.length : 0

            while (length--) {
              var data = array[length],
                otherFunc = data.func
              if (otherFunc == null || otherFunc == func) {
                return data.name
              }
            }
            return result
          }

          /**
           * Gets the argument placeholder value for `func`.
           *
           * @private
           * @param {Function} func The function to inspect.
           * @returns {*} Returns the placeholder value.
           */
          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func
            return object.placeholder
          }

          /**
           * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
           * this function returns the custom method, otherwise it returns `baseIteratee`.
           * If arguments are provided, the chosen function is invoked with them and
           * its result is returned.
           *
           * @private
           * @param {*} [value] The value to convert to an iteratee.
           * @param {number} [arity] The arity of the created iteratee.
           * @returns {Function} Returns the chosen function or its result.
           */
          function getIteratee() {
            var result = lodash.iteratee || iteratee
            result = result === iteratee ? baseIteratee : result
            return arguments.length ? result(arguments[0], arguments[1]) : result
          }

          /**
           * Gets the data for `map`.
           *
           * @private
           * @param {Object} map The map to query.
           * @param {string} key The reference key.
           * @returns {*} Returns the map data.
           */
          function getMapData(map, key) {
            var data = map.__data__
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map
          }

          /**
           * Gets the property names, values, and compare flags of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the match data of `object`.
           */
          function getMatchData(object) {
            var result = keys(object),
              length = result.length

            while (length--) {
              var key = result[length],
                value = object[key]

              result[length] = [key, value, isStrictComparable(value)]
            }
            return result
          }

          /**
           * Gets the native function at `key` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the method to get.
           * @returns {*} Returns the function if it's native, else `undefined`.
           */
          function getNative(object, key) {
            var value = getValue(object, key)
            return baseIsNative(value) ? value : undefined
          }

          /**
           * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the raw `toStringTag`.
           */
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag]

            try {
              value[symToStringTag] = undefined
              var unmasked = true
            } catch (e) {}

            var result = nativeObjectToString.call(value)
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag
              } else {
                delete value[symToStringTag]
              }
            }
            return result
          }

          /**
           * Creates an array of the own enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */
          var getSymbols = !nativeGetSymbols
            ? stubArray
            : function (object) {
                if (object == null) {
                  return []
                }
                object = Object(object)
                return arrayFilter(nativeGetSymbols(object), function (symbol) {
                  return propertyIsEnumerable.call(object, symbol)
                })
              }

          /**
           * Creates an array of the own and inherited enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */
          var getSymbolsIn = !nativeGetSymbols
            ? stubArray
            : function (object) {
                var result = []
                while (object) {
                  arrayPush(result, getSymbols(object))
                  object = getPrototype(object)
                }
                return result
              }

          /**
           * Gets the `toStringTag` of `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          var getTag = baseGetTag

          // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
          if (
            (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map()) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set()) != setTag) ||
            (WeakMap && getTag(new WeakMap()) != weakMapTag)
          ) {
            getTag = function (value) {
              var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : ""

              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag
                  case mapCtorString:
                    return mapTag
                  case promiseCtorString:
                    return promiseTag
                  case setCtorString:
                    return setTag
                  case weakMapCtorString:
                    return weakMapTag
                }
              }
              return result
            }
          }

          /**
           * Gets the view, applying any `transforms` to the `start` and `end` positions.
           *
           * @private
           * @param {number} start The start of the view.
           * @param {number} end The end of the view.
           * @param {Array} transforms The transformations to apply to the view.
           * @returns {Object} Returns an object containing the `start` and `end`
           *  positions of the view.
           */
          function getView(start, end, transforms) {
            var index = -1,
              length = transforms.length

            while (++index < length) {
              var data = transforms[index],
                size = data.size

              switch (data.type) {
                case "drop":
                  start += size
                  break
                case "dropRight":
                  end -= size
                  break
                case "take":
                  end = nativeMin(end, start + size)
                  break
                case "takeRight":
                  start = nativeMax(start, end - size)
                  break
              }
            }
            return { start: start, end: end }
          }

          /**
           * Extracts wrapper details from the `source` body comment.
           *
           * @private
           * @param {string} source The source to inspect.
           * @returns {Array} Returns the wrapper details.
           */
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails)
            return match ? match[1].split(reSplitDetails) : []
          }

          /**
           * Checks if `path` exists on `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @param {Function} hasFunc The function to check properties.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           */
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object)

            var index = -1,
              length = path.length,
              result = false

            while (++index < length) {
              var key = toKey(path[index])
              if (!(result = object != null && hasFunc(object, key))) {
                break
              }
              object = object[key]
            }
            if (result || ++index != length) {
              return result
            }
            length = object == null ? 0 : object.length
            return (
              !!length &&
              isLength(length) &&
              isIndex(key, length) &&
              (isArray(object) || isArguments(object))
            )
          }

          /**
           * Initializes an array clone.
           *
           * @private
           * @param {Array} array The array to clone.
           * @returns {Array} Returns the initialized clone.
           */
          function initCloneArray(array) {
            var length = array.length,
              result = new array.constructor(length)

            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
              result.index = array.index
              result.input = array.input
            }
            return result
          }

          /**
           * Initializes an object clone.
           *
           * @private
           * @param {Object} object The object to clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object)
              ? baseCreate(getPrototype(object))
              : {}
          }

          /**
           * Initializes an object clone based on its `toStringTag`.
           *
           * **Note:** This function only supports cloning values with tags of
           * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
           *
           * @private
           * @param {Object} object The object to clone.
           * @param {string} tag The `toStringTag` of the object to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object)

              case boolTag:
              case dateTag:
                return new Ctor(+object)

              case dataViewTag:
                return cloneDataView(object, isDeep)

              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep)

              case mapTag:
                return new Ctor()

              case numberTag:
              case stringTag:
                return new Ctor(object)

              case regexpTag:
                return cloneRegExp(object)

              case setTag:
                return new Ctor()

              case symbolTag:
                return cloneSymbol(object)
            }
          }

          /**
           * Inserts wrapper `details` in a comment at the top of the `source` body.
           *
           * @private
           * @param {string} source The source to modify.
           * @returns {Array} details The details to insert.
           * @returns {string} Returns the modified source.
           */
          function insertWrapDetails(source, details) {
            var length = details.length
            if (!length) {
              return source
            }
            var lastIndex = length - 1
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex]
            details = details.join(length > 2 ? ", " : " ")
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n")
          }

          /**
           * Checks if `value` is a flattenable `arguments` object or array.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
           */
          function isFlattenable(value) {
            return (
              isArray(value) ||
              isArguments(value) ||
              !!(spreadableSymbol && value && value[spreadableSymbol])
            )
          }

          /**
           * Checks if `value` is a valid array-like index.
           *
           * @private
           * @param {*} value The value to check.
           * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
           * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
           */
          function isIndex(value, length) {
            var type = typeof value
            length = length == null ? MAX_SAFE_INTEGER : length

            return (
              !!length &&
              (type == "number" || (type != "symbol" && reIsUint.test(value))) &&
              value > -1 &&
              value % 1 == 0 &&
              value < length
            )
          }

          /**
           * Checks if the given arguments are from an iteratee call.
           *
           * @private
           * @param {*} value The potential iteratee value argument.
           * @param {*} index The potential iteratee index or key argument.
           * @param {*} object The potential iteratee object argument.
           * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
           *  else `false`.
           */
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false
            }
            var type = typeof index
            if (
              type == "number"
                ? isArrayLike(object) && isIndex(index, object.length)
                : type == "string" && index in object
            ) {
              return eq(object[index], value)
            }
            return false
          }

          /**
           * Checks if `value` is a property name and not a property path.
           *
           * @private
           * @param {*} value The value to check.
           * @param {Object} [object] The object to query keys on.
           * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
           */
          function isKey(value, object) {
            if (isArray(value)) {
              return false
            }
            var type = typeof value
            if (
              type == "number" ||
              type == "symbol" ||
              type == "boolean" ||
              value == null ||
              isSymbol(value)
            ) {
              return true
            }
            return (
              reIsPlainProp.test(value) ||
              !reIsDeepProp.test(value) ||
              (object != null && value in Object(object))
            )
          }

          /**
           * Checks if `value` is suitable for use as unique object key.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
           */
          function isKeyable(value) {
            var type = typeof value
            return type == "string" || type == "number" || type == "symbol" || type == "boolean"
              ? value !== "__proto__"
              : value === null
          }

          /**
           * Checks if `func` has a lazy counterpart.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
           *  else `false`.
           */
          function isLaziable(func) {
            var funcName = getFuncName(func),
              other = lodash[funcName]

            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false
            }
            if (func === other) {
              return true
            }
            var data = getData(other)
            return !!data && func === data[0]
          }

          /**
           * Checks if `func` has its source masked.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` is masked, else `false`.
           */
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func
          }

          /**
           * Checks if `func` is capable of being masked.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
           */
          var isMaskable = coreJsData ? isFunction : stubFalse

          /**
           * Checks if `value` is likely a prototype object.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
           */
          function isPrototype(value) {
            var Ctor = value && value.constructor,
              proto = (typeof Ctor == "function" && Ctor.prototype) || objectProto

            return value === proto
          }

          /**
           * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` if suitable for strict
           *  equality comparisons, else `false`.
           */
          function isStrictComparable(value) {
            return value === value && !isObject(value)
          }

          /**
           * A specialized version of `matchesProperty` for source values suitable
           * for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */
          function matchesStrictComparable(key, srcValue) {
            return function (object) {
              if (object == null) {
                return false
              }
              return object[key] === srcValue && (srcValue !== undefined || key in Object(object))
            }
          }

          /**
           * A specialized version of `_.memoize` which clears the memoized function's
           * cache when it exceeds `MAX_MEMOIZE_SIZE`.
           *
           * @private
           * @param {Function} func The function to have its output memoized.
           * @returns {Function} Returns the new memoized function.
           */
          function memoizeCapped(func) {
            var result = memoize(func, function (key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear()
              }
              return key
            })

            var cache = result.cache
            return result
          }

          /**
           * Merges the function metadata of `source` into `data`.
           *
           * Merging metadata reduces the number of wrappers used to invoke a function.
           * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
           * may be applied regardless of execution order. Methods like `_.ary` and
           * `_.rearg` modify function arguments, making the order in which they are
           * executed important, preventing the merging of metadata. However, we make
           * an exception for a safe combined case where curried functions have `_.ary`
           * and or `_.rearg` applied.
           *
           * @private
           * @param {Array} data The destination metadata.
           * @param {Array} source The source metadata.
           * @returns {Array} Returns `data`.
           */
          function mergeData(data, source) {
            var bitmask = data[1],
              srcBitmask = source[1],
              newBitmask = bitmask | srcBitmask,
              isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG)

            var isCombo =
              (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
              (srcBitmask == WRAP_ARY_FLAG &&
                bitmask == WRAP_REARG_FLAG &&
                data[7].length <= source[8]) ||
              (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                source[7].length <= source[8] &&
                bitmask == WRAP_CURRY_FLAG)

            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) {
              return data
            }
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2]
              // Set when currying a bound function.
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG
            }
            // Compose partial arguments.
            var value = source[3]
            if (value) {
              var partials = data[3]
              data[3] = partials ? composeArgs(partials, value, source[4]) : value
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4]
            }
            // Compose partial right arguments.
            value = source[5]
            if (value) {
              partials = data[5]
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6]
            }
            // Use source `argPos` if available.
            value = source[7]
            if (value) {
              data[7] = value
            }
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8])
            }
            // Use source `arity` if one is not provided.
            if (data[9] == null) {
              data[9] = source[9]
            }
            // Use source `func` and merge bitmasks.
            data[0] = source[0]
            data[1] = newBitmask

            return data
          }

          /**
           * This function is like
           * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * except that it includes inherited enumerable properties.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function nativeKeysIn(object) {
            var result = []
            if (object != null) {
              for (var key in Object(object)) {
                result.push(key)
              }
            }
            return result
          }

          /**
           * Converts `value` to a string using `Object.prototype.toString`.
           *
           * @private
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           */
          function objectToString(value) {
            return nativeObjectToString.call(value)
          }

          /**
           * A specialized version of `baseRest` which transforms the rest array.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @param {Function} transform The rest array transform.
           * @returns {Function} Returns the new function.
           */
          function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0)
            return function () {
              var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length)

              while (++index < length) {
                array[index] = args[start + index]
              }
              index = -1
              var otherArgs = Array(start + 1)
              while (++index < start) {
                otherArgs[index] = args[index]
              }
              otherArgs[start] = transform(array)
              return apply(func, this, otherArgs)
            }
          }

          /**
           * Gets the parent value at `path` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} path The path to get the parent value of.
           * @returns {*} Returns the parent value.
           */
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1))
          }

          /**
           * Reorder `array` according to the specified indexes where the element at
           * the first index is assigned as the first element, the element at
           * the second index is assigned as the second element, and so on.
           *
           * @private
           * @param {Array} array The array to reorder.
           * @param {Array} indexes The arranged array indexes.
           * @returns {Array} Returns `array`.
           */
          function reorder(array, indexes) {
            var arrLength = array.length,
              length = nativeMin(indexes.length, arrLength),
              oldArray = copyArray(array)

            while (length--) {
              var index = indexes[length]
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined
            }
            return array
          }

          /**
           * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return
            }

            if (key == "__proto__") {
              return
            }

            return object[key]
          }

          /**
           * Sets metadata for `func`.
           *
           * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
           * period of time, it will trip its breaker and transition to an identity
           * function to avoid garbage collection pauses in V8. See
           * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
           * for more details.
           *
           * @private
           * @param {Function} func The function to associate metadata with.
           * @param {*} data The metadata.
           * @returns {Function} Returns `func`.
           */
          var setData = shortOut(baseSetData)

          /**
           * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
           *
           * @private
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @returns {number|Object} Returns the timer id or timeout object.
           */
          var setTimeout =
            ctxSetTimeout ||
            function (func, wait) {
              return root.setTimeout(func, wait)
            }

          /**
           * Sets the `toString` method of `func` to return `string`.
           *
           * @private
           * @param {Function} func The function to modify.
           * @param {Function} string The `toString` result.
           * @returns {Function} Returns `func`.
           */
          var setToString = shortOut(baseSetToString)

          /**
           * Sets the `toString` method of `wrapper` to mimic the source of `reference`
           * with wrapper details in a comment at the top of the source body.
           *
           * @private
           * @param {Function} wrapper The function to modify.
           * @param {Function} reference The reference function.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @returns {Function} Returns `wrapper`.
           */
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + ""
            return setToString(
              wrapper,
              insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask))
            )
          }

          /**
           * Creates a function that'll short out and invoke `identity` instead
           * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
           * milliseconds.
           *
           * @private
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new shortable function.
           */
          function shortOut(func) {
            var count = 0,
              lastCalled = 0

            return function () {
              var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled)

              lastCalled = stamp
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0]
                }
              } else {
                count = 0
              }
              return func.apply(undefined, arguments)
            }
          }

          /**
           * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
           *
           * @private
           * @param {Array} array The array to shuffle.
           * @param {number} [size=array.length] The size of `array`.
           * @returns {Array} Returns `array`.
           */
          function shuffleSelf(array, size) {
            var index = -1,
              length = array.length,
              lastIndex = length - 1

            size = size === undefined ? length : size
            while (++index < size) {
              var rand = baseRandom(index, lastIndex),
                value = array[rand]

              array[rand] = array[index]
              array[index] = value
            }
            array.length = size
            return array
          }

          /**
           * Converts `string` to a property path array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the property path array.
           */
          var stringToPath = memoizeCapped(function (string) {
            var result = []
            if (string.charCodeAt(0) === 46 /* . */) {
              result.push("")
            }
            string.replace(rePropName, function (match, number, quote, subString) {
              result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match)
            })
            return result
          })

          /**
           * Converts `value` to a string key if it's not a string or symbol.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {string|symbol} Returns the key.
           */
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value
            }
            var result = value + ""
            return result == "0" && 1 / value == -INFINITY ? "-0" : result
          }

          /**
           * Converts `func` to its source code.
           *
           * @private
           * @param {Function} func The function to convert.
           * @returns {string} Returns the source code.
           */
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func)
              } catch (e) {}
              try {
                return func + ""
              } catch (e) {}
            }
            return ""
          }

          /**
           * Updates wrapper `details` based on `bitmask` flags.
           *
           * @private
           * @returns {Array} details The details to modify.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @returns {Array} Returns `details`.
           */
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function (pair) {
              var value = "_." + pair[0]
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value)
              }
            })
            return details.sort()
          }

          /**
           * Creates a clone of `wrapper`.
           *
           * @private
           * @param {Object} wrapper The wrapper to clone.
           * @returns {Object} Returns the cloned wrapper.
           */
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone()
            }
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__)
            result.__actions__ = copyArray(wrapper.__actions__)
            result.__index__ = wrapper.__index__
            result.__values__ = wrapper.__values__
            return result
          }

          /*------------------------------------------------------------------------*/

          /**
           * Creates an array of elements split into groups the length of `size`.
           * If `array` can't be split evenly, the final chunk will be the remaining
           * elements.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to process.
           * @param {number} [size=1] The length of each chunk
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the new array of chunks.
           * @example
           *
           * _.chunk(['a', 'b', 'c', 'd'], 2);
           * // => [['a', 'b'], ['c', 'd']]
           *
           * _.chunk(['a', 'b', 'c', 'd'], 3);
           * // => [['a', 'b', 'c'], ['d']]
           */
          function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
              size = 1
            } else {
              size = nativeMax(toInteger(size), 0)
            }
            var length = array == null ? 0 : array.length
            if (!length || size < 1) {
              return []
            }
            var index = 0,
              resIndex = 0,
              result = Array(nativeCeil(length / size))

            while (index < length) {
              result[resIndex++] = baseSlice(array, index, (index += size))
            }
            return result
          }

          /**
           * Creates an array with all falsey values removed. The values `false`, `null`,
           * `0`, `""`, `undefined`, and `NaN` are falsey.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to compact.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.compact([0, 1, false, 2, '', 3]);
           * // => [1, 2, 3]
           */
          function compact(array) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = []

            while (++index < length) {
              var value = array[index]
              if (value) {
                result[resIndex++] = value
              }
            }
            return result
          }

          /**
           * Creates a new array concatenating `array` with any additional arrays
           * and/or values.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to concatenate.
           * @param {...*} [values] The values to concatenate.
           * @returns {Array} Returns the new concatenated array.
           * @example
           *
           * var array = [1];
           * var other = _.concat(array, 2, [3], [[4]]);
           *
           * console.log(other);
           * // => [1, 2, 3, [4]]
           *
           * console.log(array);
           * // => [1]
           */
          function concat() {
            var length = arguments.length
            if (!length) {
              return []
            }
            var args = Array(length - 1),
              array = arguments[0],
              index = length

            while (index--) {
              args[index - 1] = arguments[index]
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))
          }

          /**
           * Creates an array of `array` values not included in the other given arrays
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. The order and references of result values are
           * determined by the first array.
           *
           * **Note:** Unlike `_.pullAll`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.without, _.xor
           * @example
           *
           * _.difference([2, 1], [2, 3]);
           * // => [1]
           */
          var difference = baseRest(function (array, values) {
            return isArrayLikeObject(array)
              ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
              : []
          })

          /**
           * This method is like `_.difference` except that it accepts `iteratee` which
           * is invoked for each element of `array` and `values` to generate the criterion
           * by which they're compared. The order and references of result values are
           * determined by the first array. The iteratee is invoked with one argument:
           * (value).
           *
           * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
           * // => [{ 'x': 2 }]
           */
          var differenceBy = baseRest(function (array, values) {
            var iteratee = last(values)
            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined
            }
            return isArrayLikeObject(array)
              ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true),
                  getIteratee(iteratee, 2)
                )
              : []
          })

          /**
           * This method is like `_.difference` except that it accepts `comparator`
           * which is invoked to compare elements of `array` to `values`. The order and
           * references of result values are determined by the first array. The comparator
           * is invoked with two arguments: (arrVal, othVal).
           *
           * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           *
           * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
           * // => [{ 'x': 2, 'y': 1 }]
           */
          var differenceWith = baseRest(function (array, values) {
            var comparator = last(values)
            if (isArrayLikeObject(comparator)) {
              comparator = undefined
            }
            return isArrayLikeObject(array)
              ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true),
                  undefined,
                  comparator
                )
              : []
          })

          /**
           * Creates a slice of `array` with `n` elements dropped from the beginning.
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to drop.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.drop([1, 2, 3]);
           * // => [2, 3]
           *
           * _.drop([1, 2, 3], 2);
           * // => [3]
           *
           * _.drop([1, 2, 3], 5);
           * // => []
           *
           * _.drop([1, 2, 3], 0);
           * // => [1, 2, 3]
           */
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            return baseSlice(array, n < 0 ? 0 : n, length)
          }

          /**
           * Creates a slice of `array` with `n` elements dropped from the end.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to drop.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.dropRight([1, 2, 3]);
           * // => [1, 2]
           *
           * _.dropRight([1, 2, 3], 2);
           * // => [1]
           *
           * _.dropRight([1, 2, 3], 5);
           * // => []
           *
           * _.dropRight([1, 2, 3], 0);
           * // => [1, 2, 3]
           */
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            n = length - n
            return baseSlice(array, 0, n < 0 ? 0 : n)
          }

          /**
           * Creates a slice of `array` excluding elements dropped from the end.
           * Elements are dropped until `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.dropRightWhile(users, function(o) { return !o.active; });
           * // => objects for ['barney']
           *
           * // The `_.matches` iteratee shorthand.
           * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
           * // => objects for ['barney', 'fred']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.dropRightWhile(users, ['active', false]);
           * // => objects for ['barney']
           *
           * // The `_.property` iteratee shorthand.
           * _.dropRightWhile(users, 'active');
           * // => objects for ['barney', 'fred', 'pebbles']
           */
          function dropRightWhile(array, predicate) {
            return array && array.length
              ? baseWhile(array, getIteratee(predicate, 3), true, true)
              : []
          }

          /**
           * Creates a slice of `array` excluding elements dropped from the beginning.
           * Elements are dropped until `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.dropWhile(users, function(o) { return !o.active; });
           * // => objects for ['pebbles']
           *
           * // The `_.matches` iteratee shorthand.
           * _.dropWhile(users, { 'user': 'barney', 'active': false });
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.dropWhile(users, ['active', false]);
           * // => objects for ['pebbles']
           *
           * // The `_.property` iteratee shorthand.
           * _.dropWhile(users, 'active');
           * // => objects for ['barney', 'fred', 'pebbles']
           */
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : []
          }

          /**
           * Fills elements of `array` with `value` from `start` up to, but not
           * including, `end`.
           *
           * **Note:** This method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Array
           * @param {Array} array The array to fill.
           * @param {*} value The value to fill `array` with.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _.fill(array, 'a');
           * console.log(array);
           * // => ['a', 'a', 'a']
           *
           * _.fill(Array(3), 2);
           * // => [2, 2, 2]
           *
           * _.fill([4, 6, 8, 10], '*', 1, 3);
           * // => [4, '*', '*', 10]
           */
          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
              start = 0
              end = length
            }
            return baseFill(array, value, start, end)
          }

          /**
           * This method is like `_.find` except that it returns the index of the first
           * element `predicate` returns truthy for instead of the element itself.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {number} Returns the index of the found element, else `-1`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.findIndex(users, function(o) { return o.user == 'barney'; });
           * // => 0
           *
           * // The `_.matches` iteratee shorthand.
           * _.findIndex(users, { 'user': 'fred', 'active': false });
           * // => 1
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findIndex(users, ['active', false]);
           * // => 0
           *
           * // The `_.property` iteratee shorthand.
           * _.findIndex(users, 'active');
           * // => 2
           */
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex)
            if (index < 0) {
              index = nativeMax(length + index, 0)
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index)
          }

          /**
           * This method is like `_.findIndex` except that it iterates over elements
           * of `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=array.length-1] The index to search from.
           * @returns {number} Returns the index of the found element, else `-1`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
           * // => 2
           *
           * // The `_.matches` iteratee shorthand.
           * _.findLastIndex(users, { 'user': 'barney', 'active': true });
           * // => 0
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findLastIndex(users, ['active', false]);
           * // => 2
           *
           * // The `_.property` iteratee shorthand.
           * _.findLastIndex(users, 'active');
           * // => 0
           */
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = length - 1
            if (fromIndex !== undefined) {
              index = toInteger(fromIndex)
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true)
          }

          /**
           * Flattens `array` a single level deep.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * _.flatten([1, [2, [3, [4]], 5]]);
           * // => [1, 2, [3, [4]], 5]
           */
          function flatten(array) {
            var length = array == null ? 0 : array.length
            return length ? baseFlatten(array, 1) : []
          }

          /**
           * Recursively flattens `array`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * _.flattenDeep([1, [2, [3, [4]], 5]]);
           * // => [1, 2, 3, 4, 5]
           */
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length
            return length ? baseFlatten(array, INFINITY) : []
          }

          /**
           * Recursively flatten `array` up to `depth` times.
           *
           * @static
           * @memberOf _
           * @since 4.4.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @param {number} [depth=1] The maximum recursion depth.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * var array = [1, [2, [3, [4]], 5]];
           *
           * _.flattenDepth(array, 1);
           * // => [1, 2, [3, [4]], 5]
           *
           * _.flattenDepth(array, 2);
           * // => [1, 2, 3, [4], 5]
           */
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            depth = depth === undefined ? 1 : toInteger(depth)
            return baseFlatten(array, depth)
          }

          /**
           * The inverse of `_.toPairs`; this method returns an object composed
           * from key-value `pairs`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} pairs The key-value pairs.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.fromPairs([['a', 1], ['b', 2]]);
           * // => { 'a': 1, 'b': 2 }
           */
          function fromPairs(pairs) {
            var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {}

            while (++index < length) {
              var pair = pairs[index]
              result[pair[0]] = pair[1]
            }
            return result
          }

          /**
           * Gets the first element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @alias first
           * @category Array
           * @param {Array} array The array to query.
           * @returns {*} Returns the first element of `array`.
           * @example
           *
           * _.head([1, 2, 3]);
           * // => 1
           *
           * _.head([]);
           * // => undefined
           */
          function head(array) {
            return array && array.length ? array[0] : undefined
          }

          /**
           * Gets the index at which the first occurrence of `value` is found in `array`
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. If `fromIndex` is negative, it's used as the
           * offset from the end of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.indexOf([1, 2, 1, 2], 2);
           * // => 1
           *
           * // Search from the `fromIndex`.
           * _.indexOf([1, 2, 1, 2], 2, 2);
           * // => 3
           */
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex)
            if (index < 0) {
              index = nativeMax(length + index, 0)
            }
            return baseIndexOf(array, value, index)
          }

          /**
           * Gets all but the last element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.initial([1, 2, 3]);
           * // => [1, 2]
           */
          function initial(array) {
            var length = array == null ? 0 : array.length
            return length ? baseSlice(array, 0, -1) : []
          }

          /**
           * Creates an array of unique values that are included in all given arrays
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. The order and references of result values are
           * determined by the first array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * _.intersection([2, 1], [2, 3]);
           * // => [2]
           */
          var intersection = baseRest(function (arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject)
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : []
          })

          /**
           * This method is like `_.intersection` except that it accepts `iteratee`
           * which is invoked for each element of each `arrays` to generate the criterion
           * by which they're compared. The order and references of result values are
           * determined by the first array. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [2.1]
           *
           * // The `_.property` iteratee shorthand.
           * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }]
           */
          var intersectionBy = baseRest(function (arrays) {
            var iteratee = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject)

            if (iteratee === last(mapped)) {
              iteratee = undefined
            } else {
              mapped.pop()
            }
            return mapped.length && mapped[0] === arrays[0]
              ? baseIntersection(mapped, getIteratee(iteratee, 2))
              : []
          })

          /**
           * This method is like `_.intersection` except that it accepts `comparator`
           * which is invoked to compare elements of `arrays`. The order and references
           * of result values are determined by the first array. The comparator is
           * invoked with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.intersectionWith(objects, others, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }]
           */
          var intersectionWith = baseRest(function (arrays) {
            var comparator = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject)

            comparator = typeof comparator == "function" ? comparator : undefined
            if (comparator) {
              mapped.pop()
            }
            return mapped.length && mapped[0] === arrays[0]
              ? baseIntersection(mapped, undefined, comparator)
              : []
          })

          /**
           * Converts all elements in `array` into a string separated by `separator`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to convert.
           * @param {string} [separator=','] The element separator.
           * @returns {string} Returns the joined string.
           * @example
           *
           * _.join(['a', 'b', 'c'], '~');
           * // => 'a~b~c'
           */
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator)
          }

          /**
           * Gets the last element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {*} Returns the last element of `array`.
           * @example
           *
           * _.last([1, 2, 3]);
           * // => 3
           */
          function last(array) {
            var length = array == null ? 0 : array.length
            return length ? array[length - 1] : undefined
          }

          /**
           * This method is like `_.indexOf` except that it iterates over elements of
           * `array` from right to left.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=array.length-1] The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.lastIndexOf([1, 2, 1, 2], 2);
           * // => 3
           *
           * // Search from the `fromIndex`.
           * _.lastIndexOf([1, 2, 1, 2], 2, 2);
           * // => 1
           */
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = length
            if (fromIndex !== undefined) {
              index = toInteger(fromIndex)
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)
            }
            return value === value
              ? strictLastIndexOf(array, value, index)
              : baseFindIndex(array, baseIsNaN, index, true)
          }

          /**
           * Gets the element at index `n` of `array`. If `n` is negative, the nth
           * element from the end is returned.
           *
           * @static
           * @memberOf _
           * @since 4.11.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=0] The index of the element to return.
           * @returns {*} Returns the nth element of `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'd'];
           *
           * _.nth(array, 1);
           * // => 'b'
           *
           * _.nth(array, -2);
           * // => 'c';
           */
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined
          }

          /**
           * Removes all given values from `array` using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
           * to remove elements from an array by predicate.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {...*} [values] The values to remove.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
           *
           * _.pull(array, 'a', 'c');
           * console.log(array);
           * // => ['b', 'b']
           */
          var pull = baseRest(pullAll)

          /**
           * This method is like `_.pull` except that it accepts an array of values to remove.
           *
           * **Note:** Unlike `_.difference`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
           *
           * _.pullAll(array, ['a', 'c']);
           * console.log(array);
           * // => ['b', 'b']
           */
          function pullAll(array, values) {
            return array && array.length && values && values.length
              ? basePullAll(array, values)
              : array
          }

          /**
           * This method is like `_.pullAll` except that it accepts `iteratee` which is
           * invoked for each element of `array` and `values` to generate the criterion
           * by which they're compared. The iteratee is invoked with one argument: (value).
           *
           * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
           *
           * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
           * console.log(array);
           * // => [{ 'x': 2 }]
           */
          function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length
              ? basePullAll(array, values, getIteratee(iteratee, 2))
              : array
          }

          /**
           * This method is like `_.pullAll` except that it accepts `comparator` which
           * is invoked to compare elements of `array` to `values`. The comparator is
           * invoked with two arguments: (arrVal, othVal).
           *
           * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
           *
           * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
           * console.log(array);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
           */
          function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length
              ? basePullAll(array, values, undefined, comparator)
              : array
          }

          /**
           * Removes elements from `array` corresponding to `indexes` and returns an
           * array of removed elements.
           *
           * **Note:** Unlike `_.at`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {...(number|number[])} [indexes] The indexes of elements to remove.
           * @returns {Array} Returns the new array of removed elements.
           * @example
           *
           * var array = ['a', 'b', 'c', 'd'];
           * var pulled = _.pullAt(array, [1, 3]);
           *
           * console.log(array);
           * // => ['a', 'c']
           *
           * console.log(pulled);
           * // => ['b', 'd']
           */
          var pullAt = flatRest(function (array, indexes) {
            var length = array == null ? 0 : array.length,
              result = baseAt(array, indexes)

            basePullAt(
              array,
              arrayMap(indexes, function (index) {
                return isIndex(index, length) ? +index : index
              }).sort(compareAscending)
            )

            return result
          })

          /**
           * Removes all elements from `array` that `predicate` returns truthy for
           * and returns an array of the removed elements. The predicate is invoked
           * with three arguments: (value, index, array).
           *
           * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
           * to pull elements from an array by value.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new array of removed elements.
           * @example
           *
           * var array = [1, 2, 3, 4];
           * var evens = _.remove(array, function(n) {
           *   return n % 2 == 0;
           * });
           *
           * console.log(array);
           * // => [1, 3]
           *
           * console.log(evens);
           * // => [2, 4]
           */
          function remove(array, predicate) {
            var result = []
            if (!(array && array.length)) {
              return result
            }
            var index = -1,
              indexes = [],
              length = array.length

            predicate = getIteratee(predicate, 3)
            while (++index < length) {
              var value = array[index]
              if (predicate(value, index, array)) {
                result.push(value)
                indexes.push(index)
              }
            }
            basePullAt(array, indexes)
            return result
          }

          /**
           * Reverses `array` so that the first element becomes the last, the second
           * element becomes the second to last, and so on.
           *
           * **Note:** This method mutates `array` and is based on
           * [`Array#reverse`](https://mdn.io/Array/reverse).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _.reverse(array);
           * // => [3, 2, 1]
           *
           * console.log(array);
           * // => [3, 2, 1]
           */
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array)
          }

          /**
           * Creates a slice of `array` from `start` up to, but not including, `end`.
           *
           * **Note:** This method is used instead of
           * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
           * returned.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to slice.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the slice of `array`.
           */
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
              start = 0
              end = length
            } else {
              start = start == null ? 0 : toInteger(start)
              end = end === undefined ? length : toInteger(end)
            }
            return baseSlice(array, start, end)
          }

          /**
           * Uses a binary search to determine the lowest index at which `value`
           * should be inserted into `array` in order to maintain its sort order.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * _.sortedIndex([30, 50], 40);
           * // => 1
           */
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value)
          }

          /**
           * This method is like `_.sortedIndex` except that it accepts `iteratee`
           * which is invoked for `value` and each element of `array` to compute their
           * sort ranking. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * var objects = [{ 'x': 4 }, { 'x': 5 }];
           *
           * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
           * // => 0
           *
           * // The `_.property` iteratee shorthand.
           * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
           * // => 0
           */
          function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2))
          }

          /**
           * This method is like `_.indexOf` except that it performs a binary
           * search on a sorted `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
           * // => 1
           */
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length
            if (length) {
              var index = baseSortedIndex(array, value)
              if (index < length && eq(array[index], value)) {
                return index
              }
            }
            return -1
          }

          /**
           * This method is like `_.sortedIndex` except that it returns the highest
           * index at which `value` should be inserted into `array` in order to
           * maintain its sort order.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
           * // => 4
           */
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true)
          }

          /**
           * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
           * which is invoked for `value` and each element of `array` to compute their
           * sort ranking. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * var objects = [{ 'x': 4 }, { 'x': 5 }];
           *
           * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
           * // => 1
           *
           * // The `_.property` iteratee shorthand.
           * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
           * // => 1
           */
          function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true)
          }

          /**
           * This method is like `_.lastIndexOf` except that it performs a binary
           * search on a sorted `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
           * // => 3
           */
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1
              if (eq(array[index], value)) {
                return index
              }
            }
            return -1
          }

          /**
           * This method is like `_.uniq` except that it's designed and optimized
           * for sorted arrays.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.sortedUniq([1, 1, 2]);
           * // => [1, 2]
           */
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : []
          }

          /**
           * This method is like `_.uniqBy` except that it's designed and optimized
           * for sorted arrays.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
           * // => [1.1, 2.3]
           */
          function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : []
          }

          /**
           * Gets all but the first element of `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.tail([1, 2, 3]);
           * // => [2, 3]
           */
          function tail(array) {
            var length = array == null ? 0 : array.length
            return length ? baseSlice(array, 1, length) : []
          }

          /**
           * Creates a slice of `array` with `n` elements taken from the beginning.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to take.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.take([1, 2, 3]);
           * // => [1]
           *
           * _.take([1, 2, 3], 2);
           * // => [1, 2]
           *
           * _.take([1, 2, 3], 5);
           * // => [1, 2, 3]
           *
           * _.take([1, 2, 3], 0);
           * // => []
           */
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            return baseSlice(array, 0, n < 0 ? 0 : n)
          }

          /**
           * Creates a slice of `array` with `n` elements taken from the end.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to take.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.takeRight([1, 2, 3]);
           * // => [3]
           *
           * _.takeRight([1, 2, 3], 2);
           * // => [2, 3]
           *
           * _.takeRight([1, 2, 3], 5);
           * // => [1, 2, 3]
           *
           * _.takeRight([1, 2, 3], 0);
           * // => []
           */
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            n = length - n
            return baseSlice(array, n < 0 ? 0 : n, length)
          }

          /**
           * Creates a slice of `array` with elements taken from the end. Elements are
           * taken until `predicate` returns falsey. The predicate is invoked with
           * three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.takeRightWhile(users, function(o) { return !o.active; });
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.matches` iteratee shorthand.
           * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
           * // => objects for ['pebbles']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.takeRightWhile(users, ['active', false]);
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.property` iteratee shorthand.
           * _.takeRightWhile(users, 'active');
           * // => []
           */
          function takeRightWhile(array, predicate) {
            return array && array.length
              ? baseWhile(array, getIteratee(predicate, 3), false, true)
              : []
          }

          /**
           * Creates a slice of `array` with elements taken from the beginning. Elements
           * are taken until `predicate` returns falsey. The predicate is invoked with
           * three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.takeWhile(users, function(o) { return !o.active; });
           * // => objects for ['barney', 'fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.takeWhile(users, { 'user': 'barney', 'active': false });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.takeWhile(users, ['active', false]);
           * // => objects for ['barney', 'fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.takeWhile(users, 'active');
           * // => []
           */
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : []
          }

          /**
           * Creates an array of unique values, in order, from all given arrays using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * _.union([2], [1, 2]);
           * // => [2, 1]
           */
          var union = baseRest(function (arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true))
          })

          /**
           * This method is like `_.union` except that it accepts `iteratee` which is
           * invoked for each element of each `arrays` to generate the criterion by
           * which uniqueness is computed. Result values are chosen from the first
           * array in which the value occurs. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * _.unionBy([2.1], [1.2, 2.3], Math.floor);
           * // => [2.1, 1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }, { 'x': 2 }]
           */
          var unionBy = baseRest(function (arrays) {
            var iteratee = last(arrays)
            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined
            }
            return baseUniq(
              baseFlatten(arrays, 1, isArrayLikeObject, true),
              getIteratee(iteratee, 2)
            )
          })

          /**
           * This method is like `_.union` except that it accepts `comparator` which
           * is invoked to compare elements of `arrays`. Result values are chosen from
           * the first array in which the value occurs. The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.unionWith(objects, others, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
           */
          var unionWith = baseRest(function (arrays) {
            var comparator = last(arrays)
            comparator = typeof comparator == "function" ? comparator : undefined
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator)
          })

          /**
           * Creates a duplicate-free version of an array, using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons, in which only the first occurrence of each element
           * is kept. The order of result values is determined by the order they occur
           * in the array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.uniq([2, 1, 2]);
           * // => [2, 1]
           */
          function uniq(array) {
            return array && array.length ? baseUniq(array) : []
          }

          /**
           * This method is like `_.uniq` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * uniqueness is computed. The order of result values is determined by the
           * order they occur in the array. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
           * // => [2.1, 1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }, { 'x': 2 }]
           */
          function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : []
          }

          /**
           * This method is like `_.uniq` except that it accepts `comparator` which
           * is invoked to compare elements of `array`. The order of result values is
           * determined by the order they occur in the array.The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.uniqWith(objects, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
           */
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined
            return array && array.length ? baseUniq(array, undefined, comparator) : []
          }

          /**
           * This method is like `_.zip` except that it accepts an array of grouped
           * elements and creates an array regrouping the elements to their pre-zip
           * configuration.
           *
           * @static
           * @memberOf _
           * @since 1.2.0
           * @category Array
           * @param {Array} array The array of grouped elements to process.
           * @returns {Array} Returns the new array of regrouped elements.
           * @example
           *
           * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
           * // => [['a', 1, true], ['b', 2, false]]
           *
           * _.unzip(zipped);
           * // => [['a', 'b'], [1, 2], [true, false]]
           */
          function unzip(array) {
            if (!(array && array.length)) {
              return []
            }
            var length = 0
            array = arrayFilter(array, function (group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length)
                return true
              }
            })
            return baseTimes(length, function (index) {
              return arrayMap(array, baseProperty(index))
            })
          }

          /**
           * This method is like `_.unzip` except that it accepts `iteratee` to specify
           * how regrouped values should be combined. The iteratee is invoked with the
           * elements of each group: (...group).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Array
           * @param {Array} array The array of grouped elements to process.
           * @param {Function} [iteratee=_.identity] The function to combine
           *  regrouped values.
           * @returns {Array} Returns the new array of regrouped elements.
           * @example
           *
           * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
           * // => [[1, 10, 100], [2, 20, 200]]
           *
           * _.unzipWith(zipped, _.add);
           * // => [3, 30, 300]
           */
          function unzipWith(array, iteratee) {
            if (!(array && array.length)) {
              return []
            }
            var result = unzip(array)
            if (iteratee == null) {
              return result
            }
            return arrayMap(result, function (group) {
              return apply(iteratee, undefined, group)
            })
          }

          /**
           * Creates an array excluding all given values using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * **Note:** Unlike `_.pull`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...*} [values] The values to exclude.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.difference, _.xor
           * @example
           *
           * _.without([2, 1, 2, 3], 1, 2);
           * // => [3]
           */
          var without = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : []
          })

          /**
           * Creates an array of unique values that is the
           * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
           * of the given arrays. The order of result values is determined by the order
           * they occur in the arrays.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.difference, _.without
           * @example
           *
           * _.xor([2, 1], [2, 3]);
           * // => [1, 3]
           */
          var xor = baseRest(function (arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject))
          })

          /**
           * This method is like `_.xor` except that it accepts `iteratee` which is
           * invoked for each element of each `arrays` to generate the criterion by
           * which by which they're compared. The order of result values is determined
           * by the order they occur in the arrays. The iteratee is invoked with one
           * argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [1.2, 3.4]
           *
           * // The `_.property` iteratee shorthand.
           * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 2 }]
           */
          var xorBy = baseRest(function (arrays) {
            var iteratee = last(arrays)
            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2))
          })

          /**
           * This method is like `_.xor` except that it accepts `comparator` which is
           * invoked to compare elements of `arrays`. The order of result values is
           * determined by the order they occur in the arrays. The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.xorWith(objects, others, _.isEqual);
           * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
           */
          var xorWith = baseRest(function (arrays) {
            var comparator = last(arrays)
            comparator = typeof comparator == "function" ? comparator : undefined
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator)
          })

          /**
           * Creates an array of grouped elements, the first of which contains the
           * first elements of the given arrays, the second of which contains the
           * second elements of the given arrays, and so on.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to process.
           * @returns {Array} Returns the new array of grouped elements.
           * @example
           *
           * _.zip(['a', 'b'], [1, 2], [true, false]);
           * // => [['a', 1, true], ['b', 2, false]]
           */
          var zip = baseRest(unzip)

          /**
           * This method is like `_.fromPairs` except that it accepts two arrays,
           * one of property identifiers and one of corresponding values.
           *
           * @static
           * @memberOf _
           * @since 0.4.0
           * @category Array
           * @param {Array} [props=[]] The property identifiers.
           * @param {Array} [values=[]] The property values.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.zipObject(['a', 'b'], [1, 2]);
           * // => { 'a': 1, 'b': 2 }
           */
          function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue)
          }

          /**
           * This method is like `_.zipObject` except that it supports property paths.
           *
           * @static
           * @memberOf _
           * @since 4.1.0
           * @category Array
           * @param {Array} [props=[]] The property identifiers.
           * @param {Array} [values=[]] The property values.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
           * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
           */
          function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet)
          }

          /**
           * This method is like `_.zip` except that it accepts `iteratee` to specify
           * how grouped values should be combined. The iteratee is invoked with the
           * elements of each group: (...group).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Array
           * @param {...Array} [arrays] The arrays to process.
           * @param {Function} [iteratee=_.identity] The function to combine
           *  grouped values.
           * @returns {Array} Returns the new array of grouped elements.
           * @example
           *
           * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
           *   return a + b + c;
           * });
           * // => [111, 222]
           */
          var zipWith = baseRest(function (arrays) {
            var length = arrays.length,
              iteratee = length > 1 ? arrays[length - 1] : undefined

            iteratee = typeof iteratee == "function" ? (arrays.pop(), iteratee) : undefined
            return unzipWith(arrays, iteratee)
          })

          /*------------------------------------------------------------------------*/

          /**
           * Creates a `lodash` wrapper instance that wraps `value` with explicit method
           * chain sequences enabled. The result of such sequences must be unwrapped
           * with `_#value`.
           *
           * @static
           * @memberOf _
           * @since 1.3.0
           * @category Seq
           * @param {*} value The value to wrap.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36 },
           *   { 'user': 'fred',    'age': 40 },
           *   { 'user': 'pebbles', 'age': 1 }
           * ];
           *
           * var youngest = _
           *   .chain(users)
           *   .sortBy('age')
           *   .map(function(o) {
           *     return o.user + ' is ' + o.age;
           *   })
           *   .head()
           *   .value();
           * // => 'pebbles is 1'
           */
          function chain(value) {
            var result = lodash(value)
            result.__chain__ = true
            return result
          }

          /**
           * This method invokes `interceptor` and returns `value`. The interceptor
           * is invoked with one argument; (value). The purpose of this method is to
           * "tap into" a method chain sequence in order to modify intermediate results.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @param {*} value The value to provide to `interceptor`.
           * @param {Function} interceptor The function to invoke.
           * @returns {*} Returns `value`.
           * @example
           *
           * _([1, 2, 3])
           *  .tap(function(array) {
           *    // Mutate input array.
           *    array.pop();
           *  })
           *  .reverse()
           *  .value();
           * // => [2, 1]
           */
          function tap(value, interceptor) {
            interceptor(value)
            return value
          }

          /**
           * This method is like `_.tap` except that it returns the result of `interceptor`.
           * The purpose of this method is to "pass thru" values replacing intermediate
           * results in a method chain sequence.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Seq
           * @param {*} value The value to provide to `interceptor`.
           * @param {Function} interceptor The function to invoke.
           * @returns {*} Returns the result of `interceptor`.
           * @example
           *
           * _('  abc  ')
           *  .chain()
           *  .trim()
           *  .thru(function(value) {
           *    return [value];
           *  })
           *  .value();
           * // => ['abc']
           */
          function thru(value, interceptor) {
            return interceptor(value)
          }

          /**
           * This method is the wrapper version of `_.at`.
           *
           * @name at
           * @memberOf _
           * @since 1.0.0
           * @category Seq
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
           *
           * _(object).at(['a[0].b.c', 'a[1]']).value();
           * // => [3, 4]
           */
          var wrapperAt = flatRest(function (paths) {
            var length = paths.length,
              start = length ? paths[0] : 0,
              value = this.__wrapped__,
              interceptor = function (object) {
                return baseAt(object, paths)
              }

            if (
              length > 1 ||
              this.__actions__.length ||
              !(value instanceof LazyWrapper) ||
              !isIndex(start)
            ) {
              return this.thru(interceptor)
            }
            value = value.slice(start, +start + (length ? 1 : 0))
            value.__actions__.push({
              func: thru,
              args: [interceptor],
              thisArg: undefined
            })
            return new LodashWrapper(value, this.__chain__).thru(function (array) {
              if (length && !array.length) {
                array.push(undefined)
              }
              return array
            })
          })

          /**
           * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
           *
           * @name chain
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36 },
           *   { 'user': 'fred',   'age': 40 }
           * ];
           *
           * // A sequence without explicit chaining.
           * _(users).head();
           * // => { 'user': 'barney', 'age': 36 }
           *
           * // A sequence with explicit chaining.
           * _(users)
           *   .chain()
           *   .head()
           *   .pick('user')
           *   .value();
           * // => { 'user': 'barney' }
           */
          function wrapperChain() {
            return chain(this)
          }

          /**
           * Executes the chain sequence and returns the wrapped result.
           *
           * @name commit
           * @memberOf _
           * @since 3.2.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var array = [1, 2];
           * var wrapped = _(array).push(3);
           *
           * console.log(array);
           * // => [1, 2]
           *
           * wrapped = wrapped.commit();
           * console.log(array);
           * // => [1, 2, 3]
           *
           * wrapped.last();
           * // => 3
           *
           * console.log(array);
           * // => [1, 2, 3]
           */
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__)
          }

          /**
           * Gets the next value on a wrapped object following the
           * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
           *
           * @name next
           * @memberOf _
           * @since 4.0.0
           * @category Seq
           * @returns {Object} Returns the next iterator value.
           * @example
           *
           * var wrapped = _([1, 2]);
           *
           * wrapped.next();
           * // => { 'done': false, 'value': 1 }
           *
           * wrapped.next();
           * // => { 'done': false, 'value': 2 }
           *
           * wrapped.next();
           * // => { 'done': true, 'value': undefined }
           */
          function wrapperNext() {
            if (this.__values__ === undefined) {
              this.__values__ = toArray(this.value())
            }
            var done = this.__index__ >= this.__values__.length,
              value = done ? undefined : this.__values__[this.__index__++]

            return { done: done, value: value }
          }

          /**
           * Enables the wrapper to be iterable.
           *
           * @name Symbol.iterator
           * @memberOf _
           * @since 4.0.0
           * @category Seq
           * @returns {Object} Returns the wrapper object.
           * @example
           *
           * var wrapped = _([1, 2]);
           *
           * wrapped[Symbol.iterator]() === wrapped;
           * // => true
           *
           * Array.from(wrapped);
           * // => [1, 2]
           */
          function wrapperToIterator() {
            return this
          }

          /**
           * Creates a clone of the chain sequence planting `value` as the wrapped value.
           *
           * @name plant
           * @memberOf _
           * @since 3.2.0
           * @category Seq
           * @param {*} value The value to plant.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var wrapped = _([1, 2]).map(square);
           * var other = wrapped.plant([3, 4]);
           *
           * other.value();
           * // => [9, 16]
           *
           * wrapped.value();
           * // => [1, 4]
           */
          function wrapperPlant(value) {
            var result,
              parent = this

            while (parent instanceof baseLodash) {
              var clone = wrapperClone(parent)
              clone.__index__ = 0
              clone.__values__ = undefined
              if (result) {
                previous.__wrapped__ = clone
              } else {
                result = clone
              }
              var previous = clone
              parent = parent.__wrapped__
            }
            previous.__wrapped__ = value
            return result
          }

          /**
           * This method is the wrapper version of `_.reverse`.
           *
           * **Note:** This method mutates the wrapped array.
           *
           * @name reverse
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _(array).reverse().value()
           * // => [3, 2, 1]
           *
           * console.log(array);
           * // => [3, 2, 1]
           */
          function wrapperReverse() {
            var value = this.__wrapped__
            if (value instanceof LazyWrapper) {
              var wrapped = value
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this)
              }
              wrapped = wrapped.reverse()
              wrapped.__actions__.push({
                func: thru,
                args: [reverse],
                thisArg: undefined
              })
              return new LodashWrapper(wrapped, this.__chain__)
            }
            return this.thru(reverse)
          }

          /**
           * Executes the chain sequence to resolve the unwrapped value.
           *
           * @name value
           * @memberOf _
           * @since 0.1.0
           * @alias toJSON, valueOf
           * @category Seq
           * @returns {*} Returns the resolved unwrapped value.
           * @example
           *
           * _([1, 2, 3]).value();
           * // => [1, 2, 3]
           */
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The corresponding value of
           * each key is the number of times the key was returned by `iteratee`. The
           * iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * _.countBy([6.1, 4.2, 6.3], Math.floor);
           * // => { '4': 1, '6': 2 }
           *
           * // The `_.property` iteratee shorthand.
           * _.countBy(['one', 'two', 'three'], 'length');
           * // => { '3': 2, '5': 1 }
           */
          var countBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
              ++result[key]
            } else {
              baseAssignValue(result, key, 1)
            }
          })

          /**
           * Checks if `predicate` returns truthy for **all** elements of `collection`.
           * Iteration is stopped once `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index|key, collection).
           *
           * **Note:** This method returns `true` for
           * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
           * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
           * elements of empty collections.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           * @example
           *
           * _.every([true, 1, null, 'yes'], Boolean);
           * // => false
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': false },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.every(users, { 'user': 'barney', 'active': false });
           * // => false
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.every(users, ['active', false]);
           * // => true
           *
           * // The `_.property` iteratee shorthand.
           * _.every(users, 'active');
           * // => false
           */
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined
            }
            return func(collection, getIteratee(predicate, 3))
          }

          /**
           * Iterates over elements of `collection`, returning an array of all elements
           * `predicate` returns truthy for. The predicate is invoked with three
           * arguments: (value, index|key, collection).
           *
           * **Note:** Unlike `_.remove`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           * @see _.reject
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': true },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * _.filter(users, function(o) { return !o.active; });
           * // => objects for ['fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.filter(users, { 'age': 36, 'active': true });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.filter(users, ['active', false]);
           * // => objects for ['fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.filter(users, 'active');
           * // => objects for ['barney']
           *
           * // Combining several predicates using `_.overEvery` or `_.overSome`.
           * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
           * // => objects for ['fred', 'barney']
           */
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter
            return func(collection, getIteratee(predicate, 3))
          }

          /**
           * Iterates over elements of `collection`, returning the first element
           * `predicate` returns truthy for. The predicate is invoked with three
           * arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {*} Returns the matched element, else `undefined`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36, 'active': true },
           *   { 'user': 'fred',    'age': 40, 'active': false },
           *   { 'user': 'pebbles', 'age': 1,  'active': true }
           * ];
           *
           * _.find(users, function(o) { return o.age < 40; });
           * // => object for 'barney'
           *
           * // The `_.matches` iteratee shorthand.
           * _.find(users, { 'age': 1, 'active': true });
           * // => object for 'pebbles'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.find(users, ['active', false]);
           * // => object for 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.find(users, 'active');
           * // => object for 'barney'
           */
          var find = createFind(findIndex)

          /**
           * This method is like `_.find` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=collection.length-1] The index to search from.
           * @returns {*} Returns the matched element, else `undefined`.
           * @example
           *
           * _.findLast([1, 2, 3, 4], function(n) {
           *   return n % 2 == 1;
           * });
           * // => 3
           */
          var findLast = createFind(findLastIndex)

          /**
           * Creates a flattened array of values by running each element in `collection`
           * thru `iteratee` and flattening the mapped results. The iteratee is invoked
           * with three arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [n, n];
           * }
           *
           * _.flatMap([1, 2], duplicate);
           * // => [1, 1, 2, 2]
           */
          function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1)
          }

          /**
           * This method is like `_.flatMap` except that it recursively flattens the
           * mapped results.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [[[n, n]]];
           * }
           *
           * _.flatMapDeep([1, 2], duplicate);
           * // => [1, 1, 2, 2]
           */
          function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY)
          }

          /**
           * This method is like `_.flatMap` except that it recursively flattens the
           * mapped results up to `depth` times.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {number} [depth=1] The maximum recursion depth.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [[[n, n]]];
           * }
           *
           * _.flatMapDepth([1, 2], duplicate, 2);
           * // => [[1, 1], [2, 2]]
           */
          function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth)
            return baseFlatten(map(collection, iteratee), depth)
          }

          /**
           * Iterates over elements of `collection` and invokes `iteratee` for each element.
           * The iteratee is invoked with three arguments: (value, index|key, collection).
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * **Note:** As with other "Collections" methods, objects with a "length"
           * property are iterated like arrays. To avoid this behavior use `_.forIn`
           * or `_.forOwn` for object iteration.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @alias each
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           * @see _.forEachRight
           * @example
           *
           * _.forEach([1, 2], function(value) {
           *   console.log(value);
           * });
           * // => Logs `1` then `2`.
           *
           * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a' then 'b' (iteration order is not guaranteed).
           */
          function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach
            return func(collection, getIteratee(iteratee, 3))
          }

          /**
           * This method is like `_.forEach` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @alias eachRight
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           * @see _.forEach
           * @example
           *
           * _.forEachRight([1, 2], function(value) {
           *   console.log(value);
           * });
           * // => Logs `2` then `1`.
           */
          function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight
            return func(collection, getIteratee(iteratee, 3))
          }

          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The order of grouped values
           * is determined by the order they occur in `collection`. The corresponding
           * value of each key is an array of elements responsible for generating the
           * key. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * _.groupBy([6.1, 4.2, 6.3], Math.floor);
           * // => { '4': [4.2], '6': [6.1, 6.3] }
           *
           * // The `_.property` iteratee shorthand.
           * _.groupBy(['one', 'two', 'three'], 'length');
           * // => { '3': ['one', 'two'], '5': ['three'] }
           */
          var groupBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
              result[key].push(value)
            } else {
              baseAssignValue(result, key, [value])
            }
          })

          /**
           * Checks if `value` is in `collection`. If `collection` is a string, it's
           * checked for a substring of `value`, otherwise
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * is used for equality comparisons. If `fromIndex` is negative, it's used as
           * the offset from the end of `collection`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object|string} collection The collection to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=0] The index to search from.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
           * @returns {boolean} Returns `true` if `value` is found, else `false`.
           * @example
           *
           * _.includes([1, 2, 3], 1);
           * // => true
           *
           * _.includes([1, 2, 3], 1, 2);
           * // => false
           *
           * _.includes({ 'a': 1, 'b': 2 }, 1);
           * // => true
           *
           * _.includes('abcd', 'bc');
           * // => true
           */
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection)
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0

            var length = collection.length
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0)
            }
            return isString(collection)
              ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
              : !!length && baseIndexOf(collection, value, fromIndex) > -1
          }

          /**
           * Invokes the method at `path` of each element in `collection`, returning
           * an array of the results of each invoked method. Any additional arguments
           * are provided to each invoked method. If `path` is a function, it's invoked
           * for, and `this` bound to, each element in `collection`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Array|Function|string} path The path of the method to invoke or
           *  the function invoked per iteration.
           * @param {...*} [args] The arguments to invoke each method with.
           * @returns {Array} Returns the array of results.
           * @example
           *
           * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
           * // => [[1, 5, 7], [1, 2, 3]]
           *
           * _.invokeMap([123, 456], String.prototype.split, '');
           * // => [['1', '2', '3'], ['4', '5', '6']]
           */
          var invokeMap = baseRest(function (collection, path, args) {
            var index = -1,
              isFunc = typeof path == "function",
              result = isArrayLike(collection) ? Array(collection.length) : []

            baseEach(collection, function (value) {
              result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args)
            })
            return result
          })

          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The corresponding value of
           * each key is the last element responsible for generating the key. The
           * iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * var array = [
           *   { 'dir': 'left', 'code': 97 },
           *   { 'dir': 'right', 'code': 100 }
           * ];
           *
           * _.keyBy(array, function(o) {
           *   return String.fromCharCode(o.code);
           * });
           * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
           *
           * _.keyBy(array, 'dir');
           * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
           */
          var keyBy = createAggregator(function (result, value, key) {
            baseAssignValue(result, key, value)
          })

          /**
           * Creates an array of values by running each element in `collection` thru
           * `iteratee`. The iteratee is invoked with three arguments:
           * (value, index|key, collection).
           *
           * Many lodash methods are guarded to work as iteratees for methods like
           * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
           *
           * The guarded methods are:
           * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
           * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
           * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
           * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * _.map([4, 8], square);
           * // => [16, 64]
           *
           * _.map({ 'a': 4, 'b': 8 }, square);
           * // => [16, 64] (iteration order is not guaranteed)
           *
           * var users = [
           *   { 'user': 'barney' },
           *   { 'user': 'fred' }
           * ];
           *
           * // The `_.property` iteratee shorthand.
           * _.map(users, 'user');
           * // => ['barney', 'fred']
           */
          function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap
            return func(collection, getIteratee(iteratee, 3))
          }

          /**
           * This method is like `_.sortBy` except that it allows specifying the sort
           * orders of the iteratees to sort by. If `orders` is unspecified, all values
           * are sorted in ascending order. Otherwise, specify an order of "desc" for
           * descending or "asc" for ascending sort order of corresponding values.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
           *  The iteratees to sort by.
           * @param {string[]} [orders] The sort orders of `iteratees`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
           * @returns {Array} Returns the new sorted array.
           * @example
           *
           * var users = [
           *   { 'user': 'fred',   'age': 48 },
           *   { 'user': 'barney', 'age': 34 },
           *   { 'user': 'fred',   'age': 40 },
           *   { 'user': 'barney', 'age': 36 }
           * ];
           *
           * // Sort by `user` in ascending order and by `age` in descending order.
           * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
           * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
           */
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return []
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees]
            }
            orders = guard ? undefined : orders
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders]
            }
            return baseOrderBy(collection, iteratees, orders)
          }

          /**
           * Creates an array of elements split into two groups, the first of which
           * contains elements `predicate` returns truthy for, the second of which
           * contains elements `predicate` returns falsey for. The predicate is
           * invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the array of grouped elements.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36, 'active': false },
           *   { 'user': 'fred',    'age': 40, 'active': true },
           *   { 'user': 'pebbles', 'age': 1,  'active': false }
           * ];
           *
           * _.partition(users, function(o) { return o.active; });
           * // => objects for [['fred'], ['barney', 'pebbles']]
           *
           * // The `_.matches` iteratee shorthand.
           * _.partition(users, { 'age': 1, 'active': false });
           * // => objects for [['pebbles'], ['barney', 'fred']]
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.partition(users, ['active', false]);
           * // => objects for [['barney', 'pebbles'], ['fred']]
           *
           * // The `_.property` iteratee shorthand.
           * _.partition(users, 'active');
           * // => objects for [['fred'], ['barney', 'pebbles']]
           */
          var partition = createAggregator(
            function (result, value, key) {
              result[key ? 0 : 1].push(value)
            },
            function () {
              return [[], []]
            }
          )

          /**
           * Reduces `collection` to a value which is the accumulated result of running
           * each element in `collection` thru `iteratee`, where each successive
           * invocation is supplied the return value of the previous. If `accumulator`
           * is not given, the first element of `collection` is used as the initial
           * value. The iteratee is invoked with four arguments:
           * (accumulator, value, index|key, collection).
           *
           * Many lodash methods are guarded to work as iteratees for methods like
           * `_.reduce`, `_.reduceRight`, and `_.transform`.
           *
           * The guarded methods are:
           * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
           * and `sortBy`
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @returns {*} Returns the accumulated value.
           * @see _.reduceRight
           * @example
           *
           * _.reduce([1, 2], function(sum, n) {
           *   return sum + n;
           * }, 0);
           * // => 3
           *
           * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
           *   (result[value] || (result[value] = [])).push(key);
           *   return result;
           * }, {});
           * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
           */
          function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce,
              initAccum = arguments.length < 3

            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach)
          }

          /**
           * This method is like `_.reduce` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @returns {*} Returns the accumulated value.
           * @see _.reduce
           * @example
           *
           * var array = [[0, 1], [2, 3], [4, 5]];
           *
           * _.reduceRight(array, function(flattened, other) {
           *   return flattened.concat(other);
           * }, []);
           * // => [4, 5, 2, 3, 0, 1]
           */
          function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce,
              initAccum = arguments.length < 3

            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight)
          }

          /**
           * The opposite of `_.filter`; this method returns the elements of `collection`
           * that `predicate` does **not** return truthy for.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           * @see _.filter
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': false },
           *   { 'user': 'fred',   'age': 40, 'active': true }
           * ];
           *
           * _.reject(users, function(o) { return !o.active; });
           * // => objects for ['fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.reject(users, { 'age': 40, 'active': true });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.reject(users, ['active', false]);
           * // => objects for ['fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.reject(users, 'active');
           * // => objects for ['barney']
           */
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter
            return func(collection, negate(getIteratee(predicate, 3)))
          }

          /**
           * Gets a random element from `collection`.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to sample.
           * @returns {*} Returns the random element.
           * @example
           *
           * _.sample([1, 2, 3, 4]);
           * // => 2
           */
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample
            return func(collection)
          }

          /**
           * Gets `n` random elements at unique keys from `collection` up to the
           * size of `collection`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to sample.
           * @param {number} [n=1] The number of elements to sample.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the random elements.
           * @example
           *
           * _.sampleSize([1, 2, 3], 2);
           * // => [3, 1]
           *
           * _.sampleSize([1, 2, 3], 4);
           * // => [2, 3, 1]
           */
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
              n = 1
            } else {
              n = toInteger(n)
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize
            return func(collection, n)
          }

          /**
           * Creates an array of shuffled values, using a version of the
           * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to shuffle.
           * @returns {Array} Returns the new shuffled array.
           * @example
           *
           * _.shuffle([1, 2, 3, 4]);
           * // => [4, 1, 3, 2]
           */
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle
            return func(collection)
          }

          /**
           * Gets the size of `collection` by returning its length for array-like
           * values or the number of own enumerable string keyed properties for objects.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object|string} collection The collection to inspect.
           * @returns {number} Returns the collection size.
           * @example
           *
           * _.size([1, 2, 3]);
           * // => 3
           *
           * _.size({ 'a': 1, 'b': 2 });
           * // => 2
           *
           * _.size('pebbles');
           * // => 7
           */
          function size(collection) {
            if (collection == null) {
              return 0
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length
            }
            var tag = getTag(collection)
            if (tag == mapTag || tag == setTag) {
              return collection.size
            }
            return baseKeys(collection).length
          }

          /**
           * Checks if `predicate` returns truthy for **any** element of `collection`.
           * Iteration is stopped once `predicate` returns truthy. The predicate is
           * invoked with three arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           * @example
           *
           * _.some([null, 0, 'yes', false], Boolean);
           * // => true
           *
           * var users = [
           *   { 'user': 'barney', 'active': true },
           *   { 'user': 'fred',   'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.some(users, { 'user': 'barney', 'active': false });
           * // => false
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.some(users, ['active', false]);
           * // => true
           *
           * // The `_.property` iteratee shorthand.
           * _.some(users, 'active');
           * // => true
           */
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined
            }
            return func(collection, getIteratee(predicate, 3))
          }

          /**
           * Creates an array of elements, sorted in ascending order by the results of
           * running each element in a collection thru each iteratee. This method
           * performs a stable sort, that is, it preserves the original sort order of
           * equal elements. The iteratees are invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {...(Function|Function[])} [iteratees=[_.identity]]
           *  The iteratees to sort by.
           * @returns {Array} Returns the new sorted array.
           * @example
           *
           * var users = [
           *   { 'user': 'fred',   'age': 48 },
           *   { 'user': 'barney', 'age': 36 },
           *   { 'user': 'fred',   'age': 30 },
           *   { 'user': 'barney', 'age': 34 }
           * ];
           *
           * _.sortBy(users, [function(o) { return o.user; }]);
           * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
           *
           * _.sortBy(users, ['user', 'age']);
           * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
           */
          var sortBy = baseRest(function (collection, iteratees) {
            if (collection == null) {
              return []
            }
            var length = iteratees.length
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = []
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]]
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), [])
          })

          /*------------------------------------------------------------------------*/

          /**
           * Gets the timestamp of the number of milliseconds that have elapsed since
           * the Unix epoch (1 January 1970 00:00:00 UTC).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Date
           * @returns {number} Returns the timestamp.
           * @example
           *
           * _.defer(function(stamp) {
           *   console.log(_.now() - stamp);
           * }, _.now());
           * // => Logs the number of milliseconds it took for the deferred invocation.
           */
          var now =
            ctxNow ||
            function () {
              return root.Date.now()
            }

          /*------------------------------------------------------------------------*/

          /**
           * The opposite of `_.before`; this method creates a function that invokes
           * `func` once it's called `n` or more times.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {number} n The number of calls before `func` is invoked.
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * var saves = ['profile', 'settings'];
           *
           * var done = _.after(saves.length, function() {
           *   console.log('done saving!');
           * });
           *
           * _.forEach(saves, function(type) {
           *   asyncSave({ 'type': type, 'complete': done });
           * });
           * // => Logs 'done saving!' after the two async saves have completed.
           */
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            n = toInteger(n)
            return function () {
              if (--n < 1) {
                return func.apply(this, arguments)
              }
            }
          }

          /**
           * Creates a function that invokes `func`, with up to `n` arguments,
           * ignoring any additional arguments.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to cap arguments for.
           * @param {number} [n=func.length] The arity cap.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new capped function.
           * @example
           *
           * _.map(['6', '8', '10'], _.ary(parseInt, 1));
           * // => [6, 8, 10]
           */
          function ary(func, n, guard) {
            n = guard ? undefined : n
            n = func && n == null ? func.length : n
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n)
          }

          /**
           * Creates a function that invokes `func`, with the `this` binding and arguments
           * of the created function, while it's called less than `n` times. Subsequent
           * calls to the created function return the result of the last `func` invocation.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {number} n The number of calls at which `func` is no longer invoked.
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * jQuery(element).on('click', _.before(5, addContactToList));
           * // => Allows adding up to 4 contacts to the list.
           */
          function before(n, func) {
            var result
            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            n = toInteger(n)
            return function () {
              if (--n > 0) {
                result = func.apply(this, arguments)
              }
              if (n <= 1) {
                func = undefined
              }
              return result
            }
          }

          /**
           * Creates a function that invokes `func` with the `this` binding of `thisArg`
           * and `partials` prepended to the arguments it receives.
           *
           * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
           * may be used as a placeholder for partially applied arguments.
           *
           * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
           * property of bound functions.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to bind.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new bound function.
           * @example
           *
           * function greet(greeting, punctuation) {
           *   return greeting + ' ' + this.user + punctuation;
           * }
           *
           * var object = { 'user': 'fred' };
           *
           * var bound = _.bind(greet, object, 'hi');
           * bound('!');
           * // => 'hi fred!'
           *
           * // Bound with placeholders.
           * var bound = _.bind(greet, object, _, '!');
           * bound('hi');
           * // => 'hi fred!'
           */
          var bind = baseRest(function (func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind))
              bitmask |= WRAP_PARTIAL_FLAG
            }
            return createWrap(func, bitmask, thisArg, partials, holders)
          })

          /**
           * Creates a function that invokes the method at `object[key]` with `partials`
           * prepended to the arguments it receives.
           *
           * This method differs from `_.bind` by allowing bound functions to reference
           * methods that may be redefined or don't yet exist. See
           * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
           * for more details.
           *
           * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * @static
           * @memberOf _
           * @since 0.10.0
           * @category Function
           * @param {Object} object The object to invoke the method on.
           * @param {string} key The key of the method.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new bound function.
           * @example
           *
           * var object = {
           *   'user': 'fred',
           *   'greet': function(greeting, punctuation) {
           *     return greeting + ' ' + this.user + punctuation;
           *   }
           * };
           *
           * var bound = _.bindKey(object, 'greet', 'hi');
           * bound('!');
           * // => 'hi fred!'
           *
           * object.greet = function(greeting, punctuation) {
           *   return greeting + 'ya ' + this.user + punctuation;
           * };
           *
           * bound('!');
           * // => 'hiya fred!'
           *
           * // Bound with placeholders.
           * var bound = _.bindKey(object, 'greet', _, '!');
           * bound('hi');
           * // => 'hiya fred!'
           */
          var bindKey = baseRest(function (object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey))
              bitmask |= WRAP_PARTIAL_FLAG
            }
            return createWrap(key, bitmask, object, partials, holders)
          })

          /**
           * Creates a function that accepts arguments of `func` and either invokes
           * `func` returning its result, if at least `arity` number of arguments have
           * been provided, or returns a function that accepts the remaining `func`
           * arguments, and so on. The arity of `func` may be specified if `func.length`
           * is not sufficient.
           *
           * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
           * may be used as a placeholder for provided arguments.
           *
           * **Note:** This method doesn't set the "length" property of curried functions.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Function
           * @param {Function} func The function to curry.
           * @param {number} [arity=func.length] The arity of `func`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new curried function.
           * @example
           *
           * var abc = function(a, b, c) {
           *   return [a, b, c];
           * };
           *
           * var curried = _.curry(abc);
           *
           * curried(1)(2)(3);
           * // => [1, 2, 3]
           *
           * curried(1, 2)(3);
           * // => [1, 2, 3]
           *
           * curried(1, 2, 3);
           * // => [1, 2, 3]
           *
           * // Curried with placeholders.
           * curried(1)(_, 3)(2);
           * // => [1, 2, 3]
           */
          function curry(func, arity, guard) {
            arity = guard ? undefined : arity
            var result = createWrap(
              func,
              WRAP_CURRY_FLAG,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              arity
            )
            result.placeholder = curry.placeholder
            return result
          }

          /**
           * This method is like `_.curry` except that arguments are applied to `func`
           * in the manner of `_.partialRight` instead of `_.partial`.
           *
           * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for provided arguments.
           *
           * **Note:** This method doesn't set the "length" property of curried functions.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to curry.
           * @param {number} [arity=func.length] The arity of `func`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new curried function.
           * @example
           *
           * var abc = function(a, b, c) {
           *   return [a, b, c];
           * };
           *
           * var curried = _.curryRight(abc);
           *
           * curried(3)(2)(1);
           * // => [1, 2, 3]
           *
           * curried(2, 3)(1);
           * // => [1, 2, 3]
           *
           * curried(1, 2, 3);
           * // => [1, 2, 3]
           *
           * // Curried with placeholders.
           * curried(3)(1, _)(2);
           * // => [1, 2, 3]
           */
          function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity
            var result = createWrap(
              func,
              WRAP_CURRY_RIGHT_FLAG,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              arity
            )
            result.placeholder = curryRight.placeholder
            return result
          }

          /**
           * Creates a debounced function that delays invoking `func` until after `wait`
           * milliseconds have elapsed since the last time the debounced function was
           * invoked. The debounced function comes with a `cancel` method to cancel
           * delayed `func` invocations and a `flush` method to immediately invoke them.
           * Provide `options` to indicate whether `func` should be invoked on the
           * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
           * with the last arguments provided to the debounced function. Subsequent
           * calls to the debounced function return the result of the last `func`
           * invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the debounced function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.debounce` and `_.throttle`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to debounce.
           * @param {number} [wait=0] The number of milliseconds to delay.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=false]
           *  Specify invoking on the leading edge of the timeout.
           * @param {number} [options.maxWait]
           *  The maximum time `func` is allowed to be delayed before it's invoked.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new debounced function.
           * @example
           *
           * // Avoid costly calculations while the window size is in flux.
           * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
           *
           * // Invoke `sendMail` when clicked, debouncing subsequent calls.
           * jQuery(element).on('click', _.debounce(sendMail, 300, {
           *   'leading': true,
           *   'trailing': false
           * }));
           *
           * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
           * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
           * var source = new EventSource('/stream');
           * jQuery(source).on('message', debounced);
           *
           * // Cancel the trailing debounced invocation.
           * jQuery(window).on('popstate', debounced.cancel);
           */
          function debounce(func, wait, options) {
            var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true

            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            wait = toNumber(wait) || 0
            if (isObject(options)) {
              leading = !!options.leading
              maxing = "maxWait" in options
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait
              trailing = "trailing" in options ? !!options.trailing : trailing
            }

            function invokeFunc(time) {
              var args = lastArgs,
                thisArg = lastThis

              lastArgs = lastThis = undefined
              lastInvokeTime = time
              result = func.apply(thisArg, args)
              return result
            }

            function leadingEdge(time) {
              // Reset any `maxWait` timer.
              lastInvokeTime = time
              // Start the timer for the trailing edge.
              timerId = setTimeout(timerExpired, wait)
              // Invoke the leading edge.
              return leading ? invokeFunc(time) : result
            }

            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall

              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting
            }

            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime

              // Either this is the first call, activity has stopped and we're at the
              // trailing edge, the system time has gone backwards and we're treating
              // it as the trailing edge, or we've hit the `maxWait` limit.
              return (
                lastCallTime === undefined ||
                timeSinceLastCall >= wait ||
                timeSinceLastCall < 0 ||
                (maxing && timeSinceLastInvoke >= maxWait)
              )
            }

            function timerExpired() {
              var time = now()
              if (shouldInvoke(time)) {
                return trailingEdge(time)
              }
              // Restart the timer.
              timerId = setTimeout(timerExpired, remainingWait(time))
            }

            function trailingEdge(time) {
              timerId = undefined

              // Only invoke if we have `lastArgs` which means `func` has been
              // debounced at least once.
              if (trailing && lastArgs) {
                return invokeFunc(time)
              }
              lastArgs = lastThis = undefined
              return result
            }

            function cancel() {
              if (timerId !== undefined) {
                clearTimeout(timerId)
              }
              lastInvokeTime = 0
              lastArgs = lastCallTime = lastThis = timerId = undefined
            }

            function flush() {
              return timerId === undefined ? result : trailingEdge(now())
            }

            function debounced() {
              var time = now(),
                isInvoking = shouldInvoke(time)

              lastArgs = arguments
              lastThis = this
              lastCallTime = time

              if (isInvoking) {
                if (timerId === undefined) {
                  return leadingEdge(lastCallTime)
                }
                if (maxing) {
                  // Handle invocations in a tight loop.
                  clearTimeout(timerId)
                  timerId = setTimeout(timerExpired, wait)
                  return invokeFunc(lastCallTime)
                }
              }
              if (timerId === undefined) {
                timerId = setTimeout(timerExpired, wait)
              }
              return result
            }
            debounced.cancel = cancel
            debounced.flush = flush
            return debounced
          }

          /**
           * Defers invoking the `func` until the current call stack has cleared. Any
           * additional arguments are provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to defer.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {number} Returns the timer id.
           * @example
           *
           * _.defer(function(text) {
           *   console.log(text);
           * }, 'deferred');
           * // => Logs 'deferred' after one millisecond.
           */
          var defer = baseRest(function (func, args) {
            return baseDelay(func, 1, args)
          })

          /**
           * Invokes `func` after `wait` milliseconds. Any additional arguments are
           * provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {number} Returns the timer id.
           * @example
           *
           * _.delay(function(text) {
           *   console.log(text);
           * }, 1000, 'later');
           * // => Logs 'later' after one second.
           */
          var delay = baseRest(function (func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args)
          })

          /**
           * Creates a function that invokes `func` with arguments reversed.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to flip arguments for.
           * @returns {Function} Returns the new flipped function.
           * @example
           *
           * var flipped = _.flip(function() {
           *   return _.toArray(arguments);
           * });
           *
           * flipped('a', 'b', 'c', 'd');
           * // => ['d', 'c', 'b', 'a']
           */
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG)
          }

          /**
           * Creates a function that memoizes the result of `func`. If `resolver` is
           * provided, it determines the cache key for storing the result based on the
           * arguments provided to the memoized function. By default, the first argument
           * provided to the memoized function is used as the map cache key. The `func`
           * is invoked with the `this` binding of the memoized function.
           *
           * **Note:** The cache is exposed as the `cache` property on the memoized
           * function. Its creation may be customized by replacing the `_.memoize.Cache`
           * constructor with one whose instances implement the
           * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
           * method interface of `clear`, `delete`, `get`, `has`, and `set`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to have its output memoized.
           * @param {Function} [resolver] The function to resolve the cache key.
           * @returns {Function} Returns the new memoized function.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           * var other = { 'c': 3, 'd': 4 };
           *
           * var values = _.memoize(_.values);
           * values(object);
           * // => [1, 2]
           *
           * values(other);
           * // => [3, 4]
           *
           * object.a = 2;
           * values(object);
           * // => [1, 2]
           *
           * // Modify the result cache.
           * values.cache.set(object, ['a', 'b']);
           * values(object);
           * // => ['a', 'b']
           *
           * // Replace `_.memoize.Cache`.
           * _.memoize.Cache = WeakMap;
           */
          function memoize(func, resolver) {
            if (typeof func != "function" || (resolver != null && typeof resolver != "function")) {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            var memoized = function () {
              var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache

              if (cache.has(key)) {
                return cache.get(key)
              }
              var result = func.apply(this, args)
              memoized.cache = cache.set(key, result) || cache
              return result
            }
            memoized.cache = new (memoize.Cache || MapCache)()
            return memoized
          }

          // Expose `MapCache`.
          memoize.Cache = MapCache

          /**
           * Creates a function that negates the result of the predicate `func`. The
           * `func` predicate is invoked with the `this` binding and arguments of the
           * created function.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} predicate The predicate to negate.
           * @returns {Function} Returns the new negated function.
           * @example
           *
           * function isEven(n) {
           *   return n % 2 == 0;
           * }
           *
           * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
           * // => [1, 3, 5]
           */
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            return function () {
              var args = arguments
              switch (args.length) {
                case 0:
                  return !predicate.call(this)
                case 1:
                  return !predicate.call(this, args[0])
                case 2:
                  return !predicate.call(this, args[0], args[1])
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2])
              }
              return !predicate.apply(this, args)
            }
          }

          /**
           * Creates a function that is restricted to invoking `func` once. Repeat calls
           * to the function return the value of the first invocation. The `func` is
           * invoked with the `this` binding and arguments of the created function.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * var initialize = _.once(createApplication);
           * initialize();
           * initialize();
           * // => `createApplication` is invoked once
           */
          function once(func) {
            return before(2, func)
          }

          /**
           * Creates a function that invokes `func` with its arguments transformed.
           *
           * @static
           * @since 4.0.0
           * @memberOf _
           * @category Function
           * @param {Function} func The function to wrap.
           * @param {...(Function|Function[])} [transforms=[_.identity]]
           *  The argument transforms.
           * @returns {Function} Returns the new function.
           * @example
           *
           * function doubled(n) {
           *   return n * 2;
           * }
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var func = _.overArgs(function(x, y) {
           *   return [x, y];
           * }, [square, doubled]);
           *
           * func(9, 3);
           * // => [81, 6]
           *
           * func(10, 5);
           * // => [100, 10]
           */
          var overArgs = castRest(function (func, transforms) {
            transforms =
              transforms.length == 1 && isArray(transforms[0])
                ? arrayMap(transforms[0], baseUnary(getIteratee()))
                : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()))

            var funcsLength = transforms.length
            return baseRest(function (args) {
              var index = -1,
                length = nativeMin(args.length, funcsLength)

              while (++index < length) {
                args[index] = transforms[index].call(this, args[index])
              }
              return apply(func, this, args)
            })
          })

          /**
           * Creates a function that invokes `func` with `partials` prepended to the
           * arguments it receives. This method is like `_.bind` except it does **not**
           * alter the `this` binding.
           *
           * The `_.partial.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * **Note:** This method doesn't set the "length" property of partially
           * applied functions.
           *
           * @static
           * @memberOf _
           * @since 0.2.0
           * @category Function
           * @param {Function} func The function to partially apply arguments to.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new partially applied function.
           * @example
           *
           * function greet(greeting, name) {
           *   return greeting + ' ' + name;
           * }
           *
           * var sayHelloTo = _.partial(greet, 'hello');
           * sayHelloTo('fred');
           * // => 'hello fred'
           *
           * // Partially applied with placeholders.
           * var greetFred = _.partial(greet, _, 'fred');
           * greetFred('hi');
           * // => 'hi fred'
           */
          var partial = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partial))
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders)
          })

          /**
           * This method is like `_.partial` except that partially applied arguments
           * are appended to the arguments it receives.
           *
           * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * **Note:** This method doesn't set the "length" property of partially
           * applied functions.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Function
           * @param {Function} func The function to partially apply arguments to.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new partially applied function.
           * @example
           *
           * function greet(greeting, name) {
           *   return greeting + ' ' + name;
           * }
           *
           * var greetFred = _.partialRight(greet, 'fred');
           * greetFred('hi');
           * // => 'hi fred'
           *
           * // Partially applied with placeholders.
           * var sayHelloTo = _.partialRight(greet, 'hello', _);
           * sayHelloTo('fred');
           * // => 'hello fred'
           */
          var partialRight = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight))
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders)
          })

          /**
           * Creates a function that invokes `func` with arguments arranged according
           * to the specified `indexes` where the argument value at the first index is
           * provided as the first argument, the argument value at the second index is
           * provided as the second argument, and so on.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to rearrange arguments for.
           * @param {...(number|number[])} indexes The arranged argument indexes.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var rearged = _.rearg(function(a, b, c) {
           *   return [a, b, c];
           * }, [2, 0, 1]);
           *
           * rearged('b', 'c', 'a')
           * // => ['a', 'b', 'c']
           */
          var rearg = flatRest(function (func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes)
          })

          /**
           * Creates a function that invokes `func` with the `this` binding of the
           * created function and arguments from `start` and beyond provided as
           * an array.
           *
           * **Note:** This method is based on the
           * [rest parameter](https://mdn.io/rest_parameters).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var say = _.rest(function(what, names) {
           *   return what + ' ' + _.initial(names).join(', ') +
           *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
           * });
           *
           * say('hello', 'fred', 'barney', 'pebbles');
           * // => 'hello fred, barney, & pebbles'
           */
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            start = start === undefined ? start : toInteger(start)
            return baseRest(func, start)
          }

          /**
           * Creates a function that invokes `func` with the `this` binding of the
           * create function and an array of arguments much like
           * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
           *
           * **Note:** This method is based on the
           * [spread operator](https://mdn.io/spread_operator).
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Function
           * @param {Function} func The function to spread arguments over.
           * @param {number} [start=0] The start position of the spread.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var say = _.spread(function(who, what) {
           *   return who + ' says ' + what;
           * });
           *
           * say(['fred', 'hello']);
           * // => 'fred says hello'
           *
           * var numbers = Promise.all([
           *   Promise.resolve(40),
           *   Promise.resolve(36)
           * ]);
           *
           * numbers.then(_.spread(function(x, y) {
           *   return x + y;
           * }));
           * // => a Promise of 76
           */
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0)
            return baseRest(function (args) {
              var array = args[start],
                otherArgs = castSlice(args, 0, start)

              if (array) {
                arrayPush(otherArgs, array)
              }
              return apply(func, this, otherArgs)
            })
          }

          /**
           * Creates a throttled function that only invokes `func` at most once per
           * every `wait` milliseconds. The throttled function comes with a `cancel`
           * method to cancel delayed `func` invocations and a `flush` method to
           * immediately invoke them. Provide `options` to indicate whether `func`
           * should be invoked on the leading and/or trailing edge of the `wait`
           * timeout. The `func` is invoked with the last arguments provided to the
           * throttled function. Subsequent calls to the throttled function return the
           * result of the last `func` invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the throttled function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.throttle` and `_.debounce`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to throttle.
           * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=true]
           *  Specify invoking on the leading edge of the timeout.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new throttled function.
           * @example
           *
           * // Avoid excessively updating the position while scrolling.
           * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
           *
           * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
           * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
           * jQuery(element).on('click', throttled);
           *
           * // Cancel the trailing throttled invocation.
           * jQuery(window).on('popstate', throttled.cancel);
           */
          function throttle(func, wait, options) {
            var leading = true,
              trailing = true

            if (typeof func != "function") {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading
              trailing = "trailing" in options ? !!options.trailing : trailing
            }
            return debounce(func, wait, {
              leading: leading,
              maxWait: wait,
              trailing: trailing
            })
          }

          /**
           * Creates a function that accepts up to one argument, ignoring any
           * additional arguments.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           * @example
           *
           * _.map(['6', '8', '10'], _.unary(parseInt));
           * // => [6, 8, 10]
           */
          function unary(func) {
            return ary(func, 1)
          }

          /**
           * Creates a function that provides `value` to `wrapper` as its first
           * argument. Any additional arguments provided to the function are appended
           * to those provided to the `wrapper`. The wrapper is invoked with the `this`
           * binding of the created function.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {*} value The value to wrap.
           * @param {Function} [wrapper=identity] The wrapper function.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var p = _.wrap(_.escape, function(func, text) {
           *   return '<p>' + func(text) + '</p>';
           * });
           *
           * p('fred, barney, & pebbles');
           * // => '<p>fred, barney, &amp; pebbles</p>'
           */
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Casts `value` as an array if it's not one.
           *
           * @static
           * @memberOf _
           * @since 4.4.0
           * @category Lang
           * @param {*} value The value to inspect.
           * @returns {Array} Returns the cast array.
           * @example
           *
           * _.castArray(1);
           * // => [1]
           *
           * _.castArray({ 'a': 1 });
           * // => [{ 'a': 1 }]
           *
           * _.castArray('abc');
           * // => ['abc']
           *
           * _.castArray(null);
           * // => [null]
           *
           * _.castArray(undefined);
           * // => [undefined]
           *
           * _.castArray();
           * // => []
           *
           * var array = [1, 2, 3];
           * console.log(_.castArray(array) === array);
           * // => true
           */
          function castArray() {
            if (!arguments.length) {
              return []
            }
            var value = arguments[0]
            return isArray(value) ? value : [value]
          }

          /**
           * Creates a shallow clone of `value`.
           *
           * **Note:** This method is loosely based on the
           * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
           * and supports cloning arrays, array buffers, booleans, date objects, maps,
           * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
           * arrays. The own enumerable properties of `arguments` objects are cloned
           * as plain objects. An empty object is returned for uncloneable values such
           * as error objects, functions, DOM nodes, and WeakMaps.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to clone.
           * @returns {*} Returns the cloned value.
           * @see _.cloneDeep
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var shallow = _.clone(objects);
           * console.log(shallow[0] === objects[0]);
           * // => true
           */
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG)
          }

          /**
           * This method is like `_.clone` except that it accepts `customizer` which
           * is invoked to produce the cloned value. If `customizer` returns `undefined`,
           * cloning is handled by the method instead. The `customizer` is invoked with
           * up to four arguments; (value [, index|key, object, stack]).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to clone.
           * @param {Function} [customizer] The function to customize cloning.
           * @returns {*} Returns the cloned value.
           * @see _.cloneDeepWith
           * @example
           *
           * function customizer(value) {
           *   if (_.isElement(value)) {
           *     return value.cloneNode(false);
           *   }
           * }
           *
           * var el = _.cloneWith(document.body, customizer);
           *
           * console.log(el === document.body);
           * // => false
           * console.log(el.nodeName);
           * // => 'BODY'
           * console.log(el.childNodes.length);
           * // => 0
           */
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer)
          }

          /**
           * This method is like `_.clone` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @returns {*} Returns the deep cloned value.
           * @see _.clone
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var deep = _.cloneDeep(objects);
           * console.log(deep[0] === objects[0]);
           * // => false
           */
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG)
          }

          /**
           * This method is like `_.cloneWith` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @param {Function} [customizer] The function to customize cloning.
           * @returns {*} Returns the deep cloned value.
           * @see _.cloneWith
           * @example
           *
           * function customizer(value) {
           *   if (_.isElement(value)) {
           *     return value.cloneNode(true);
           *   }
           * }
           *
           * var el = _.cloneDeepWith(document.body, customizer);
           *
           * console.log(el === document.body);
           * // => false
           * console.log(el.nodeName);
           * // => 'BODY'
           * console.log(el.childNodes.length);
           * // => 20
           */
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer)
          }

          /**
           * Checks if `object` conforms to `source` by invoking the predicate
           * properties of `source` with the corresponding property values of `object`.
           *
           * **Note:** This method is equivalent to `_.conforms` when `source` is
           * partially applied.
           *
           * @static
           * @memberOf _
           * @since 4.14.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property predicates to conform to.
           * @returns {boolean} Returns `true` if `object` conforms, else `false`.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           *
           * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
           * // => true
           *
           * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
           * // => false
           */
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source))
          }

          /**
           * Performs a
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * comparison between two values to determine if they are equivalent.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.eq(object, object);
           * // => true
           *
           * _.eq(object, other);
           * // => false
           *
           * _.eq('a', 'a');
           * // => true
           *
           * _.eq('a', Object('a'));
           * // => false
           *
           * _.eq(NaN, NaN);
           * // => true
           */
          function eq(value, other) {
            return value === other || (value !== value && other !== other)
          }

          /**
           * Checks if `value` is greater than `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than `other`,
           *  else `false`.
           * @see _.lt
           * @example
           *
           * _.gt(3, 1);
           * // => true
           *
           * _.gt(3, 3);
           * // => false
           *
           * _.gt(1, 3);
           * // => false
           */
          var gt = createRelationalOperation(baseGt)

          /**
           * Checks if `value` is greater than or equal to `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than or equal to
           *  `other`, else `false`.
           * @see _.lte
           * @example
           *
           * _.gte(3, 1);
           * // => true
           *
           * _.gte(3, 3);
           * // => true
           *
           * _.gte(1, 3);
           * // => false
           */
          var gte = createRelationalOperation(function (value, other) {
            return value >= other
          })

          /**
           * Checks if `value` is likely an `arguments` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           *  else `false`.
           * @example
           *
           * _.isArguments(function() { return arguments; }());
           * // => true
           *
           * _.isArguments([1, 2, 3]);
           * // => false
           */
          var isArguments = baseIsArguments(
            (function () {
              return arguments
            })()
          )
            ? baseIsArguments
            : function (value) {
                return (
                  isObjectLike(value) &&
                  hasOwnProperty.call(value, "callee") &&
                  !propertyIsEnumerable.call(value, "callee")
                )
              }

          /**
           * Checks if `value` is classified as an `Array` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array, else `false`.
           * @example
           *
           * _.isArray([1, 2, 3]);
           * // => true
           *
           * _.isArray(document.body.children);
           * // => false
           *
           * _.isArray('abc');
           * // => false
           *
           * _.isArray(_.noop);
           * // => false
           */
          var isArray = Array.isArray

          /**
           * Checks if `value` is classified as an `ArrayBuffer` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
           * @example
           *
           * _.isArrayBuffer(new ArrayBuffer(2));
           * // => true
           *
           * _.isArrayBuffer(new Array(2));
           * // => false
           */
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer

          /**
           * Checks if `value` is array-like. A value is considered array-like if it's
           * not a function and has a `value.length` that's an integer greater than or
           * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
           * @example
           *
           * _.isArrayLike([1, 2, 3]);
           * // => true
           *
           * _.isArrayLike(document.body.children);
           * // => true
           *
           * _.isArrayLike('abc');
           * // => true
           *
           * _.isArrayLike(_.noop);
           * // => false
           */
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value)
          }

          /**
           * This method is like `_.isArrayLike` except that it also checks if `value`
           * is an object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array-like object,
           *  else `false`.
           * @example
           *
           * _.isArrayLikeObject([1, 2, 3]);
           * // => true
           *
           * _.isArrayLikeObject(document.body.children);
           * // => true
           *
           * _.isArrayLikeObject('abc');
           * // => false
           *
           * _.isArrayLikeObject(_.noop);
           * // => false
           */
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value)
          }

          /**
           * Checks if `value` is classified as a boolean primitive or object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
           * @example
           *
           * _.isBoolean(false);
           * // => true
           *
           * _.isBoolean(null);
           * // => false
           */
          function isBoolean(value) {
            return (
              value === true ||
              value === false ||
              (isObjectLike(value) && baseGetTag(value) == boolTag)
            )
          }

          /**
           * Checks if `value` is a buffer.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
           * @example
           *
           * _.isBuffer(new Buffer(2));
           * // => true
           *
           * _.isBuffer(new Uint8Array(2));
           * // => false
           */
          var isBuffer = nativeIsBuffer || stubFalse

          /**
           * Checks if `value` is classified as a `Date` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
           * @example
           *
           * _.isDate(new Date);
           * // => true
           *
           * _.isDate('Mon April 23 2012');
           * // => false
           */
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate

          /**
           * Checks if `value` is likely a DOM element.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
           * @example
           *
           * _.isElement(document.body);
           * // => true
           *
           * _.isElement('<body>');
           * // => false
           */
          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value)
          }

          /**
           * Checks if `value` is an empty object, collection, map, or set.
           *
           * Objects are considered empty if they have no own enumerable string keyed
           * properties.
           *
           * Array-like values such as `arguments` objects, arrays, buffers, strings, or
           * jQuery-like collections are considered empty if they have a `length` of `0`.
           * Similarly, maps and sets are considered empty if they have a `size` of `0`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is empty, else `false`.
           * @example
           *
           * _.isEmpty(null);
           * // => true
           *
           * _.isEmpty(true);
           * // => true
           *
           * _.isEmpty(1);
           * // => true
           *
           * _.isEmpty([1, 2, 3]);
           * // => false
           *
           * _.isEmpty({ 'a': 1 });
           * // => false
           */
          function isEmpty(value) {
            if (value == null) {
              return true
            }
            if (
              isArrayLike(value) &&
              (isArray(value) ||
                typeof value == "string" ||
                typeof value.splice == "function" ||
                isBuffer(value) ||
                isTypedArray(value) ||
                isArguments(value))
            ) {
              return !value.length
            }
            var tag = getTag(value)
            if (tag == mapTag || tag == setTag) {
              return !value.size
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false
              }
            }
            return true
          }

          /**
           * Performs a deep comparison between two values to determine if they are
           * equivalent.
           *
           * **Note:** This method supports comparing arrays, array buffers, booleans,
           * date objects, error objects, maps, numbers, `Object` objects, regexes,
           * sets, strings, symbols, and typed arrays. `Object` objects are compared
           * by their own, not inherited, enumerable properties. Functions and DOM
           * nodes are compared by strict equality, i.e. `===`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.isEqual(object, other);
           * // => true
           *
           * object === other;
           * // => false
           */
          function isEqual(value, other) {
            return baseIsEqual(value, other)
          }

          /**
           * This method is like `_.isEqual` except that it accepts `customizer` which
           * is invoked to compare values. If `customizer` returns `undefined`, comparisons
           * are handled by the method instead. The `customizer` is invoked with up to
           * six arguments: (objValue, othValue [, index|key, object, other, stack]).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * function isGreeting(value) {
           *   return /^h(?:i|ello)$/.test(value);
           * }
           *
           * function customizer(objValue, othValue) {
           *   if (isGreeting(objValue) && isGreeting(othValue)) {
           *     return true;
           *   }
           * }
           *
           * var array = ['hello', 'goodbye'];
           * var other = ['hi', 'goodbye'];
           *
           * _.isEqualWith(array, other, customizer);
           * // => true
           */
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined
            var result = customizer ? customizer(value, other) : undefined
            return result === undefined
              ? baseIsEqual(value, other, undefined, customizer)
              : !!result
          }

          /**
           * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
           * `SyntaxError`, `TypeError`, or `URIError` object.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
           * @example
           *
           * _.isError(new Error);
           * // => true
           *
           * _.isError(Error);
           * // => false
           */
          function isError(value) {
            if (!isObjectLike(value)) {
              return false
            }
            var tag = baseGetTag(value)
            return (
              tag == errorTag ||
              tag == domExcTag ||
              (typeof value.message == "string" &&
                typeof value.name == "string" &&
                !isPlainObject(value))
            )
          }

          /**
           * Checks if `value` is a finite primitive number.
           *
           * **Note:** This method is based on
           * [`Number.isFinite`](https://mdn.io/Number/isFinite).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
           * @example
           *
           * _.isFinite(3);
           * // => true
           *
           * _.isFinite(Number.MIN_VALUE);
           * // => true
           *
           * _.isFinite(Infinity);
           * // => false
           *
           * _.isFinite('3');
           * // => false
           */
          function isFinite(value) {
            return typeof value == "number" && nativeIsFinite(value)
          }

          /**
           * Checks if `value` is classified as a `Function` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a function, else `false`.
           * @example
           *
           * _.isFunction(_);
           * // => true
           *
           * _.isFunction(/abc/);
           * // => false
           */
          function isFunction(value) {
            if (!isObject(value)) {
              return false
            }
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value)
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag
          }

          /**
           * Checks if `value` is an integer.
           *
           * **Note:** This method is based on
           * [`Number.isInteger`](https://mdn.io/Number/isInteger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
           * @example
           *
           * _.isInteger(3);
           * // => true
           *
           * _.isInteger(Number.MIN_VALUE);
           * // => false
           *
           * _.isInteger(Infinity);
           * // => false
           *
           * _.isInteger('3');
           * // => false
           */
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value)
          }

          /**
           * Checks if `value` is a valid array-like length.
           *
           * **Note:** This method is loosely based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
           * @example
           *
           * _.isLength(3);
           * // => true
           *
           * _.isLength(Number.MIN_VALUE);
           * // => false
           *
           * _.isLength(Infinity);
           * // => false
           *
           * _.isLength('3');
           * // => false
           */
          function isLength(value) {
            return (
              typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER
            )
          }

          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */
          function isObject(value) {
            var type = typeof value
            return value != null && (type == "object" || type == "function")
          }

          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */
          function isObjectLike(value) {
            return value != null && typeof value == "object"
          }

          /**
           * Checks if `value` is classified as a `Map` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a map, else `false`.
           * @example
           *
           * _.isMap(new Map);
           * // => true
           *
           * _.isMap(new WeakMap);
           * // => false
           */
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap

          /**
           * Performs a partial deep comparison between `object` and `source` to
           * determine if `object` contains equivalent property values.
           *
           * **Note:** This method is equivalent to `_.matches` when `source` is
           * partially applied.
           *
           * Partial comparisons will match empty array and empty object `source`
           * values against any array or object value, respectively. See `_.isEqual`
           * for a list of supported value comparisons.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           *
           * _.isMatch(object, { 'b': 2 });
           * // => true
           *
           * _.isMatch(object, { 'b': 1 });
           * // => false
           */
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source))
          }

          /**
           * This method is like `_.isMatch` except that it accepts `customizer` which
           * is invoked to compare values. If `customizer` returns `undefined`, comparisons
           * are handled by the method instead. The `customizer` is invoked with five
           * arguments: (objValue, srcValue, index|key, object, source).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           * @example
           *
           * function isGreeting(value) {
           *   return /^h(?:i|ello)$/.test(value);
           * }
           *
           * function customizer(objValue, srcValue) {
           *   if (isGreeting(objValue) && isGreeting(srcValue)) {
           *     return true;
           *   }
           * }
           *
           * var object = { 'greeting': 'hello' };
           * var source = { 'greeting': 'hi' };
           *
           * _.isMatchWith(object, source, customizer);
           * // => true
           */
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined
            return baseIsMatch(object, source, getMatchData(source), customizer)
          }

          /**
           * Checks if `value` is `NaN`.
           *
           * **Note:** This method is based on
           * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
           * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
           * `undefined` and other non-number values.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           * @example
           *
           * _.isNaN(NaN);
           * // => true
           *
           * _.isNaN(new Number(NaN));
           * // => true
           *
           * isNaN(undefined);
           * // => true
           *
           * _.isNaN(undefined);
           * // => false
           */
          function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value
          }

          /**
           * Checks if `value` is a pristine native function.
           *
           * **Note:** This method can't reliably detect native functions in the presence
           * of the core-js package because core-js circumvents this kind of detection.
           * Despite multiple requests, the core-js maintainer has made it clear: any
           * attempt to fix the detection will be obstructed. As a result, we're left
           * with little choice but to throw an error. Unfortunately, this also affects
           * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
           * which rely on core-js.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           * @example
           *
           * _.isNative(Array.prototype.push);
           * // => true
           *
           * _.isNative(_);
           * // => false
           */
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error(CORE_ERROR_TEXT)
            }
            return baseIsNative(value)
          }

          /**
           * Checks if `value` is `null`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
           * @example
           *
           * _.isNull(null);
           * // => true
           *
           * _.isNull(void 0);
           * // => false
           */
          function isNull(value) {
            return value === null
          }

          /**
           * Checks if `value` is `null` or `undefined`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
           * @example
           *
           * _.isNil(null);
           * // => true
           *
           * _.isNil(void 0);
           * // => true
           *
           * _.isNil(NaN);
           * // => false
           */
          function isNil(value) {
            return value == null
          }

          /**
           * Checks if `value` is classified as a `Number` primitive or object.
           *
           * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
           * classified as numbers, use the `_.isFinite` method.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a number, else `false`.
           * @example
           *
           * _.isNumber(3);
           * // => true
           *
           * _.isNumber(Number.MIN_VALUE);
           * // => true
           *
           * _.isNumber(Infinity);
           * // => true
           *
           * _.isNumber('3');
           * // => false
           */
          function isNumber(value) {
            return (
              typeof value == "number" || (isObjectLike(value) && baseGetTag(value) == numberTag)
            )
          }

          /**
           * Checks if `value` is a plain object, that is, an object created by the
           * `Object` constructor or one with a `[[Prototype]]` of `null`.
           *
           * @static
           * @memberOf _
           * @since 0.8.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * _.isPlainObject(new Foo);
           * // => false
           *
           * _.isPlainObject([1, 2, 3]);
           * // => false
           *
           * _.isPlainObject({ 'x': 0, 'y': 0 });
           * // => true
           *
           * _.isPlainObject(Object.create(null));
           * // => true
           */
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false
            }
            var proto = getPrototype(value)
            if (proto === null) {
              return true
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor
            return (
              typeof Ctor == "function" &&
              Ctor instanceof Ctor &&
              funcToString.call(Ctor) == objectCtorString
            )
          }

          /**
           * Checks if `value` is classified as a `RegExp` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
           * @example
           *
           * _.isRegExp(/abc/);
           * // => true
           *
           * _.isRegExp('/abc/');
           * // => false
           */
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp

          /**
           * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
           * double precision number which isn't the result of a rounded unsafe integer.
           *
           * **Note:** This method is based on
           * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
           * @example
           *
           * _.isSafeInteger(3);
           * // => true
           *
           * _.isSafeInteger(Number.MIN_VALUE);
           * // => false
           *
           * _.isSafeInteger(Infinity);
           * // => false
           *
           * _.isSafeInteger('3');
           * // => false
           */
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER
          }

          /**
           * Checks if `value` is classified as a `Set` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a set, else `false`.
           * @example
           *
           * _.isSet(new Set);
           * // => true
           *
           * _.isSet(new WeakSet);
           * // => false
           */
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet

          /**
           * Checks if `value` is classified as a `String` primitive or object.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a string, else `false`.
           * @example
           *
           * _.isString('abc');
           * // => true
           *
           * _.isString(1);
           * // => false
           */
          function isString(value) {
            return (
              typeof value == "string" ||
              (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag)
            )
          }

          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */
          function isSymbol(value) {
            return (
              typeof value == "symbol" || (isObjectLike(value) && baseGetTag(value) == symbolTag)
            )
          }

          /**
           * Checks if `value` is classified as a typed array.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           * @example
           *
           * _.isTypedArray(new Uint8Array);
           * // => true
           *
           * _.isTypedArray([]);
           * // => false
           */
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray

          /**
           * Checks if `value` is `undefined`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
           * @example
           *
           * _.isUndefined(void 0);
           * // => true
           *
           * _.isUndefined(null);
           * // => false
           */
          function isUndefined(value) {
            return value === undefined
          }

          /**
           * Checks if `value` is classified as a `WeakMap` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
           * @example
           *
           * _.isWeakMap(new WeakMap);
           * // => true
           *
           * _.isWeakMap(new Map);
           * // => false
           */
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag
          }

          /**
           * Checks if `value` is classified as a `WeakSet` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
           * @example
           *
           * _.isWeakSet(new WeakSet);
           * // => true
           *
           * _.isWeakSet(new Set);
           * // => false
           */
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag
          }

          /**
           * Checks if `value` is less than `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than `other`,
           *  else `false`.
           * @see _.gt
           * @example
           *
           * _.lt(1, 3);
           * // => true
           *
           * _.lt(3, 3);
           * // => false
           *
           * _.lt(3, 1);
           * // => false
           */
          var lt = createRelationalOperation(baseLt)

          /**
           * Checks if `value` is less than or equal to `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than or equal to
           *  `other`, else `false`.
           * @see _.gte
           * @example
           *
           * _.lte(1, 3);
           * // => true
           *
           * _.lte(3, 3);
           * // => true
           *
           * _.lte(3, 1);
           * // => false
           */
          var lte = createRelationalOperation(function (value, other) {
            return value <= other
          })

          /**
           * Converts `value` to an array.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {Array} Returns the converted array.
           * @example
           *
           * _.toArray({ 'a': 1, 'b': 2 });
           * // => [1, 2]
           *
           * _.toArray('abc');
           * // => ['a', 'b', 'c']
           *
           * _.toArray(1);
           * // => []
           *
           * _.toArray(null);
           * // => []
           */
          function toArray(value) {
            if (!value) {
              return []
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value)
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]())
            }
            var tag = getTag(value),
              func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values

            return func(value)
          }

          /**
           * Converts `value` to a finite number.
           *
           * @static
           * @memberOf _
           * @since 4.12.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted number.
           * @example
           *
           * _.toFinite(3.2);
           * // => 3.2
           *
           * _.toFinite(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toFinite(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toFinite('3.2');
           * // => 3.2
           */
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0
            }
            value = toNumber(value)
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1
              return sign * MAX_INTEGER
            }
            return value === value ? value : 0
          }

          /**
           * Converts `value` to an integer.
           *
           * **Note:** This method is loosely based on
           * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toInteger(3.2);
           * // => 3
           *
           * _.toInteger(Number.MIN_VALUE);
           * // => 0
           *
           * _.toInteger(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toInteger('3.2');
           * // => 3
           */
          function toInteger(value) {
            var result = toFinite(value),
              remainder = result % 1

            return result === result ? (remainder ? result - remainder : result) : 0
          }

          /**
           * Converts `value` to an integer suitable for use as the length of an
           * array-like object.
           *
           * **Note:** This method is based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toLength(3.2);
           * // => 3
           *
           * _.toLength(Number.MIN_VALUE);
           * // => 0
           *
           * _.toLength(Infinity);
           * // => 4294967295
           *
           * _.toLength('3.2');
           * // => 3
           */
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0
          }

          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */
          function toNumber(value) {
            if (typeof value == "number") {
              return value
            }
            if (isSymbol(value)) {
              return NAN
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value
              value = isObject(other) ? other + "" : other
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value
            }
            value = baseTrim(value)
            var isBinary = reIsBinary.test(value)
            return isBinary || reIsOctal.test(value)
              ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
              : reIsBadHex.test(value)
              ? NAN
              : +value
          }

          /**
           * Converts `value` to a plain object flattening inherited enumerable string
           * keyed properties of `value` to own properties of the plain object.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {Object} Returns the converted plain object.
           * @example
           *
           * function Foo() {
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.assign({ 'a': 1 }, new Foo);
           * // => { 'a': 1, 'b': 2 }
           *
           * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
           * // => { 'a': 1, 'b': 2, 'c': 3 }
           */
          function toPlainObject(value) {
            return copyObject(value, keysIn(value))
          }

          /**
           * Converts `value` to a safe integer. A safe integer can be compared and
           * represented correctly.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toSafeInteger(3.2);
           * // => 3
           *
           * _.toSafeInteger(Number.MIN_VALUE);
           * // => 0
           *
           * _.toSafeInteger(Infinity);
           * // => 9007199254740991
           *
           * _.toSafeInteger('3.2');
           * // => 3
           */
          function toSafeInteger(value) {
            return value
              ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
              : value === 0
              ? value
              : 0
          }

          /**
           * Converts `value` to a string. An empty string is returned for `null`
           * and `undefined` values. The sign of `-0` is preserved.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.toString(null);
           * // => ''
           *
           * _.toString(-0);
           * // => '-0'
           *
           * _.toString([1, 2, 3]);
           * // => '1,2,3'
           */
          function toString(value) {
            return value == null ? "" : baseToString(value)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Assigns own enumerable string keyed properties of source objects to the
           * destination object. Source objects are applied from left to right.
           * Subsequent sources overwrite property assignments of previous sources.
           *
           * **Note:** This method mutates `object` and is loosely based on
           * [`Object.assign`](https://mdn.io/Object/assign).
           *
           * @static
           * @memberOf _
           * @since 0.10.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.assignIn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * function Bar() {
           *   this.c = 3;
           * }
           *
           * Foo.prototype.b = 2;
           * Bar.prototype.d = 4;
           *
           * _.assign({ 'a': 0 }, new Foo, new Bar);
           * // => { 'a': 1, 'c': 3 }
           */
          var assign = createAssigner(function (object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object)
              return
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key])
              }
            }
          })

          /**
           * This method is like `_.assign` except that it iterates over own and
           * inherited source properties.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias extend
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.assign
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * function Bar() {
           *   this.c = 3;
           * }
           *
           * Foo.prototype.b = 2;
           * Bar.prototype.d = 4;
           *
           * _.assignIn({ 'a': 0 }, new Foo, new Bar);
           * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
           */
          var assignIn = createAssigner(function (object, source) {
            copyObject(source, keysIn(source), object)
          })

          /**
           * This method is like `_.assignIn` except that it accepts `customizer`
           * which is invoked to produce the assigned values. If `customizer` returns
           * `undefined`, assignment is handled by the method instead. The `customizer`
           * is invoked with five arguments: (objValue, srcValue, key, object, source).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias extendWith
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @see _.assignWith
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   return _.isUndefined(objValue) ? srcValue : objValue;
           * }
           *
           * var defaults = _.partialRight(_.assignInWith, customizer);
           *
           * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */
          var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer)
          })

          /**
           * This method is like `_.assign` except that it accepts `customizer`
           * which is invoked to produce the assigned values. If `customizer` returns
           * `undefined`, assignment is handled by the method instead. The `customizer`
           * is invoked with five arguments: (objValue, srcValue, key, object, source).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @see _.assignInWith
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   return _.isUndefined(objValue) ? srcValue : objValue;
           * }
           *
           * var defaults = _.partialRight(_.assignWith, customizer);
           *
           * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */
          var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer)
          })

          /**
           * Creates an array of values corresponding to `paths` of `object`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Array} Returns the picked values.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
           *
           * _.at(object, ['a[0].b.c', 'a[1]']);
           * // => [3, 4]
           */
          var at = flatRest(baseAt)

          /**
           * Creates an object that inherits from the `prototype` object. If a
           * `properties` object is given, its own enumerable string keyed properties
           * are assigned to the created object.
           *
           * @static
           * @memberOf _
           * @since 2.3.0
           * @category Object
           * @param {Object} prototype The object to inherit from.
           * @param {Object} [properties] The properties to assign to the object.
           * @returns {Object} Returns the new object.
           * @example
           *
           * function Shape() {
           *   this.x = 0;
           *   this.y = 0;
           * }
           *
           * function Circle() {
           *   Shape.call(this);
           * }
           *
           * Circle.prototype = _.create(Shape.prototype, {
           *   'constructor': Circle
           * });
           *
           * var circle = new Circle;
           * circle instanceof Circle;
           * // => true
           *
           * circle instanceof Shape;
           * // => true
           */
          function create(prototype, properties) {
            var result = baseCreate(prototype)
            return properties == null ? result : baseAssign(result, properties)
          }

          /**
           * Assigns own and inherited enumerable string keyed properties of source
           * objects to the destination object for all destination properties that
           * resolve to `undefined`. Source objects are applied from left to right.
           * Once a property is set, additional values of the same property are ignored.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.defaultsDeep
           * @example
           *
           * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */
          var defaults = baseRest(function (object, sources) {
            object = Object(object)

            var index = -1
            var length = sources.length
            var guard = length > 2 ? sources[2] : undefined

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1
            }

            while (++index < length) {
              var source = sources[index]
              var props = keysIn(source)
              var propsIndex = -1
              var propsLength = props.length

              while (++propsIndex < propsLength) {
                var key = props[propsIndex]
                var value = object[key]

                if (
                  value === undefined ||
                  (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))
                ) {
                  object[key] = source[key]
                }
              }
            }

            return object
          })

          /**
           * This method is like `_.defaults` except that it recursively assigns
           * default properties.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.defaults
           * @example
           *
           * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
           * // => { 'a': { 'b': 2, 'c': 3 } }
           */
          var defaultsDeep = baseRest(function (args) {
            args.push(undefined, customDefaultsMerge)
            return apply(mergeWith, undefined, args)
          })

          /**
           * This method is like `_.find` except that it returns the key of the first
           * element `predicate` returns truthy for instead of the element itself.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {string|undefined} Returns the key of the matched element,
           *  else `undefined`.
           * @example
           *
           * var users = {
           *   'barney':  { 'age': 36, 'active': true },
           *   'fred':    { 'age': 40, 'active': false },
           *   'pebbles': { 'age': 1,  'active': true }
           * };
           *
           * _.findKey(users, function(o) { return o.age < 40; });
           * // => 'barney' (iteration order is not guaranteed)
           *
           * // The `_.matches` iteratee shorthand.
           * _.findKey(users, { 'age': 1, 'active': true });
           * // => 'pebbles'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findKey(users, ['active', false]);
           * // => 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.findKey(users, 'active');
           * // => 'barney'
           */
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn)
          }

          /**
           * This method is like `_.findKey` except that it iterates over elements of
           * a collection in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {string|undefined} Returns the key of the matched element,
           *  else `undefined`.
           * @example
           *
           * var users = {
           *   'barney':  { 'age': 36, 'active': true },
           *   'fred':    { 'age': 40, 'active': false },
           *   'pebbles': { 'age': 1,  'active': true }
           * };
           *
           * _.findLastKey(users, function(o) { return o.age < 40; });
           * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
           *
           * // The `_.matches` iteratee shorthand.
           * _.findLastKey(users, { 'age': 36, 'active': true });
           * // => 'barney'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findLastKey(users, ['active', false]);
           * // => 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.findLastKey(users, 'active');
           * // => 'pebbles'
           */
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight)
          }

          /**
           * Iterates over own and inherited enumerable string keyed properties of an
           * object and invokes `iteratee` for each property. The iteratee is invoked
           * with three arguments: (value, key, object). Iteratee functions may exit
           * iteration early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 0.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forInRight
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forIn(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
           */
          function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn)
          }

          /**
           * This method is like `_.forIn` except that it iterates over properties of
           * `object` in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forIn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forInRight(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
           */
          function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn)
          }

          /**
           * Iterates over own enumerable string keyed properties of an object and
           * invokes `iteratee` for each property. The iteratee is invoked with three
           * arguments: (value, key, object). Iteratee functions may exit iteration
           * early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 0.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forOwnRight
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forOwn(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a' then 'b' (iteration order is not guaranteed).
           */
          function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3))
          }

          /**
           * This method is like `_.forOwn` except that it iterates over properties of
           * `object` in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forOwn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forOwnRight(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
           */
          function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3))
          }

          /**
           * Creates an array of function property names from own enumerable properties
           * of `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to inspect.
           * @returns {Array} Returns the function names.
           * @see _.functionsIn
           * @example
           *
           * function Foo() {
           *   this.a = _.constant('a');
           *   this.b = _.constant('b');
           * }
           *
           * Foo.prototype.c = _.constant('c');
           *
           * _.functions(new Foo);
           * // => ['a', 'b']
           */
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object))
          }

          /**
           * Creates an array of function property names from own and inherited
           * enumerable properties of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @returns {Array} Returns the function names.
           * @see _.functions
           * @example
           *
           * function Foo() {
           *   this.a = _.constant('a');
           *   this.b = _.constant('b');
           * }
           *
           * Foo.prototype.c = _.constant('c');
           *
           * _.functionsIn(new Foo);
           * // => ['a', 'b', 'c']
           */
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object))
          }

          /**
           * Gets the value at `path` of `object`. If the resolved value is
           * `undefined`, the `defaultValue` is returned in its place.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @param {*} [defaultValue] The value returned for `undefined` resolved values.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.get(object, 'a[0].b.c');
           * // => 3
           *
           * _.get(object, ['a', '0', 'b', 'c']);
           * // => 3
           *
           * _.get(object, 'a.b.c', 'default');
           * // => 'default'
           */
          function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path)
            return result === undefined ? defaultValue : result
          }

          /**
           * Checks if `path` is a direct property of `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           * @example
           *
           * var object = { 'a': { 'b': 2 } };
           * var other = _.create({ 'a': _.create({ 'b': 2 }) });
           *
           * _.has(object, 'a');
           * // => true
           *
           * _.has(object, 'a.b');
           * // => true
           *
           * _.has(object, ['a', 'b']);
           * // => true
           *
           * _.has(other, 'a');
           * // => false
           */
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas)
          }

          /**
           * Checks if `path` is a direct or inherited property of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           * @example
           *
           * var object = _.create({ 'a': _.create({ 'b': 2 }) });
           *
           * _.hasIn(object, 'a');
           * // => true
           *
           * _.hasIn(object, 'a.b');
           * // => true
           *
           * _.hasIn(object, ['a', 'b']);
           * // => true
           *
           * _.hasIn(object, 'b');
           * // => false
           */
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn)
          }

          /**
           * Creates an object composed of the inverted keys and values of `object`.
           * If `object` contains duplicate values, subsequent values overwrite
           * property assignments of previous values.
           *
           * @static
           * @memberOf _
           * @since 0.7.0
           * @category Object
           * @param {Object} object The object to invert.
           * @returns {Object} Returns the new inverted object.
           * @example
           *
           * var object = { 'a': 1, 'b': 2, 'c': 1 };
           *
           * _.invert(object);
           * // => { '1': 'c', '2': 'b' }
           */
          var invert = createInverter(function (result, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value)
            }

            result[value] = key
          }, constant(identity))

          /**
           * This method is like `_.invert` except that the inverted object is generated
           * from the results of running each element of `object` thru `iteratee`. The
           * corresponding inverted value of each inverted key is an array of keys
           * responsible for generating the inverted value. The iteratee is invoked
           * with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.1.0
           * @category Object
           * @param {Object} object The object to invert.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Object} Returns the new inverted object.
           * @example
           *
           * var object = { 'a': 1, 'b': 2, 'c': 1 };
           *
           * _.invertBy(object);
           * // => { '1': ['a', 'c'], '2': ['b'] }
           *
           * _.invertBy(object, function(value) {
           *   return 'group' + value;
           * });
           * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
           */
          var invertBy = createInverter(function (result, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value)
            }

            if (hasOwnProperty.call(result, value)) {
              result[value].push(key)
            } else {
              result[value] = [key]
            }
          }, getIteratee)

          /**
           * Invokes the method at `path` of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the method to invoke.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {*} Returns the result of the invoked method.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
           *
           * _.invoke(object, 'a[0].b.c.slice', 1, 3);
           * // => [2, 3]
           */
          var invoke = baseRest(baseInvoke)

          /**
           * Creates an array of the own enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects. See the
           * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * for more details.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keys(new Foo);
           * // => ['a', 'b'] (iteration order is not guaranteed)
           *
           * _.keys('hi');
           * // => ['0', '1']
           */
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object)
          }

          /**
           * Creates an array of the own and inherited enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keysIn(new Foo);
           * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
           */
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object)
          }

          /**
           * The opposite of `_.mapValues`; this method creates an object with the
           * same values as `object` and keys generated by running each own enumerable
           * string keyed property of `object` thru `iteratee`. The iteratee is invoked
           * with three arguments: (value, key, object).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns the new mapped object.
           * @see _.mapValues
           * @example
           *
           * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
           *   return key + value;
           * });
           * // => { 'a1': 1, 'b2': 2 }
           */
          function mapKeys(object, iteratee) {
            var result = {}
            iteratee = getIteratee(iteratee, 3)

            baseForOwn(object, function (value, key, object) {
              baseAssignValue(result, iteratee(value, key, object), value)
            })
            return result
          }

          /**
           * Creates an object with the same keys as `object` and values generated
           * by running each own enumerable string keyed property of `object` thru
           * `iteratee`. The iteratee is invoked with three arguments:
           * (value, key, object).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns the new mapped object.
           * @see _.mapKeys
           * @example
           *
           * var users = {
           *   'fred':    { 'user': 'fred',    'age': 40 },
           *   'pebbles': { 'user': 'pebbles', 'age': 1 }
           * };
           *
           * _.mapValues(users, function(o) { return o.age; });
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           *
           * // The `_.property` iteratee shorthand.
           * _.mapValues(users, 'age');
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           */
          function mapValues(object, iteratee) {
            var result = {}
            iteratee = getIteratee(iteratee, 3)

            baseForOwn(object, function (value, key, object) {
              baseAssignValue(result, key, iteratee(value, key, object))
            })
            return result
          }

          /**
           * This method is like `_.assign` except that it recursively merges own and
           * inherited enumerable string keyed properties of source objects into the
           * destination object. Source properties that resolve to `undefined` are
           * skipped if a destination value exists. Array and plain object properties
           * are merged recursively. Other objects and value types are overridden by
           * assignment. Source objects are applied from left to right. Subsequent
           * sources overwrite property assignments of previous sources.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {
           *   'a': [{ 'b': 2 }, { 'd': 4 }]
           * };
           *
           * var other = {
           *   'a': [{ 'c': 3 }, { 'e': 5 }]
           * };
           *
           * _.merge(object, other);
           * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
           */
          var merge = createAssigner(function (object, source, srcIndex) {
            baseMerge(object, source, srcIndex)
          })

          /**
           * This method is like `_.merge` except that it accepts `customizer` which
           * is invoked to produce the merged values of the destination and source
           * properties. If `customizer` returns `undefined`, merging is handled by the
           * method instead. The `customizer` is invoked with six arguments:
           * (objValue, srcValue, key, object, source, stack).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} customizer The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   if (_.isArray(objValue)) {
           *     return objValue.concat(srcValue);
           *   }
           * }
           *
           * var object = { 'a': [1], 'b': [2] };
           * var other = { 'a': [3], 'b': [4] };
           *
           * _.mergeWith(object, other, customizer);
           * // => { 'a': [1, 3], 'b': [2, 4] }
           */
          var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer)
          })

          /**
           * The opposite of `_.pick`; this method creates an object composed of the
           * own and inherited enumerable property paths of `object` that are not omitted.
           *
           * **Note:** This method is considerably slower than `_.pick`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The source object.
           * @param {...(string|string[])} [paths] The property paths to omit.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.omit(object, ['a', 'c']);
           * // => { 'b': '2' }
           */
          var omit = flatRest(function (object, paths) {
            var result = {}
            if (object == null) {
              return result
            }
            var isDeep = false
            paths = arrayMap(paths, function (path) {
              path = castPath(path, object)
              isDeep || (isDeep = path.length > 1)
              return path
            })
            copyObject(object, getAllKeysIn(object), result)
            if (isDeep) {
              result = baseClone(
                result,
                CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                customOmitClone
              )
            }
            var length = paths.length
            while (length--) {
              baseUnset(result, paths[length])
            }
            return result
          })

          /**
           * The opposite of `_.pickBy`; this method creates an object composed of
           * the own and inherited enumerable string keyed properties of `object` that
           * `predicate` doesn't return truthy for. The predicate is invoked with two
           * arguments: (value, key).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The source object.
           * @param {Function} [predicate=_.identity] The function invoked per property.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.omitBy(object, _.isNumber);
           * // => { 'b': '2' }
           */
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)))
          }

          /**
           * Creates an object composed of the picked `object` properties.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The source object.
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.pick(object, ['a', 'c']);
           * // => { 'a': 1, 'c': 3 }
           */
          var pick = flatRest(function (object, paths) {
            return object == null ? {} : basePick(object, paths)
          })

          /**
           * Creates an object composed of the `object` properties `predicate` returns
           * truthy for. The predicate is invoked with two arguments: (value, key).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The source object.
           * @param {Function} [predicate=_.identity] The function invoked per property.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.pickBy(object, _.isNumber);
           * // => { 'a': 1, 'c': 3 }
           */
          function pickBy(object, predicate) {
            if (object == null) {
              return {}
            }
            var props = arrayMap(getAllKeysIn(object), function (prop) {
              return [prop]
            })
            predicate = getIteratee(predicate)
            return basePickBy(object, props, function (value, path) {
              return predicate(value, path[0])
            })
          }

          /**
           * This method is like `_.get` except that if the resolved value is a
           * function it's invoked with the `this` binding of its parent object and
           * its result is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to resolve.
           * @param {*} [defaultValue] The value returned for `undefined` resolved values.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
           *
           * _.result(object, 'a[0].b.c1');
           * // => 3
           *
           * _.result(object, 'a[0].b.c2');
           * // => 4
           *
           * _.result(object, 'a[0].b.c3', 'default');
           * // => 'default'
           *
           * _.result(object, 'a[0].b.c3', _.constant('default'));
           * // => 'default'
           */
          function result(object, path, defaultValue) {
            path = castPath(path, object)

            var index = -1,
              length = path.length

            // Ensure the loop is entered when path is empty.
            if (!length) {
              length = 1
              object = undefined
            }
            while (++index < length) {
              var value = object == null ? undefined : object[toKey(path[index])]
              if (value === undefined) {
                index = length
                value = defaultValue
              }
              object = isFunction(value) ? value.call(object) : value
            }
            return object
          }

          /**
           * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
           * it's created. Arrays are created for missing index properties while objects
           * are created for all other missing properties. Use `_.setWith` to customize
           * `path` creation.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.set(object, 'a[0].b.c', 4);
           * console.log(object.a[0].b.c);
           * // => 4
           *
           * _.set(object, ['x', '0', 'y', 'z'], 5);
           * console.log(object.x[0].y.z);
           * // => 5
           */
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value)
          }

          /**
           * This method is like `_.set` except that it accepts `customizer` which is
           * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
           * path creation is handled by the method instead. The `customizer` is invoked
           * with three arguments: (nsValue, key, nsObject).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {};
           *
           * _.setWith(object, '[0][1]', 'a', Object);
           * // => { '0': { '1': 'a' } }
           */
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined
            return object == null ? object : baseSet(object, path, value, customizer)
          }

          /**
           * Creates an array of own enumerable string keyed-value pairs for `object`
           * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
           * entries are returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias entries
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the key-value pairs.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.toPairs(new Foo);
           * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
           */
          var toPairs = createToPairs(keys)

          /**
           * Creates an array of own and inherited enumerable string keyed-value pairs
           * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
           * or set, its entries are returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias entriesIn
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the key-value pairs.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.toPairsIn(new Foo);
           * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
           */
          var toPairsIn = createToPairs(keysIn)

          /**
           * An alternative to `_.reduce`; this method transforms `object` to a new
           * `accumulator` object which is the result of running each of its own
           * enumerable string keyed properties thru `iteratee`, with each invocation
           * potentially mutating the `accumulator` object. If `accumulator` is not
           * provided, a new object with the same `[[Prototype]]` will be used. The
           * iteratee is invoked with four arguments: (accumulator, value, key, object).
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 1.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The custom accumulator value.
           * @returns {*} Returns the accumulated value.
           * @example
           *
           * _.transform([2, 3, 4], function(result, n) {
           *   result.push(n *= n);
           *   return n % 2 == 0;
           * }, []);
           * // => [4, 9]
           *
           * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
           *   (result[value] || (result[value] = [])).push(key);
           * }, {});
           * // => { '1': ['a', 'c'], '2': ['b'] }
           */
          function transform(object, iteratee, accumulator) {
            var isArr = isArray(object),
              isArrLike = isArr || isBuffer(object) || isTypedArray(object)

            iteratee = getIteratee(iteratee, 4)
            if (accumulator == null) {
              var Ctor = object && object.constructor
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : []
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {}
              } else {
                accumulator = {}
              }
            }
            ;(isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
              return iteratee(accumulator, value, index, object)
            })
            return accumulator
          }

          /**
           * Removes the property at `path` of `object`.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to unset.
           * @returns {boolean} Returns `true` if the property is deleted, else `false`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 7 } }] };
           * _.unset(object, 'a[0].b.c');
           * // => true
           *
           * console.log(object);
           * // => { 'a': [{ 'b': {} }] };
           *
           * _.unset(object, ['a', '0', 'b', 'c']);
           * // => true
           *
           * console.log(object);
           * // => { 'a': [{ 'b': {} }] };
           */
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path)
          }

          /**
           * This method is like `_.set` except that accepts `updater` to produce the
           * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
           * is invoked with one argument: (value).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {Function} updater The function to produce the updated value.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.update(object, 'a[0].b.c', function(n) { return n * n; });
           * console.log(object.a[0].b.c);
           * // => 9
           *
           * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
           * console.log(object.x[0].y.z);
           * // => 0
           */
          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater))
          }

          /**
           * This method is like `_.update` except that it accepts `customizer` which is
           * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
           * path creation is handled by the method instead. The `customizer` is invoked
           * with three arguments: (nsValue, key, nsObject).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {Function} updater The function to produce the updated value.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {};
           *
           * _.updateWith(object, '[0][1]', _.constant('a'), Object);
           * // => { '0': { '1': 'a' } }
           */
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined
            return object == null
              ? object
              : baseUpdate(object, path, castFunction(updater), customizer)
          }

          /**
           * Creates an array of the own enumerable string keyed property values of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property values.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.values(new Foo);
           * // => [1, 2] (iteration order is not guaranteed)
           *
           * _.values('hi');
           * // => ['h', 'i']
           */
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object))
          }

          /**
           * Creates an array of the own and inherited enumerable string keyed property
           * values of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property values.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.valuesIn(new Foo);
           * // => [1, 2, 3] (iteration order is not guaranteed)
           */
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object))
          }

          /*------------------------------------------------------------------------*/

          /**
           * Clamps `number` within the inclusive `lower` and `upper` bounds.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Number
           * @param {number} number The number to clamp.
           * @param {number} [lower] The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the clamped number.
           * @example
           *
           * _.clamp(-10, -5, 5);
           * // => -5
           *
           * _.clamp(10, -5, 5);
           * // => 5
           */
          function clamp(number, lower, upper) {
            if (upper === undefined) {
              upper = lower
              lower = undefined
            }
            if (upper !== undefined) {
              upper = toNumber(upper)
              upper = upper === upper ? upper : 0
            }
            if (lower !== undefined) {
              lower = toNumber(lower)
              lower = lower === lower ? lower : 0
            }
            return baseClamp(toNumber(number), lower, upper)
          }

          /**
           * Checks if `n` is between `start` and up to, but not including, `end`. If
           * `end` is not specified, it's set to `start` with `start` then set to `0`.
           * If `start` is greater than `end` the params are swapped to support
           * negative ranges.
           *
           * @static
           * @memberOf _
           * @since 3.3.0
           * @category Number
           * @param {number} number The number to check.
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
           * @see _.range, _.rangeRight
           * @example
           *
           * _.inRange(3, 2, 4);
           * // => true
           *
           * _.inRange(4, 8);
           * // => true
           *
           * _.inRange(4, 2);
           * // => false
           *
           * _.inRange(2, 2);
           * // => false
           *
           * _.inRange(1.2, 2);
           * // => true
           *
           * _.inRange(5.2, 4);
           * // => false
           *
           * _.inRange(-3, -2, -6);
           * // => true
           */
          function inRange(number, start, end) {
            start = toFinite(start)
            if (end === undefined) {
              end = start
              start = 0
            } else {
              end = toFinite(end)
            }
            number = toNumber(number)
            return baseInRange(number, start, end)
          }

          /**
           * Produces a random number between the inclusive `lower` and `upper` bounds.
           * If only one argument is provided a number between `0` and the given number
           * is returned. If `floating` is `true`, or either `lower` or `upper` are
           * floats, a floating-point number is returned instead of an integer.
           *
           * **Note:** JavaScript follows the IEEE-754 standard for resolving
           * floating-point values which can produce unexpected results.
           *
           * @static
           * @memberOf _
           * @since 0.7.0
           * @category Number
           * @param {number} [lower=0] The lower bound.
           * @param {number} [upper=1] The upper bound.
           * @param {boolean} [floating] Specify returning a floating-point number.
           * @returns {number} Returns the random number.
           * @example
           *
           * _.random(0, 5);
           * // => an integer between 0 and 5
           *
           * _.random(5);
           * // => also an integer between 0 and 5
           *
           * _.random(5, true);
           * // => a floating-point number between 0 and 5
           *
           * _.random(1.2, 5.2);
           * // => a floating-point number between 1.2 and 5.2
           */
          function random(lower, upper, floating) {
            if (
              floating &&
              typeof floating != "boolean" &&
              isIterateeCall(lower, upper, floating)
            ) {
              upper = floating = undefined
            }
            if (floating === undefined) {
              if (typeof upper == "boolean") {
                floating = upper
                upper = undefined
              } else if (typeof lower == "boolean") {
                floating = lower
                lower = undefined
              }
            }
            if (lower === undefined && upper === undefined) {
              lower = 0
              upper = 1
            } else {
              lower = toFinite(lower)
              if (upper === undefined) {
                upper = lower
                lower = 0
              } else {
                upper = toFinite(upper)
              }
            }
            if (lower > upper) {
              var temp = lower
              lower = upper
              upper = temp
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom()
              return nativeMin(
                lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))),
                upper
              )
            }
            return baseRandom(lower, upper)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the camel cased string.
           * @example
           *
           * _.camelCase('Foo Bar');
           * // => 'fooBar'
           *
           * _.camelCase('--foo-bar--');
           * // => 'fooBar'
           *
           * _.camelCase('__FOO_BAR__');
           * // => 'fooBar'
           */
          var camelCase = createCompounder(function (result, word, index) {
            word = word.toLowerCase()
            return result + (index ? capitalize(word) : word)
          })

          /**
           * Converts the first character of `string` to upper case and the remaining
           * to lower case.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to capitalize.
           * @returns {string} Returns the capitalized string.
           * @example
           *
           * _.capitalize('FRED');
           * // => 'Fred'
           */
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase())
          }

          /**
           * Deburrs `string` by converting
           * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
           * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
           * letters to basic Latin letters and removing
           * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to deburr.
           * @returns {string} Returns the deburred string.
           * @example
           *
           * _.deburr('déjà vu');
           * // => 'deja vu'
           */
          function deburr(string) {
            string = toString(string)
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "")
          }

          /**
           * Checks if `string` ends with the given target string.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {string} [target] The string to search for.
           * @param {number} [position=string.length] The position to search up to.
           * @returns {boolean} Returns `true` if `string` ends with `target`,
           *  else `false`.
           * @example
           *
           * _.endsWith('abc', 'c');
           * // => true
           *
           * _.endsWith('abc', 'b');
           * // => false
           *
           * _.endsWith('abc', 'b', 2);
           * // => true
           */
          function endsWith(string, target, position) {
            string = toString(string)
            target = baseToString(target)

            var length = string.length
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length)

            var end = position
            position -= target.length
            return position >= 0 && string.slice(position, end) == target
          }

          /**
           * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
           * corresponding HTML entities.
           *
           * **Note:** No other characters are escaped. To escape additional
           * characters use a third-party library like [_he_](https://mths.be/he).
           *
           * Though the ">" character is escaped for symmetry, characters like
           * ">" and "/" don't need escaping in HTML and have no special meaning
           * unless they're part of a tag or unquoted attribute value. See
           * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
           * (under "semi-related fun fact") for more details.
           *
           * When working with HTML you should always
           * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
           * XSS vectors.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category String
           * @param {string} [string=''] The string to escape.
           * @returns {string} Returns the escaped string.
           * @example
           *
           * _.escape('fred, barney, & pebbles');
           * // => 'fred, barney, &amp; pebbles'
           */
          function escape(string) {
            string = toString(string)
            return string && reHasUnescapedHtml.test(string)
              ? string.replace(reUnescapedHtml, escapeHtmlChar)
              : string
          }

          /**
           * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
           * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to escape.
           * @returns {string} Returns the escaped string.
           * @example
           *
           * _.escapeRegExp('[lodash](https://lodash.com/)');
           * // => '\[lodash\]\(https://lodash\.com/\)'
           */
          function escapeRegExp(string) {
            string = toString(string)
            return string && reHasRegExpChar.test(string)
              ? string.replace(reRegExpChar, "\\$&")
              : string
          }

          /**
           * Converts `string` to
           * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the kebab cased string.
           * @example
           *
           * _.kebabCase('Foo Bar');
           * // => 'foo-bar'
           *
           * _.kebabCase('fooBar');
           * // => 'foo-bar'
           *
           * _.kebabCase('__FOO_BAR__');
           * // => 'foo-bar'
           */
          var kebabCase = createCompounder(function (result, word, index) {
            return result + (index ? "-" : "") + word.toLowerCase()
          })

          /**
           * Converts `string`, as space separated words, to lower case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the lower cased string.
           * @example
           *
           * _.lowerCase('--Foo-Bar--');
           * // => 'foo bar'
           *
           * _.lowerCase('fooBar');
           * // => 'foo bar'
           *
           * _.lowerCase('__FOO_BAR__');
           * // => 'foo bar'
           */
          var lowerCase = createCompounder(function (result, word, index) {
            return result + (index ? " " : "") + word.toLowerCase()
          })

          /**
           * Converts the first character of `string` to lower case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.lowerFirst('Fred');
           * // => 'fred'
           *
           * _.lowerFirst('FRED');
           * // => 'fRED'
           */
          var lowerFirst = createCaseFirst("toLowerCase")

          /**
           * Pads `string` on the left and right sides if it's shorter than `length`.
           * Padding characters are truncated if they can't be evenly divided by `length`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.pad('abc', 8);
           * // => '  abc   '
           *
           * _.pad('abc', 8, '_-');
           * // => '_-abc_-_'
           *
           * _.pad('abc', 3);
           * // => 'abc'
           */
          function pad(string, length, chars) {
            string = toString(string)
            length = toInteger(length)

            var strLength = length ? stringSize(string) : 0
            if (!length || strLength >= length) {
              return string
            }
            var mid = (length - strLength) / 2
            return (
              createPadding(nativeFloor(mid), chars) +
              string +
              createPadding(nativeCeil(mid), chars)
            )
          }

          /**
           * Pads `string` on the right side if it's shorter than `length`. Padding
           * characters are truncated if they exceed `length`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.padEnd('abc', 6);
           * // => 'abc   '
           *
           * _.padEnd('abc', 6, '_-');
           * // => 'abc_-_'
           *
           * _.padEnd('abc', 3);
           * // => 'abc'
           */
          function padEnd(string, length, chars) {
            string = toString(string)
            length = toInteger(length)

            var strLength = length ? stringSize(string) : 0
            return length && strLength < length
              ? string + createPadding(length - strLength, chars)
              : string
          }

          /**
           * Pads `string` on the left side if it's shorter than `length`. Padding
           * characters are truncated if they exceed `length`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.padStart('abc', 6);
           * // => '   abc'
           *
           * _.padStart('abc', 6, '_-');
           * // => '_-_abc'
           *
           * _.padStart('abc', 3);
           * // => 'abc'
           */
          function padStart(string, length, chars) {
            string = toString(string)
            length = toInteger(length)

            var strLength = length ? stringSize(string) : 0
            return length && strLength < length
              ? createPadding(length - strLength, chars) + string
              : string
          }

          /**
           * Converts `string` to an integer of the specified radix. If `radix` is
           * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
           * hexadecimal, in which case a `radix` of `16` is used.
           *
           * **Note:** This method aligns with the
           * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category String
           * @param {string} string The string to convert.
           * @param {number} [radix=10] The radix to interpret `value` by.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.parseInt('08');
           * // => 8
           *
           * _.map(['6', '08', '10'], _.parseInt);
           * // => [6, 8, 10]
           */
          function parseInt(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0
            } else if (radix) {
              radix = +radix
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0)
          }

          /**
           * Repeats the given string `n` times.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to repeat.
           * @param {number} [n=1] The number of times to repeat the string.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the repeated string.
           * @example
           *
           * _.repeat('*', 3);
           * // => '***'
           *
           * _.repeat('abc', 2);
           * // => 'abcabc'
           *
           * _.repeat('abc', 0);
           * // => ''
           */
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
              n = 1
            } else {
              n = toInteger(n)
            }
            return baseRepeat(toString(string), n)
          }

          /**
           * Replaces matches for `pattern` in `string` with `replacement`.
           *
           * **Note:** This method is based on
           * [`String#replace`](https://mdn.io/String/replace).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to modify.
           * @param {RegExp|string} pattern The pattern to replace.
           * @param {Function|string} replacement The match replacement.
           * @returns {string} Returns the modified string.
           * @example
           *
           * _.replace('Hi Fred', 'Fred', 'Barney');
           * // => 'Hi Barney'
           */
          function replace() {
            var args = arguments,
              string = toString(args[0])

            return args.length < 3 ? string : string.replace(args[1], args[2])
          }

          /**
           * Converts `string` to
           * [snake case](https://en.wikipedia.org/wiki/Snake_case).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the snake cased string.
           * @example
           *
           * _.snakeCase('Foo Bar');
           * // => 'foo_bar'
           *
           * _.snakeCase('fooBar');
           * // => 'foo_bar'
           *
           * _.snakeCase('--FOO-BAR--');
           * // => 'foo_bar'
           */
          var snakeCase = createCompounder(function (result, word, index) {
            return result + (index ? "_" : "") + word.toLowerCase()
          })

          /**
           * Splits `string` by `separator`.
           *
           * **Note:** This method is based on
           * [`String#split`](https://mdn.io/String/split).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to split.
           * @param {RegExp|string} separator The separator pattern to split by.
           * @param {number} [limit] The length to truncate results to.
           * @returns {Array} Returns the string segments.
           * @example
           *
           * _.split('a-b-c', '-', 2);
           * // => ['a', 'b']
           */
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined
            }
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0
            if (!limit) {
              return []
            }
            string = toString(string)
            if (
              string &&
              (typeof separator == "string" || (separator != null && !isRegExp(separator)))
            ) {
              separator = baseToString(separator)
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit)
              }
            }
            return string.split(separator, limit)
          }

          /**
           * Converts `string` to
           * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
           *
           * @static
           * @memberOf _
           * @since 3.1.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the start cased string.
           * @example
           *
           * _.startCase('--foo-bar--');
           * // => 'Foo Bar'
           *
           * _.startCase('fooBar');
           * // => 'Foo Bar'
           *
           * _.startCase('__FOO_BAR__');
           * // => 'FOO BAR'
           */
          var startCase = createCompounder(function (result, word, index) {
            return result + (index ? " " : "") + upperFirst(word)
          })

          /**
           * Checks if `string` starts with the given target string.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {string} [target] The string to search for.
           * @param {number} [position=0] The position to search from.
           * @returns {boolean} Returns `true` if `string` starts with `target`,
           *  else `false`.
           * @example
           *
           * _.startsWith('abc', 'a');
           * // => true
           *
           * _.startsWith('abc', 'b');
           * // => false
           *
           * _.startsWith('abc', 'b', 1);
           * // => true
           */
          function startsWith(string, target, position) {
            string = toString(string)
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length)

            target = baseToString(target)
            return string.slice(position, position + target.length) == target
          }

          /**
           * Creates a compiled template function that can interpolate data properties
           * in "interpolate" delimiters, HTML-escape interpolated data properties in
           * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
           * properties may be accessed as free variables in the template. If a setting
           * object is given, it takes precedence over `_.templateSettings` values.
           *
           * **Note:** In the development build `_.template` utilizes
           * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
           * for easier debugging.
           *
           * For more information on precompiling templates see
           * [lodash's custom builds documentation](https://lodash.com/custom-builds).
           *
           * For more information on Chrome extension sandboxes see
           * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category String
           * @param {string} [string=''] The template string.
           * @param {Object} [options={}] The options object.
           * @param {RegExp} [options.escape=_.templateSettings.escape]
           *  The HTML "escape" delimiter.
           * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
           *  The "evaluate" delimiter.
           * @param {Object} [options.imports=_.templateSettings.imports]
           *  An object to import into the template as free variables.
           * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
           *  The "interpolate" delimiter.
           * @param {string} [options.sourceURL='lodash.templateSources[n]']
           *  The sourceURL of the compiled template.
           * @param {string} [options.variable='obj']
           *  The data object variable name.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the compiled template function.
           * @example
           *
           * // Use the "interpolate" delimiter to create a compiled template.
           * var compiled = _.template('hello <%= user %>!');
           * compiled({ 'user': 'fred' });
           * // => 'hello fred!'
           *
           * // Use the HTML "escape" delimiter to escape data property values.
           * var compiled = _.template('<b><%- value %></b>');
           * compiled({ 'value': '<script>' });
           * // => '<b>&lt;script&gt;</b>'
           *
           * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
           * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
           * compiled({ 'users': ['fred', 'barney'] });
           * // => '<li>fred</li><li>barney</li>'
           *
           * // Use the internal `print` function in "evaluate" delimiters.
           * var compiled = _.template('<% print("hello " + user); %>!');
           * compiled({ 'user': 'barney' });
           * // => 'hello barney!'
           *
           * // Use the ES template literal delimiter as an "interpolate" delimiter.
           * // Disable support by replacing the "interpolate" delimiter.
           * var compiled = _.template('hello ${ user }!');
           * compiled({ 'user': 'pebbles' });
           * // => 'hello pebbles!'
           *
           * // Use backslashes to treat delimiters as plain text.
           * var compiled = _.template('<%= "\\<%- value %\\>" %>');
           * compiled({ 'value': 'ignored' });
           * // => '<%- value %>'
           *
           * // Use the `imports` option to import `jQuery` as `jq`.
           * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
           * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
           * compiled({ 'users': ['fred', 'barney'] });
           * // => '<li>fred</li><li>barney</li>'
           *
           * // Use the `sourceURL` option to specify a custom sourceURL for the template.
           * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
           * compiled(data);
           * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
           *
           * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
           * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
           * compiled.source;
           * // => function(data) {
           * //   var __t, __p = '';
           * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
           * //   return __p;
           * // }
           *
           * // Use custom template delimiters.
           * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
           * var compiled = _.template('hello {{ user }}!');
           * compiled({ 'user': 'mustache' });
           * // => 'hello mustache!'
           *
           * // Use the `source` property to inline compiled templates for meaningful
           * // line numbers in error messages and stack traces.
           * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
           *   var JST = {\
           *     "main": ' + _.template(mainText).source + '\
           *   };\
           * ');
           */
          function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings

            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined
            }
            string = toString(string)
            options = assignInWith({}, options, settings, customDefaultsAssignIn)

            var imports = assignInWith(
                {},
                options.imports,
                settings.imports,
                customDefaultsAssignIn
              ),
              importsKeys = keys(imports),
              importsValues = baseValues(imports, importsKeys)

            var isEscaping,
              isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '"

            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp(
              (options.escape || reNoMatch).source +
                "|" +
                interpolate.source +
                "|" +
                (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source +
                "|" +
                (options.evaluate || reNoMatch).source +
                "|$",
              "g"
            )

            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL =
              "//# sourceURL=" +
              (hasOwnProperty.call(options, "sourceURL")
                ? (options.sourceURL + "").replace(/\s/g, " ")
                : "lodash.templateSources[" + ++templateCounter + "]") +
              "\n"

            string.replace(
              reDelimiters,
              function (
                match,
                escapeValue,
                interpolateValue,
                esTemplateValue,
                evaluateValue,
                offset
              ) {
                interpolateValue || (interpolateValue = esTemplateValue)

                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar)

                // Replace delimiters with snippets.
                if (escapeValue) {
                  isEscaping = true
                  source += "' +\n__e(" + escapeValue + ") +\n'"
                }
                if (evaluateValue) {
                  isEvaluating = true
                  source += "';\n" + evaluateValue + ";\n__p += '"
                }
                if (interpolateValue) {
                  source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'"
                }
                index = offset + match.length

                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match
              }
            )

            source += "';\n"

            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = hasOwnProperty.call(options, "variable") && options.variable
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n"
            }
            // Throw an error if a forbidden character was found in `variable`, to prevent
            // potential command injection attacks.
            else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT)
            }

            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source)
              .replace(reEmptyStringMiddle, "$1")
              .replace(reEmptyStringTrailing, "$1;")

            // Frame code as the function body.
            source =
              "function(" +
              (variable || "obj") +
              ") {\n" +
              (variable ? "" : "obj || (obj = {});\n") +
              "var __t, __p = ''" +
              (isEscaping ? ", __e = _.escape" : "") +
              (isEvaluating
                ? ", __j = Array.prototype.join;\n" +
                  "function print() { __p += __j.call(arguments, '') }\n"
                : ";\n") +
              source +
              "return __p\n}"

            var result = attempt(function () {
              return Function(importsKeys, sourceURL + "return " + source).apply(
                undefined,
                importsValues
              )
            })

            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source
            if (isError(result)) {
              throw result
            }
            return result
          }

          /**
           * Converts `string`, as a whole, to lower case just like
           * [String#toLowerCase](https://mdn.io/toLowerCase).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the lower cased string.
           * @example
           *
           * _.toLower('--Foo-Bar--');
           * // => '--foo-bar--'
           *
           * _.toLower('fooBar');
           * // => 'foobar'
           *
           * _.toLower('__FOO_BAR__');
           * // => '__foo_bar__'
           */
          function toLower(value) {
            return toString(value).toLowerCase()
          }

          /**
           * Converts `string`, as a whole, to upper case just like
           * [String#toUpperCase](https://mdn.io/toUpperCase).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the upper cased string.
           * @example
           *
           * _.toUpper('--foo-bar--');
           * // => '--FOO-BAR--'
           *
           * _.toUpper('fooBar');
           * // => 'FOOBAR'
           *
           * _.toUpper('__foo_bar__');
           * // => '__FOO_BAR__'
           */
          function toUpper(value) {
            return toString(value).toUpperCase()
          }

          /**
           * Removes leading and trailing whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trim('  abc  ');
           * // => 'abc'
           *
           * _.trim('-_-abc-_-', '_-');
           * // => 'abc'
           *
           * _.map(['  foo  ', '  bar  '], _.trim);
           * // => ['foo', 'bar']
           */
          function trim(string, chars, guard) {
            string = toString(string)
            if (string && (guard || chars === undefined)) {
              return baseTrim(string)
            }
            if (!string || !(chars = baseToString(chars))) {
              return string
            }
            var strSymbols = stringToArray(string),
              chrSymbols = stringToArray(chars),
              start = charsStartIndex(strSymbols, chrSymbols),
              end = charsEndIndex(strSymbols, chrSymbols) + 1

            return castSlice(strSymbols, start, end).join("")
          }

          /**
           * Removes trailing whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trimEnd('  abc  ');
           * // => '  abc'
           *
           * _.trimEnd('-_-abc-_-', '_-');
           * // => '-_-abc'
           */
          function trimEnd(string, chars, guard) {
            string = toString(string)
            if (string && (guard || chars === undefined)) {
              return string.slice(0, trimmedEndIndex(string) + 1)
            }
            if (!string || !(chars = baseToString(chars))) {
              return string
            }
            var strSymbols = stringToArray(string),
              end = charsEndIndex(strSymbols, stringToArray(chars)) + 1

            return castSlice(strSymbols, 0, end).join("")
          }

          /**
           * Removes leading whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trimStart('  abc  ');
           * // => 'abc  '
           *
           * _.trimStart('-_-abc-_-', '_-');
           * // => 'abc-_-'
           */
          function trimStart(string, chars, guard) {
            string = toString(string)
            if (string && (guard || chars === undefined)) {
              return string.replace(reTrimStart, "")
            }
            if (!string || !(chars = baseToString(chars))) {
              return string
            }
            var strSymbols = stringToArray(string),
              start = charsStartIndex(strSymbols, stringToArray(chars))

            return castSlice(strSymbols, start).join("")
          }

          /**
           * Truncates `string` if it's longer than the given maximum string length.
           * The last characters of the truncated string are replaced with the omission
           * string which defaults to "...".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to truncate.
           * @param {Object} [options={}] The options object.
           * @param {number} [options.length=30] The maximum string length.
           * @param {string} [options.omission='...'] The string to indicate text is omitted.
           * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
           * @returns {string} Returns the truncated string.
           * @example
           *
           * _.truncate('hi-diddly-ho there, neighborino');
           * // => 'hi-diddly-ho there, neighbo...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'length': 24,
           *   'separator': ' '
           * });
           * // => 'hi-diddly-ho there,...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'length': 24,
           *   'separator': /,? +/
           * });
           * // => 'hi-diddly-ho there...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'omission': ' [...]'
           * });
           * // => 'hi-diddly-ho there, neig [...]'
           */
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH,
              omission = DEFAULT_TRUNC_OMISSION

            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator
              length = "length" in options ? toInteger(options.length) : length
              omission = "omission" in options ? baseToString(options.omission) : omission
            }
            string = toString(string)

            var strLength = string.length
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string)
              strLength = strSymbols.length
            }
            if (length >= strLength) {
              return string
            }
            var end = length - stringSize(omission)
            if (end < 1) {
              return omission
            }
            var result = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end)

            if (separator === undefined) {
              return result + omission
            }
            if (strSymbols) {
              end += result.length - end
            }
            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match,
                  substring = result

                if (!separator.global) {
                  separator = RegExp(separator.source, toString(reFlags.exec(separator)) + "g")
                }
                separator.lastIndex = 0
                while ((match = separator.exec(substring))) {
                  var newEnd = match.index
                }
                result = result.slice(0, newEnd === undefined ? end : newEnd)
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index = result.lastIndexOf(separator)
              if (index > -1) {
                result = result.slice(0, index)
              }
            }
            return result + omission
          }

          /**
           * The inverse of `_.escape`; this method converts the HTML entities
           * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
           * their corresponding characters.
           *
           * **Note:** No other HTML entities are unescaped. To unescape additional
           * HTML entities use a third-party library like [_he_](https://mths.be/he).
           *
           * @static
           * @memberOf _
           * @since 0.6.0
           * @category String
           * @param {string} [string=''] The string to unescape.
           * @returns {string} Returns the unescaped string.
           * @example
           *
           * _.unescape('fred, barney, &amp; pebbles');
           * // => 'fred, barney, & pebbles'
           */
          function unescape(string) {
            string = toString(string)
            return string && reHasEscapedHtml.test(string)
              ? string.replace(reEscapedHtml, unescapeHtmlChar)
              : string
          }

          /**
           * Converts `string`, as space separated words, to upper case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the upper cased string.
           * @example
           *
           * _.upperCase('--foo-bar');
           * // => 'FOO BAR'
           *
           * _.upperCase('fooBar');
           * // => 'FOO BAR'
           *
           * _.upperCase('__foo_bar__');
           * // => 'FOO BAR'
           */
          var upperCase = createCompounder(function (result, word, index) {
            return result + (index ? " " : "") + word.toUpperCase()
          })

          /**
           * Converts the first character of `string` to upper case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.upperFirst('fred');
           * // => 'Fred'
           *
           * _.upperFirst('FRED');
           * // => 'FRED'
           */
          var upperFirst = createCaseFirst("toUpperCase")

          /**
           * Splits `string` into an array of its words.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {RegExp|string} [pattern] The pattern to match words.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the words of `string`.
           * @example
           *
           * _.words('fred, barney, & pebbles');
           * // => ['fred', 'barney', 'pebbles']
           *
           * _.words('fred, barney, & pebbles', /[^, ]+/g);
           * // => ['fred', 'barney', '&', 'pebbles']
           */
          function words(string, pattern, guard) {
            string = toString(string)
            pattern = guard ? undefined : pattern

            if (pattern === undefined) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string)
            }
            return string.match(pattern) || []
          }

          /*------------------------------------------------------------------------*/

          /**
           * Attempts to invoke `func`, returning either the result or the caught error
           * object. Any additional arguments are provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Function} func The function to attempt.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {*} Returns the `func` result or error object.
           * @example
           *
           * // Avoid throwing errors for invalid selectors.
           * var elements = _.attempt(function(selector) {
           *   return document.querySelectorAll(selector);
           * }, '>_>');
           *
           * if (_.isError(elements)) {
           *   elements = [];
           * }
           */
          var attempt = baseRest(function (func, args) {
            try {
              return apply(func, undefined, args)
            } catch (e) {
              return isError(e) ? e : new Error(e)
            }
          })

          /**
           * Binds methods of an object to the object itself, overwriting the existing
           * method.
           *
           * **Note:** This method doesn't set the "length" property of bound functions.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {Object} object The object to bind and assign the bound methods to.
           * @param {...(string|string[])} methodNames The object method names to bind.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var view = {
           *   'label': 'docs',
           *   'click': function() {
           *     console.log('clicked ' + this.label);
           *   }
           * };
           *
           * _.bindAll(view, ['click']);
           * jQuery(element).on('click', view.click);
           * // => Logs 'clicked docs' when clicked.
           */
          var bindAll = flatRest(function (object, methodNames) {
            arrayEach(methodNames, function (key) {
              key = toKey(key)
              baseAssignValue(object, key, bind(object[key], object))
            })
            return object
          })

          /**
           * Creates a function that iterates over `pairs` and invokes the corresponding
           * function of the first predicate to return truthy. The predicate-function
           * pairs are invoked with the `this` binding and arguments of the created
           * function.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {Array} pairs The predicate-function pairs.
           * @returns {Function} Returns the new composite function.
           * @example
           *
           * var func = _.cond([
           *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
           *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
           *   [_.stubTrue,                      _.constant('no match')]
           * ]);
           *
           * func({ 'a': 1, 'b': 2 });
           * // => 'matches A'
           *
           * func({ 'a': 0, 'b': 1 });
           * // => 'matches B'
           *
           * func({ 'a': '1', 'b': '2' });
           * // => 'no match'
           */
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length,
              toIteratee = getIteratee()

            pairs = !length
              ? []
              : arrayMap(pairs, function (pair) {
                  if (typeof pair[1] != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT)
                  }
                  return [toIteratee(pair[0]), pair[1]]
                })

            return baseRest(function (args) {
              var index = -1
              while (++index < length) {
                var pair = pairs[index]
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args)
                }
              }
            })
          }

          /**
           * Creates a function that invokes the predicate properties of `source` with
           * the corresponding property values of a given object, returning `true` if
           * all predicates return truthy, else `false`.
           *
           * **Note:** The created function is equivalent to `_.conformsTo` with
           * `source` partially applied.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {Object} source The object of property predicates to conform to.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 2, 'b': 1 },
           *   { 'a': 1, 'b': 2 }
           * ];
           *
           * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
           * // => [{ 'a': 1, 'b': 2 }]
           */
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG))
          }

          /**
           * Creates a function that returns `value`.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Util
           * @param {*} value The value to return from the new function.
           * @returns {Function} Returns the new constant function.
           * @example
           *
           * var objects = _.times(2, _.constant({ 'a': 1 }));
           *
           * console.log(objects);
           * // => [{ 'a': 1 }, { 'a': 1 }]
           *
           * console.log(objects[0] === objects[1]);
           * // => true
           */
          function constant(value) {
            return function () {
              return value
            }
          }

          /**
           * Checks `value` to determine whether a default value should be returned in
           * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
           * or `undefined`.
           *
           * @static
           * @memberOf _
           * @since 4.14.0
           * @category Util
           * @param {*} value The value to check.
           * @param {*} defaultValue The default value.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * _.defaultTo(1, 10);
           * // => 1
           *
           * _.defaultTo(undefined, 10);
           * // => 10
           */
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value
          }

          /**
           * Creates a function that returns the result of invoking the given functions
           * with the `this` binding of the created function, where each successive
           * invocation is supplied the return value of the previous.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {...(Function|Function[])} [funcs] The functions to invoke.
           * @returns {Function} Returns the new composite function.
           * @see _.flowRight
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var addSquare = _.flow([_.add, square]);
           * addSquare(1, 2);
           * // => 9
           */
          var flow = createFlow()

          /**
           * This method is like `_.flow` except that it creates a function that
           * invokes the given functions from right to left.
           *
           * @static
           * @since 3.0.0
           * @memberOf _
           * @category Util
           * @param {...(Function|Function[])} [funcs] The functions to invoke.
           * @returns {Function} Returns the new composite function.
           * @see _.flow
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var addSquare = _.flowRight([square, _.add]);
           * addSquare(1, 2);
           * // => 9
           */
          var flowRight = createFlow(true)

          /**
           * This method returns the first argument it receives.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {*} value Any value.
           * @returns {*} Returns `value`.
           * @example
           *
           * var object = { 'a': 1 };
           *
           * console.log(_.identity(object) === object);
           * // => true
           */
          function identity(value) {
            return value
          }

          /**
           * Creates a function that invokes `func` with the arguments of the created
           * function. If `func` is a property name, the created function returns the
           * property value for a given element. If `func` is an array or object, the
           * created function returns `true` for elements that contain the equivalent
           * source properties, otherwise it returns `false`.
           *
           * @static
           * @since 4.0.0
           * @memberOf _
           * @category Util
           * @param {*} [func=_.identity] The value to convert to a callback.
           * @returns {Function} Returns the callback.
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': true },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
           * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.filter(users, _.iteratee(['user', 'fred']));
           * // => [{ 'user': 'fred', 'age': 40 }]
           *
           * // The `_.property` iteratee shorthand.
           * _.map(users, _.iteratee('user'));
           * // => ['barney', 'fred']
           *
           * // Create custom iteratee shorthands.
           * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
           *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
           *     return func.test(string);
           *   };
           * });
           *
           * _.filter(['abc', 'def'], /ef/);
           * // => ['def']
           */
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG))
          }

          /**
           * Creates a function that performs a partial deep comparison between a given
           * object and `source`, returning `true` if the given object has equivalent
           * property values, else `false`.
           *
           * **Note:** The created function is equivalent to `_.isMatch` with `source`
           * partially applied.
           *
           * Partial comparisons will match empty array and empty object `source`
           * values against any array or object value, respectively. See `_.isEqual`
           * for a list of supported value comparisons.
           *
           * **Note:** Multiple values can be checked by combining several matchers
           * using `_.overSome`
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Object} source The object of property values to match.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 1, 'b': 2, 'c': 3 },
           *   { 'a': 4, 'b': 5, 'c': 6 }
           * ];
           *
           * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
           * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
           *
           * // Checking for several possible values
           * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
           * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
           */
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG))
          }

          /**
           * Creates a function that performs a partial deep comparison between the
           * value at `path` of a given object to `srcValue`, returning `true` if the
           * object value is equivalent, else `false`.
           *
           * **Note:** Partial comparisons will match empty array and empty object
           * `srcValue` values against any array or object value, respectively. See
           * `_.isEqual` for a list of supported value comparisons.
           *
           * **Note:** Multiple values can be checked by combining several matchers
           * using `_.overSome`
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Util
           * @param {Array|string} path The path of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 1, 'b': 2, 'c': 3 },
           *   { 'a': 4, 'b': 5, 'c': 6 }
           * ];
           *
           * _.find(objects, _.matchesProperty('a', 4));
           * // => { 'a': 4, 'b': 5, 'c': 6 }
           *
           * // Checking for several possible values
           * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
           * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
           */
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG))
          }

          /**
           * Creates a function that invokes the method at `path` of a given object.
           * Any additional arguments are provided to the invoked method.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Util
           * @param {Array|string} path The path of the method to invoke.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {Function} Returns the new invoker function.
           * @example
           *
           * var objects = [
           *   { 'a': { 'b': _.constant(2) } },
           *   { 'a': { 'b': _.constant(1) } }
           * ];
           *
           * _.map(objects, _.method('a.b'));
           * // => [2, 1]
           *
           * _.map(objects, _.method(['a', 'b']));
           * // => [2, 1]
           */
          var method = baseRest(function (path, args) {
            return function (object) {
              return baseInvoke(object, path, args)
            }
          })

          /**
           * The opposite of `_.method`; this method creates a function that invokes
           * the method at a given path of `object`. Any additional arguments are
           * provided to the invoked method.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Util
           * @param {Object} object The object to query.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {Function} Returns the new invoker function.
           * @example
           *
           * var array = _.times(3, _.constant),
           *     object = { 'a': array, 'b': array, 'c': array };
           *
           * _.map(['a[2]', 'c[0]'], _.methodOf(object));
           * // => [2, 0]
           *
           * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
           * // => [2, 0]
           */
          var methodOf = baseRest(function (object, args) {
            return function (path) {
              return baseInvoke(object, path, args)
            }
          })

          /**
           * Adds all own enumerable string keyed function properties of a source
           * object to the destination object. If `object` is a function, then methods
           * are added to its prototype as well.
           *
           * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
           * avoid conflicts caused by modifying the original.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {Function|Object} [object=lodash] The destination object.
           * @param {Object} source The object of functions to add.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
           * @returns {Function|Object} Returns `object`.
           * @example
           *
           * function vowels(string) {
           *   return _.filter(string, function(v) {
           *     return /[aeiou]/i.test(v);
           *   });
           * }
           *
           * _.mixin({ 'vowels': vowels });
           * _.vowels('fred');
           * // => ['e']
           *
           * _('fred').vowels().value();
           * // => ['e']
           *
           * _.mixin({ 'vowels': vowels }, { 'chain': false });
           * _('fred').vowels();
           * // => ['e']
           */
          function mixin(object, source, options) {
            var props = keys(source),
              methodNames = baseFunctions(source, props)

            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source
              source = object
              object = this
              methodNames = baseFunctions(source, keys(source))
            }
            var chain = !(isObject(options) && "chain" in options) || !!options.chain,
              isFunc = isFunction(object)

            arrayEach(methodNames, function (methodName) {
              var func = source[methodName]
              object[methodName] = func
              if (isFunc) {
                object.prototype[methodName] = function () {
                  var chainAll = this.__chain__
                  if (chain || chainAll) {
                    var result = object(this.__wrapped__),
                      actions = (result.__actions__ = copyArray(this.__actions__))

                    actions.push({ func: func, args: arguments, thisArg: object })
                    result.__chain__ = chainAll
                    return result
                  }
                  return func.apply(object, arrayPush([this.value()], arguments))
                }
              }
            })

            return object
          }

          /**
           * Reverts the `_` variable to its previous value and returns a reference to
           * the `lodash` function.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @returns {Function} Returns the `lodash` function.
           * @example
           *
           * var lodash = _.noConflict();
           */
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash
            }
            return this
          }

          /**
           * This method returns `undefined`.
           *
           * @static
           * @memberOf _
           * @since 2.3.0
           * @category Util
           * @example
           *
           * _.times(2, _.noop);
           * // => [undefined, undefined]
           */
          function noop() {
            // No operation performed.
          }

          /**
           * Creates a function that gets the argument at index `n`. If `n` is negative,
           * the nth argument from the end is returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {number} [n=0] The index of the argument to return.
           * @returns {Function} Returns the new pass-thru function.
           * @example
           *
           * var func = _.nthArg(1);
           * func('a', 'b', 'c', 'd');
           * // => 'b'
           *
           * var func = _.nthArg(-2);
           * func('a', 'b', 'c', 'd');
           * // => 'c'
           */
          function nthArg(n) {
            n = toInteger(n)
            return baseRest(function (args) {
              return baseNth(args, n)
            })
          }

          /**
           * Creates a function that invokes `iteratees` with the arguments it receives
           * and returns their results.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [iteratees=[_.identity]]
           *  The iteratees to invoke.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.over([Math.max, Math.min]);
           *
           * func(1, 2, 3, 4);
           * // => [4, 1]
           */
          var over = createOver(arrayMap)

          /**
           * Creates a function that checks if **all** of the `predicates` return
           * truthy when invoked with the arguments it receives.
           *
           * Following shorthands are possible for providing predicates.
           * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
           * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [predicates=[_.identity]]
           *  The predicates to check.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.overEvery([Boolean, isFinite]);
           *
           * func('1');
           * // => true
           *
           * func(null);
           * // => false
           *
           * func(NaN);
           * // => false
           */
          var overEvery = createOver(arrayEvery)

          /**
           * Creates a function that checks if **any** of the `predicates` return
           * truthy when invoked with the arguments it receives.
           *
           * Following shorthands are possible for providing predicates.
           * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
           * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [predicates=[_.identity]]
           *  The predicates to check.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.overSome([Boolean, isFinite]);
           *
           * func('1');
           * // => true
           *
           * func(null);
           * // => true
           *
           * func(NaN);
           * // => false
           *
           * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
           * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
           */
          var overSome = createOver(arraySome)

          /**
           * Creates a function that returns the value at `path` of a given object.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Util
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           * @example
           *
           * var objects = [
           *   { 'a': { 'b': 2 } },
           *   { 'a': { 'b': 1 } }
           * ];
           *
           * _.map(objects, _.property('a.b'));
           * // => [2, 1]
           *
           * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
           * // => [1, 2]
           */
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path)
          }

          /**
           * The opposite of `_.property`; this method creates a function that returns
           * the value at a given path of `object`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           * @example
           *
           * var array = [0, 1, 2],
           *     object = { 'a': array, 'b': array, 'c': array };
           *
           * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
           * // => [2, 0]
           *
           * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
           * // => [2, 0]
           */
          function propertyOf(object) {
            return function (path) {
              return object == null ? undefined : baseGet(object, path)
            }
          }

          /**
           * Creates an array of numbers (positive and/or negative) progressing from
           * `start` up to, but not including, `end`. A step of `-1` is used if a negative
           * `start` is specified without an `end` or `step`. If `end` is not specified,
           * it's set to `start` with `start` then set to `0`.
           *
           * **Note:** JavaScript follows the IEEE-754 standard for resolving
           * floating-point values which can produce unexpected results.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @param {number} [step=1] The value to increment or decrement by.
           * @returns {Array} Returns the range of numbers.
           * @see _.inRange, _.rangeRight
           * @example
           *
           * _.range(4);
           * // => [0, 1, 2, 3]
           *
           * _.range(-4);
           * // => [0, -1, -2, -3]
           *
           * _.range(1, 5);
           * // => [1, 2, 3, 4]
           *
           * _.range(0, 20, 5);
           * // => [0, 5, 10, 15]
           *
           * _.range(0, -4, -1);
           * // => [0, -1, -2, -3]
           *
           * _.range(1, 4, 0);
           * // => [1, 1, 1]
           *
           * _.range(0);
           * // => []
           */
          var range = createRange()

          /**
           * This method is like `_.range` except that it populates values in
           * descending order.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @param {number} [step=1] The value to increment or decrement by.
           * @returns {Array} Returns the range of numbers.
           * @see _.inRange, _.range
           * @example
           *
           * _.rangeRight(4);
           * // => [3, 2, 1, 0]
           *
           * _.rangeRight(-4);
           * // => [-3, -2, -1, 0]
           *
           * _.rangeRight(1, 5);
           * // => [4, 3, 2, 1]
           *
           * _.rangeRight(0, 20, 5);
           * // => [15, 10, 5, 0]
           *
           * _.rangeRight(0, -4, -1);
           * // => [-3, -2, -1, 0]
           *
           * _.rangeRight(1, 4, 0);
           * // => [1, 1, 1]
           *
           * _.rangeRight(0);
           * // => []
           */
          var rangeRight = createRange(true)

          /**
           * This method returns a new empty array.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Array} Returns the new empty array.
           * @example
           *
           * var arrays = _.times(2, _.stubArray);
           *
           * console.log(arrays);
           * // => [[], []]
           *
           * console.log(arrays[0] === arrays[1]);
           * // => false
           */
          function stubArray() {
            return []
          }

          /**
           * This method returns `false`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `false`.
           * @example
           *
           * _.times(2, _.stubFalse);
           * // => [false, false]
           */
          function stubFalse() {
            return false
          }

          /**
           * This method returns a new empty object.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Object} Returns the new empty object.
           * @example
           *
           * var objects = _.times(2, _.stubObject);
           *
           * console.log(objects);
           * // => [{}, {}]
           *
           * console.log(objects[0] === objects[1]);
           * // => false
           */
          function stubObject() {
            return {}
          }

          /**
           * This method returns an empty string.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {string} Returns the empty string.
           * @example
           *
           * _.times(2, _.stubString);
           * // => ['', '']
           */
          function stubString() {
            return ""
          }

          /**
           * This method returns `true`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `true`.
           * @example
           *
           * _.times(2, _.stubTrue);
           * // => [true, true]
           */
          function stubTrue() {
            return true
          }

          /**
           * Invokes the iteratee `n` times, returning an array of the results of
           * each invocation. The iteratee is invoked with one argument; (index).
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           * @example
           *
           * _.times(3, String);
           * // => ['0', '1', '2']
           *
           *  _.times(4, _.constant(0));
           * // => [0, 0, 0, 0]
           */
          function times(n, iteratee) {
            n = toInteger(n)
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return []
            }
            var index = MAX_ARRAY_LENGTH,
              length = nativeMin(n, MAX_ARRAY_LENGTH)

            iteratee = getIteratee(iteratee)
            n -= MAX_ARRAY_LENGTH

            var result = baseTimes(length, iteratee)
            while (++index < n) {
              iteratee(index)
            }
            return result
          }

          /**
           * Converts `value` to a property path array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {*} value The value to convert.
           * @returns {Array} Returns the new property path array.
           * @example
           *
           * _.toPath('a.b.c');
           * // => ['a', 'b', 'c']
           *
           * _.toPath('a[0].b.c');
           * // => ['a', '0', 'b', 'c']
           */
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey)
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)))
          }

          /**
           * Generates a unique ID. If `prefix` is given, the ID is appended to it.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {string} [prefix=''] The value to prefix the ID with.
           * @returns {string} Returns the unique ID.
           * @example
           *
           * _.uniqueId('contact_');
           * // => 'contact_104'
           *
           * _.uniqueId();
           * // => '105'
           */
          function uniqueId(prefix) {
            var id = ++idCounter
            return toString(prefix) + id
          }

          /*------------------------------------------------------------------------*/

          /**
           * Adds two numbers.
           *
           * @static
           * @memberOf _
           * @since 3.4.0
           * @category Math
           * @param {number} augend The first number in an addition.
           * @param {number} addend The second number in an addition.
           * @returns {number} Returns the total.
           * @example
           *
           * _.add(6, 4);
           * // => 10
           */
          var add = createMathOperation(function (augend, addend) {
            return augend + addend
          }, 0)

          /**
           * Computes `number` rounded up to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round up.
           * @param {number} [precision=0] The precision to round up to.
           * @returns {number} Returns the rounded up number.
           * @example
           *
           * _.ceil(4.006);
           * // => 5
           *
           * _.ceil(6.004, 2);
           * // => 6.01
           *
           * _.ceil(6040, -2);
           * // => 6100
           */
          var ceil = createRound("ceil")

          /**
           * Divide two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {number} dividend The first number in a division.
           * @param {number} divisor The second number in a division.
           * @returns {number} Returns the quotient.
           * @example
           *
           * _.divide(6, 4);
           * // => 1.5
           */
          var divide = createMathOperation(function (dividend, divisor) {
            return dividend / divisor
          }, 1)

          /**
           * Computes `number` rounded down to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round down.
           * @param {number} [precision=0] The precision to round down to.
           * @returns {number} Returns the rounded down number.
           * @example
           *
           * _.floor(4.006);
           * // => 4
           *
           * _.floor(0.046, 2);
           * // => 0.04
           *
           * _.floor(4060, -2);
           * // => 4000
           */
          var floor = createRound("floor")

          /**
           * Computes the maximum value of `array`. If `array` is empty or falsey,
           * `undefined` is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {*} Returns the maximum value.
           * @example
           *
           * _.max([4, 2, 8, 6]);
           * // => 8
           *
           * _.max([]);
           * // => undefined
           */
          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined
          }

          /**
           * This method is like `_.max` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * the value is ranked. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {*} Returns the maximum value.
           * @example
           *
           * var objects = [{ 'n': 1 }, { 'n': 2 }];
           *
           * _.maxBy(objects, function(o) { return o.n; });
           * // => { 'n': 2 }
           *
           * // The `_.property` iteratee shorthand.
           * _.maxBy(objects, 'n');
           * // => { 'n': 2 }
           */
          function maxBy(array, iteratee) {
            return array && array.length
              ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
              : undefined
          }

          /**
           * Computes the mean of the values in `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {number} Returns the mean.
           * @example
           *
           * _.mean([4, 2, 8, 6]);
           * // => 5
           */
          function mean(array) {
            return baseMean(array, identity)
          }

          /**
           * This method is like `_.mean` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the value to be averaged.
           * The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the mean.
           * @example
           *
           * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
           *
           * _.meanBy(objects, function(o) { return o.n; });
           * // => 5
           *
           * // The `_.property` iteratee shorthand.
           * _.meanBy(objects, 'n');
           * // => 5
           */
          function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2))
          }

          /**
           * Computes the minimum value of `array`. If `array` is empty or falsey,
           * `undefined` is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {*} Returns the minimum value.
           * @example
           *
           * _.min([4, 2, 8, 6]);
           * // => 2
           *
           * _.min([]);
           * // => undefined
           */
          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined
          }

          /**
           * This method is like `_.min` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * the value is ranked. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {*} Returns the minimum value.
           * @example
           *
           * var objects = [{ 'n': 1 }, { 'n': 2 }];
           *
           * _.minBy(objects, function(o) { return o.n; });
           * // => { 'n': 1 }
           *
           * // The `_.property` iteratee shorthand.
           * _.minBy(objects, 'n');
           * // => { 'n': 1 }
           */
          function minBy(array, iteratee) {
            return array && array.length
              ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
              : undefined
          }

          /**
           * Multiply two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {number} multiplier The first number in a multiplication.
           * @param {number} multiplicand The second number in a multiplication.
           * @returns {number} Returns the product.
           * @example
           *
           * _.multiply(6, 4);
           * // => 24
           */
          var multiply = createMathOperation(function (multiplier, multiplicand) {
            return multiplier * multiplicand
          }, 1)

          /**
           * Computes `number` rounded to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round.
           * @param {number} [precision=0] The precision to round to.
           * @returns {number} Returns the rounded number.
           * @example
           *
           * _.round(4.006);
           * // => 4
           *
           * _.round(4.006, 2);
           * // => 4.01
           *
           * _.round(4060, -2);
           * // => 4100
           */
          var round = createRound("round")

          /**
           * Subtract two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {number} minuend The first number in a subtraction.
           * @param {number} subtrahend The second number in a subtraction.
           * @returns {number} Returns the difference.
           * @example
           *
           * _.subtract(6, 4);
           * // => 2
           */
          var subtract = createMathOperation(function (minuend, subtrahend) {
            return minuend - subtrahend
          }, 0)

          /**
           * Computes the sum of the values in `array`.
           *
           * @static
           * @memberOf _
           * @since 3.4.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {number} Returns the sum.
           * @example
           *
           * _.sum([4, 2, 8, 6]);
           * // => 20
           */
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0
          }

          /**
           * This method is like `_.sum` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the value to be summed.
           * The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the sum.
           * @example
           *
           * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
           *
           * _.sumBy(objects, function(o) { return o.n; });
           * // => 20
           *
           * // The `_.property` iteratee shorthand.
           * _.sumBy(objects, 'n');
           * // => 20
           */
          function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0
          }

          /*------------------------------------------------------------------------*/

          // Add methods that return wrapped values in chain sequences.
          lodash.after = after
          lodash.ary = ary
          lodash.assign = assign
          lodash.assignIn = assignIn
          lodash.assignInWith = assignInWith
          lodash.assignWith = assignWith
          lodash.at = at
          lodash.before = before
          lodash.bind = bind
          lodash.bindAll = bindAll
          lodash.bindKey = bindKey
          lodash.castArray = castArray
          lodash.chain = chain
          lodash.chunk = chunk
          lodash.compact = compact
          lodash.concat = concat
          lodash.cond = cond
          lodash.conforms = conforms
          lodash.constant = constant
          lodash.countBy = countBy
          lodash.create = create
          lodash.curry = curry
          lodash.curryRight = curryRight
          lodash.debounce = debounce
          lodash.defaults = defaults
          lodash.defaultsDeep = defaultsDeep
          lodash.defer = defer
          lodash.delay = delay
          lodash.difference = difference
          lodash.differenceBy = differenceBy
          lodash.differenceWith = differenceWith
          lodash.drop = drop
          lodash.dropRight = dropRight
          lodash.dropRightWhile = dropRightWhile
          lodash.dropWhile = dropWhile
          lodash.fill = fill
          lodash.filter = filter
          lodash.flatMap = flatMap
          lodash.flatMapDeep = flatMapDeep
          lodash.flatMapDepth = flatMapDepth
          lodash.flatten = flatten
          lodash.flattenDeep = flattenDeep
          lodash.flattenDepth = flattenDepth
          lodash.flip = flip
          lodash.flow = flow
          lodash.flowRight = flowRight
          lodash.fromPairs = fromPairs
          lodash.functions = functions
          lodash.functionsIn = functionsIn
          lodash.groupBy = groupBy
          lodash.initial = initial
          lodash.intersection = intersection
          lodash.intersectionBy = intersectionBy
          lodash.intersectionWith = intersectionWith
          lodash.invert = invert
          lodash.invertBy = invertBy
          lodash.invokeMap = invokeMap
          lodash.iteratee = iteratee
          lodash.keyBy = keyBy
          lodash.keys = keys
          lodash.keysIn = keysIn
          lodash.map = map
          lodash.mapKeys = mapKeys
          lodash.mapValues = mapValues
          lodash.matches = matches
          lodash.matchesProperty = matchesProperty
          lodash.memoize = memoize
          lodash.merge = merge
          lodash.mergeWith = mergeWith
          lodash.method = method
          lodash.methodOf = methodOf
          lodash.mixin = mixin
          lodash.negate = negate
          lodash.nthArg = nthArg
          lodash.omit = omit
          lodash.omitBy = omitBy
          lodash.once = once
          lodash.orderBy = orderBy
          lodash.over = over
          lodash.overArgs = overArgs
          lodash.overEvery = overEvery
          lodash.overSome = overSome
          lodash.partial = partial
          lodash.partialRight = partialRight
          lodash.partition = partition
          lodash.pick = pick
          lodash.pickBy = pickBy
          lodash.property = property
          lodash.propertyOf = propertyOf
          lodash.pull = pull
          lodash.pullAll = pullAll
          lodash.pullAllBy = pullAllBy
          lodash.pullAllWith = pullAllWith
          lodash.pullAt = pullAt
          lodash.range = range
          lodash.rangeRight = rangeRight
          lodash.rearg = rearg
          lodash.reject = reject
          lodash.remove = remove
          lodash.rest = rest
          lodash.reverse = reverse
          lodash.sampleSize = sampleSize
          lodash.set = set
          lodash.setWith = setWith
          lodash.shuffle = shuffle
          lodash.slice = slice
          lodash.sortBy = sortBy
          lodash.sortedUniq = sortedUniq
          lodash.sortedUniqBy = sortedUniqBy
          lodash.split = split
          lodash.spread = spread
          lodash.tail = tail
          lodash.take = take
          lodash.takeRight = takeRight
          lodash.takeRightWhile = takeRightWhile
          lodash.takeWhile = takeWhile
          lodash.tap = tap
          lodash.throttle = throttle
          lodash.thru = thru
          lodash.toArray = toArray
          lodash.toPairs = toPairs
          lodash.toPairsIn = toPairsIn
          lodash.toPath = toPath
          lodash.toPlainObject = toPlainObject
          lodash.transform = transform
          lodash.unary = unary
          lodash.union = union
          lodash.unionBy = unionBy
          lodash.unionWith = unionWith
          lodash.uniq = uniq
          lodash.uniqBy = uniqBy
          lodash.uniqWith = uniqWith
          lodash.unset = unset
          lodash.unzip = unzip
          lodash.unzipWith = unzipWith
          lodash.update = update
          lodash.updateWith = updateWith
          lodash.values = values
          lodash.valuesIn = valuesIn
          lodash.without = without
          lodash.words = words
          lodash.wrap = wrap
          lodash.xor = xor
          lodash.xorBy = xorBy
          lodash.xorWith = xorWith
          lodash.zip = zip
          lodash.zipObject = zipObject
          lodash.zipObjectDeep = zipObjectDeep
          lodash.zipWith = zipWith

          // Add aliases.
          lodash.entries = toPairs
          lodash.entriesIn = toPairsIn
          lodash.extend = assignIn
          lodash.extendWith = assignInWith

          // Add methods to `lodash.prototype`.
          mixin(lodash, lodash)

          /*------------------------------------------------------------------------*/

          // Add methods that return unwrapped values in chain sequences.
          lodash.add = add
          lodash.attempt = attempt
          lodash.camelCase = camelCase
          lodash.capitalize = capitalize
          lodash.ceil = ceil
          lodash.clamp = clamp
          lodash.clone = clone
          lodash.cloneDeep = cloneDeep
          lodash.cloneDeepWith = cloneDeepWith
          lodash.cloneWith = cloneWith
          lodash.conformsTo = conformsTo
          lodash.deburr = deburr
          lodash.defaultTo = defaultTo
          lodash.divide = divide
          lodash.endsWith = endsWith
          lodash.eq = eq
          lodash.escape = escape
          lodash.escapeRegExp = escapeRegExp
          lodash.every = every
          lodash.find = find
          lodash.findIndex = findIndex
          lodash.findKey = findKey
          lodash.findLast = findLast
          lodash.findLastIndex = findLastIndex
          lodash.findLastKey = findLastKey
          lodash.floor = floor
          lodash.forEach = forEach
          lodash.forEachRight = forEachRight
          lodash.forIn = forIn
          lodash.forInRight = forInRight
          lodash.forOwn = forOwn
          lodash.forOwnRight = forOwnRight
          lodash.get = get
          lodash.gt = gt
          lodash.gte = gte
          lodash.has = has
          lodash.hasIn = hasIn
          lodash.head = head
          lodash.identity = identity
          lodash.includes = includes
          lodash.indexOf = indexOf
          lodash.inRange = inRange
          lodash.invoke = invoke
          lodash.isArguments = isArguments
          lodash.isArray = isArray
          lodash.isArrayBuffer = isArrayBuffer
          lodash.isArrayLike = isArrayLike
          lodash.isArrayLikeObject = isArrayLikeObject
          lodash.isBoolean = isBoolean
          lodash.isBuffer = isBuffer
          lodash.isDate = isDate
          lodash.isElement = isElement
          lodash.isEmpty = isEmpty
          lodash.isEqual = isEqual
          lodash.isEqualWith = isEqualWith
          lodash.isError = isError
          lodash.isFinite = isFinite
          lodash.isFunction = isFunction
          lodash.isInteger = isInteger
          lodash.isLength = isLength
          lodash.isMap = isMap
          lodash.isMatch = isMatch
          lodash.isMatchWith = isMatchWith
          lodash.isNaN = isNaN
          lodash.isNative = isNative
          lodash.isNil = isNil
          lodash.isNull = isNull
          lodash.isNumber = isNumber
          lodash.isObject = isObject
          lodash.isObjectLike = isObjectLike
          lodash.isPlainObject = isPlainObject
          lodash.isRegExp = isRegExp
          lodash.isSafeInteger = isSafeInteger
          lodash.isSet = isSet
          lodash.isString = isString
          lodash.isSymbol = isSymbol
          lodash.isTypedArray = isTypedArray
          lodash.isUndefined = isUndefined
          lodash.isWeakMap = isWeakMap
          lodash.isWeakSet = isWeakSet
          lodash.join = join
          lodash.kebabCase = kebabCase
          lodash.last = last
          lodash.lastIndexOf = lastIndexOf
          lodash.lowerCase = lowerCase
          lodash.lowerFirst = lowerFirst
          lodash.lt = lt
          lodash.lte = lte
          lodash.max = max
          lodash.maxBy = maxBy
          lodash.mean = mean
          lodash.meanBy = meanBy
          lodash.min = min
          lodash.minBy = minBy
          lodash.stubArray = stubArray
          lodash.stubFalse = stubFalse
          lodash.stubObject = stubObject
          lodash.stubString = stubString
          lodash.stubTrue = stubTrue
          lodash.multiply = multiply
          lodash.nth = nth
          lodash.noConflict = noConflict
          lodash.noop = noop
          lodash.now = now
          lodash.pad = pad
          lodash.padEnd = padEnd
          lodash.padStart = padStart
          lodash.parseInt = parseInt
          lodash.random = random
          lodash.reduce = reduce
          lodash.reduceRight = reduceRight
          lodash.repeat = repeat
          lodash.replace = replace
          lodash.result = result
          lodash.round = round
          lodash.runInContext = runInContext
          lodash.sample = sample
          lodash.size = size
          lodash.snakeCase = snakeCase
          lodash.some = some
          lodash.sortedIndex = sortedIndex
          lodash.sortedIndexBy = sortedIndexBy
          lodash.sortedIndexOf = sortedIndexOf
          lodash.sortedLastIndex = sortedLastIndex
          lodash.sortedLastIndexBy = sortedLastIndexBy
          lodash.sortedLastIndexOf = sortedLastIndexOf
          lodash.startCase = startCase
          lodash.startsWith = startsWith
          lodash.subtract = subtract
          lodash.sum = sum
          lodash.sumBy = sumBy
          lodash.template = template
          lodash.times = times
          lodash.toFinite = toFinite
          lodash.toInteger = toInteger
          lodash.toLength = toLength
          lodash.toLower = toLower
          lodash.toNumber = toNumber
          lodash.toSafeInteger = toSafeInteger
          lodash.toString = toString
          lodash.toUpper = toUpper
          lodash.trim = trim
          lodash.trimEnd = trimEnd
          lodash.trimStart = trimStart
          lodash.truncate = truncate
          lodash.unescape = unescape
          lodash.uniqueId = uniqueId
          lodash.upperCase = upperCase
          lodash.upperFirst = upperFirst

          // Add aliases.
          lodash.each = forEach
          lodash.eachRight = forEachRight
          lodash.first = head

          mixin(
            lodash,
            (function () {
              var source = {}
              baseForOwn(lodash, function (func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                  source[methodName] = func
                }
              })
              return source
            })(),
            { chain: false }
          )

          /*------------------------------------------------------------------------*/

          /**
           * The semantic version number.
           *
           * @static
           * @memberOf _
           * @type {string}
           */
          lodash.VERSION = VERSION

          // Assign default placeholders.
          arrayEach(
            ["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"],
            function (methodName) {
              lodash[methodName].placeholder = lodash
            }
          )

          // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
          arrayEach(["drop", "take"], function (methodName, index) {
            LazyWrapper.prototype[methodName] = function (n) {
              n = n === undefined ? 1 : nativeMax(toInteger(n), 0)

              var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone()

              if (result.__filtered__) {
                result.__takeCount__ = nativeMin(n, result.__takeCount__)
              } else {
                result.__views__.push({
                  size: nativeMin(n, MAX_ARRAY_LENGTH),
                  type: methodName + (result.__dir__ < 0 ? "Right" : "")
                })
              }
              return result
            }

            LazyWrapper.prototype[methodName + "Right"] = function (n) {
              return this.reverse()[methodName](n).reverse()
            }
          })

          // Add `LazyWrapper` methods that accept an `iteratee` value.
          arrayEach(["filter", "map", "takeWhile"], function (methodName, index) {
            var type = index + 1,
              isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG

            LazyWrapper.prototype[methodName] = function (iteratee) {
              var result = this.clone()
              result.__iteratees__.push({
                iteratee: getIteratee(iteratee, 3),
                type: type
              })
              result.__filtered__ = result.__filtered__ || isFilter
              return result
            }
          })

          // Add `LazyWrapper` methods for `_.head` and `_.last`.
          arrayEach(["head", "last"], function (methodName, index) {
            var takeName = "take" + (index ? "Right" : "")

            LazyWrapper.prototype[methodName] = function () {
              return this[takeName](1).value()[0]
            }
          })

          // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
          arrayEach(["initial", "tail"], function (methodName, index) {
            var dropName = "drop" + (index ? "" : "Right")

            LazyWrapper.prototype[methodName] = function () {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1)
            }
          })

          LazyWrapper.prototype.compact = function () {
            return this.filter(identity)
          }

          LazyWrapper.prototype.find = function (predicate) {
            return this.filter(predicate).head()
          }

          LazyWrapper.prototype.findLast = function (predicate) {
            return this.reverse().find(predicate)
          }

          LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this)
            }
            return this.map(function (value) {
              return baseInvoke(value, path, args)
            })
          })

          LazyWrapper.prototype.reject = function (predicate) {
            return this.filter(negate(getIteratee(predicate)))
          }

          LazyWrapper.prototype.slice = function (start, end) {
            start = toInteger(start)

            var result = this
            if (result.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result)
            }
            if (start < 0) {
              result = result.takeRight(-start)
            } else if (start) {
              result = result.drop(start)
            }
            if (end !== undefined) {
              end = toInteger(end)
              result = end < 0 ? result.dropRight(-end) : result.take(end - start)
            }
            return result
          }

          LazyWrapper.prototype.takeRightWhile = function (predicate) {
            return this.reverse().takeWhile(predicate).reverse()
          }

          LazyWrapper.prototype.toArray = function () {
            return this.take(MAX_ARRAY_LENGTH)
          }

          // Add `LazyWrapper` methods to `lodash.prototype`.
          baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
              isTaker = /^(?:head|last)$/.test(methodName),
              lodashFunc =
                lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName],
              retUnwrapped = isTaker || /^find/.test(methodName)

            if (!lodashFunc) {
              return
            }
            lodash.prototype[methodName] = function () {
              var value = this.__wrapped__,
                args = isTaker ? [1] : arguments,
                isLazy = value instanceof LazyWrapper,
                iteratee = args[0],
                useLazy = isLazy || isArray(value)

              var interceptor = function (value) {
                var result = lodashFunc.apply(lodash, arrayPush([value], args))
                return isTaker && chainAll ? result[0] : result
              }

              if (
                useLazy &&
                checkIteratee &&
                typeof iteratee == "function" &&
                iteratee.length != 1
              ) {
                // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false
              }
              var chainAll = this.__chain__,
                isHybrid = !!this.__actions__.length,
                isUnwrapped = retUnwrapped && !chainAll,
                onlyLazy = isLazy && !isHybrid

              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this)
                var result = func.apply(value, args)
                result.__actions__.push({ func: thru, args: [interceptor], thisArg: undefined })
                return new LodashWrapper(result, chainAll)
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args)
              }
              result = this.thru(interceptor)
              return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result
            }
          })

          // Add `Array` methods to `lodash.prototype`.
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function (methodName) {
            var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru",
              retUnwrapped = /^(?:pop|shift)$/.test(methodName)

            lodash.prototype[methodName] = function () {
              var args = arguments
              if (retUnwrapped && !this.__chain__) {
                var value = this.value()
                return func.apply(isArray(value) ? value : [], args)
              }
              return this[chainName](function (value) {
                return func.apply(isArray(value) ? value : [], args)
              })
            }
          })

          // Map minified method names to their real names.
          baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var lodashFunc = lodash[methodName]
            if (lodashFunc) {
              var key = lodashFunc.name + ""
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = []
              }
              realNames[key].push({ name: methodName, func: lodashFunc })
            }
          })

          realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
              name: "wrapper",
              func: undefined
            }
          ]

          // Add methods to `LazyWrapper`.
          LazyWrapper.prototype.clone = lazyClone
          LazyWrapper.prototype.reverse = lazyReverse
          LazyWrapper.prototype.value = lazyValue

          // Add chain sequence methods to the `lodash` wrapper.
          lodash.prototype.at = wrapperAt
          lodash.prototype.chain = wrapperChain
          lodash.prototype.commit = wrapperCommit
          lodash.prototype.next = wrapperNext
          lodash.prototype.plant = wrapperPlant
          lodash.prototype.reverse = wrapperReverse
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue

          // Add lazy aliases.
          lodash.prototype.first = lodash.prototype.head

          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator
          }
          return lodash
        }

        /*--------------------------------------------------------------------------*/

        // Export lodash.
        var _ = runInContext()

        // Some AMD build optimizers, like r.js, check for condition patterns like:
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          // Expose Lodash on the global object to prevent errors when Lodash is
          // loaded by a script tag in the presence of an AMD loader.
          // See http://requirejs.org/docs/errors.html#mismatch for more details.
          // Use `_.noConflict` to remove Lodash from the global object.
          root._ = _

          // Define as an anonymous module so, through path mapping, it can be
          // referenced as the "underscore" module.
          define(function () {
            return _
          })
        }
        // Check for `exports` after `define` in case a build optimizer adds it.
        else if (freeModule) {
          // Export for Node.js.
          ;(freeModule.exports = _)._ = _
          // Export for CommonJS support.
          freeExports._ = _
        } else {
          // Export to the global object.
          root._ = _
        }
      }.call(this))

      /***/
    },

    /***/ 80481: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseMerge = __nccwpck_require__(15451),
        createAssigner = __nccwpck_require__(31911)

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex)
      })

      module.exports = merge

      /***/
    },

    /***/ 98911: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseMerge = __nccwpck_require__(15451),
        createAssigner = __nccwpck_require__(31911)

      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer)
      })

      module.exports = mergeWith

      /***/
    },

    /***/ 51901: /***/ (module) => {
      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {
        // No operation performed.
      }

      module.exports = noop

      /***/
    },

    /***/ 31419: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var createCompounder = __nccwpck_require__(53702)

      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? "_" : "") + word.toLowerCase()
      })

      module.exports = snakeCase

      /***/
    },

    /***/ 69274: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var createCompounder = __nccwpck_require__(53702),
        upperFirst = __nccwpck_require__(72598)

      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? " " : "") + upperFirst(word)
      })

      module.exports = startCase

      /***/
    },

    /***/ 67744: /***/ (module) => {
      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false
      }

      module.exports = stubFalse

      /***/
    },

    /***/ 29321: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var copyObject = __nccwpck_require__(86388),
        keysIn = __nccwpck_require__(69109)

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value))
      }

      module.exports = toPlainObject

      /***/
    },

    /***/ 32931: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseToString = __nccwpck_require__(96792)

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? "" : baseToString(value)
      }

      module.exports = toString

      /***/
    },

    /***/ 89482: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var baseUniq = __nccwpck_require__(19036)

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return array && array.length ? baseUniq(array) : []
      }

      module.exports = uniq

      /***/
    },

    /***/ 72598: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var createCaseFirst = __nccwpck_require__(55898)

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst("toUpperCase")

      module.exports = upperFirst

      /***/
    },

    /***/ 76454: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var asciiWords = __nccwpck_require__(42560),
        hasUnicodeWord = __nccwpck_require__(54632),
        toString = __nccwpck_require__(32931),
        unicodeWords = __nccwpck_require__(85423)

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string)
        pattern = guard ? undefined : pattern

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string)
        }
        return string.match(pattern) || []
      }

      module.exports = words

      /***/
    },

    /***/ 7129: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      // A linked list to keep track of recently-used-ness
      const Yallist = __nccwpck_require__(40665)

      const MAX = Symbol("max")
      const LENGTH = Symbol("length")
      const LENGTH_CALCULATOR = Symbol("lengthCalculator")
      const ALLOW_STALE = Symbol("allowStale")
      const MAX_AGE = Symbol("maxAge")
      const DISPOSE = Symbol("dispose")
      const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet")
      const LRU_LIST = Symbol("lruList")
      const CACHE = Symbol("cache")
      const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet")

      const naiveLength = () => 1

      // lruList is a yallist where the head is the youngest
      // item, and the tail is the oldest.  the list contains the Hit
      // objects as the entries.
      // Each Hit object has a reference to its Yallist.Node.  This
      // never changes.
      //
      // cache is a Map (or PseudoMap) that matches the keys to
      // the Yallist.Node object.
      class LRUCache {
        constructor(options) {
          if (typeof options === "number") options = { max: options }

          if (!options) options = {}

          if (options.max && (typeof options.max !== "number" || options.max < 0))
            throw new TypeError("max must be a non-negative number")
          // Kind of weird to have a default max of Infinity, but oh well.
          const max = (this[MAX] = options.max || Infinity)

          const lc = options.length || naiveLength
          this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc
          this[ALLOW_STALE] = options.stale || false
          if (options.maxAge && typeof options.maxAge !== "number")
            throw new TypeError("maxAge must be a number")
          this[MAX_AGE] = options.maxAge || 0
          this[DISPOSE] = options.dispose
          this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false
          this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false
          this.reset()
        }

        // resize the cache when the max changes.
        set max(mL) {
          if (typeof mL !== "number" || mL < 0)
            throw new TypeError("max must be a non-negative number")

          this[MAX] = mL || Infinity
          trim(this)
        }
        get max() {
          return this[MAX]
        }

        set allowStale(allowStale) {
          this[ALLOW_STALE] = !!allowStale
        }
        get allowStale() {
          return this[ALLOW_STALE]
        }

        set maxAge(mA) {
          if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number")

          this[MAX_AGE] = mA
          trim(this)
        }
        get maxAge() {
          return this[MAX_AGE]
        }

        // resize the cache when the lengthCalculator changes.
        set lengthCalculator(lC) {
          if (typeof lC !== "function") lC = naiveLength

          if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC
            this[LENGTH] = 0
            this[LRU_LIST].forEach((hit) => {
              hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)
              this[LENGTH] += hit.length
            })
          }
          trim(this)
        }
        get lengthCalculator() {
          return this[LENGTH_CALCULATOR]
        }

        get length() {
          return this[LENGTH]
        }
        get itemCount() {
          return this[LRU_LIST].length
        }

        rforEach(fn, thisp) {
          thisp = thisp || this
          for (let walker = this[LRU_LIST].tail; walker !== null; ) {
            const prev = walker.prev
            forEachStep(this, fn, walker, thisp)
            walker = prev
          }
        }

        forEach(fn, thisp) {
          thisp = thisp || this
          for (let walker = this[LRU_LIST].head; walker !== null; ) {
            const next = walker.next
            forEachStep(this, fn, walker, thisp)
            walker = next
          }
        }

        keys() {
          return this[LRU_LIST].toArray().map((k) => k.key)
        }

        values() {
          return this[LRU_LIST].toArray().map((k) => k.value)
        }

        reset() {
          if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
            this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value))
          }

          this[CACHE] = new Map() // hash of items by key
          this[LRU_LIST] = new Yallist() // list of items in order of use recency
          this[LENGTH] = 0 // length of items in the list
        }

        dump() {
          return this[LRU_LIST].map((hit) =>
            isStale(this, hit)
              ? false
              : {
                  k: hit.key,
                  v: hit.value,
                  e: hit.now + (hit.maxAge || 0)
                }
          )
            .toArray()
            .filter((h) => h)
        }

        dumpLru() {
          return this[LRU_LIST]
        }

        set(key, value, maxAge) {
          maxAge = maxAge || this[MAX_AGE]

          if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number")

          const now = maxAge ? Date.now() : 0
          const len = this[LENGTH_CALCULATOR](value, key)

          if (this[CACHE].has(key)) {
            if (len > this[MAX]) {
              del(this, this[CACHE].get(key))
              return false
            }

            const node = this[CACHE].get(key)
            const item = node.value

            // dispose of the old one before overwriting
            // split out into 2 ifs for better coverage tracking
            if (this[DISPOSE]) {
              if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value)
            }

            item.now = now
            item.maxAge = maxAge
            item.value = value
            this[LENGTH] += len - item.length
            item.length = len
            this.get(key)
            trim(this)
            return true
          }

          const hit = new Entry(key, value, len, now, maxAge)

          // oversized objects fall out of cache automatically.
          if (hit.length > this[MAX]) {
            if (this[DISPOSE]) this[DISPOSE](key, value)

            return false
          }

          this[LENGTH] += hit.length
          this[LRU_LIST].unshift(hit)
          this[CACHE].set(key, this[LRU_LIST].head)
          trim(this)
          return true
        }

        has(key) {
          if (!this[CACHE].has(key)) return false
          const hit = this[CACHE].get(key).value
          return !isStale(this, hit)
        }

        get(key) {
          return get(this, key, true)
        }

        peek(key) {
          return get(this, key, false)
        }

        pop() {
          const node = this[LRU_LIST].tail
          if (!node) return null

          del(this, node)
          return node.value
        }

        del(key) {
          del(this, this[CACHE].get(key))
        }

        load(arr) {
          // reset the cache
          this.reset()

          const now = Date.now()
          // A previous serialized cache has the most recent items first
          for (let l = arr.length - 1; l >= 0; l--) {
            const hit = arr[l]
            const expiresAt = hit.e || 0
            if (expiresAt === 0)
              // the item was created without expiration in a non aged cache
              this.set(hit.k, hit.v)
            else {
              const maxAge = expiresAt - now
              // dont add already expired items
              if (maxAge > 0) {
                this.set(hit.k, hit.v, maxAge)
              }
            }
          }
        }

        prune() {
          this[CACHE].forEach((value, key) => get(this, key, false))
        }
      }

      const get = (self, key, doUse) => {
        const node = self[CACHE].get(key)
        if (node) {
          const hit = node.value
          if (isStale(self, hit)) {
            del(self, node)
            if (!self[ALLOW_STALE]) return undefined
          } else {
            if (doUse) {
              if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now()
              self[LRU_LIST].unshiftNode(node)
            }
          }
          return hit.value
        }
      }

      const isStale = (self, hit) => {
        if (!hit || (!hit.maxAge && !self[MAX_AGE])) return false

        const diff = Date.now() - hit.now
        return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE]
      }

      const trim = (self) => {
        if (self[LENGTH] > self[MAX]) {
          for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null; ) {
            // We know that we're about to delete this one, and also
            // what the next least recently used key will be, so just
            // go ahead and set it now.
            const prev = walker.prev
            del(self, walker)
            walker = prev
          }
        }
      }

      const del = (self, node) => {
        if (node) {
          const hit = node.value
          if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value)

          self[LENGTH] -= hit.length
          self[CACHE].delete(hit.key)
          self[LRU_LIST].removeNode(node)
        }
      }

      class Entry {
        constructor(key, value, length, now, maxAge) {
          this.key = key
          this.value = value
          this.length = length
          this.now = now
          this.maxAge = maxAge || 0
        }
      }

      const forEachStep = (self, fn, node, thisp) => {
        let hit = node.value
        if (isStale(self, hit)) {
          del(self, node)
          if (!self[ALLOW_STALE]) hit = undefined
        }
        if (hit) fn.call(thisp, hit.value, hit.key, self)
      }

      module.exports = LRUCache

      /***/
    },

    /***/ 21381: /***/ (module, exports) => {
      "use strict"
      // ISC @ Julien Fontanet

      // ===================================================================

      var construct = typeof Reflect !== "undefined" ? Reflect.construct : undefined
      var defineProperty = Object.defineProperty

      // -------------------------------------------------------------------

      var captureStackTrace = Error.captureStackTrace
      if (captureStackTrace === undefined) {
        captureStackTrace = function captureStackTrace(error) {
          var container = new Error()

          defineProperty(error, "stack", {
            configurable: true,
            get: function getStack() {
              var stack = container.stack

              // Replace property with value for faster future accesses.
              defineProperty(this, "stack", {
                configurable: true,
                value: stack,
                writable: true
              })

              return stack
            },
            set: function setStack(stack) {
              defineProperty(error, "stack", {
                configurable: true,
                value: stack,
                writable: true
              })
            }
          })
        }
      }

      // -------------------------------------------------------------------

      function BaseError(message) {
        if (message !== undefined) {
          defineProperty(this, "message", {
            configurable: true,
            value: message,
            writable: true
          })
        }

        var cname = this.constructor.name
        if (cname !== undefined && cname !== this.name) {
          defineProperty(this, "name", {
            configurable: true,
            value: cname,
            writable: true
          })
        }

        captureStackTrace(this, this.constructor)
      }

      BaseError.prototype = Object.create(Error.prototype, {
        // See: https://github.com/JsCommunity/make-error/issues/4
        constructor: {
          configurable: true,
          value: BaseError,
          writable: true
        }
      })

      // -------------------------------------------------------------------

      // Sets the name of a function if possible (depends of the JS engine).
      var setFunctionName = (function () {
        function setFunctionName(fn, name) {
          return defineProperty(fn, "name", {
            configurable: true,
            value: name
          })
        }
        try {
          var f = function () {}
          setFunctionName(f, "foo")
          if (f.name === "foo") {
            return setFunctionName
          }
        } catch (_) {}
      })()

      // -------------------------------------------------------------------

      function makeError(constructor, super_) {
        if (super_ == null || super_ === Error) {
          super_ = BaseError
        } else if (typeof super_ !== "function") {
          throw new TypeError("super_ should be a function")
        }

        var name
        if (typeof constructor === "string") {
          name = constructor
          constructor =
            construct !== undefined
              ? function () {
                  return construct(super_, arguments, this.constructor)
                }
              : function () {
                  super_.apply(this, arguments)
                }

          // If the name can be set, do it once and for all.
          if (setFunctionName !== undefined) {
            setFunctionName(constructor, name)
            name = undefined
          }
        } else if (typeof constructor !== "function") {
          throw new TypeError("constructor should be either a string or a function")
        }

        // Also register the super constructor also as `constructor.super_` just
        // like Node's `util.inherits()`.
        //
        // eslint-disable-next-line dot-notation
        constructor.super_ = constructor["super"] = super_

        var properties = {
          constructor: {
            configurable: true,
            value: constructor,
            writable: true
          }
        }

        // If the name could not be set on the constructor, set it on the
        // prototype.
        if (name !== undefined) {
          properties.name = {
            configurable: true,
            value: name,
            writable: true
          }
        }
        constructor.prototype = Object.create(super_.prototype, properties)

        return constructor
      }
      exports = module.exports = makeError
      exports.BaseError = BaseError

      /***/
    },

    /***/ 2621: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const { PassThrough } = __nccwpck_require__(12781)

      module.exports = function (/*streams...*/) {
        var sources = []
        var output = new PassThrough({ objectMode: true })

        output.setMaxListeners(0)

        output.add = add
        output.isEmpty = isEmpty

        output.on("unpipe", remove)

        Array.prototype.slice.call(arguments).forEach(add)

        return output

        function add(source) {
          if (Array.isArray(source)) {
            source.forEach(add)
            return this
          }

          sources.push(source)
          source.once("end", remove.bind(null, source))
          source.once("error", output.emit.bind(output, "error"))
          source.pipe(output, { end: false })
          return this
        }

        function isEmpty() {
          return sources.length == 0
        }

        function remove(source) {
          sources = sources.filter(function (it) {
            return it !== source
          })
          if (!sources.length && output.readable) {
            output.end()
          }
        }
      }

      /***/
    },

    /***/ 76228: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const util = __nccwpck_require__(73837)
      const braces = __nccwpck_require__(50610)
      const picomatch = __nccwpck_require__(78569)
      const utils = __nccwpck_require__(30479)
      const isEmptyString = (val) => val === "" || val === "./"

      /**
       * Returns an array of strings that match one or more glob patterns.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm(list, patterns[, options]);
       *
       * console.log(mm(['a.js', 'a.txt'], ['*.js']));
       * //=> [ 'a.js' ]
       * ```
       * @param {String|Array<string>} `list` List of strings to match.
       * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.
       * @param {Object} `options` See available [options](#options)
       * @return {Array} Returns an array of matches
       * @summary false
       * @api public
       */

      const micromatch = (list, patterns, options) => {
        patterns = [].concat(patterns)
        list = [].concat(list)

        let omit = new Set()
        let keep = new Set()
        let items = new Set()
        let negatives = 0

        let onResult = (state) => {
          items.add(state.output)
          if (options && options.onResult) {
            options.onResult(state)
          }
        }

        for (let i = 0; i < patterns.length; i++) {
          let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true)
          let negated = isMatch.state.negated || isMatch.state.negatedExtglob
          if (negated) negatives++

          for (let item of list) {
            let matched = isMatch(item, true)

            let match = negated ? !matched.isMatch : matched.isMatch
            if (!match) continue

            if (negated) {
              omit.add(matched.output)
            } else {
              omit.delete(matched.output)
              keep.add(matched.output)
            }
          }
        }

        let result = negatives === patterns.length ? [...items] : [...keep]
        let matches = result.filter((item) => !omit.has(item))

        if (options && matches.length === 0) {
          if (options.failglob === true) {
            throw new Error(`No matches found for "${patterns.join(", ")}"`)
          }

          if (options.nonull === true || options.nullglob === true) {
            return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns
          }
        }

        return matches
      }

      /**
       * Backwards compatibility
       */

      micromatch.match = micromatch

      /**
       * Returns a matcher function from the given glob `pattern` and `options`.
       * The returned function takes a string to match as its only argument and returns
       * true if the string is a match.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.matcher(pattern[, options]);
       *
       * const isMatch = mm.matcher('*.!(*a)');
       * console.log(isMatch('a.a')); //=> false
       * console.log(isMatch('a.b')); //=> true
       * ```
       * @param {String} `pattern` Glob pattern
       * @param {Object} `options`
       * @return {Function} Returns a matcher function.
       * @api public
       */

      micromatch.matcher = (pattern, options) => picomatch(pattern, options)

      /**
       * Returns true if **any** of the given glob `patterns` match the specified `string`.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.isMatch(string, patterns[, options]);
       *
       * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
       * console.log(mm.isMatch('a.a', 'b.*')); //=> false
       * ```
       * @param {String} `str` The string to test.
       * @param {String|Array} `patterns` One or more glob patterns to use for matching.
       * @param {Object} `[options]` See available [options](#options).
       * @return {Boolean} Returns true if any patterns match `str`
       * @api public
       */

      micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str)

      /**
       * Backwards compatibility
       */

      micromatch.any = micromatch.isMatch

      /**
       * Returns a list of strings that _**do not match any**_ of the given `patterns`.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.not(list, patterns[, options]);
       *
       * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
       * //=> ['b.b', 'c.c']
       * ```
       * @param {Array} `list` Array of strings to match.
       * @param {String|Array} `patterns` One or more glob pattern to use for matching.
       * @param {Object} `options` See available [options](#options) for changing how matches are performed
       * @return {Array} Returns an array of strings that **do not match** the given patterns.
       * @api public
       */

      micromatch.not = (list, patterns, options = {}) => {
        patterns = [].concat(patterns).map(String)
        let result = new Set()
        let items = []

        let onResult = (state) => {
          if (options.onResult) options.onResult(state)
          items.push(state.output)
        }

        let matches = micromatch(list, patterns, { ...options, onResult })

        for (let item of items) {
          if (!matches.includes(item)) {
            result.add(item)
          }
        }
        return [...result]
      }

      /**
       * Returns true if the given `string` contains the given pattern. Similar
       * to [.isMatch](#isMatch) but the pattern can match any part of the string.
       *
       * ```js
       * var mm = require('micromatch');
       * // mm.contains(string, pattern[, options]);
       *
       * console.log(mm.contains('aa/bb/cc', '*b'));
       * //=> true
       * console.log(mm.contains('aa/bb/cc', '*d'));
       * //=> false
       * ```
       * @param {String} `str` The string to match.
       * @param {String|Array} `patterns` Glob pattern to use for matching.
       * @param {Object} `options` See available [options](#options) for changing how matches are performed
       * @return {Boolean} Returns true if any of the patterns matches any part of `str`.
       * @api public
       */

      micromatch.contains = (str, pattern, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util.inspect(str)}"`)
        }

        if (Array.isArray(pattern)) {
          return pattern.some((p) => micromatch.contains(str, p, options))
        }

        if (typeof pattern === "string") {
          if (isEmptyString(str) || isEmptyString(pattern)) {
            return false
          }

          if (str.includes(pattern) || (str.startsWith("./") && str.slice(2).includes(pattern))) {
            return true
          }
        }

        return micromatch.isMatch(str, pattern, { ...options, contains: true })
      }

      /**
       * Filter the keys of the given object with the given `glob` pattern
       * and `options`. Does not attempt to match nested keys. If you need this feature,
       * use [glob-object][] instead.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.matchKeys(object, patterns[, options]);
       *
       * const obj = { aa: 'a', ab: 'b', ac: 'c' };
       * console.log(mm.matchKeys(obj, '*b'));
       * //=> { ab: 'b' }
       * ```
       * @param {Object} `object` The object with keys to filter.
       * @param {String|Array} `patterns` One or more glob patterns to use for matching.
       * @param {Object} `options` See available [options](#options) for changing how matches are performed
       * @return {Object} Returns an object with only keys that match the given patterns.
       * @api public
       */

      micromatch.matchKeys = (obj, patterns, options) => {
        if (!utils.isObject(obj)) {
          throw new TypeError("Expected the first argument to be an object")
        }
        let keys = micromatch(Object.keys(obj), patterns, options)
        let res = {}
        for (let key of keys) res[key] = obj[key]
        return res
      }

      /**
       * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.some(list, patterns[, options]);
       *
       * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
       * // true
       * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
       * // false
       * ```
       * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
       * @param {String|Array} `patterns` One or more glob patterns to use for matching.
       * @param {Object} `options` See available [options](#options) for changing how matches are performed
       * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`
       * @api public
       */

      micromatch.some = (list, patterns, options) => {
        let items = [].concat(list)

        for (let pattern of [].concat(patterns)) {
          let isMatch = picomatch(String(pattern), options)
          if (items.some((item) => isMatch(item))) {
            return true
          }
        }
        return false
      }

      /**
       * Returns true if every string in the given `list` matches
       * any of the given glob `patterns`.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.every(list, patterns[, options]);
       *
       * console.log(mm.every('foo.js', ['foo.js']));
       * // true
       * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
       * // true
       * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
       * // false
       * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
       * // false
       * ```
       * @param {String|Array} `list` The string or array of strings to test.
       * @param {String|Array} `patterns` One or more glob patterns to use for matching.
       * @param {Object} `options` See available [options](#options) for changing how matches are performed
       * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`
       * @api public
       */

      micromatch.every = (list, patterns, options) => {
        let items = [].concat(list)

        for (let pattern of [].concat(patterns)) {
          let isMatch = picomatch(String(pattern), options)
          if (!items.every((item) => isMatch(item))) {
            return false
          }
        }
        return true
      }

      /**
       * Returns true if **all** of the given `patterns` match
       * the specified string.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.all(string, patterns[, options]);
       *
       * console.log(mm.all('foo.js', ['foo.js']));
       * // true
       *
       * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
       * // false
       *
       * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
       * // true
       *
       * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
       * // true
       * ```
       * @param {String|Array} `str` The string to test.
       * @param {String|Array} `patterns` One or more glob patterns to use for matching.
       * @param {Object} `options` See available [options](#options) for changing how matches are performed
       * @return {Boolean} Returns true if any patterns match `str`
       * @api public
       */

      micromatch.all = (str, patterns, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util.inspect(str)}"`)
        }

        return [].concat(patterns).every((p) => picomatch(p, options)(str))
      }

      /**
       * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.capture(pattern, string[, options]);
       *
       * console.log(mm.capture('test/*.js', 'test/foo.js'));
       * //=> ['foo']
       * console.log(mm.capture('test/*.js', 'foo/bar.css'));
       * //=> null
       * ```
       * @param {String} `glob` Glob pattern to use for matching.
       * @param {String} `input` String to match
       * @param {Object} `options` See available [options](#options) for changing how matches are performed
       * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.
       * @api public
       */

      micromatch.capture = (glob, input, options) => {
        let posix = utils.isWindows(options)
        let regex = picomatch.makeRe(String(glob), { ...options, capture: true })
        let match = regex.exec(posix ? utils.toPosixSlashes(input) : input)

        if (match) {
          return match.slice(1).map((v) => (v === void 0 ? "" : v))
        }
      }

      /**
       * Create a regular expression from the given glob `pattern`.
       *
       * ```js
       * const mm = require('micromatch');
       * // mm.makeRe(pattern[, options]);
       *
       * console.log(mm.makeRe('*.js'));
       * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
       * ```
       * @param {String} `pattern` A glob pattern to convert to regex.
       * @param {Object} `options`
       * @return {RegExp} Returns a regex created from the given pattern.
       * @api public
       */

      micromatch.makeRe = (...args) => picomatch.makeRe(...args)

      /**
       * Scan a glob pattern to separate the pattern into segments. Used
       * by the [split](#split) method.
       *
       * ```js
       * const mm = require('micromatch');
       * const state = mm.scan(pattern[, options]);
       * ```
       * @param {String} `pattern`
       * @param {Object} `options`
       * @return {Object} Returns an object with
       * @api public
       */

      micromatch.scan = (...args) => picomatch.scan(...args)

      /**
       * Parse a glob pattern to create the source string for a regular
       * expression.
       *
       * ```js
       * const mm = require('micromatch');
       * const state = mm(pattern[, options]);
       * ```
       * @param {String} `glob`
       * @param {Object} `options`
       * @return {Object} Returns an object with useful properties and output to be used as regex source string.
       * @api public
       */

      micromatch.parse = (patterns, options) => {
        let res = []
        for (let pattern of [].concat(patterns || [])) {
          for (let str of braces(String(pattern), options)) {
            res.push(picomatch.parse(str, options))
          }
        }
        return res
      }

      /**
       * Process the given brace `pattern`.
       *
       * ```js
       * const { braces } = require('micromatch');
       * console.log(braces('foo/{a,b,c}/bar'));
       * //=> [ 'foo/(a|b|c)/bar' ]
       *
       * console.log(braces('foo/{a,b,c}/bar', { expand: true }));
       * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]
       * ```
       * @param {String} `pattern` String with brace pattern to process.
       * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
       * @return {Array}
       * @api public
       */

      micromatch.braces = (pattern, options) => {
        if (typeof pattern !== "string") throw new TypeError("Expected a string")
        if ((options && options.nobrace === true) || !/\{.*\}/.test(pattern)) {
          return [pattern]
        }
        return braces(pattern, options)
      }

      /**
       * Expand braces
       */

      micromatch.braceExpand = (pattern, options) => {
        if (typeof pattern !== "string") throw new TypeError("Expected a string")
        return micromatch.braces(pattern, { ...options, expand: true })
      }

      /**
       * Expose micromatch
       */

      module.exports = micromatch

      /***/
    },

    /***/ 76047: /***/ (module) => {
      "use strict"

      const mimicFn = (to, from) => {
        for (const prop of Reflect.ownKeys(from)) {
          Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop))
        }

        return to
      }

      module.exports = mimicFn
      // TODO: Remove this for the next major release
      module.exports["default"] = mimicFn

      /***/
    },

    /***/ 23432: /***/ (module) => {
      "use strict"

      module.exports = function (obj, modifier) {
        var key
        var val
        var ret = {}
        var keys = Object.keys(Object(obj))

        for (var i = 0; i < keys.length; i++) {
          key = keys[i]
          val = obj[key]
          ret[key] = modifier(val, key)
        }

        return ret
      }

      /***/
    },

    /***/ 80900: /***/ (module) => {
      /**
       * Helpers.
       */

      var s = 1000
      var m = s * 60
      var h = m * 60
      var d = h * 24
      var w = d * 7
      var y = d * 365.25

      /**
       * Parse or format the given `val`.
       *
       * Options:
       *
       *  - `long` verbose formatting [false]
       *
       * @param {String|Number} val
       * @param {Object} [options]
       * @throws {Error} throw an error if val is not a non-empty string or a number
       * @return {String|Number}
       * @api public
       */

      module.exports = function (val, options) {
        options = options || {}
        var type = typeof val
        if (type === "string" && val.length > 0) {
          return parse(val)
        } else if (type === "number" && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val)
        }
        throw new Error(
          "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
        )
      }

      /**
       * Parse the given `str` and return milliseconds.
       *
       * @param {String} str
       * @return {Number}
       * @api private
       */

      function parse(str) {
        str = String(str)
        if (str.length > 100) {
          return
        }
        var match =
          /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
            str
          )
        if (!match) {
          return
        }
        var n = parseFloat(match[1])
        var type = (match[2] || "ms").toLowerCase()
        switch (type) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y
          case "weeks":
          case "week":
          case "w":
            return n * w
          case "days":
          case "day":
          case "d":
            return n * d
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n
          default:
            return undefined
        }
      }

      /**
       * Short format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */

      function fmtShort(ms) {
        var msAbs = Math.abs(ms)
        if (msAbs >= d) {
          return Math.round(ms / d) + "d"
        }
        if (msAbs >= h) {
          return Math.round(ms / h) + "h"
        }
        if (msAbs >= m) {
          return Math.round(ms / m) + "m"
        }
        if (msAbs >= s) {
          return Math.round(ms / s) + "s"
        }
        return ms + "ms"
      }

      /**
       * Long format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */

      function fmtLong(ms) {
        var msAbs = Math.abs(ms)
        if (msAbs >= d) {
          return plural(ms, msAbs, d, "day")
        }
        if (msAbs >= h) {
          return plural(ms, msAbs, h, "hour")
        }
        if (msAbs >= m) {
          return plural(ms, msAbs, m, "minute")
        }
        if (msAbs >= s) {
          return plural(ms, msAbs, s, "second")
        }
        return ms + " ms"
      }

      /**
       * Pluralization helper.
       */

      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5
        return Math.round(ms / n) + " " + name + (isPlural ? "s" : "")
      }

      /***/
    },

    /***/ 80467: /***/ (module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex
      }

      var Stream = _interopDefault(__nccwpck_require__(12781))
      var http = _interopDefault(__nccwpck_require__(13685))
      var Url = _interopDefault(__nccwpck_require__(57310))
      var whatwgUrl = _interopDefault(__nccwpck_require__(73323))
      var https = _interopDefault(__nccwpck_require__(95687))
      var zlib = _interopDefault(__nccwpck_require__(59796))

      // Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

      // fix for "Readable" isn't a named export issue
      const Readable = Stream.Readable

      const BUFFER = Symbol("buffer")
      const TYPE = Symbol("type")

      class Blob {
        constructor() {
          this[TYPE] = ""

          const blobParts = arguments[0]
          const options = arguments[1]

          const buffers = []
          let size = 0

          if (blobParts) {
            const a = blobParts
            const length = Number(a.length)
            for (let i = 0; i < length; i++) {
              const element = a[i]
              let buffer
              if (element instanceof Buffer) {
                buffer = element
              } else if (ArrayBuffer.isView(element)) {
                buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength)
              } else if (element instanceof ArrayBuffer) {
                buffer = Buffer.from(element)
              } else if (element instanceof Blob) {
                buffer = element[BUFFER]
              } else {
                buffer = Buffer.from(typeof element === "string" ? element : String(element))
              }
              size += buffer.length
              buffers.push(buffer)
            }
          }

          this[BUFFER] = Buffer.concat(buffers)

          let type = options && options.type !== undefined && String(options.type).toLowerCase()
          if (type && !/[^\u0020-\u007E]/.test(type)) {
            this[TYPE] = type
          }
        }
        get size() {
          return this[BUFFER].length
        }
        get type() {
          return this[TYPE]
        }
        text() {
          return Promise.resolve(this[BUFFER].toString())
        }
        arrayBuffer() {
          const buf = this[BUFFER]
          const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
          return Promise.resolve(ab)
        }
        stream() {
          const readable = new Readable()
          readable._read = function () {}
          readable.push(this[BUFFER])
          readable.push(null)
          return readable
        }
        toString() {
          return "[object Blob]"
        }
        slice() {
          const size = this.size

          const start = arguments[0]
          const end = arguments[1]
          let relativeStart, relativeEnd
          if (start === undefined) {
            relativeStart = 0
          } else if (start < 0) {
            relativeStart = Math.max(size + start, 0)
          } else {
            relativeStart = Math.min(start, size)
          }
          if (end === undefined) {
            relativeEnd = size
          } else if (end < 0) {
            relativeEnd = Math.max(size + end, 0)
          } else {
            relativeEnd = Math.min(end, size)
          }
          const span = Math.max(relativeEnd - relativeStart, 0)

          const buffer = this[BUFFER]
          const slicedBuffer = buffer.slice(relativeStart, relativeStart + span)
          const blob = new Blob([], { type: arguments[2] })
          blob[BUFFER] = slicedBuffer
          return blob
        }
      }

      Object.defineProperties(Blob.prototype, {
        size: { enumerable: true },
        type: { enumerable: true },
        slice: { enumerable: true }
      })

      Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
        value: "Blob",
        writable: false,
        enumerable: false,
        configurable: true
      })

      /**
       * fetch-error.js
       *
       * FetchError interface for operational errors
       */

      /**
       * Create FetchError instance
       *
       * @param   String      message      Error message for human
       * @param   String      type         Error type for machine
       * @param   String      systemError  For Node.js system error
       * @return  FetchError
       */
      function FetchError(message, type, systemError) {
        Error.call(this, message)

        this.message = message
        this.type = type

        // when err.type is `system`, err.code contains system error code
        if (systemError) {
          this.code = this.errno = systemError.code
        }

        // hide custom error implementation details from end-users
        Error.captureStackTrace(this, this.constructor)
      }

      FetchError.prototype = Object.create(Error.prototype)
      FetchError.prototype.constructor = FetchError
      FetchError.prototype.name = "FetchError"

      let convert
      try {
        convert = __nccwpck_require__(22877).convert
      } catch (e) {}

      const INTERNALS = Symbol("Body internals")

      // fix an issue where "PassThrough" isn't a named export for node <10
      const PassThrough = Stream.PassThrough

      /**
       * Body mixin
       *
       * Ref: https://fetch.spec.whatwg.org/#body
       *
       * @param   Stream  body  Readable stream
       * @param   Object  opts  Response options
       * @return  Void
       */
      function Body(body) {
        var _this = this

        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$size = _ref.size

        let size = _ref$size === undefined ? 0 : _ref$size
        var _ref$timeout = _ref.timeout
        let timeout = _ref$timeout === undefined ? 0 : _ref$timeout

        if (body == null) {
          // body is undefined or null
          body = null
        } else if (isURLSearchParams(body)) {
          // body is a URLSearchParams
          body = Buffer.from(body.toString())
        } else if (isBlob(body));
        else if (Buffer.isBuffer(body));
        else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
          // body is ArrayBuffer
          body = Buffer.from(body)
        } else if (ArrayBuffer.isView(body)) {
          // body is ArrayBufferView
          body = Buffer.from(body.buffer, body.byteOffset, body.byteLength)
        } else if (body instanceof Stream);
        else {
          // none of the above
          // coerce to string then buffer
          body = Buffer.from(String(body))
        }
        this[INTERNALS] = {
          body,
          disturbed: false,
          error: null
        }
        this.size = size
        this.timeout = timeout

        if (body instanceof Stream) {
          body.on("error", function (err) {
            const error =
              err.name === "AbortError"
                ? err
                : new FetchError(
                    `Invalid response body while trying to fetch ${_this.url}: ${err.message}`,
                    "system",
                    err
                  )
            _this[INTERNALS].error = error
          })
        }
      }

      Body.prototype = {
        get body() {
          return this[INTERNALS].body
        },

        get bodyUsed() {
          return this[INTERNALS].disturbed
        },

        /**
         * Decode response as ArrayBuffer
         *
         * @return  Promise
         */
        arrayBuffer() {
          return consumeBody.call(this).then(function (buf) {
            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
          })
        },

        /**
         * Return raw response as Blob
         *
         * @return Promise
         */
        blob() {
          let ct = (this.headers && this.headers.get("content-type")) || ""
          return consumeBody.call(this).then(function (buf) {
            return Object.assign(
              // Prevent copying
              new Blob([], {
                type: ct.toLowerCase()
              }),
              {
                [BUFFER]: buf
              }
            )
          })
        },

        /**
         * Decode response as json
         *
         * @return  Promise
         */
        json() {
          var _this2 = this

          return consumeBody.call(this).then(function (buffer) {
            try {
              return JSON.parse(buffer.toString())
            } catch (err) {
              return Body.Promise.reject(
                new FetchError(
                  `invalid json response body at ${_this2.url} reason: ${err.message}`,
                  "invalid-json"
                )
              )
            }
          })
        },

        /**
         * Decode response as text
         *
         * @return  Promise
         */
        text() {
          return consumeBody.call(this).then(function (buffer) {
            return buffer.toString()
          })
        },

        /**
         * Decode response as buffer (non-spec api)
         *
         * @return  Promise
         */
        buffer() {
          return consumeBody.call(this)
        },

        /**
         * Decode response as text, while automatically detecting the encoding and
         * trying to decode to UTF-8 (non-spec api)
         *
         * @return  Promise
         */
        textConverted() {
          var _this3 = this

          return consumeBody.call(this).then(function (buffer) {
            return convertBody(buffer, _this3.headers)
          })
        }
      }

      // In browsers, all properties are enumerable.
      Object.defineProperties(Body.prototype, {
        body: { enumerable: true },
        bodyUsed: { enumerable: true },
        arrayBuffer: { enumerable: true },
        blob: { enumerable: true },
        json: { enumerable: true },
        text: { enumerable: true }
      })

      Body.mixIn = function (proto) {
        for (const name of Object.getOwnPropertyNames(Body.prototype)) {
          // istanbul ignore else: future proof
          if (!(name in proto)) {
            const desc = Object.getOwnPropertyDescriptor(Body.prototype, name)
            Object.defineProperty(proto, name, desc)
          }
        }
      }

      /**
       * Consume and convert an entire Body to a Buffer.
       *
       * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
       *
       * @return  Promise
       */
      function consumeBody() {
        var _this4 = this

        if (this[INTERNALS].disturbed) {
          return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`))
        }

        this[INTERNALS].disturbed = true

        if (this[INTERNALS].error) {
          return Body.Promise.reject(this[INTERNALS].error)
        }

        let body = this.body

        // body is null
        if (body === null) {
          return Body.Promise.resolve(Buffer.alloc(0))
        }

        // body is blob
        if (isBlob(body)) {
          body = body.stream()
        }

        // body is buffer
        if (Buffer.isBuffer(body)) {
          return Body.Promise.resolve(body)
        }

        // istanbul ignore if: should never happen
        if (!(body instanceof Stream)) {
          return Body.Promise.resolve(Buffer.alloc(0))
        }

        // body is stream
        // get ready to actually consume the body
        let accum = []
        let accumBytes = 0
        let abort = false

        return new Body.Promise(function (resolve, reject) {
          let resTimeout

          // allow timeout on slow response body
          if (_this4.timeout) {
            resTimeout = setTimeout(function () {
              abort = true
              reject(
                new FetchError(
                  `Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`,
                  "body-timeout"
                )
              )
            }, _this4.timeout)
          }

          // handle stream errors
          body.on("error", function (err) {
            if (err.name === "AbortError") {
              // if the request was aborted, reject with this Error
              abort = true
              reject(err)
            } else {
              // other errors, such as incorrect content-encoding
              reject(
                new FetchError(
                  `Invalid response body while trying to fetch ${_this4.url}: ${err.message}`,
                  "system",
                  err
                )
              )
            }
          })

          body.on("data", function (chunk) {
            if (abort || chunk === null) {
              return
            }

            if (_this4.size && accumBytes + chunk.length > _this4.size) {
              abort = true
              reject(
                new FetchError(
                  `content size at ${_this4.url} over limit: ${_this4.size}`,
                  "max-size"
                )
              )
              return
            }

            accumBytes += chunk.length
            accum.push(chunk)
          })

          body.on("end", function () {
            if (abort) {
              return
            }

            clearTimeout(resTimeout)

            try {
              resolve(Buffer.concat(accum, accumBytes))
            } catch (err) {
              // handle streams that have accumulated too much data (issue #414)
              reject(
                new FetchError(
                  `Could not create Buffer from response body for ${_this4.url}: ${err.message}`,
                  "system",
                  err
                )
              )
            }
          })
        })
      }

      /**
       * Detect buffer encoding and convert to target encoding
       * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
       *
       * @param   Buffer  buffer    Incoming buffer
       * @param   String  encoding  Target encoding
       * @return  String
       */
      function convertBody(buffer, headers) {
        if (typeof convert !== "function") {
          throw new Error(
            "The package `encoding` must be installed to use the textConverted() function"
          )
        }

        const ct = headers.get("content-type")
        let charset = "utf-8"
        let res, str

        // header
        if (ct) {
          res = /charset=([^;]*)/i.exec(ct)
        }

        // no charset in content type, peek at response body for at most 1024 bytes
        str = buffer.slice(0, 1024).toString()

        // html5
        if (!res && str) {
          res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str)
        }

        // html4
        if (!res && str) {
          res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str)
          if (!res) {
            res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str)
            if (res) {
              res.pop() // drop last quote
            }
          }

          if (res) {
            res = /charset=(.*)/i.exec(res.pop())
          }
        }

        // xml
        if (!res && str) {
          res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str)
        }

        // found charset
        if (res) {
          charset = res.pop()

          // prevent decode issues when sites use incorrect encoding
          // ref: https://hsivonen.fi/encoding-menu/
          if (charset === "gb2312" || charset === "gbk") {
            charset = "gb18030"
          }
        }

        // turn raw buffers into a single utf-8 buffer
        return convert(buffer, "UTF-8", charset).toString()
      }

      /**
       * Detect a URLSearchParams object
       * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
       *
       * @param   Object  obj     Object to detect by type or brand
       * @return  String
       */
      function isURLSearchParams(obj) {
        // Duck-typing as a necessary condition.
        if (
          typeof obj !== "object" ||
          typeof obj.append !== "function" ||
          typeof obj.delete !== "function" ||
          typeof obj.get !== "function" ||
          typeof obj.getAll !== "function" ||
          typeof obj.has !== "function" ||
          typeof obj.set !== "function"
        ) {
          return false
        }

        // Brand-checking and more duck-typing as optional condition.
        return (
          obj.constructor.name === "URLSearchParams" ||
          Object.prototype.toString.call(obj) === "[object URLSearchParams]" ||
          typeof obj.sort === "function"
        )
      }

      /**
       * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
       * @param  {*} obj
       * @return {boolean}
       */
      function isBlob(obj) {
        return (
          typeof obj === "object" &&
          typeof obj.arrayBuffer === "function" &&
          typeof obj.type === "string" &&
          typeof obj.stream === "function" &&
          typeof obj.constructor === "function" &&
          typeof obj.constructor.name === "string" &&
          /^(Blob|File)$/.test(obj.constructor.name) &&
          /^(Blob|File)$/.test(obj[Symbol.toStringTag])
        )
      }

      /**
       * Clone body given Res/Req instance
       *
       * @param   Mixed  instance  Response or Request instance
       * @return  Mixed
       */
      function clone(instance) {
        let p1, p2
        let body = instance.body

        // don't allow cloning a used body
        if (instance.bodyUsed) {
          throw new Error("cannot clone body after it is used")
        }

        // check that body is a stream and not form-data object
        // note: we can't clone the form-data object without having it as a dependency
        if (body instanceof Stream && typeof body.getBoundary !== "function") {
          // tee instance body
          p1 = new PassThrough()
          p2 = new PassThrough()
          body.pipe(p1)
          body.pipe(p2)
          // set instance body to teed body and return the other teed body
          instance[INTERNALS].body = p1
          body = p2
        }

        return body
      }

      /**
       * Performs the operation "extract a `Content-Type` value from |object|" as
       * specified in the specification:
       * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
       *
       * This function assumes that instance.body is present.
       *
       * @param   Mixed  instance  Any options.body input
       */
      function extractContentType(body) {
        if (body === null) {
          // body is null
          return null
        } else if (typeof body === "string") {
          // body is string
          return "text/plain;charset=UTF-8"
        } else if (isURLSearchParams(body)) {
          // body is a URLSearchParams
          return "application/x-www-form-urlencoded;charset=UTF-8"
        } else if (isBlob(body)) {
          // body is blob
          return body.type || null
        } else if (Buffer.isBuffer(body)) {
          // body is buffer
          return null
        } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
          // body is ArrayBuffer
          return null
        } else if (ArrayBuffer.isView(body)) {
          // body is ArrayBufferView
          return null
        } else if (typeof body.getBoundary === "function") {
          // detect form data input from form-data module
          return `multipart/form-data;boundary=${body.getBoundary()}`
        } else if (body instanceof Stream) {
          // body is stream
          // can't really do much about this
          return null
        } else {
          // Body constructor defaults other things to string
          return "text/plain;charset=UTF-8"
        }
      }

      /**
       * The Fetch Standard treats this as if "total bytes" is a property on the body.
       * For us, we have to explicitly get it with a function.
       *
       * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
       *
       * @param   Body    instance   Instance of Body
       * @return  Number?            Number of bytes, or null if not possible
       */
      function getTotalBytes(instance) {
        const body = instance.body

        if (body === null) {
          // body is null
          return 0
        } else if (isBlob(body)) {
          return body.size
        } else if (Buffer.isBuffer(body)) {
          // body is buffer
          return body.length
        } else if (body && typeof body.getLengthSync === "function") {
          // detect form data input from form-data module
          if (
            (body._lengthRetrievers && body._lengthRetrievers.length == 0) || // 1.x
            (body.hasKnownLength && body.hasKnownLength())
          ) {
            // 2.x
            return body.getLengthSync()
          }
          return null
        } else {
          // body is stream
          return null
        }
      }

      /**
       * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
       *
       * @param   Body    instance   Instance of Body
       * @return  Void
       */
      function writeToStream(dest, instance) {
        const body = instance.body

        if (body === null) {
          // body is null
          dest.end()
        } else if (isBlob(body)) {
          body.stream().pipe(dest)
        } else if (Buffer.isBuffer(body)) {
          // body is buffer
          dest.write(body)
          dest.end()
        } else {
          // body is stream
          body.pipe(dest)
        }
      }

      // expose Promise
      Body.Promise = global.Promise

      /**
       * headers.js
       *
       * Headers class offers convenient helpers
       */

      const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/
      const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/

      function validateName(name) {
        name = `${name}`
        if (invalidTokenRegex.test(name) || name === "") {
          throw new TypeError(`${name} is not a legal HTTP header name`)
        }
      }

      function validateValue(value) {
        value = `${value}`
        if (invalidHeaderCharRegex.test(value)) {
          throw new TypeError(`${value} is not a legal HTTP header value`)
        }
      }

      /**
       * Find the key in the map object given a header name.
       *
       * Returns undefined if not found.
       *
       * @param   String  name  Header name
       * @return  String|Undefined
       */
      function find(map, name) {
        name = name.toLowerCase()
        for (const key in map) {
          if (key.toLowerCase() === name) {
            return key
          }
        }
        return undefined
      }

      const MAP = Symbol("map")
      class Headers {
        /**
         * Headers class
         *
         * @param   Object  headers  Response headers
         * @return  Void
         */
        constructor() {
          let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined

          this[MAP] = Object.create(null)

          if (init instanceof Headers) {
            const rawHeaders = init.raw()
            const headerNames = Object.keys(rawHeaders)

            for (const headerName of headerNames) {
              for (const value of rawHeaders[headerName]) {
                this.append(headerName, value)
              }
            }

            return
          }

          // We don't worry about converting prop to ByteString here as append()
          // will handle it.
          if (init == null);
          else if (typeof init === "object") {
            const method = init[Symbol.iterator]
            if (method != null) {
              if (typeof method !== "function") {
                throw new TypeError("Header pairs must be iterable")
              }

              // sequence<sequence<ByteString>>
              // Note: per spec we have to first exhaust the lists then process them
              const pairs = []
              for (const pair of init) {
                if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                  throw new TypeError("Each header pair must be iterable")
                }
                pairs.push(Array.from(pair))
              }

              for (const pair of pairs) {
                if (pair.length !== 2) {
                  throw new TypeError("Each header pair must be a name/value tuple")
                }
                this.append(pair[0], pair[1])
              }
            } else {
              // record<ByteString, ByteString>
              for (const key of Object.keys(init)) {
                const value = init[key]
                this.append(key, value)
              }
            }
          } else {
            throw new TypeError("Provided initializer must be an object")
          }
        }

        /**
         * Return combined header value given name
         *
         * @param   String  name  Header name
         * @return  Mixed
         */
        get(name) {
          name = `${name}`
          validateName(name)
          const key = find(this[MAP], name)
          if (key === undefined) {
            return null
          }

          return this[MAP][key].join(", ")
        }

        /**
         * Iterate over all headers
         *
         * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
         * @param   Boolean   thisArg   `this` context for callback function
         * @return  Void
         */
        forEach(callback) {
          let thisArg =
            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined

          let pairs = getHeaders(this)
          let i = 0
          while (i < pairs.length) {
            var _pairs$i = pairs[i]
            const name = _pairs$i[0],
              value = _pairs$i[1]

            callback.call(thisArg, value, name, this)
            pairs = getHeaders(this)
            i++
          }
        }

        /**
         * Overwrite header values given name
         *
         * @param   String  name   Header name
         * @param   String  value  Header value
         * @return  Void
         */
        set(name, value) {
          name = `${name}`
          value = `${value}`
          validateName(name)
          validateValue(value)
          const key = find(this[MAP], name)
          this[MAP][key !== undefined ? key : name] = [value]
        }

        /**
         * Append a value onto existing header
         *
         * @param   String  name   Header name
         * @param   String  value  Header value
         * @return  Void
         */
        append(name, value) {
          name = `${name}`
          value = `${value}`
          validateName(name)
          validateValue(value)
          const key = find(this[MAP], name)
          if (key !== undefined) {
            this[MAP][key].push(value)
          } else {
            this[MAP][name] = [value]
          }
        }

        /**
         * Check for header name existence
         *
         * @param   String   name  Header name
         * @return  Boolean
         */
        has(name) {
          name = `${name}`
          validateName(name)
          return find(this[MAP], name) !== undefined
        }

        /**
         * Delete all header values given name
         *
         * @param   String  name  Header name
         * @return  Void
         */
        delete(name) {
          name = `${name}`
          validateName(name)
          const key = find(this[MAP], name)
          if (key !== undefined) {
            delete this[MAP][key]
          }
        }

        /**
         * Return raw headers (non-spec api)
         *
         * @return  Object
         */
        raw() {
          return this[MAP]
        }

        /**
         * Get an iterator on keys.
         *
         * @return  Iterator
         */
        keys() {
          return createHeadersIterator(this, "key")
        }

        /**
         * Get an iterator on values.
         *
         * @return  Iterator
         */
        values() {
          return createHeadersIterator(this, "value")
        }

        /**
         * Get an iterator on entries.
         *
         * This is the default iterator of the Headers object.
         *
         * @return  Iterator
         */
        [Symbol.iterator]() {
          return createHeadersIterator(this, "key+value")
        }
      }
      Headers.prototype.entries = Headers.prototype[Symbol.iterator]

      Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
        value: "Headers",
        writable: false,
        enumerable: false,
        configurable: true
      })

      Object.defineProperties(Headers.prototype, {
        get: { enumerable: true },
        forEach: { enumerable: true },
        set: { enumerable: true },
        append: { enumerable: true },
        has: { enumerable: true },
        delete: { enumerable: true },
        keys: { enumerable: true },
        values: { enumerable: true },
        entries: { enumerable: true }
      })

      function getHeaders(headers) {
        let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "key+value"

        const keys = Object.keys(headers[MAP]).sort()
        return keys.map(
          kind === "key"
            ? function (k) {
                return k.toLowerCase()
              }
            : kind === "value"
            ? function (k) {
                return headers[MAP][k].join(", ")
              }
            : function (k) {
                return [k.toLowerCase(), headers[MAP][k].join(", ")]
              }
        )
      }

      const INTERNAL = Symbol("internal")

      function createHeadersIterator(target, kind) {
        const iterator = Object.create(HeadersIteratorPrototype)
        iterator[INTERNAL] = {
          target,
          kind,
          index: 0
        }
        return iterator
      }

      const HeadersIteratorPrototype = Object.setPrototypeOf(
        {
          next() {
            // istanbul ignore if
            if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
              throw new TypeError("Value of `this` is not a HeadersIterator")
            }

            var _INTERNAL = this[INTERNAL]
            const target = _INTERNAL.target,
              kind = _INTERNAL.kind,
              index = _INTERNAL.index

            const values = getHeaders(target, kind)
            const len = values.length
            if (index >= len) {
              return {
                value: undefined,
                done: true
              }
            }

            this[INTERNAL].index = index + 1

            return {
              value: values[index],
              done: false
            }
          }
        },
        Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))
      )

      Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
        value: "HeadersIterator",
        writable: false,
        enumerable: false,
        configurable: true
      })

      /**
       * Export the Headers object in a form that Node.js can consume.
       *
       * @param   Headers  headers
       * @return  Object
       */
      function exportNodeCompatibleHeaders(headers) {
        const obj = Object.assign({ __proto__: null }, headers[MAP])

        // http.request() only supports string as Host header. This hack makes
        // specifying custom Host header possible.
        const hostHeaderKey = find(headers[MAP], "Host")
        if (hostHeaderKey !== undefined) {
          obj[hostHeaderKey] = obj[hostHeaderKey][0]
        }

        return obj
      }

      /**
       * Create a Headers object from an object of headers, ignoring those that do
       * not conform to HTTP grammar productions.
       *
       * @param   Object  obj  Object of headers
       * @return  Headers
       */
      function createHeadersLenient(obj) {
        const headers = new Headers()
        for (const name of Object.keys(obj)) {
          if (invalidTokenRegex.test(name)) {
            continue
          }
          if (Array.isArray(obj[name])) {
            for (const val of obj[name]) {
              if (invalidHeaderCharRegex.test(val)) {
                continue
              }
              if (headers[MAP][name] === undefined) {
                headers[MAP][name] = [val]
              } else {
                headers[MAP][name].push(val)
              }
            }
          } else if (!invalidHeaderCharRegex.test(obj[name])) {
            headers[MAP][name] = [obj[name]]
          }
        }
        return headers
      }

      const INTERNALS$1 = Symbol("Response internals")

      // fix an issue where "STATUS_CODES" aren't a named export for node <10
      const STATUS_CODES = http.STATUS_CODES

      /**
       * Response class
       *
       * @param   Stream  body  Readable stream
       * @param   Object  opts  Response options
       * @return  Void
       */
      class Response {
        constructor() {
          let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null
          let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}

          Body.call(this, body, opts)

          const status = opts.status || 200
          const headers = new Headers(opts.headers)

          if (body != null && !headers.has("Content-Type")) {
            const contentType = extractContentType(body)
            if (contentType) {
              headers.append("Content-Type", contentType)
            }
          }

          this[INTERNALS$1] = {
            url: opts.url,
            status,
            statusText: opts.statusText || STATUS_CODES[status],
            headers,
            counter: opts.counter
          }
        }

        get url() {
          return this[INTERNALS$1].url || ""
        }

        get status() {
          return this[INTERNALS$1].status
        }

        /**
         * Convenience property representing if the request ended normally
         */
        get ok() {
          return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300
        }

        get redirected() {
          return this[INTERNALS$1].counter > 0
        }

        get statusText() {
          return this[INTERNALS$1].statusText
        }

        get headers() {
          return this[INTERNALS$1].headers
        }

        /**
         * Clone this response
         *
         * @return  Response
         */
        clone() {
          return new Response(clone(this), {
            url: this.url,
            status: this.status,
            statusText: this.statusText,
            headers: this.headers,
            ok: this.ok,
            redirected: this.redirected
          })
        }
      }

      Body.mixIn(Response.prototype)

      Object.defineProperties(Response.prototype, {
        url: { enumerable: true },
        status: { enumerable: true },
        ok: { enumerable: true },
        redirected: { enumerable: true },
        statusText: { enumerable: true },
        headers: { enumerable: true },
        clone: { enumerable: true }
      })

      Object.defineProperty(Response.prototype, Symbol.toStringTag, {
        value: "Response",
        writable: false,
        enumerable: false,
        configurable: true
      })

      const INTERNALS$2 = Symbol("Request internals")
      const URL = Url.URL || whatwgUrl.URL

      // fix an issue where "format", "parse" aren't a named export for node <10
      const parse_url = Url.parse
      const format_url = Url.format

      /**
       * Wrapper around `new URL` to handle arbitrary URLs
       *
       * @param  {string} urlStr
       * @return {void}
       */
      function parseURL(urlStr) {
        /*
 	Check whether the URL is absolute or not
 		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
 	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
 */
        if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
          urlStr = new URL(urlStr).toString()
        }

        // Fallback to old implementation for arbitrary URLs
        return parse_url(urlStr)
      }

      const streamDestructionSupported = "destroy" in Stream.Readable.prototype

      /**
       * Check if a value is an instance of Request.
       *
       * @param   Mixed   input
       * @return  Boolean
       */
      function isRequest(input) {
        return typeof input === "object" && typeof input[INTERNALS$2] === "object"
      }

      function isAbortSignal(signal) {
        const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal)
        return !!(proto && proto.constructor.name === "AbortSignal")
      }

      /**
       * Request class
       *
       * @param   Mixed   input  Url or Request instance
       * @param   Object  init   Custom options
       * @return  Void
       */
      class Request {
        constructor(input) {
          let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}

          let parsedURL

          // normalize input
          if (!isRequest(input)) {
            if (input && input.href) {
              // in order to support Node.js' Url objects; though WHATWG's URL objects
              // will fall into this branch also (since their `toString()` will return
              // `href` property anyway)
              parsedURL = parseURL(input.href)
            } else {
              // coerce input to a string before attempting to parse
              parsedURL = parseURL(`${input}`)
            }
            input = {}
          } else {
            parsedURL = parseURL(input.url)
          }

          let method = init.method || input.method || "GET"
          method = method.toUpperCase()

          if (
            (init.body != null || (isRequest(input) && input.body !== null)) &&
            (method === "GET" || method === "HEAD")
          ) {
            throw new TypeError("Request with GET/HEAD method cannot have body")
          }

          let inputBody =
            init.body != null
              ? init.body
              : isRequest(input) && input.body !== null
              ? clone(input)
              : null

          Body.call(this, inputBody, {
            timeout: init.timeout || input.timeout || 0,
            size: init.size || input.size || 0
          })

          const headers = new Headers(init.headers || input.headers || {})

          if (inputBody != null && !headers.has("Content-Type")) {
            const contentType = extractContentType(inputBody)
            if (contentType) {
              headers.append("Content-Type", contentType)
            }
          }

          let signal = isRequest(input) ? input.signal : null
          if ("signal" in init) signal = init.signal

          if (signal != null && !isAbortSignal(signal)) {
            throw new TypeError("Expected signal to be an instanceof AbortSignal")
          }

          this[INTERNALS$2] = {
            method,
            redirect: init.redirect || input.redirect || "follow",
            headers,
            parsedURL,
            signal
          }

          // node-fetch-only options
          this.follow =
            init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20
          this.compress =
            init.compress !== undefined
              ? init.compress
              : input.compress !== undefined
              ? input.compress
              : true
          this.counter = init.counter || input.counter || 0
          this.agent = init.agent || input.agent
        }

        get method() {
          return this[INTERNALS$2].method
        }

        get url() {
          return format_url(this[INTERNALS$2].parsedURL)
        }

        get headers() {
          return this[INTERNALS$2].headers
        }

        get redirect() {
          return this[INTERNALS$2].redirect
        }

        get signal() {
          return this[INTERNALS$2].signal
        }

        /**
         * Clone this request
         *
         * @return  Request
         */
        clone() {
          return new Request(this)
        }
      }

      Body.mixIn(Request.prototype)

      Object.defineProperty(Request.prototype, Symbol.toStringTag, {
        value: "Request",
        writable: false,
        enumerable: false,
        configurable: true
      })

      Object.defineProperties(Request.prototype, {
        method: { enumerable: true },
        url: { enumerable: true },
        headers: { enumerable: true },
        redirect: { enumerable: true },
        clone: { enumerable: true },
        signal: { enumerable: true }
      })

      /**
       * Convert a Request to Node.js http request options.
       *
       * @param   Request  A Request instance
       * @return  Object   The options object to be passed to http.request
       */
      function getNodeRequestOptions(request) {
        const parsedURL = request[INTERNALS$2].parsedURL
        const headers = new Headers(request[INTERNALS$2].headers)

        // fetch step 1.3
        if (!headers.has("Accept")) {
          headers.set("Accept", "*/*")
        }

        // Basic fetch
        if (!parsedURL.protocol || !parsedURL.hostname) {
          throw new TypeError("Only absolute URLs are supported")
        }

        if (!/^https?:$/.test(parsedURL.protocol)) {
          throw new TypeError("Only HTTP(S) protocols are supported")
        }

        if (
          request.signal &&
          request.body instanceof Stream.Readable &&
          !streamDestructionSupported
        ) {
          throw new Error(
            "Cancellation of streamed requests with AbortSignal is not supported in node < 8"
          )
        }

        // HTTP-network-or-cache fetch steps 2.4-2.7
        let contentLengthValue = null
        if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
          contentLengthValue = "0"
        }
        if (request.body != null) {
          const totalBytes = getTotalBytes(request)
          if (typeof totalBytes === "number") {
            contentLengthValue = String(totalBytes)
          }
        }
        if (contentLengthValue) {
          headers.set("Content-Length", contentLengthValue)
        }

        // HTTP-network-or-cache fetch step 2.11
        if (!headers.has("User-Agent")) {
          headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)")
        }

        // HTTP-network-or-cache fetch step 2.15
        if (request.compress && !headers.has("Accept-Encoding")) {
          headers.set("Accept-Encoding", "gzip,deflate")
        }

        let agent = request.agent
        if (typeof agent === "function") {
          agent = agent(parsedURL)
        }

        if (!headers.has("Connection") && !agent) {
          headers.set("Connection", "close")
        }

        // HTTP-network fetch step 4.2
        // chunked encoding is handled by Node.js

        return Object.assign({}, parsedURL, {
          method: request.method,
          headers: exportNodeCompatibleHeaders(headers),
          agent
        })
      }

      /**
       * abort-error.js
       *
       * AbortError interface for cancelled requests
       */

      /**
       * Create AbortError instance
       *
       * @param   String      message      Error message for human
       * @return  AbortError
       */
      function AbortError(message) {
        Error.call(this, message)

        this.type = "aborted"
        this.message = message

        // hide custom error implementation details from end-users
        Error.captureStackTrace(this, this.constructor)
      }

      AbortError.prototype = Object.create(Error.prototype)
      AbortError.prototype.constructor = AbortError
      AbortError.prototype.name = "AbortError"

      const URL$1 = Url.URL || whatwgUrl.URL

      // fix an issue where "PassThrough", "resolve" aren't a named export for node <10
      const PassThrough$1 = Stream.PassThrough

      const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
        const orig = new URL$1(original).hostname
        const dest = new URL$1(destination).hostname

        return orig === dest || (orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest))
      }

      /**
       * Fetch function
       *
       * @param   Mixed    url   Absolute url or Request instance
       * @param   Object   opts  Fetch options
       * @return  Promise
       */
      function fetch(url, opts) {
        // allow custom promise
        if (!fetch.Promise) {
          throw new Error("native promise missing, set fetch.Promise to your favorite alternative")
        }

        Body.Promise = fetch.Promise

        // wrap http.request into fetch
        return new fetch.Promise(function (resolve, reject) {
          // build request object
          const request = new Request(url, opts)
          const options = getNodeRequestOptions(request)

          const send = (options.protocol === "https:" ? https : http).request
          const signal = request.signal

          let response = null

          const abort = function abort() {
            let error = new AbortError("The user aborted a request.")
            reject(error)
            if (request.body && request.body instanceof Stream.Readable) {
              request.body.destroy(error)
            }
            if (!response || !response.body) return
            response.body.emit("error", error)
          }

          if (signal && signal.aborted) {
            abort()
            return
          }

          const abortAndFinalize = function abortAndFinalize() {
            abort()
            finalize()
          }

          // send request
          const req = send(options)
          let reqTimeout

          if (signal) {
            signal.addEventListener("abort", abortAndFinalize)
          }

          function finalize() {
            req.abort()
            if (signal) signal.removeEventListener("abort", abortAndFinalize)
            clearTimeout(reqTimeout)
          }

          if (request.timeout) {
            req.once("socket", function (socket) {
              reqTimeout = setTimeout(function () {
                reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"))
                finalize()
              }, request.timeout)
            })
          }

          req.on("error", function (err) {
            reject(
              new FetchError(
                `request to ${request.url} failed, reason: ${err.message}`,
                "system",
                err
              )
            )
            finalize()
          })

          req.on("response", function (res) {
            clearTimeout(reqTimeout)

            const headers = createHeadersLenient(res.headers)

            // HTTP fetch step 5
            if (fetch.isRedirect(res.statusCode)) {
              // HTTP fetch step 5.2
              const location = headers.get("Location")

              // HTTP fetch step 5.3
              let locationURL = null
              try {
                locationURL = location === null ? null : new URL$1(location, request.url).toString()
              } catch (err) {
                // error here can only be invalid URL in Location: header
                // do not throw when options.redirect == manual
                // let the user extract the errorneous redirect URL
                if (request.redirect !== "manual") {
                  reject(
                    new FetchError(
                      `uri requested responds with an invalid redirect URL: ${location}`,
                      "invalid-redirect"
                    )
                  )
                  finalize()
                  return
                }
              }

              // HTTP fetch step 5.5
              switch (request.redirect) {
                case "error":
                  reject(
                    new FetchError(
                      `uri requested responds with a redirect, redirect mode is set to error: ${request.url}`,
                      "no-redirect"
                    )
                  )
                  finalize()
                  return
                case "manual":
                  // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
                  if (locationURL !== null) {
                    // handle corrupted header
                    try {
                      headers.set("Location", locationURL)
                    } catch (err) {
                      // istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
                      reject(err)
                    }
                  }
                  break
                case "follow":
                  // HTTP-redirect fetch step 2
                  if (locationURL === null) {
                    break
                  }

                  // HTTP-redirect fetch step 5
                  if (request.counter >= request.follow) {
                    reject(
                      new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect")
                    )
                    finalize()
                    return
                  }

                  // HTTP-redirect fetch step 6 (counter increment)
                  // Create a new Request object.
                  const requestOpts = {
                    headers: new Headers(request.headers),
                    follow: request.follow,
                    counter: request.counter + 1,
                    agent: request.agent,
                    compress: request.compress,
                    method: request.method,
                    body: request.body,
                    signal: request.signal,
                    timeout: request.timeout,
                    size: request.size
                  }

                  if (!isDomainOrSubdomain(request.url, locationURL)) {
                    for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                      requestOpts.headers.delete(name)
                    }
                  }

                  // HTTP-redirect fetch step 9
                  if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                    reject(
                      new FetchError(
                        "Cannot follow redirect with body being a readable stream",
                        "unsupported-redirect"
                      )
                    )
                    finalize()
                    return
                  }

                  // HTTP-redirect fetch step 11
                  if (
                    res.statusCode === 303 ||
                    ((res.statusCode === 301 || res.statusCode === 302) &&
                      request.method === "POST")
                  ) {
                    requestOpts.method = "GET"
                    requestOpts.body = undefined
                    requestOpts.headers.delete("content-length")
                  }

                  // HTTP-redirect fetch step 15
                  resolve(fetch(new Request(locationURL, requestOpts)))
                  finalize()
                  return
              }
            }

            // prepare response
            res.once("end", function () {
              if (signal) signal.removeEventListener("abort", abortAndFinalize)
            })
            let body = res.pipe(new PassThrough$1())

            const response_options = {
              url: request.url,
              status: res.statusCode,
              statusText: res.statusMessage,
              headers: headers,
              size: request.size,
              timeout: request.timeout,
              counter: request.counter
            }

            // HTTP-network fetch step 12.1.1.3
            const codings = headers.get("Content-Encoding")

            // HTTP-network fetch step 12.1.1.4: handle content codings

            // in following scenarios we ignore compression support
            // 1. compression support is disabled
            // 2. HEAD request
            // 3. no Content-Encoding header
            // 4. no content response (204)
            // 5. content not modified response (304)
            if (
              !request.compress ||
              request.method === "HEAD" ||
              codings === null ||
              res.statusCode === 204 ||
              res.statusCode === 304
            ) {
              response = new Response(body, response_options)
              resolve(response)
              return
            }

            // For Node v6+
            // Be less strict when decoding compressed responses, since sometimes
            // servers send slightly invalid responses that are still accepted
            // by common browsers.
            // Always using Z_SYNC_FLUSH is what cURL does.
            const zlibOptions = {
              flush: zlib.Z_SYNC_FLUSH,
              finishFlush: zlib.Z_SYNC_FLUSH
            }

            // for gzip
            if (codings == "gzip" || codings == "x-gzip") {
              body = body.pipe(zlib.createGunzip(zlibOptions))
              response = new Response(body, response_options)
              resolve(response)
              return
            }

            // for deflate
            if (codings == "deflate" || codings == "x-deflate") {
              // handle the infamous raw deflate response from old servers
              // a hack for old IIS and Apache servers
              const raw = res.pipe(new PassThrough$1())
              raw.once("data", function (chunk) {
                // see http://stackoverflow.com/questions/37519828
                if ((chunk[0] & 0x0f) === 0x08) {
                  body = body.pipe(zlib.createInflate())
                } else {
                  body = body.pipe(zlib.createInflateRaw())
                }
                response = new Response(body, response_options)
                resolve(response)
              })
              return
            }

            // for br
            if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
              body = body.pipe(zlib.createBrotliDecompress())
              response = new Response(body, response_options)
              resolve(response)
              return
            }

            // otherwise, use response as-is
            response = new Response(body, response_options)
            resolve(response)
          })

          writeToStream(req, request)
        })
      }
      /**
       * Redirect code matching
       *
       * @param   Number   code  Status code
       * @return  Boolean
       */
      fetch.isRedirect = function (code) {
        return code === 301 || code === 302 || code === 303 || code === 307 || code === 308
      }

      // expose Promise
      fetch.Promise = global.Promise

      module.exports = exports = fetch
      Object.defineProperty(exports, "__esModule", { value: true })
      exports["default"] = exports
      exports.Headers = Headers
      exports.Request = Request
      exports.Response = Response
      exports.FetchError = FetchError

      /***/
    },

    /***/ 42299: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var punycode = __nccwpck_require__(85477)
      var mappingTable = __nccwpck_require__(1907)

      var PROCESSING_OPTIONS = {
        TRANSITIONAL: 0,
        NONTRANSITIONAL: 1
      }

      function normalize(str) {
        // fix bug in v8
        return str
          .split("\u0000")
          .map(function (s) {
            return s.normalize("NFC")
          })
          .join("\u0000")
      }

      function findStatus(val) {
        var start = 0
        var end = mappingTable.length - 1

        while (start <= end) {
          var mid = Math.floor((start + end) / 2)

          var target = mappingTable[mid]
          if (target[0][0] <= val && target[0][1] >= val) {
            return target
          } else if (target[0][0] > val) {
            end = mid - 1
          } else {
            start = mid + 1
          }
        }

        return null
      }

      var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g

      function countSymbols(string) {
        return (
          // then get the length
          string
            // replace every surrogate pair with a BMP symbol
            .replace(regexAstralSymbols, "_").length
        )
      }

      function mapChars(domain_name, useSTD3, processing_option) {
        var hasError = false
        var processed = ""

        var len = countSymbols(domain_name)
        for (var i = 0; i < len; ++i) {
          var codePoint = domain_name.codePointAt(i)
          var status = findStatus(codePoint)

          switch (status[1]) {
            case "disallowed":
              hasError = true
              processed += String.fromCodePoint(codePoint)
              break
            case "ignored":
              break
            case "mapped":
              processed += String.fromCodePoint.apply(String, status[2])
              break
            case "deviation":
              if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
                processed += String.fromCodePoint.apply(String, status[2])
              } else {
                processed += String.fromCodePoint(codePoint)
              }
              break
            case "valid":
              processed += String.fromCodePoint(codePoint)
              break
            case "disallowed_STD3_mapped":
              if (useSTD3) {
                hasError = true
                processed += String.fromCodePoint(codePoint)
              } else {
                processed += String.fromCodePoint.apply(String, status[2])
              }
              break
            case "disallowed_STD3_valid":
              if (useSTD3) {
                hasError = true
              }

              processed += String.fromCodePoint(codePoint)
              break
          }
        }

        return {
          string: processed,
          error: hasError
        }
      }

      var combiningMarksRegex =
        /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/

      function validateLabel(label, processing_option) {
        if (label.substr(0, 4) === "xn--") {
          label = punycode.toUnicode(label)
          processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL
        }

        var error = false

        if (
          normalize(label) !== label ||
          (label[3] === "-" && label[4] === "-") ||
          label[0] === "-" ||
          label[label.length - 1] === "-" ||
          label.indexOf(".") !== -1 ||
          label.search(combiningMarksRegex) === 0
        ) {
          error = true
        }

        var len = countSymbols(label)
        for (var i = 0; i < len; ++i) {
          var status = findStatus(label.codePointAt(i))
          if (
            (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid") ||
            (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&
              status[1] !== "valid" &&
              status[1] !== "deviation")
          ) {
            error = true
            break
          }
        }

        return {
          label: label,
          error: error
        }
      }

      function processing(domain_name, useSTD3, processing_option) {
        var result = mapChars(domain_name, useSTD3, processing_option)
        result.string = normalize(result.string)

        var labels = result.string.split(".")
        for (var i = 0; i < labels.length; ++i) {
          try {
            var validation = validateLabel(labels[i])
            labels[i] = validation.label
            result.error = result.error || validation.error
          } catch (e) {
            result.error = true
          }
        }

        return {
          string: labels.join("."),
          error: result.error
        }
      }

      module.exports.toASCII = function (domain_name, useSTD3, processing_option, verifyDnsLength) {
        var result = processing(domain_name, useSTD3, processing_option)
        var labels = result.string.split(".")
        labels = labels.map(function (l) {
          try {
            return punycode.toASCII(l)
          } catch (e) {
            result.error = true
            return l
          }
        })

        if (verifyDnsLength) {
          var total = labels.slice(0, labels.length - 1).join(".").length
          if (total.length > 253 || total.length === 0) {
            result.error = true
          }

          for (var i = 0; i < labels.length; ++i) {
            if (labels.length > 63 || labels.length === 0) {
              result.error = true
              break
            }
          }
        }

        if (result.error) return null
        return labels.join(".")
      }

      module.exports.toUnicode = function (domain_name, useSTD3) {
        var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL)

        return {
          domain: result.string,
          error: result.error
        }
      }

      module.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS

      /***/
    },

    /***/ 15871: /***/ (module) => {
      "use strict"

      var conversions = {}
      module.exports = conversions

      function sign(x) {
        return x < 0 ? -1 : 1
      }

      function evenRound(x) {
        // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
        if (x % 1 === 0.5 && (x & 1) === 0) {
          // [even number].5; round down (i.e. floor)
          return Math.floor(x)
        } else {
          return Math.round(x)
        }
      }

      function createNumberConversion(bitLength, typeOpts) {
        if (!typeOpts.unsigned) {
          --bitLength
        }
        const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength)
        const upperBound = Math.pow(2, bitLength) - 1

        const moduloVal = typeOpts.moduloBitLength
          ? Math.pow(2, typeOpts.moduloBitLength)
          : Math.pow(2, bitLength)
        const moduloBound = typeOpts.moduloBitLength
          ? Math.pow(2, typeOpts.moduloBitLength - 1)
          : Math.pow(2, bitLength - 1)

        return function (V, opts) {
          if (!opts) opts = {}

          let x = +V

          if (opts.enforceRange) {
            if (!Number.isFinite(x)) {
              throw new TypeError("Argument is not a finite number")
            }

            x = sign(x) * Math.floor(Math.abs(x))
            if (x < lowerBound || x > upperBound) {
              throw new TypeError("Argument is not in byte range")
            }

            return x
          }

          if (!isNaN(x) && opts.clamp) {
            x = evenRound(x)

            if (x < lowerBound) x = lowerBound
            if (x > upperBound) x = upperBound
            return x
          }

          if (!Number.isFinite(x) || x === 0) {
            return 0
          }

          x = sign(x) * Math.floor(Math.abs(x))
          x = x % moduloVal

          if (!typeOpts.unsigned && x >= moduloBound) {
            return x - moduloVal
          } else if (typeOpts.unsigned) {
            if (x < 0) {
              x += moduloVal
            } else if (x === -0) {
              // don't return negative zero
              return 0
            }
          }

          return x
        }
      }

      conversions["void"] = function () {
        return undefined
      }

      conversions["boolean"] = function (val) {
        return !!val
      }

      conversions["byte"] = createNumberConversion(8, { unsigned: false })
      conversions["octet"] = createNumberConversion(8, { unsigned: true })

      conversions["short"] = createNumberConversion(16, { unsigned: false })
      conversions["unsigned short"] = createNumberConversion(16, { unsigned: true })

      conversions["long"] = createNumberConversion(32, { unsigned: false })
      conversions["unsigned long"] = createNumberConversion(32, { unsigned: true })

      conversions["long long"] = createNumberConversion(32, {
        unsigned: false,
        moduloBitLength: 64
      })
      conversions["unsigned long long"] = createNumberConversion(32, {
        unsigned: true,
        moduloBitLength: 64
      })

      conversions["double"] = function (V) {
        const x = +V

        if (!Number.isFinite(x)) {
          throw new TypeError("Argument is not a finite floating-point value")
        }

        return x
      }

      conversions["unrestricted double"] = function (V) {
        const x = +V

        if (isNaN(x)) {
          throw new TypeError("Argument is NaN")
        }

        return x
      }

      // not quite valid, but good enough for JS
      conversions["float"] = conversions["double"]
      conversions["unrestricted float"] = conversions["unrestricted double"]

      conversions["DOMString"] = function (V, opts) {
        if (!opts) opts = {}

        if (opts.treatNullAsEmptyString && V === null) {
          return ""
        }

        return String(V)
      }

      conversions["ByteString"] = function (V, opts) {
        const x = String(V)
        let c = undefined
        for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
          if (c > 255) {
            throw new TypeError("Argument is not a valid bytestring")
          }
        }

        return x
      }

      conversions["USVString"] = function (V) {
        const S = String(V)
        const n = S.length
        const U = []
        for (let i = 0; i < n; ++i) {
          const c = S.charCodeAt(i)
          if (c < 0xd800 || c > 0xdfff) {
            U.push(String.fromCodePoint(c))
          } else if (0xdc00 <= c && c <= 0xdfff) {
            U.push(String.fromCodePoint(0xfffd))
          } else {
            if (i === n - 1) {
              U.push(String.fromCodePoint(0xfffd))
            } else {
              const d = S.charCodeAt(i + 1)
              if (0xdc00 <= d && d <= 0xdfff) {
                const a = c & 0x3ff
                const b = d & 0x3ff
                U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b))
                ++i
              } else {
                U.push(String.fromCodePoint(0xfffd))
              }
            }
          }
        }

        return U.join("")
      }

      conversions["Date"] = function (V, opts) {
        if (!(V instanceof Date)) {
          throw new TypeError("Argument is not a Date object")
        }
        if (isNaN(V)) {
          return undefined
        }

        return V
      }

      conversions["RegExp"] = function (V, opts) {
        if (!(V instanceof RegExp)) {
          V = new RegExp(V)
        }

        return V
      }

      /***/
    },

    /***/ 58262: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      const usm = __nccwpck_require__(40033)

      exports.implementation = class URLImpl {
        constructor(constructorArgs) {
          const url = constructorArgs[0]
          const base = constructorArgs[1]

          let parsedBase = null
          if (base !== undefined) {
            parsedBase = usm.basicURLParse(base)
            if (parsedBase === "failure") {
              throw new TypeError("Invalid base URL")
            }
          }

          const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase })
          if (parsedURL === "failure") {
            throw new TypeError("Invalid URL")
          }

          this._url = parsedURL

          // TODO: query stuff
        }

        get href() {
          return usm.serializeURL(this._url)
        }

        set href(v) {
          const parsedURL = usm.basicURLParse(v)
          if (parsedURL === "failure") {
            throw new TypeError("Invalid URL")
          }

          this._url = parsedURL
        }

        get origin() {
          return usm.serializeURLOrigin(this._url)
        }

        get protocol() {
          return this._url.scheme + ":"
        }

        set protocol(v) {
          usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" })
        }

        get username() {
          return this._url.username
        }

        set username(v) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return
          }

          usm.setTheUsername(this._url, v)
        }

        get password() {
          return this._url.password
        }

        set password(v) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return
          }

          usm.setThePassword(this._url, v)
        }

        get host() {
          const url = this._url

          if (url.host === null) {
            return ""
          }

          if (url.port === null) {
            return usm.serializeHost(url.host)
          }

          return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port)
        }

        set host(v) {
          if (this._url.cannotBeABaseURL) {
            return
          }

          usm.basicURLParse(v, { url: this._url, stateOverride: "host" })
        }

        get hostname() {
          if (this._url.host === null) {
            return ""
          }

          return usm.serializeHost(this._url.host)
        }

        set hostname(v) {
          if (this._url.cannotBeABaseURL) {
            return
          }

          usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" })
        }

        get port() {
          if (this._url.port === null) {
            return ""
          }

          return usm.serializeInteger(this._url.port)
        }

        set port(v) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return
          }

          if (v === "") {
            this._url.port = null
          } else {
            usm.basicURLParse(v, { url: this._url, stateOverride: "port" })
          }
        }

        get pathname() {
          if (this._url.cannotBeABaseURL) {
            return this._url.path[0]
          }

          if (this._url.path.length === 0) {
            return ""
          }

          return "/" + this._url.path.join("/")
        }

        set pathname(v) {
          if (this._url.cannotBeABaseURL) {
            return
          }

          this._url.path = []
          usm.basicURLParse(v, { url: this._url, stateOverride: "path start" })
        }

        get search() {
          if (this._url.query === null || this._url.query === "") {
            return ""
          }

          return "?" + this._url.query
        }

        set search(v) {
          // TODO: query stuff

          const url = this._url

          if (v === "") {
            url.query = null
            return
          }

          const input = v[0] === "?" ? v.substring(1) : v
          url.query = ""
          usm.basicURLParse(input, { url, stateOverride: "query" })
        }

        get hash() {
          if (this._url.fragment === null || this._url.fragment === "") {
            return ""
          }

          return "#" + this._url.fragment
        }

        set hash(v) {
          if (v === "") {
            this._url.fragment = null
            return
          }

          const input = v[0] === "#" ? v.substring(1) : v
          this._url.fragment = ""
          usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" })
        }

        toJSON() {
          return this.href
        }
      }

      /***/
    },

    /***/ 80653: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const conversions = __nccwpck_require__(15871)
      const utils = __nccwpck_require__(60276)
      const Impl = __nccwpck_require__(58262)

      const impl = utils.implSymbol

      function URL(url) {
        if (!this || this[impl] || !(this instanceof URL)) {
          throw new TypeError(
            "Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function."
          )
        }
        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to construct 'URL': 1 argument required, but only " +
              arguments.length +
              " present."
          )
        }
        const args = []
        for (let i = 0; i < arguments.length && i < 2; ++i) {
          args[i] = arguments[i]
        }
        args[0] = conversions["USVString"](args[0])
        if (args[1] !== undefined) {
          args[1] = conversions["USVString"](args[1])
        }

        module.exports.setup(this, args)
      }

      URL.prototype.toJSON = function toJSON() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation")
        }
        const args = []
        for (let i = 0; i < arguments.length && i < 0; ++i) {
          args[i] = arguments[i]
        }
        return this[impl].toJSON.apply(this[impl], args)
      }
      Object.defineProperty(URL.prototype, "href", {
        get() {
          return this[impl].href
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].href = V
        },
        enumerable: true,
        configurable: true
      })

      URL.prototype.toString = function () {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation")
        }
        return this.href
      }

      Object.defineProperty(URL.prototype, "origin", {
        get() {
          return this[impl].origin
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "protocol", {
        get() {
          return this[impl].protocol
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].protocol = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "username", {
        get() {
          return this[impl].username
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].username = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "password", {
        get() {
          return this[impl].password
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].password = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "host", {
        get() {
          return this[impl].host
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].host = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "hostname", {
        get() {
          return this[impl].hostname
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].hostname = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "port", {
        get() {
          return this[impl].port
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].port = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "pathname", {
        get() {
          return this[impl].pathname
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].pathname = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "search", {
        get() {
          return this[impl].search
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].search = V
        },
        enumerable: true,
        configurable: true
      })

      Object.defineProperty(URL.prototype, "hash", {
        get() {
          return this[impl].hash
        },
        set(V) {
          V = conversions["USVString"](V)
          this[impl].hash = V
        },
        enumerable: true,
        configurable: true
      })

      module.exports = {
        is(obj) {
          return !!obj && obj[impl] instanceof Impl.implementation
        },
        create(constructorArgs, privateData) {
          let obj = Object.create(URL.prototype)
          this.setup(obj, constructorArgs, privateData)
          return obj
        },
        setup(obj, constructorArgs, privateData) {
          if (!privateData) privateData = {}
          privateData.wrapper = obj

          obj[impl] = new Impl.implementation(constructorArgs, privateData)
          obj[impl][utils.wrapperSymbol] = obj
        },
        interface: URL,
        expose: {
          Window: { URL: URL },
          Worker: { URL: URL }
        }
      }

      /***/
    },

    /***/ 73323: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      exports.URL = __nccwpck_require__(80653)["interface"]
      exports.serializeURL = __nccwpck_require__(40033).serializeURL
      exports.serializeURLOrigin = __nccwpck_require__(40033).serializeURLOrigin
      exports.basicURLParse = __nccwpck_require__(40033).basicURLParse
      exports.setTheUsername = __nccwpck_require__(40033).setTheUsername
      exports.setThePassword = __nccwpck_require__(40033).setThePassword
      exports.serializeHost = __nccwpck_require__(40033).serializeHost
      exports.serializeInteger = __nccwpck_require__(40033).serializeInteger
      exports.parseURL = __nccwpck_require__(40033).parseURL

      /***/
    },

    /***/ 40033: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const punycode = __nccwpck_require__(85477)
      const tr46 = __nccwpck_require__(42299)

      const specialSchemes = {
        ftp: 21,
        file: null,
        gopher: 70,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
      }

      const failure = Symbol("failure")

      function countSymbols(str) {
        return punycode.ucs2.decode(str).length
      }

      function at(input, idx) {
        const c = input[idx]
        return isNaN(c) ? undefined : String.fromCodePoint(c)
      }

      function isASCIIDigit(c) {
        return c >= 0x30 && c <= 0x39
      }

      function isASCIIAlpha(c) {
        return (c >= 0x41 && c <= 0x5a) || (c >= 0x61 && c <= 0x7a)
      }

      function isASCIIAlphanumeric(c) {
        return isASCIIAlpha(c) || isASCIIDigit(c)
      }

      function isASCIIHex(c) {
        return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66)
      }

      function isSingleDot(buffer) {
        return buffer === "." || buffer.toLowerCase() === "%2e"
      }

      function isDoubleDot(buffer) {
        buffer = buffer.toLowerCase()
        return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e"
      }

      function isWindowsDriveLetterCodePoints(cp1, cp2) {
        return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124)
      }

      function isWindowsDriveLetterString(string) {
        return (
          string.length === 2 &&
          isASCIIAlpha(string.codePointAt(0)) &&
          (string[1] === ":" || string[1] === "|")
        )
      }

      function isNormalizedWindowsDriveLetterString(string) {
        return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":"
      }

      function containsForbiddenHostCodePoint(string) {
        return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1
      }

      function containsForbiddenHostCodePointExcludingPercent(string) {
        return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1
      }

      function isSpecialScheme(scheme) {
        return specialSchemes[scheme] !== undefined
      }

      function isSpecial(url) {
        return isSpecialScheme(url.scheme)
      }

      function defaultPort(scheme) {
        return specialSchemes[scheme]
      }

      function percentEncode(c) {
        let hex = c.toString(16).toUpperCase()
        if (hex.length === 1) {
          hex = "0" + hex
        }

        return "%" + hex
      }

      function utf8PercentEncode(c) {
        const buf = new Buffer(c)

        let str = ""

        for (let i = 0; i < buf.length; ++i) {
          str += percentEncode(buf[i])
        }

        return str
      }

      function utf8PercentDecode(str) {
        const input = new Buffer(str)
        const output = []
        for (let i = 0; i < input.length; ++i) {
          if (input[i] !== 37) {
            output.push(input[i])
          } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
            output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16))
            i += 2
          } else {
            output.push(input[i])
          }
        }
        return new Buffer(output).toString()
      }

      function isC0ControlPercentEncode(c) {
        return c <= 0x1f || c > 0x7e
      }

      const extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125])
      function isPathPercentEncode(c) {
        return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c)
      }

      const extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124])
      function isUserinfoPercentEncode(c) {
        return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c)
      }

      function percentEncodeChar(c, encodeSetPredicate) {
        const cStr = String.fromCodePoint(c)

        if (encodeSetPredicate(c)) {
          return utf8PercentEncode(cStr)
        }

        return cStr
      }

      function parseIPv4Number(input) {
        let R = 10

        if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
          input = input.substring(2)
          R = 16
        } else if (input.length >= 2 && input.charAt(0) === "0") {
          input = input.substring(1)
          R = 8
        }

        if (input === "") {
          return 0
        }

        const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/
        if (regex.test(input)) {
          return failure
        }

        return parseInt(input, R)
      }

      function parseIPv4(input) {
        const parts = input.split(".")
        if (parts[parts.length - 1] === "") {
          if (parts.length > 1) {
            parts.pop()
          }
        }

        if (parts.length > 4) {
          return input
        }

        const numbers = []
        for (const part of parts) {
          if (part === "") {
            return input
          }
          const n = parseIPv4Number(part)
          if (n === failure) {
            return input
          }

          numbers.push(n)
        }

        for (let i = 0; i < numbers.length - 1; ++i) {
          if (numbers[i] > 255) {
            return failure
          }
        }
        if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
          return failure
        }

        let ipv4 = numbers.pop()
        let counter = 0

        for (const n of numbers) {
          ipv4 += n * Math.pow(256, 3 - counter)
          ++counter
        }

        return ipv4
      }

      function serializeIPv4(address) {
        let output = ""
        let n = address

        for (let i = 1; i <= 4; ++i) {
          output = String(n % 256) + output
          if (i !== 4) {
            output = "." + output
          }
          n = Math.floor(n / 256)
        }

        return output
      }

      function parseIPv6(input) {
        const address = [0, 0, 0, 0, 0, 0, 0, 0]
        let pieceIndex = 0
        let compress = null
        let pointer = 0

        input = punycode.ucs2.decode(input)

        if (input[pointer] === 58) {
          if (input[pointer + 1] !== 58) {
            return failure
          }

          pointer += 2
          ++pieceIndex
          compress = pieceIndex
        }

        while (pointer < input.length) {
          if (pieceIndex === 8) {
            return failure
          }

          if (input[pointer] === 58) {
            if (compress !== null) {
              return failure
            }
            ++pointer
            ++pieceIndex
            compress = pieceIndex
            continue
          }

          let value = 0
          let length = 0

          while (length < 4 && isASCIIHex(input[pointer])) {
            value = value * 0x10 + parseInt(at(input, pointer), 16)
            ++pointer
            ++length
          }

          if (input[pointer] === 46) {
            if (length === 0) {
              return failure
            }

            pointer -= length

            if (pieceIndex > 6) {
              return failure
            }

            let numbersSeen = 0

            while (input[pointer] !== undefined) {
              let ipv4Piece = null

              if (numbersSeen > 0) {
                if (input[pointer] === 46 && numbersSeen < 4) {
                  ++pointer
                } else {
                  return failure
                }
              }

              if (!isASCIIDigit(input[pointer])) {
                return failure
              }

              while (isASCIIDigit(input[pointer])) {
                const number = parseInt(at(input, pointer))
                if (ipv4Piece === null) {
                  ipv4Piece = number
                } else if (ipv4Piece === 0) {
                  return failure
                } else {
                  ipv4Piece = ipv4Piece * 10 + number
                }
                if (ipv4Piece > 255) {
                  return failure
                }
                ++pointer
              }

              address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece

              ++numbersSeen

              if (numbersSeen === 2 || numbersSeen === 4) {
                ++pieceIndex
              }
            }

            if (numbersSeen !== 4) {
              return failure
            }

            break
          } else if (input[pointer] === 58) {
            ++pointer
            if (input[pointer] === undefined) {
              return failure
            }
          } else if (input[pointer] !== undefined) {
            return failure
          }

          address[pieceIndex] = value
          ++pieceIndex
        }

        if (compress !== null) {
          let swaps = pieceIndex - compress
          pieceIndex = 7
          while (pieceIndex !== 0 && swaps > 0) {
            const temp = address[compress + swaps - 1]
            address[compress + swaps - 1] = address[pieceIndex]
            address[pieceIndex] = temp
            --pieceIndex
            --swaps
          }
        } else if (compress === null && pieceIndex !== 8) {
          return failure
        }

        return address
      }

      function serializeIPv6(address) {
        let output = ""
        const seqResult = findLongestZeroSequence(address)
        const compress = seqResult.idx
        let ignore0 = false

        for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
          if (ignore0 && address[pieceIndex] === 0) {
            continue
          } else if (ignore0) {
            ignore0 = false
          }

          if (compress === pieceIndex) {
            const separator = pieceIndex === 0 ? "::" : ":"
            output += separator
            ignore0 = true
            continue
          }

          output += address[pieceIndex].toString(16)

          if (pieceIndex !== 7) {
            output += ":"
          }
        }

        return output
      }

      function parseHost(input, isSpecialArg) {
        if (input[0] === "[") {
          if (input[input.length - 1] !== "]") {
            return failure
          }

          return parseIPv6(input.substring(1, input.length - 1))
        }

        if (!isSpecialArg) {
          return parseOpaqueHost(input)
        }

        const domain = utf8PercentDecode(input)
        const asciiDomain = tr46.toASCII(
          domain,
          false,
          tr46.PROCESSING_OPTIONS.NONTRANSITIONAL,
          false
        )
        if (asciiDomain === null) {
          return failure
        }

        if (containsForbiddenHostCodePoint(asciiDomain)) {
          return failure
        }

        const ipv4Host = parseIPv4(asciiDomain)
        if (typeof ipv4Host === "number" || ipv4Host === failure) {
          return ipv4Host
        }

        return asciiDomain
      }

      function parseOpaqueHost(input) {
        if (containsForbiddenHostCodePointExcludingPercent(input)) {
          return failure
        }

        let output = ""
        const decoded = punycode.ucs2.decode(input)
        for (let i = 0; i < decoded.length; ++i) {
          output += percentEncodeChar(decoded[i], isC0ControlPercentEncode)
        }
        return output
      }

      function findLongestZeroSequence(arr) {
        let maxIdx = null
        let maxLen = 1 // only find elements > 1
        let currStart = null
        let currLen = 0

        for (let i = 0; i < arr.length; ++i) {
          if (arr[i] !== 0) {
            if (currLen > maxLen) {
              maxIdx = currStart
              maxLen = currLen
            }

            currStart = null
            currLen = 0
          } else {
            if (currStart === null) {
              currStart = i
            }
            ++currLen
          }
        }

        // if trailing zeros
        if (currLen > maxLen) {
          maxIdx = currStart
          maxLen = currLen
        }

        return {
          idx: maxIdx,
          len: maxLen
        }
      }

      function serializeHost(host) {
        if (typeof host === "number") {
          return serializeIPv4(host)
        }

        // IPv6 serializer
        if (host instanceof Array) {
          return "[" + serializeIPv6(host) + "]"
        }

        return host
      }

      function trimControlChars(url) {
        return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "")
      }

      function trimTabAndNewline(url) {
        return url.replace(/\u0009|\u000A|\u000D/g, "")
      }

      function shortenPath(url) {
        const path = url.path
        if (path.length === 0) {
          return
        }
        if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
          return
        }

        path.pop()
      }

      function includesCredentials(url) {
        return url.username !== "" || url.password !== ""
      }

      function cannotHaveAUsernamePasswordPort(url) {
        return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file"
      }

      function isNormalizedWindowsDriveLetter(string) {
        return /^[A-Za-z]:$/.test(string)
      }

      function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
        this.pointer = 0
        this.input = input
        this.base = base || null
        this.encodingOverride = encodingOverride || "utf-8"
        this.stateOverride = stateOverride
        this.url = url
        this.failure = false
        this.parseError = false

        if (!this.url) {
          this.url = {
            scheme: "",
            username: "",
            password: "",
            host: null,
            port: null,
            path: [],
            query: null,
            fragment: null,

            cannotBeABaseURL: false
          }

          const res = trimControlChars(this.input)
          if (res !== this.input) {
            this.parseError = true
          }
          this.input = res
        }

        const res = trimTabAndNewline(this.input)
        if (res !== this.input) {
          this.parseError = true
        }
        this.input = res

        this.state = stateOverride || "scheme start"

        this.buffer = ""
        this.atFlag = false
        this.arrFlag = false
        this.passwordTokenSeenFlag = false

        this.input = punycode.ucs2.decode(this.input)

        for (; this.pointer <= this.input.length; ++this.pointer) {
          const c = this.input[this.pointer]
          const cStr = isNaN(c) ? undefined : String.fromCodePoint(c)

          // exec state machine
          const ret = this["parse " + this.state](c, cStr)
          if (!ret) {
            break // terminate algorithm
          } else if (ret === failure) {
            this.failure = true
            break
          }
        }
      }

      URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
        if (isASCIIAlpha(c)) {
          this.buffer += cStr.toLowerCase()
          this.state = "scheme"
        } else if (!this.stateOverride) {
          this.state = "no scheme"
          --this.pointer
        } else {
          this.parseError = true
          return failure
        }

        return true
      }

      URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
        if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
          this.buffer += cStr.toLowerCase()
        } else if (c === 58) {
          if (this.stateOverride) {
            if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
              return false
            }

            if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
              return false
            }

            if (
              (includesCredentials(this.url) || this.url.port !== null) &&
              this.buffer === "file"
            ) {
              return false
            }

            if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
              return false
            }
          }
          this.url.scheme = this.buffer
          this.buffer = ""
          if (this.stateOverride) {
            return false
          }
          if (this.url.scheme === "file") {
            if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
              this.parseError = true
            }
            this.state = "file"
          } else if (
            isSpecial(this.url) &&
            this.base !== null &&
            this.base.scheme === this.url.scheme
          ) {
            this.state = "special relative or authority"
          } else if (isSpecial(this.url)) {
            this.state = "special authority slashes"
          } else if (this.input[this.pointer + 1] === 47) {
            this.state = "path or authority"
            ++this.pointer
          } else {
            this.url.cannotBeABaseURL = true
            this.url.path.push("")
            this.state = "cannot-be-a-base-URL path"
          }
        } else if (!this.stateOverride) {
          this.buffer = ""
          this.state = "no scheme"
          this.pointer = -1
        } else {
          this.parseError = true
          return failure
        }

        return true
      }

      URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
        if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {
          return failure
        } else if (this.base.cannotBeABaseURL && c === 35) {
          this.url.scheme = this.base.scheme
          this.url.path = this.base.path.slice()
          this.url.query = this.base.query
          this.url.fragment = ""
          this.url.cannotBeABaseURL = true
          this.state = "fragment"
        } else if (this.base.scheme === "file") {
          this.state = "file"
          --this.pointer
        } else {
          this.state = "relative"
          --this.pointer
        }

        return true
      }

      URLStateMachine.prototype["parse special relative or authority"] =
        function parseSpecialRelativeOrAuthority(c) {
          if (c === 47 && this.input[this.pointer + 1] === 47) {
            this.state = "special authority ignore slashes"
            ++this.pointer
          } else {
            this.parseError = true
            this.state = "relative"
            --this.pointer
          }

          return true
        }

      URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
        if (c === 47) {
          this.state = "authority"
        } else {
          this.state = "path"
          --this.pointer
        }

        return true
      }

      URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
        this.url.scheme = this.base.scheme
        if (isNaN(c)) {
          this.url.username = this.base.username
          this.url.password = this.base.password
          this.url.host = this.base.host
          this.url.port = this.base.port
          this.url.path = this.base.path.slice()
          this.url.query = this.base.query
        } else if (c === 47) {
          this.state = "relative slash"
        } else if (c === 63) {
          this.url.username = this.base.username
          this.url.password = this.base.password
          this.url.host = this.base.host
          this.url.port = this.base.port
          this.url.path = this.base.path.slice()
          this.url.query = ""
          this.state = "query"
        } else if (c === 35) {
          this.url.username = this.base.username
          this.url.password = this.base.password
          this.url.host = this.base.host
          this.url.port = this.base.port
          this.url.path = this.base.path.slice()
          this.url.query = this.base.query
          this.url.fragment = ""
          this.state = "fragment"
        } else if (isSpecial(this.url) && c === 92) {
          this.parseError = true
          this.state = "relative slash"
        } else {
          this.url.username = this.base.username
          this.url.password = this.base.password
          this.url.host = this.base.host
          this.url.port = this.base.port
          this.url.path = this.base.path.slice(0, this.base.path.length - 1)

          this.state = "path"
          --this.pointer
        }

        return true
      }

      URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
        if (isSpecial(this.url) && (c === 47 || c === 92)) {
          if (c === 92) {
            this.parseError = true
          }
          this.state = "special authority ignore slashes"
        } else if (c === 47) {
          this.state = "authority"
        } else {
          this.url.username = this.base.username
          this.url.password = this.base.password
          this.url.host = this.base.host
          this.url.port = this.base.port
          this.state = "path"
          --this.pointer
        }

        return true
      }

      URLStateMachine.prototype["parse special authority slashes"] =
        function parseSpecialAuthoritySlashes(c) {
          if (c === 47 && this.input[this.pointer + 1] === 47) {
            this.state = "special authority ignore slashes"
            ++this.pointer
          } else {
            this.parseError = true
            this.state = "special authority ignore slashes"
            --this.pointer
          }

          return true
        }

      URLStateMachine.prototype["parse special authority ignore slashes"] =
        function parseSpecialAuthorityIgnoreSlashes(c) {
          if (c !== 47 && c !== 92) {
            this.state = "authority"
            --this.pointer
          } else {
            this.parseError = true
          }

          return true
        }

      URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
        if (c === 64) {
          this.parseError = true
          if (this.atFlag) {
            this.buffer = "%40" + this.buffer
          }
          this.atFlag = true

          // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
          const len = countSymbols(this.buffer)
          for (let pointer = 0; pointer < len; ++pointer) {
            const codePoint = this.buffer.codePointAt(pointer)

            if (codePoint === 58 && !this.passwordTokenSeenFlag) {
              this.passwordTokenSeenFlag = true
              continue
            }
            const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode)
            if (this.passwordTokenSeenFlag) {
              this.url.password += encodedCodePoints
            } else {
              this.url.username += encodedCodePoints
            }
          }
          this.buffer = ""
        } else if (
          isNaN(c) ||
          c === 47 ||
          c === 63 ||
          c === 35 ||
          (isSpecial(this.url) && c === 92)
        ) {
          if (this.atFlag && this.buffer === "") {
            this.parseError = true
            return failure
          }
          this.pointer -= countSymbols(this.buffer) + 1
          this.buffer = ""
          this.state = "host"
        } else {
          this.buffer += cStr
        }

        return true
      }

      URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] =
        function parseHostName(c, cStr) {
          if (this.stateOverride && this.url.scheme === "file") {
            --this.pointer
            this.state = "file host"
          } else if (c === 58 && !this.arrFlag) {
            if (this.buffer === "") {
              this.parseError = true
              return failure
            }

            const host = parseHost(this.buffer, isSpecial(this.url))
            if (host === failure) {
              return failure
            }

            this.url.host = host
            this.buffer = ""
            this.state = "port"
            if (this.stateOverride === "hostname") {
              return false
            }
          } else if (
            isNaN(c) ||
            c === 47 ||
            c === 63 ||
            c === 35 ||
            (isSpecial(this.url) && c === 92)
          ) {
            --this.pointer
            if (isSpecial(this.url) && this.buffer === "") {
              this.parseError = true
              return failure
            } else if (
              this.stateOverride &&
              this.buffer === "" &&
              (includesCredentials(this.url) || this.url.port !== null)
            ) {
              this.parseError = true
              return false
            }

            const host = parseHost(this.buffer, isSpecial(this.url))
            if (host === failure) {
              return failure
            }

            this.url.host = host
            this.buffer = ""
            this.state = "path start"
            if (this.stateOverride) {
              return false
            }
          } else {
            if (c === 91) {
              this.arrFlag = true
            } else if (c === 93) {
              this.arrFlag = false
            }
            this.buffer += cStr
          }

          return true
        }

      URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
        if (isASCIIDigit(c)) {
          this.buffer += cStr
        } else if (
          isNaN(c) ||
          c === 47 ||
          c === 63 ||
          c === 35 ||
          (isSpecial(this.url) && c === 92) ||
          this.stateOverride
        ) {
          if (this.buffer !== "") {
            const port = parseInt(this.buffer)
            if (port > Math.pow(2, 16) - 1) {
              this.parseError = true
              return failure
            }
            this.url.port = port === defaultPort(this.url.scheme) ? null : port
            this.buffer = ""
          }
          if (this.stateOverride) {
            return false
          }
          this.state = "path start"
          --this.pointer
        } else {
          this.parseError = true
          return failure
        }

        return true
      }

      const fileOtherwiseCodePoints = new Set([47, 92, 63, 35])

      URLStateMachine.prototype["parse file"] = function parseFile(c) {
        this.url.scheme = "file"

        if (c === 47 || c === 92) {
          if (c === 92) {
            this.parseError = true
          }
          this.state = "file slash"
        } else if (this.base !== null && this.base.scheme === "file") {
          if (isNaN(c)) {
            this.url.host = this.base.host
            this.url.path = this.base.path.slice()
            this.url.query = this.base.query
          } else if (c === 63) {
            this.url.host = this.base.host
            this.url.path = this.base.path.slice()
            this.url.query = ""
            this.state = "query"
          } else if (c === 35) {
            this.url.host = this.base.host
            this.url.path = this.base.path.slice()
            this.url.query = this.base.query
            this.url.fragment = ""
            this.state = "fragment"
          } else {
            if (
              this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
              !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||
              (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
                !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))
            ) {
              this.url.host = this.base.host
              this.url.path = this.base.path.slice()
              shortenPath(this.url)
            } else {
              this.parseError = true
            }

            this.state = "path"
            --this.pointer
          }
        } else {
          this.state = "path"
          --this.pointer
        }

        return true
      }

      URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
        if (c === 47 || c === 92) {
          if (c === 92) {
            this.parseError = true
          }
          this.state = "file host"
        } else {
          if (this.base !== null && this.base.scheme === "file") {
            if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
              this.url.path.push(this.base.path[0])
            } else {
              this.url.host = this.base.host
            }
          }
          this.state = "path"
          --this.pointer
        }

        return true
      }

      URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
        if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
          --this.pointer
          if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
            this.parseError = true
            this.state = "path"
          } else if (this.buffer === "") {
            this.url.host = ""
            if (this.stateOverride) {
              return false
            }
            this.state = "path start"
          } else {
            let host = parseHost(this.buffer, isSpecial(this.url))
            if (host === failure) {
              return failure
            }
            if (host === "localhost") {
              host = ""
            }
            this.url.host = host

            if (this.stateOverride) {
              return false
            }

            this.buffer = ""
            this.state = "path start"
          }
        } else {
          this.buffer += cStr
        }

        return true
      }

      URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
        if (isSpecial(this.url)) {
          if (c === 92) {
            this.parseError = true
          }
          this.state = "path"

          if (c !== 47 && c !== 92) {
            --this.pointer
          }
        } else if (!this.stateOverride && c === 63) {
          this.url.query = ""
          this.state = "query"
        } else if (!this.stateOverride && c === 35) {
          this.url.fragment = ""
          this.state = "fragment"
        } else if (c !== undefined) {
          this.state = "path"
          if (c !== 47) {
            --this.pointer
          }
        }

        return true
      }

      URLStateMachine.prototype["parse path"] = function parsePath(c) {
        if (
          isNaN(c) ||
          c === 47 ||
          (isSpecial(this.url) && c === 92) ||
          (!this.stateOverride && (c === 63 || c === 35))
        ) {
          if (isSpecial(this.url) && c === 92) {
            this.parseError = true
          }

          if (isDoubleDot(this.buffer)) {
            shortenPath(this.url)
            if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
              this.url.path.push("")
            }
          } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("")
          } else if (!isSingleDot(this.buffer)) {
            if (
              this.url.scheme === "file" &&
              this.url.path.length === 0 &&
              isWindowsDriveLetterString(this.buffer)
            ) {
              if (this.url.host !== "" && this.url.host !== null) {
                this.parseError = true
                this.url.host = ""
              }
              this.buffer = this.buffer[0] + ":"
            }
            this.url.path.push(this.buffer)
          }
          this.buffer = ""
          if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
            while (this.url.path.length > 1 && this.url.path[0] === "") {
              this.parseError = true
              this.url.path.shift()
            }
          }
          if (c === 63) {
            this.url.query = ""
            this.state = "query"
          }
          if (c === 35) {
            this.url.fragment = ""
            this.state = "fragment"
          }
        } else {
          // TODO: If c is not a URL code point and not "%", parse error.

          if (
            c === 37 &&
            (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))
          ) {
            this.parseError = true
          }

          this.buffer += percentEncodeChar(c, isPathPercentEncode)
        }

        return true
      }

      URLStateMachine.prototype["parse cannot-be-a-base-URL path"] =
        function parseCannotBeABaseURLPath(c) {
          if (c === 63) {
            this.url.query = ""
            this.state = "query"
          } else if (c === 35) {
            this.url.fragment = ""
            this.state = "fragment"
          } else {
            // TODO: Add: not a URL code point
            if (!isNaN(c) && c !== 37) {
              this.parseError = true
            }

            if (
              c === 37 &&
              (!isASCIIHex(this.input[this.pointer + 1]) ||
                !isASCIIHex(this.input[this.pointer + 2]))
            ) {
              this.parseError = true
            }

            if (!isNaN(c)) {
              this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode)
            }
          }

          return true
        }

      URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
        if (isNaN(c) || (!this.stateOverride && c === 35)) {
          if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
            this.encodingOverride = "utf-8"
          }

          const buffer = new Buffer(this.buffer) // TODO: Use encoding override instead
          for (let i = 0; i < buffer.length; ++i) {
            if (
              buffer[i] < 0x21 ||
              buffer[i] > 0x7e ||
              buffer[i] === 0x22 ||
              buffer[i] === 0x23 ||
              buffer[i] === 0x3c ||
              buffer[i] === 0x3e
            ) {
              this.url.query += percentEncode(buffer[i])
            } else {
              this.url.query += String.fromCodePoint(buffer[i])
            }
          }

          this.buffer = ""
          if (c === 35) {
            this.url.fragment = ""
            this.state = "fragment"
          }
        } else {
          // TODO: If c is not a URL code point and not "%", parse error.
          if (
            c === 37 &&
            (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))
          ) {
            this.parseError = true
          }

          this.buffer += cStr
        }

        return true
      }

      URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
        if (isNaN(c)) {
          // do nothing
        } else if (c === 0x0) {
          this.parseError = true
        } else {
          // TODO: If c is not a URL code point and not "%", parse error.
          if (
            c === 37 &&
            (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))
          ) {
            this.parseError = true
          }

          this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode)
        }

        return true
      }

      function serializeURL(url, excludeFragment) {
        let output = url.scheme + ":"
        if (url.host !== null) {
          output += "//"

          if (url.username !== "" || url.password !== "") {
            output += url.username
            if (url.password !== "") {
              output += ":" + url.password
            }
            output += "@"
          }

          output += serializeHost(url.host)

          if (url.port !== null) {
            output += ":" + url.port
          }
        } else if (url.host === null && url.scheme === "file") {
          output += "//"
        }

        if (url.cannotBeABaseURL) {
          output += url.path[0]
        } else {
          for (const string of url.path) {
            output += "/" + string
          }
        }

        if (url.query !== null) {
          output += "?" + url.query
        }

        if (!excludeFragment && url.fragment !== null) {
          output += "#" + url.fragment
        }

        return output
      }

      function serializeOrigin(tuple) {
        let result = tuple.scheme + "://"
        result += serializeHost(tuple.host)

        if (tuple.port !== null) {
          result += ":" + tuple.port
        }

        return result
      }

      module.exports.serializeURL = serializeURL

      module.exports.serializeURLOrigin = function (url) {
        // https://url.spec.whatwg.org/#concept-url-origin
        switch (url.scheme) {
          case "blob":
            try {
              return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]))
            } catch (e) {
              // serializing an opaque origin returns "null"
              return "null"
            }
          case "ftp":
          case "gopher":
          case "http":
          case "https":
          case "ws":
          case "wss":
            return serializeOrigin({
              scheme: url.scheme,
              host: url.host,
              port: url.port
            })
          case "file":
            // spec says "exercise to the reader", chrome says "file://"
            return "file://"
          default:
            // serializing an opaque origin returns "null"
            return "null"
        }
      }

      module.exports.basicURLParse = function (input, options) {
        if (options === undefined) {
          options = {}
        }

        const usm = new URLStateMachine(
          input,
          options.baseURL,
          options.encodingOverride,
          options.url,
          options.stateOverride
        )
        if (usm.failure) {
          return "failure"
        }

        return usm.url
      }

      module.exports.setTheUsername = function (url, username) {
        url.username = ""
        const decoded = punycode.ucs2.decode(username)
        for (let i = 0; i < decoded.length; ++i) {
          url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode)
        }
      }

      module.exports.setThePassword = function (url, password) {
        url.password = ""
        const decoded = punycode.ucs2.decode(password)
        for (let i = 0; i < decoded.length; ++i) {
          url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode)
        }
      }

      module.exports.serializeHost = serializeHost

      module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort

      module.exports.serializeInteger = function (integer) {
        return String(integer)
      }

      module.exports.parseURL = function (input, options) {
        if (options === undefined) {
          options = {}
        }

        // We don't handle blobs, so this just delegates:
        return module.exports.basicURLParse(input, {
          baseURL: options.baseURL,
          encodingOverride: options.encodingOverride
        })
      }

      /***/
    },

    /***/ 60276: /***/ (module) => {
      "use strict"

      module.exports.mixin = function mixin(target, source) {
        const keys = Object.getOwnPropertyNames(source)
        for (let i = 0; i < keys.length; ++i) {
          Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]))
        }
      }

      module.exports.wrapperSymbol = Symbol("wrapper")
      module.exports.implSymbol = Symbol("impl")

      module.exports.wrapperForImpl = function (impl) {
        return impl[module.exports.wrapperSymbol]
      }

      module.exports.implForWrapper = function (wrapper) {
        return wrapper[module.exports.implSymbol]
      }

      /***/
    },

    /***/ 20502: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const pathKey = __nccwpck_require__(20539)

      const npmRunPath = (options) => {
        options = {
          cwd: process.cwd(),
          path: process.env[pathKey()],
          execPath: process.execPath,
          ...options
        }

        let previous
        let cwdPath = path.resolve(options.cwd)
        const result = []

        while (previous !== cwdPath) {
          result.push(path.join(cwdPath, "node_modules/.bin"))
          previous = cwdPath
          cwdPath = path.resolve(cwdPath, "..")
        }

        // Ensure the running `node` binary is used
        const execPathDir = path.resolve(options.cwd, options.execPath, "..")
        result.push(execPathDir)

        return result.concat(options.path).join(path.delimiter)
      }

      module.exports = npmRunPath
      // TODO: Remove this for the next major release
      module.exports["default"] = npmRunPath

      module.exports.env = (options) => {
        options = {
          env: process.env,
          ...options
        }

        const env = { ...options.env }
        const path = pathKey({ env })

        options.path = env[path]
        env[path] = module.exports(options)

        return env
      }

      /***/
    },

    /***/ 1223: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      var wrappy = __nccwpck_require__(62940)
      module.exports = wrappy(once)
      module.exports.strict = wrappy(onceStrict)

      once.proto = once(function () {
        Object.defineProperty(Function.prototype, "once", {
          value: function () {
            return once(this)
          },
          configurable: true
        })

        Object.defineProperty(Function.prototype, "onceStrict", {
          value: function () {
            return onceStrict(this)
          },
          configurable: true
        })
      })

      function once(fn) {
        var f = function () {
          if (f.called) return f.value
          f.called = true
          return (f.value = fn.apply(this, arguments))
        }
        f.called = false
        return f
      }

      function onceStrict(fn) {
        var f = function () {
          if (f.called) throw new Error(f.onceError)
          f.called = true
          return (f.value = fn.apply(this, arguments))
        }
        var name = fn.name || "Function wrapped with `once`"
        f.onceError = name + " shouldn't be called more than once"
        f.called = false
        return f
      }

      /***/
    },

    /***/ 89082: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const mimicFn = __nccwpck_require__(76047)

      const calledFunctions = new WeakMap()

      const onetime = (function_, options = {}) => {
        if (typeof function_ !== "function") {
          throw new TypeError("Expected a function")
        }

        let returnValue
        let callCount = 0
        const functionName = function_.displayName || function_.name || "<anonymous>"

        const onetime = function (...arguments_) {
          calledFunctions.set(onetime, ++callCount)

          if (callCount === 1) {
            returnValue = function_.apply(this, arguments_)
            function_ = null
          } else if (options.throw === true) {
            throw new Error(`Function \`${functionName}\` can only be called once`)
          }

          return returnValue
        }

        mimicFn(onetime, function_)
        calledFunctions.set(onetime, callCount)

        return onetime
      }

      module.exports = onetime
      // TODO: Remove this for the next major release
      module.exports["default"] = onetime

      module.exports.callCount = (function_) => {
        if (!calledFunctions.has(function_)) {
          throw new Error(
            `The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`
          )
        }

        return calledFunctions.get(function_)
      }

      /***/
    },

    /***/ 79069: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const callsites = __nccwpck_require__(5018)

      module.exports = (filepath) => {
        const stacks = callsites()

        if (!filepath) {
          return stacks[2].getFileName()
        }

        let seenVal = false

        // Skip the first stack as it's this function
        stacks.shift()

        for (const stack of stacks) {
          const parentFilepath = stack.getFileName()

          if (typeof parentFilepath !== "string") {
            continue
          }

          if (parentFilepath === filepath) {
            seenVal = true
            continue
          }

          // Skip native modules
          if (parentFilepath === "module.js") {
            continue
          }

          if (seenVal && parentFilepath !== filepath) {
            return parentFilepath
          }
        }
      }

      /***/
    },

    /***/ 86615: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const errorEx = __nccwpck_require__(23505)
      const fallback = __nccwpck_require__(89062)
      const { default: LinesAndColumns } = __nccwpck_require__(3042)
      const { codeFrameColumns } = __nccwpck_require__(45211)

      const JSONError = errorEx("JSONError", {
        fileName: errorEx.append("in %s"),
        codeFrame: errorEx.append("\n\n%s\n")
      })

      const parseJson = (string, reviver, filename) => {
        if (typeof reviver === "string") {
          filename = reviver
          reviver = null
        }

        try {
          try {
            return JSON.parse(string, reviver)
          } catch (error) {
            fallback(string, reviver)
            throw error
          }
        } catch (error) {
          error.message = error.message.replace(/\n/g, "")
          const indexMatch = error.message.match(/in JSON at position (\d+) while parsing/)

          const jsonError = new JSONError(error)
          if (filename) {
            jsonError.fileName = filename
          }

          if (indexMatch && indexMatch.length > 0) {
            const lines = new LinesAndColumns(string)
            const index = Number(indexMatch[1])
            const location = lines.locationForIndex(index)

            const codeFrame = codeFrameColumns(
              string,
              { start: { line: location.line + 1, column: location.column + 1 } },
              { highlightCode: true }
            )

            jsonError.codeFrame = codeFrame
          }

          throw jsonError
        }
      }

      parseJson.JSONError = JSONError

      module.exports = parseJson

      /***/
    },

    /***/ 20539: /***/ (module) => {
      "use strict"

      const pathKey = (options = {}) => {
        const environment = options.env || process.env
        const platform = options.platform || process.platform

        if (platform !== "win32") {
          return "PATH"
        }

        return (
          Object.keys(environment)
            .reverse()
            .find((key) => key.toUpperCase() === "PATH") || "Path"
        )
      }

      module.exports = pathKey
      // TODO: Remove this for the next major release
      module.exports["default"] = pathKey

      /***/
    },

    /***/ 63433: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      const { promisify } = __nccwpck_require__(73837)
      const fs = __nccwpck_require__(57147)

      async function isType(fsStatType, statsMethodName, filePath) {
        if (typeof filePath !== "string") {
          throw new TypeError(`Expected a string, got ${typeof filePath}`)
        }

        try {
          const stats = await promisify(fs[fsStatType])(filePath)
          return stats[statsMethodName]()
        } catch (error) {
          if (error.code === "ENOENT") {
            return false
          }

          throw error
        }
      }

      function isTypeSync(fsStatType, statsMethodName, filePath) {
        if (typeof filePath !== "string") {
          throw new TypeError(`Expected a string, got ${typeof filePath}`)
        }

        try {
          return fs[fsStatType](filePath)[statsMethodName]()
        } catch (error) {
          if (error.code === "ENOENT") {
            return false
          }

          throw error
        }
      }

      exports.isFile = isType.bind(null, "stat", "isFile")
      exports.isDirectory = isType.bind(null, "stat", "isDirectory")
      exports.isSymlink = isType.bind(null, "lstat", "isSymbolicLink")
      exports.isFileSync = isTypeSync.bind(null, "statSync", "isFile")
      exports.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory")
      exports.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink")

      /***/
    },

    /***/ 78569: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      module.exports = __nccwpck_require__(33322)

      /***/
    },

    /***/ 16099: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const WIN_SLASH = "\\\\/"
      const WIN_NO_SLASH = `[^${WIN_SLASH}]`

      /**
       * Posix glob regex
       */

      const DOT_LITERAL = "\\."
      const PLUS_LITERAL = "\\+"
      const QMARK_LITERAL = "\\?"
      const SLASH_LITERAL = "\\/"
      const ONE_CHAR = "(?=.)"
      const QMARK = "[^/]"
      const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`
      const START_ANCHOR = `(?:^|${SLASH_LITERAL})`
      const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`
      const NO_DOT = `(?!${DOT_LITERAL})`
      const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`
      const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`
      const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`
      const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`
      const STAR = `${QMARK}*?`

      const POSIX_CHARS = {
        DOT_LITERAL,
        PLUS_LITERAL,
        QMARK_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        QMARK,
        END_ANCHOR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      }

      /**
       * Windows glob regex
       */

      const WINDOWS_CHARS = {
        ...POSIX_CHARS,

        SLASH_LITERAL: `[${WIN_SLASH}]`,
        QMARK: WIN_NO_SLASH,
        STAR: `${WIN_NO_SLASH}*?`,
        DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
        NO_DOT: `(?!${DOT_LITERAL})`,
        NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
        NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
        START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
        END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
      }

      /**
       * POSIX Bracket Regex
       */

      const POSIX_REGEX_SOURCE = {
        alnum: "a-zA-Z0-9",
        alpha: "a-zA-Z",
        ascii: "\\x00-\\x7F",
        blank: " \\t",
        cntrl: "\\x00-\\x1F\\x7F",
        digit: "0-9",
        graph: "\\x21-\\x7E",
        lower: "a-z",
        print: "\\x20-\\x7E ",
        punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
        space: " \\t\\r\\n\\v\\f",
        upper: "A-Z",
        word: "A-Za-z0-9_",
        xdigit: "A-Fa-f0-9"
      }

      module.exports = {
        MAX_LENGTH: 1024 * 64,
        POSIX_REGEX_SOURCE,

        // regular expressions
        REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
        REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
        REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
        REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
        REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
        REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

        // Replace globs with equivalent patterns to reduce parsing time.
        REPLACEMENTS: {
          "***": "*",
          "**/**": "**",
          "**/**/**": "**"
        },

        // Digits
        CHAR_0: 48 /* 0 */,
        CHAR_9: 57 /* 9 */,

        // Alphabet chars.
        CHAR_UPPERCASE_A: 65 /* A */,
        CHAR_LOWERCASE_A: 97 /* a */,
        CHAR_UPPERCASE_Z: 90 /* Z */,
        CHAR_LOWERCASE_Z: 122 /* z */,

        CHAR_LEFT_PARENTHESES: 40 /* ( */,
        CHAR_RIGHT_PARENTHESES: 41 /* ) */,

        CHAR_ASTERISK: 42 /* * */,

        // Non-alphabetic chars.
        CHAR_AMPERSAND: 38 /* & */,
        CHAR_AT: 64 /* @ */,
        CHAR_BACKWARD_SLASH: 92 /* \ */,
        CHAR_CARRIAGE_RETURN: 13 /* \r */,
        CHAR_CIRCUMFLEX_ACCENT: 94 /* ^ */,
        CHAR_COLON: 58 /* : */,
        CHAR_COMMA: 44 /* , */,
        CHAR_DOT: 46 /* . */,
        CHAR_DOUBLE_QUOTE: 34 /* " */,
        CHAR_EQUAL: 61 /* = */,
        CHAR_EXCLAMATION_MARK: 33 /* ! */,
        CHAR_FORM_FEED: 12 /* \f */,
        CHAR_FORWARD_SLASH: 47 /* / */,
        CHAR_GRAVE_ACCENT: 96 /* ` */,
        CHAR_HASH: 35 /* # */,
        CHAR_HYPHEN_MINUS: 45 /* - */,
        CHAR_LEFT_ANGLE_BRACKET: 60 /* < */,
        CHAR_LEFT_CURLY_BRACE: 123 /* { */,
        CHAR_LEFT_SQUARE_BRACKET: 91 /* [ */,
        CHAR_LINE_FEED: 10 /* \n */,
        CHAR_NO_BREAK_SPACE: 160 /* \u00A0 */,
        CHAR_PERCENT: 37 /* % */,
        CHAR_PLUS: 43 /* + */,
        CHAR_QUESTION_MARK: 63 /* ? */,
        CHAR_RIGHT_ANGLE_BRACKET: 62 /* > */,
        CHAR_RIGHT_CURLY_BRACE: 125 /* } */,
        CHAR_RIGHT_SQUARE_BRACKET: 93 /* ] */,
        CHAR_SEMICOLON: 59 /* ; */,
        CHAR_SINGLE_QUOTE: 39 /* ' */,
        CHAR_SPACE: 32 /*   */,
        CHAR_TAB: 9 /* \t */,
        CHAR_UNDERSCORE: 95 /* _ */,
        CHAR_VERTICAL_LINE: 124 /* | */,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279 /* \uFEFF */,

        SEP: path.sep,

        /**
         * Create EXTGLOB_CHARS
         */

        extglobChars(chars) {
          return {
            "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
            "?": { type: "qmark", open: "(?:", close: ")?" },
            "+": { type: "plus", open: "(?:", close: ")+" },
            "*": { type: "star", open: "(?:", close: ")*" },
            "@": { type: "at", open: "(?:", close: ")" }
          }
        },

        /**
         * Create GLOB_CHARS
         */

        globChars(win32) {
          return win32 === true ? WINDOWS_CHARS : POSIX_CHARS
        }
      }

      /***/
    },

    /***/ 92139: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const constants = __nccwpck_require__(16099)
      const utils = __nccwpck_require__(30479)

      /**
       * Constants
       */

      const {
        MAX_LENGTH,
        POSIX_REGEX_SOURCE,
        REGEX_NON_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_BACKREF,
        REPLACEMENTS
      } = constants

      /**
       * Helpers
       */

      const expandRange = (args, options) => {
        if (typeof options.expandRange === "function") {
          return options.expandRange(...args, options)
        }

        args.sort()
        const value = `[${args.join("-")}]`

        try {
          /* eslint-disable-next-line no-new */
          new RegExp(value)
        } catch (ex) {
          return args.map((v) => utils.escapeRegex(v)).join("..")
        }

        return value
      }

      /**
       * Create the message for a syntax error
       */

      const syntaxError = (type, char) => {
        return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`
      }

      /**
       * Parse the given input string.
       * @param {String} input
       * @param {Object} options
       * @return {Object}
       */

      const parse = (input, options) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string")
        }

        input = REPLACEMENTS[input] || input

        const opts = { ...options }
        const max =
          typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH

        let len = input.length
        if (len > max) {
          throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`)
        }

        const bos = { type: "bos", value: "", output: opts.prepend || "" }
        const tokens = [bos]

        const capture = opts.capture ? "" : "?:"
        const win32 = utils.isWindows(options)

        // create constants based on platform, for windows or posix
        const PLATFORM_CHARS = constants.globChars(win32)
        const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS)

        const {
          DOT_LITERAL,
          PLUS_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOT_SLASH,
          NO_DOTS_SLASH,
          QMARK,
          QMARK_NO_DOT,
          STAR,
          START_ANCHOR
        } = PLATFORM_CHARS

        const globstar = (opts) => {
          return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`
        }

        const nodot = opts.dot ? "" : NO_DOT
        const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT
        let star = opts.bash === true ? globstar(opts) : STAR

        if (opts.capture) {
          star = `(${star})`
        }

        // minimatch options support
        if (typeof opts.noext === "boolean") {
          opts.noextglob = opts.noext
        }

        const state = {
          input,
          index: -1,
          start: 0,
          dot: opts.dot === true,
          consumed: "",
          output: "",
          prefix: "",
          backtrack: false,
          negated: false,
          brackets: 0,
          braces: 0,
          parens: 0,
          quotes: 0,
          globstar: false,
          tokens
        }

        input = utils.removePrefix(input, state)
        len = input.length

        const extglobs = []
        const braces = []
        const stack = []
        let prev = bos
        let value

        /**
         * Tokenizing helpers
         */

        const eos = () => state.index === len - 1
        const peek = (state.peek = (n = 1) => input[state.index + n])
        const advance = (state.advance = () => input[++state.index] || "")
        const remaining = () => input.slice(state.index + 1)
        const consume = (value = "", num = 0) => {
          state.consumed += value
          state.index += num
        }

        const append = (token) => {
          state.output += token.output != null ? token.output : token.value
          consume(token.value)
        }

        const negate = () => {
          let count = 1

          while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
            advance()
            state.start++
            count++
          }

          if (count % 2 === 0) {
            return false
          }

          state.negated = true
          state.start++
          return true
        }

        const increment = (type) => {
          state[type]++
          stack.push(type)
        }

        const decrement = (type) => {
          state[type]--
          stack.pop()
        }

        /**
         * Push tokens onto the tokens array. This helper speeds up
         * tokenizing by 1) helping us avoid backtracking as much as possible,
         * and 2) helping us avoid creating extra tokens when consecutive
         * characters are plain text. This improves performance and simplifies
         * lookbehinds.
         */

        const push = (tok) => {
          if (prev.type === "globstar") {
            const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace")
            const isExtglob =
              tok.extglob === true ||
              (extglobs.length && (tok.type === "pipe" || tok.type === "paren"))

            if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
              state.output = state.output.slice(0, -prev.output.length)
              prev.type = "star"
              prev.value = "*"
              prev.output = star
              state.output += prev.output
            }
          }

          if (extglobs.length && tok.type !== "paren") {
            extglobs[extglobs.length - 1].inner += tok.value
          }

          if (tok.value || tok.output) append(tok)
          if (prev && prev.type === "text" && tok.type === "text") {
            prev.value += tok.value
            prev.output = (prev.output || "") + tok.value
            return
          }

          tok.prev = prev
          tokens.push(tok)
          prev = tok
        }

        const extglobOpen = (type, value) => {
          const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: "" }

          token.prev = prev
          token.parens = state.parens
          token.output = state.output
          const output = (opts.capture ? "(" : "") + token.open

          increment("parens")
          push({ type, value, output: state.output ? "" : ONE_CHAR })
          push({ type: "paren", extglob: true, value: advance(), output })
          extglobs.push(token)
        }

        const extglobClose = (token) => {
          let output = token.close + (opts.capture ? ")" : "")
          let rest

          if (token.type === "negate") {
            let extglobStar = star

            if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
              extglobStar = globstar(opts)
            }

            if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
              output = token.close = `)$))${extglobStar}`
            }

            if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
              // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.
              // In this case, we need to parse the string and use it in the output of the original pattern.
              // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.
              //
              // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.
              const expression = parse(rest, { ...options, fastpaths: false }).output

              output = token.close = `)${expression})${extglobStar})`
            }

            if (token.prev.type === "bos") {
              state.negatedExtglob = true
            }
          }

          push({ type: "paren", extglob: true, value, output })
          decrement("parens")
        }

        /**
         * Fast paths
         */

        if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
          let backslashes = false

          let output = input.replace(
            REGEX_SPECIAL_CHARS_BACKREF,
            (m, esc, chars, first, rest, index) => {
              if (first === "\\") {
                backslashes = true
                return m
              }

              if (first === "?") {
                if (esc) {
                  return esc + first + (rest ? QMARK.repeat(rest.length) : "")
                }
                if (index === 0) {
                  return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "")
                }
                return QMARK.repeat(chars.length)
              }

              if (first === ".") {
                return DOT_LITERAL.repeat(chars.length)
              }

              if (first === "*") {
                if (esc) {
                  return esc + first + (rest ? star : "")
                }
                return star
              }
              return esc ? m : `\\${m}`
            }
          )

          if (backslashes === true) {
            if (opts.unescape === true) {
              output = output.replace(/\\/g, "")
            } else {
              output = output.replace(/\\+/g, (m) => {
                return m.length % 2 === 0 ? "\\\\" : m ? "\\" : ""
              })
            }
          }

          if (output === input && opts.contains === true) {
            state.output = input
            return state
          }

          state.output = utils.wrapOutput(output, state, options)
          return state
        }

        /**
         * Tokenize input until we reach end-of-string
         */

        while (!eos()) {
          value = advance()

          if (value === "\u0000") {
            continue
          }

          /**
           * Escaped characters
           */

          if (value === "\\") {
            const next = peek()

            if (next === "/" && opts.bash !== true) {
              continue
            }

            if (next === "." || next === ";") {
              continue
            }

            if (!next) {
              value += "\\"
              push({ type: "text", value })
              continue
            }

            // collapse slashes to reduce potential for exploits
            const match = /^\\+/.exec(remaining())
            let slashes = 0

            if (match && match[0].length > 2) {
              slashes = match[0].length
              state.index += slashes
              if (slashes % 2 !== 0) {
                value += "\\"
              }
            }

            if (opts.unescape === true) {
              value = advance()
            } else {
              value += advance()
            }

            if (state.brackets === 0) {
              push({ type: "text", value })
              continue
            }
          }

          /**
           * If we're inside a regex character class, continue
           * until we reach the closing bracket.
           */

          if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
            if (opts.posix !== false && value === ":") {
              const inner = prev.value.slice(1)
              if (inner.includes("[")) {
                prev.posix = true

                if (inner.includes(":")) {
                  const idx = prev.value.lastIndexOf("[")
                  const pre = prev.value.slice(0, idx)
                  const rest = prev.value.slice(idx + 2)
                  const posix = POSIX_REGEX_SOURCE[rest]
                  if (posix) {
                    prev.value = pre + posix
                    state.backtrack = true
                    advance()

                    if (!bos.output && tokens.indexOf(prev) === 1) {
                      bos.output = ONE_CHAR
                    }
                    continue
                  }
                }
              }
            }

            if ((value === "[" && peek() !== ":") || (value === "-" && peek() === "]")) {
              value = `\\${value}`
            }

            if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
              value = `\\${value}`
            }

            if (opts.posix === true && value === "!" && prev.value === "[") {
              value = "^"
            }

            prev.value += value
            append({ value })
            continue
          }

          /**
           * If we're inside a quoted string, continue
           * until we reach the closing double quote.
           */

          if (state.quotes === 1 && value !== '"') {
            value = utils.escapeRegex(value)
            prev.value += value
            append({ value })
            continue
          }

          /**
           * Double quotes
           */

          if (value === '"') {
            state.quotes = state.quotes === 1 ? 0 : 1
            if (opts.keepQuotes === true) {
              push({ type: "text", value })
            }
            continue
          }

          /**
           * Parentheses
           */

          if (value === "(") {
            increment("parens")
            push({ type: "paren", value })
            continue
          }

          if (value === ")") {
            if (state.parens === 0 && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "("))
            }

            const extglob = extglobs[extglobs.length - 1]
            if (extglob && state.parens === extglob.parens + 1) {
              extglobClose(extglobs.pop())
              continue
            }

            push({ type: "paren", value, output: state.parens ? ")" : "\\)" })
            decrement("parens")
            continue
          }

          /**
           * Square brackets
           */

          if (value === "[") {
            if (opts.nobracket === true || !remaining().includes("]")) {
              if (opts.nobracket !== true && opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("closing", "]"))
              }

              value = `\\${value}`
            } else {
              increment("brackets")
            }

            push({ type: "bracket", value })
            continue
          }

          if (value === "]") {
            if (
              opts.nobracket === true ||
              (prev && prev.type === "bracket" && prev.value.length === 1)
            ) {
              push({ type: "text", value, output: `\\${value}` })
              continue
            }

            if (state.brackets === 0) {
              if (opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("opening", "["))
              }

              push({ type: "text", value, output: `\\${value}` })
              continue
            }

            decrement("brackets")

            const prevValue = prev.value.slice(1)
            if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
              value = `/${value}`
            }

            prev.value += value
            append({ value })

            // when literal brackets are explicitly disabled
            // assume we should match with a regex character class
            if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
              continue
            }

            const escaped = utils.escapeRegex(prev.value)
            state.output = state.output.slice(0, -prev.value.length)

            // when literal brackets are explicitly enabled
            // assume we should escape the brackets to match literal characters
            if (opts.literalBrackets === true) {
              state.output += escaped
              prev.value = escaped
              continue
            }

            // when the user specifies nothing, try to match both
            prev.value = `(${capture}${escaped}|${prev.value})`
            state.output += prev.value
            continue
          }

          /**
           * Braces
           */

          if (value === "{" && opts.nobrace !== true) {
            increment("braces")

            const open = {
              type: "brace",
              value,
              output: "(",
              outputIndex: state.output.length,
              tokensIndex: state.tokens.length
            }

            braces.push(open)
            push(open)
            continue
          }

          if (value === "}") {
            const brace = braces[braces.length - 1]

            if (opts.nobrace === true || !brace) {
              push({ type: "text", value, output: value })
              continue
            }

            let output = ")"

            if (brace.dots === true) {
              const arr = tokens.slice()
              const range = []

              for (let i = arr.length - 1; i >= 0; i--) {
                tokens.pop()
                if (arr[i].type === "brace") {
                  break
                }
                if (arr[i].type !== "dots") {
                  range.unshift(arr[i].value)
                }
              }

              output = expandRange(range, opts)
              state.backtrack = true
            }

            if (brace.comma !== true && brace.dots !== true) {
              const out = state.output.slice(0, brace.outputIndex)
              const toks = state.tokens.slice(brace.tokensIndex)
              brace.value = brace.output = "\\{"
              value = output = "\\}"
              state.output = out
              for (const t of toks) {
                state.output += t.output || t.value
              }
            }

            push({ type: "brace", value, output })
            decrement("braces")
            braces.pop()
            continue
          }

          /**
           * Pipes
           */

          if (value === "|") {
            if (extglobs.length > 0) {
              extglobs[extglobs.length - 1].conditions++
            }
            push({ type: "text", value })
            continue
          }

          /**
           * Commas
           */

          if (value === ",") {
            let output = value

            const brace = braces[braces.length - 1]
            if (brace && stack[stack.length - 1] === "braces") {
              brace.comma = true
              output = "|"
            }

            push({ type: "comma", value, output })
            continue
          }

          /**
           * Slashes
           */

          if (value === "/") {
            // if the beginning of the glob is "./", advance the start
            // to the current index, and don't add the "./" characters
            // to the state. This greatly simplifies lookbehinds when
            // checking for BOS characters like "!" and "." (not "./")
            if (prev.type === "dot" && state.index === state.start + 1) {
              state.start = state.index + 1
              state.consumed = ""
              state.output = ""
              tokens.pop()
              prev = bos // reset "prev" to the first token
              continue
            }

            push({ type: "slash", value, output: SLASH_LITERAL })
            continue
          }

          /**
           * Dots
           */

          if (value === ".") {
            if (state.braces > 0 && prev.type === "dot") {
              if (prev.value === ".") prev.output = DOT_LITERAL
              const brace = braces[braces.length - 1]
              prev.type = "dots"
              prev.output += value
              prev.value += value
              brace.dots = true
              continue
            }

            if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
              push({ type: "text", value, output: DOT_LITERAL })
              continue
            }

            push({ type: "dot", value, output: DOT_LITERAL })
            continue
          }

          /**
           * Question marks
           */

          if (value === "?") {
            const isGroup = prev && prev.value === "("
            if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              extglobOpen("qmark", value)
              continue
            }

            if (prev && prev.type === "paren") {
              const next = peek()
              let output = value

              if (next === "<" && !utils.supportsLookbehinds()) {
                throw new Error("Node.js v10 or higher is required for regex lookbehinds")
              }

              if (
                (prev.value === "(" && !/[!=<:]/.test(next)) ||
                (next === "<" && !/<([!=]|\w+>)/.test(remaining()))
              ) {
                output = `\\${value}`
              }

              push({ type: "text", value, output })
              continue
            }

            if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
              push({ type: "qmark", value, output: QMARK_NO_DOT })
              continue
            }

            push({ type: "qmark", value, output: QMARK })
            continue
          }

          /**
           * Exclamation
           */

          if (value === "!") {
            if (opts.noextglob !== true && peek() === "(") {
              if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
                extglobOpen("negate", value)
                continue
              }
            }

            if (opts.nonegate !== true && state.index === 0) {
              negate()
              continue
            }
          }

          /**
           * Plus
           */

          if (value === "+") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              extglobOpen("plus", value)
              continue
            }

            if ((prev && prev.value === "(") || opts.regex === false) {
              push({ type: "plus", value, output: PLUS_LITERAL })
              continue
            }

            if (
              (prev &&
                (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace")) ||
              state.parens > 0
            ) {
              push({ type: "plus", value })
              continue
            }

            push({ type: "plus", value: PLUS_LITERAL })
            continue
          }

          /**
           * Plain text
           */

          if (value === "@") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              push({ type: "at", extglob: true, value, output: "" })
              continue
            }

            push({ type: "text", value })
            continue
          }

          /**
           * Plain text
           */

          if (value !== "*") {
            if (value === "$" || value === "^") {
              value = `\\${value}`
            }

            const match = REGEX_NON_SPECIAL_CHARS.exec(remaining())
            if (match) {
              value += match[0]
              state.index += match[0].length
            }

            push({ type: "text", value })
            continue
          }

          /**
           * Stars
           */

          if (prev && (prev.type === "globstar" || prev.star === true)) {
            prev.type = "star"
            prev.star = true
            prev.value += value
            prev.output = star
            state.backtrack = true
            state.globstar = true
            consume(value)
            continue
          }

          let rest = remaining()
          if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
            extglobOpen("star", value)
            continue
          }

          if (prev.type === "star") {
            if (opts.noglobstar === true) {
              consume(value)
              continue
            }

            const prior = prev.prev
            const before = prior.prev
            const isStart = prior.type === "slash" || prior.type === "bos"
            const afterStar = before && (before.type === "star" || before.type === "globstar")

            if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== "/"))) {
              push({ type: "star", value, output: "" })
              continue
            }

            const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace")
            const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren")
            if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
              push({ type: "star", value, output: "" })
              continue
            }

            // strip consecutive `/**/`
            while (rest.slice(0, 3) === "/**") {
              const after = input[state.index + 4]
              if (after && after !== "/") {
                break
              }
              rest = rest.slice(3)
              consume("/**", 3)
            }

            if (prior.type === "bos" && eos()) {
              prev.type = "globstar"
              prev.value += value
              prev.output = globstar(opts)
              state.output = prev.output
              state.globstar = true
              consume(value)
              continue
            }

            if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
              state.output = state.output.slice(0, -(prior.output + prev.output).length)
              prior.output = `(?:${prior.output}`

              prev.type = "globstar"
              prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)")
              prev.value += value
              state.globstar = true
              state.output += prior.output + prev.output
              consume(value)
              continue
            }

            if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
              const end = rest[1] !== void 0 ? "|$" : ""

              state.output = state.output.slice(0, -(prior.output + prev.output).length)
              prior.output = `(?:${prior.output}`

              prev.type = "globstar"
              prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`
              prev.value += value

              state.output += prior.output + prev.output
              state.globstar = true

              consume(value + advance())

              push({ type: "slash", value: "/", output: "" })
              continue
            }

            if (prior.type === "bos" && rest[0] === "/") {
              prev.type = "globstar"
              prev.value += value
              prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`
              state.output = prev.output
              state.globstar = true
              consume(value + advance())
              push({ type: "slash", value: "/", output: "" })
              continue
            }

            // remove single star from output
            state.output = state.output.slice(0, -prev.output.length)

            // reset previous token to globstar
            prev.type = "globstar"
            prev.output = globstar(opts)
            prev.value += value

            // reset output with globstar
            state.output += prev.output
            state.globstar = true
            consume(value)
            continue
          }

          const token = { type: "star", value, output: star }

          if (opts.bash === true) {
            token.output = ".*?"
            if (prev.type === "bos" || prev.type === "slash") {
              token.output = nodot + token.output
            }
            push(token)
            continue
          }

          if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
            token.output = value
            push(token)
            continue
          }

          if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
            if (prev.type === "dot") {
              state.output += NO_DOT_SLASH
              prev.output += NO_DOT_SLASH
            } else if (opts.dot === true) {
              state.output += NO_DOTS_SLASH
              prev.output += NO_DOTS_SLASH
            } else {
              state.output += nodot
              prev.output += nodot
            }

            if (peek() !== "*") {
              state.output += ONE_CHAR
              prev.output += ONE_CHAR
            }
          }

          push(token)
        }

        while (state.brackets > 0) {
          if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"))
          state.output = utils.escapeLast(state.output, "[")
          decrement("brackets")
        }

        while (state.parens > 0) {
          if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"))
          state.output = utils.escapeLast(state.output, "(")
          decrement("parens")
        }

        while (state.braces > 0) {
          if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"))
          state.output = utils.escapeLast(state.output, "{")
          decrement("braces")
        }

        if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
          push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` })
        }

        // rebuild the output if we had to backtrack at any point
        if (state.backtrack === true) {
          state.output = ""

          for (const token of state.tokens) {
            state.output += token.output != null ? token.output : token.value

            if (token.suffix) {
              state.output += token.suffix
            }
          }
        }

        return state
      }

      /**
       * Fast paths for creating regular expressions for common glob patterns.
       * This can significantly speed up processing and has very little downside
       * impact when none of the fast paths match.
       */

      parse.fastpaths = (input, options) => {
        const opts = { ...options }
        const max =
          typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH
        const len = input.length
        if (len > max) {
          throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`)
        }

        input = REPLACEMENTS[input] || input
        const win32 = utils.isWindows(options)

        // create constants based on platform, for windows or posix
        const {
          DOT_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOTS,
          NO_DOTS_SLASH,
          STAR,
          START_ANCHOR
        } = constants.globChars(win32)

        const nodot = opts.dot ? NO_DOTS : NO_DOT
        const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT
        const capture = opts.capture ? "" : "?:"
        const state = { negated: false, prefix: "" }
        let star = opts.bash === true ? ".*?" : STAR

        if (opts.capture) {
          star = `(${star})`
        }

        const globstar = (opts) => {
          if (opts.noglobstar === true) return star
          return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`
        }

        const create = (str) => {
          switch (str) {
            case "*":
              return `${nodot}${ONE_CHAR}${star}`

            case ".*":
              return `${DOT_LITERAL}${ONE_CHAR}${star}`

            case "*.*":
              return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`

            case "*/*":
              return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`

            case "**":
              return nodot + globstar(opts)

            case "**/*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`

            case "**/*.*":
              return `(?:${nodot}${globstar(
                opts
              )}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`

            case "**/.*":
              return `(?:${nodot}${globstar(
                opts
              )}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`

            default: {
              const match = /^(.*?)\.(\w+)$/.exec(str)
              if (!match) return

              const source = create(match[1])
              if (!source) return

              return source + DOT_LITERAL + match[2]
            }
          }
        }

        const output = utils.removePrefix(input, state)
        let source = create(output)

        if (source && opts.strictSlashes !== true) {
          source += `${SLASH_LITERAL}?`
        }

        return source
      }

      module.exports = parse

      /***/
    },

    /***/ 33322: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const scan = __nccwpck_require__(32429)
      const parse = __nccwpck_require__(92139)
      const utils = __nccwpck_require__(30479)
      const constants = __nccwpck_require__(16099)
      const isObject = (val) => val && typeof val === "object" && !Array.isArray(val)

      /**
       * Creates a matcher function from one or more glob patterns. The
       * returned function takes a string to match as its first argument,
       * and returns true if the string is a match. The returned matcher
       * function also takes a boolean as the second argument that, when true,
       * returns an object with additional information.
       *
       * ```js
       * const picomatch = require('picomatch');
       * // picomatch(glob[, options]);
       *
       * const isMatch = picomatch('*.!(*a)');
       * console.log(isMatch('a.a')); //=> false
       * console.log(isMatch('a.b')); //=> true
       * ```
       * @name picomatch
       * @param {String|Array} `globs` One or more glob patterns.
       * @param {Object=} `options`
       * @return {Function=} Returns a matcher function.
       * @api public
       */

      const picomatch = (glob, options, returnState = false) => {
        if (Array.isArray(glob)) {
          const fns = glob.map((input) => picomatch(input, options, returnState))
          const arrayMatcher = (str) => {
            for (const isMatch of fns) {
              const state = isMatch(str)
              if (state) return state
            }
            return false
          }
          return arrayMatcher
        }

        const isState = isObject(glob) && glob.tokens && glob.input

        if (glob === "" || (typeof glob !== "string" && !isState)) {
          throw new TypeError("Expected pattern to be a non-empty string")
        }

        const opts = options || {}
        const posix = utils.isWindows(options)
        const regex = isState
          ? picomatch.compileRe(glob, options)
          : picomatch.makeRe(glob, options, false, true)

        const state = regex.state
        delete regex.state

        let isIgnored = () => false
        if (opts.ignore) {
          const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null }
          isIgnored = picomatch(opts.ignore, ignoreOpts, returnState)
        }

        const matcher = (input, returnObject = false) => {
          const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix })
          const result = { glob, state, regex, posix, input, output, match, isMatch }

          if (typeof opts.onResult === "function") {
            opts.onResult(result)
          }

          if (isMatch === false) {
            result.isMatch = false
            return returnObject ? result : false
          }

          if (isIgnored(input)) {
            if (typeof opts.onIgnore === "function") {
              opts.onIgnore(result)
            }
            result.isMatch = false
            return returnObject ? result : false
          }

          if (typeof opts.onMatch === "function") {
            opts.onMatch(result)
          }
          return returnObject ? result : true
        }

        if (returnState) {
          matcher.state = state
        }

        return matcher
      }

      /**
       * Test `input` with the given `regex`. This is used by the main
       * `picomatch()` function to test the input string.
       *
       * ```js
       * const picomatch = require('picomatch');
       * // picomatch.test(input, regex[, options]);
       *
       * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
       * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
       * ```
       * @param {String} `input` String to test.
       * @param {RegExp} `regex`
       * @return {Object} Returns an object with matching info.
       * @api public
       */

      picomatch.test = (input, regex, options, { glob, posix } = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected input to be a string")
        }

        if (input === "") {
          return { isMatch: false, output: "" }
        }

        const opts = options || {}
        const format = opts.format || (posix ? utils.toPosixSlashes : null)
        let match = input === glob
        let output = match && format ? format(input) : input

        if (match === false) {
          output = format ? format(input) : input
          match = output === glob
        }

        if (match === false || opts.capture === true) {
          if (opts.matchBase === true || opts.basename === true) {
            match = picomatch.matchBase(input, regex, options, posix)
          } else {
            match = regex.exec(output)
          }
        }

        return { isMatch: Boolean(match), match, output }
      }

      /**
       * Match the basename of a filepath.
       *
       * ```js
       * const picomatch = require('picomatch');
       * // picomatch.matchBase(input, glob[, options]);
       * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
       * ```
       * @param {String} `input` String to test.
       * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
       * @return {Boolean}
       * @api public
       */

      picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
        const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options)
        return regex.test(path.basename(input))
      }

      /**
       * Returns true if **any** of the given glob `patterns` match the specified `string`.
       *
       * ```js
       * const picomatch = require('picomatch');
       * // picomatch.isMatch(string, patterns[, options]);
       *
       * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
       * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
       * ```
       * @param {String|Array} str The string to test.
       * @param {String|Array} patterns One or more glob patterns to use for matching.
       * @param {Object} [options] See available [options](#options).
       * @return {Boolean} Returns true if any patterns match `str`
       * @api public
       */

      picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str)

      /**
       * Parse a glob pattern to create the source string for a regular
       * expression.
       *
       * ```js
       * const picomatch = require('picomatch');
       * const result = picomatch.parse(pattern[, options]);
       * ```
       * @param {String} `pattern`
       * @param {Object} `options`
       * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
       * @api public
       */

      picomatch.parse = (pattern, options) => {
        if (Array.isArray(pattern)) return pattern.map((p) => picomatch.parse(p, options))
        return parse(pattern, { ...options, fastpaths: false })
      }

      /**
       * Scan a glob pattern to separate the pattern into segments.
       *
       * ```js
       * const picomatch = require('picomatch');
       * // picomatch.scan(input[, options]);
       *
       * const result = picomatch.scan('!./foo/*.js');
       * console.log(result);
       * { prefix: '!./',
       *   input: '!./foo/*.js',
       *   start: 3,
       *   base: 'foo',
       *   glob: '*.js',
       *   isBrace: false,
       *   isBracket: false,
       *   isGlob: true,
       *   isExtglob: false,
       *   isGlobstar: false,
       *   negated: true }
       * ```
       * @param {String} `input` Glob pattern to scan.
       * @param {Object} `options`
       * @return {Object} Returns an object with
       * @api public
       */

      picomatch.scan = (input, options) => scan(input, options)

      /**
       * Compile a regular expression from the `state` object returned by the
       * [parse()](#parse) method.
       *
       * @param {Object} `state`
       * @param {Object} `options`
       * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
       * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
       * @return {RegExp}
       * @api public
       */

      picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
        if (returnOutput === true) {
          return state.output
        }

        const opts = options || {}
        const prepend = opts.contains ? "" : "^"
        const append = opts.contains ? "" : "$"

        let source = `${prepend}(?:${state.output})${append}`
        if (state && state.negated === true) {
          source = `^(?!${source}).*$`
        }

        const regex = picomatch.toRegex(source, options)
        if (returnState === true) {
          regex.state = state
        }

        return regex
      }

      /**
       * Create a regular expression from a parsed glob pattern.
       *
       * ```js
       * const picomatch = require('picomatch');
       * const state = picomatch.parse('*.js');
       * // picomatch.compileRe(state[, options]);
       *
       * console.log(picomatch.compileRe(state));
       * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
       * ```
       * @param {String} `state` The object returned from the `.parse` method.
       * @param {Object} `options`
       * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
       * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
       * @return {RegExp} Returns a regex created from the given pattern.
       * @api public
       */

      picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
        if (!input || typeof input !== "string") {
          throw new TypeError("Expected a non-empty string")
        }

        let parsed = { negated: false, fastpaths: true }

        if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
          parsed.output = parse.fastpaths(input, options)
        }

        if (!parsed.output) {
          parsed = parse(input, options)
        }

        return picomatch.compileRe(parsed, options, returnOutput, returnState)
      }

      /**
       * Create a regular expression from the given regex source string.
       *
       * ```js
       * const picomatch = require('picomatch');
       * // picomatch.toRegex(source[, options]);
       *
       * const { output } = picomatch.parse('*.js');
       * console.log(picomatch.toRegex(output));
       * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
       * ```
       * @param {String} `source` Regular expression source string.
       * @param {Object} `options`
       * @return {RegExp}
       * @api public
       */

      picomatch.toRegex = (source, options) => {
        try {
          const opts = options || {}
          return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""))
        } catch (err) {
          if (options && options.debug === true) throw err
          return /$^/
        }
      }

      /**
       * Picomatch constants.
       * @return {Object}
       */

      picomatch.constants = constants

      /**
       * Expose "picomatch"
       */

      module.exports = picomatch

      /***/
    },

    /***/ 32429: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const utils = __nccwpck_require__(30479)
      const {
        CHAR_ASTERISK /* * */,
        CHAR_AT /* @ */,
        CHAR_BACKWARD_SLASH /* \ */,
        CHAR_COMMA /* , */,
        CHAR_DOT /* . */,
        CHAR_EXCLAMATION_MARK /* ! */,
        CHAR_FORWARD_SLASH /* / */,
        CHAR_LEFT_CURLY_BRACE /* { */,
        CHAR_LEFT_PARENTHESES /* ( */,
        CHAR_LEFT_SQUARE_BRACKET /* [ */,
        CHAR_PLUS /* + */,
        CHAR_QUESTION_MARK /* ? */,
        CHAR_RIGHT_CURLY_BRACE /* } */,
        CHAR_RIGHT_PARENTHESES /* ) */,
        CHAR_RIGHT_SQUARE_BRACKET /* ] */
      } = __nccwpck_require__(16099)

      const isPathSeparator = (code) => {
        return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH
      }

      const depth = (token) => {
        if (token.isPrefix !== true) {
          token.depth = token.isGlobstar ? Infinity : 1
        }
      }

      /**
       * Quickly scans a glob pattern and returns an object with a handful of
       * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
       * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
       * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
       *
       * ```js
       * const pm = require('picomatch');
       * console.log(pm.scan('foo/bar/*.js'));
       * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
       * ```
       * @param {String} `str`
       * @param {Object} `options`
       * @return {Object} Returns an object with tokens and regex source string.
       * @api public
       */

      const scan = (input, options) => {
        const opts = options || {}

        const length = input.length - 1
        const scanToEnd = opts.parts === true || opts.scanToEnd === true
        const slashes = []
        const tokens = []
        const parts = []

        let str = input
        let index = -1
        let start = 0
        let lastIndex = 0
        let isBrace = false
        let isBracket = false
        let isGlob = false
        let isExtglob = false
        let isGlobstar = false
        let braceEscaped = false
        let backslashes = false
        let negated = false
        let negatedExtglob = false
        let finished = false
        let braces = 0
        let prev
        let code
        let token = { value: "", depth: 0, isGlob: false }

        const eos = () => index >= length
        const peek = () => str.charCodeAt(index + 1)
        const advance = () => {
          prev = code
          return str.charCodeAt(++index)
        }

        while (index < length) {
          code = advance()
          let next

          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true
            code = advance()

            if (code === CHAR_LEFT_CURLY_BRACE) {
              braceEscaped = true
            }
            continue
          }

          if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
            braces++

            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true
                advance()
                continue
              }

              if (code === CHAR_LEFT_CURLY_BRACE) {
                braces++
                continue
              }

              if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
                isBrace = token.isBrace = true
                isGlob = token.isGlob = true
                finished = true

                if (scanToEnd === true) {
                  continue
                }

                break
              }

              if (braceEscaped !== true && code === CHAR_COMMA) {
                isBrace = token.isBrace = true
                isGlob = token.isGlob = true
                finished = true

                if (scanToEnd === true) {
                  continue
                }

                break
              }

              if (code === CHAR_RIGHT_CURLY_BRACE) {
                braces--

                if (braces === 0) {
                  braceEscaped = false
                  isBrace = token.isBrace = true
                  finished = true
                  break
                }
              }
            }

            if (scanToEnd === true) {
              continue
            }

            break
          }

          if (code === CHAR_FORWARD_SLASH) {
            slashes.push(index)
            tokens.push(token)
            token = { value: "", depth: 0, isGlob: false }

            if (finished === true) continue
            if (prev === CHAR_DOT && index === start + 1) {
              start += 2
              continue
            }

            lastIndex = index + 1
            continue
          }

          if (opts.noext !== true) {
            const isExtglobChar =
              code === CHAR_PLUS ||
              code === CHAR_AT ||
              code === CHAR_ASTERISK ||
              code === CHAR_QUESTION_MARK ||
              code === CHAR_EXCLAMATION_MARK

            if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
              isGlob = token.isGlob = true
              isExtglob = token.isExtglob = true
              finished = true
              if (code === CHAR_EXCLAMATION_MARK && index === start) {
                negatedExtglob = true
              }

              if (scanToEnd === true) {
                while (eos() !== true && (code = advance())) {
                  if (code === CHAR_BACKWARD_SLASH) {
                    backslashes = token.backslashes = true
                    code = advance()
                    continue
                  }

                  if (code === CHAR_RIGHT_PARENTHESES) {
                    isGlob = token.isGlob = true
                    finished = true
                    break
                  }
                }
                continue
              }
              break
            }
          }

          if (code === CHAR_ASTERISK) {
            if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true
            isGlob = token.isGlob = true
            finished = true

            if (scanToEnd === true) {
              continue
            }
            break
          }

          if (code === CHAR_QUESTION_MARK) {
            isGlob = token.isGlob = true
            finished = true

            if (scanToEnd === true) {
              continue
            }
            break
          }

          if (code === CHAR_LEFT_SQUARE_BRACKET) {
            while (eos() !== true && (next = advance())) {
              if (next === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true
                advance()
                continue
              }

              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                isBracket = token.isBracket = true
                isGlob = token.isGlob = true
                finished = true
                break
              }
            }

            if (scanToEnd === true) {
              continue
            }

            break
          }

          if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
            negated = token.negated = true
            start++
            continue
          }

          if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true

            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_LEFT_PARENTHESES) {
                  backslashes = token.backslashes = true
                  code = advance()
                  continue
                }

                if (code === CHAR_RIGHT_PARENTHESES) {
                  finished = true
                  break
                }
              }
              continue
            }
            break
          }

          if (isGlob === true) {
            finished = true

            if (scanToEnd === true) {
              continue
            }

            break
          }
        }

        if (opts.noext === true) {
          isExtglob = false
          isGlob = false
        }

        let base = str
        let prefix = ""
        let glob = ""

        if (start > 0) {
          prefix = str.slice(0, start)
          str = str.slice(start)
          lastIndex -= start
        }

        if (base && isGlob === true && lastIndex > 0) {
          base = str.slice(0, lastIndex)
          glob = str.slice(lastIndex)
        } else if (isGlob === true) {
          base = ""
          glob = str
        } else {
          base = str
        }

        if (base && base !== "" && base !== "/" && base !== str) {
          if (isPathSeparator(base.charCodeAt(base.length - 1))) {
            base = base.slice(0, -1)
          }
        }

        if (opts.unescape === true) {
          if (glob) glob = utils.removeBackslashes(glob)

          if (base && backslashes === true) {
            base = utils.removeBackslashes(base)
          }
        }

        const state = {
          prefix,
          input,
          start,
          base,
          glob,
          isBrace,
          isBracket,
          isGlob,
          isExtglob,
          isGlobstar,
          negated,
          negatedExtglob
        }

        if (opts.tokens === true) {
          state.maxDepth = 0
          if (!isPathSeparator(code)) {
            tokens.push(token)
          }
          state.tokens = tokens
        }

        if (opts.parts === true || opts.tokens === true) {
          let prevIndex

          for (let idx = 0; idx < slashes.length; idx++) {
            const n = prevIndex ? prevIndex + 1 : start
            const i = slashes[idx]
            const value = input.slice(n, i)
            if (opts.tokens) {
              if (idx === 0 && start !== 0) {
                tokens[idx].isPrefix = true
                tokens[idx].value = prefix
              } else {
                tokens[idx].value = value
              }
              depth(tokens[idx])
              state.maxDepth += tokens[idx].depth
            }
            if (idx !== 0 || value !== "") {
              parts.push(value)
            }
            prevIndex = i
          }

          if (prevIndex && prevIndex + 1 < input.length) {
            const value = input.slice(prevIndex + 1)
            parts.push(value)

            if (opts.tokens) {
              tokens[tokens.length - 1].value = value
              depth(tokens[tokens.length - 1])
              state.maxDepth += tokens[tokens.length - 1].depth
            }
          }

          state.slashes = slashes
          state.parts = parts
        }

        return state
      }

      module.exports = scan

      /***/
    },

    /***/ 30479: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const win32 = process.platform === "win32"
      const {
        REGEX_BACKSLASH,
        REGEX_REMOVE_BACKSLASH,
        REGEX_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_GLOBAL
      } = __nccwpck_require__(16099)

      exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val)
      exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str)
      exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str)
      exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1")
      exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/")

      exports.removeBackslashes = (str) => {
        return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
          return match === "\\" ? "" : match
        })
      }

      exports.supportsLookbehinds = () => {
        const segs = process.version.slice(1).split(".").map(Number)
        if ((segs.length === 3 && segs[0] >= 9) || (segs[0] === 8 && segs[1] >= 10)) {
          return true
        }
        return false
      }

      exports.isWindows = (options) => {
        if (options && typeof options.windows === "boolean") {
          return options.windows
        }
        return win32 === true || path.sep === "\\"
      }

      exports.escapeLast = (input, char, lastIdx) => {
        const idx = input.lastIndexOf(char, lastIdx)
        if (idx === -1) return input
        if (input[idx - 1] === "\\") return exports.escapeLast(input, char, idx - 1)
        return `${input.slice(0, idx)}\\${input.slice(idx)}`
      }

      exports.removePrefix = (input, state = {}) => {
        let output = input
        if (output.startsWith("./")) {
          output = output.slice(2)
          state.prefix = "./"
        }
        return output
      }

      exports.wrapOutput = (input, state = {}, options = {}) => {
        const prepend = options.contains ? "" : "^"
        const append = options.contains ? "" : "$"

        let output = `${prepend}(?:${input})${append}`
        if (state.negated === true) {
          output = `(?:^(?!${output}).*$)`
        }
        return output
      }

      /***/
    },

    /***/ 56172: /***/ (module) => {
      // vim:ts=4:sts=4:sw=4:
      /*!
       *
       * Copyright 2009-2017 Kris Kowal under the terms of the MIT
       * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
       *
       * With parts by Tyler Close
       * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
       * at http://www.opensource.org/licenses/mit-license.html
       * Forked at ref_send.js version: 2009-05-11
       *
       * With parts by Mark Miller
       * Copyright (C) 2011 Google Inc.
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       */

      ;(function (definition) {
        "use strict"

        // This file will function properly as a <script> tag, or a module
        // using CommonJS and NodeJS or RequireJS module formats.  In
        // Common/Node/RequireJS, the module exports the Q API and when
        // executed as a simple <script>, it creates a Q global instead.

        // Montage Require
        if (typeof bootstrap === "function") {
          bootstrap("promise", definition)

          // CommonJS
        } else if (true) {
          module.exports = definition()

          // RequireJS
        } else {
          var previousQ, global
        }
      })(function () {
        "use strict"

        var hasStacks = false
        try {
          throw new Error()
        } catch (e) {
          hasStacks = !!e.stack
        }

        // All code after this point will be filtered from stack traces reported
        // by Q.
        var qStartingLine = captureLine()
        var qFileName

        // shims

        // used for fallback in "allResolved"
        var noop = function () {}

        // Use the fastest possible means to execute a task in a future turn
        // of the event loop.
        var nextTick = (function () {
          // linked list of tasks (single, with head node)
          var head = { task: void 0, next: null }
          var tail = head
          var flushing = false
          var requestTick = void 0
          var isNodeJS = false
          // queue for late tasks, used by unhandled rejection tracking
          var laterQueue = []

          function flush() {
            /* jshint loopfunc: true */
            var task, domain

            while (head.next) {
              head = head.next
              task = head.task
              head.task = void 0
              domain = head.domain

              if (domain) {
                head.domain = void 0
                domain.enter()
              }
              runSingle(task, domain)
            }
            while (laterQueue.length) {
              task = laterQueue.pop()
              runSingle(task)
            }
            flushing = false
          }
          // runs a single function in the async queue
          function runSingle(task, domain) {
            try {
              task()
            } catch (e) {
              if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                  domain.exit()
                }
                setTimeout(flush, 0)
                if (domain) {
                  domain.enter()
                }

                throw e
              } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                  throw e
                }, 0)
              }
            }

            if (domain) {
              domain.exit()
            }
          }

          nextTick = function (task) {
            tail = tail.next = {
              task: task,
              domain: isNodeJS && process.domain,
              next: null
            }

            if (!flushing) {
              flushing = true
              requestTick()
            }
          }

          if (
            typeof process === "object" &&
            process.toString() === "[object process]" &&
            process.nextTick
          ) {
            // Ensure Q is in a real Node environment, with a `process.nextTick`.
            // To see through fake Node environments:
            // * Mocha test runner - exposes a `process` global without a `nextTick`
            // * Browserify - exposes a `process.nexTick` function that uses
            //   `setTimeout`. In this case `setImmediate` is preferred because
            //    it is faster. Browserify's `process.toString()` yields
            //   "[object Object]", while in a real Node environment
            //   `process.toString()` yields "[object process]".
            isNodeJS = true

            requestTick = function () {
              process.nextTick(flush)
            }
          } else if (typeof setImmediate === "function") {
            // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
            if (typeof window !== "undefined") {
              requestTick = setImmediate.bind(window, flush)
            } else {
              requestTick = function () {
                setImmediate(flush)
              }
            }
          } else if (typeof MessageChannel !== "undefined") {
            // modern browsers
            // http://www.nonblocking.io/2011/06/windownexttick.html
            var channel = new MessageChannel()
            // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
            // working message ports the first time a page loads.
            channel.port1.onmessage = function () {
              requestTick = requestPortTick
              channel.port1.onmessage = flush
              flush()
            }
            var requestPortTick = function () {
              // Opera requires us to provide a message payload, regardless of
              // whether we use it.
              channel.port2.postMessage(0)
            }
            requestTick = function () {
              setTimeout(flush, 0)
              requestPortTick()
            }
          } else {
            // old browsers
            requestTick = function () {
              setTimeout(flush, 0)
            }
          }
          // runs a task after all other tasks have been run
          // this is useful for unhandled rejection tracking that needs to happen
          // after all `then`d tasks have been run.
          nextTick.runAfter = function (task) {
            laterQueue.push(task)
            if (!flushing) {
              flushing = true
              requestTick()
            }
          }
          return nextTick
        })()

        // Attempt to make generics safe in the face of downstream
        // modifications.
        // There is no situation where this is necessary.
        // If you need a security guarantee, these primordials need to be
        // deeply frozen anyway, and if you don’t need a security guarantee,
        // this is just plain paranoid.
        // However, this **might** have the nice side-effect of reducing the size of
        // the minified code by reducing x.call() to merely x()
        // See Mark Miller’s explanation of what this does.
        // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
        var call = Function.call
        function uncurryThis(f) {
          return function () {
            return call.apply(f, arguments)
          }
        }
        // This is equivalent, but slower:
        // uncurryThis = Function_bind.bind(Function_bind.call);
        // http://jsperf.com/uncurrythis

        var array_slice = uncurryThis(Array.prototype.slice)

        var array_reduce = uncurryThis(
          Array.prototype.reduce ||
            function (callback, basis) {
              var index = 0,
                length = this.length
              // concerning the initial value, if one is not provided
              if (arguments.length === 1) {
                // seek to the first value in the array, accounting
                // for the possibility that is is a sparse array
                do {
                  if (index in this) {
                    basis = this[index++]
                    break
                  }
                  if (++index >= length) {
                    throw new TypeError()
                  }
                } while (1)
              }
              // reduce
              for (; index < length; index++) {
                // account for the possibility that the array is sparse
                if (index in this) {
                  basis = callback(basis, this[index], index)
                }
              }
              return basis
            }
        )

        var array_indexOf = uncurryThis(
          Array.prototype.indexOf ||
            function (value) {
              // not a very good shim, but good enough for our one use of it
              for (var i = 0; i < this.length; i++) {
                if (this[i] === value) {
                  return i
                }
              }
              return -1
            }
        )

        var array_map = uncurryThis(
          Array.prototype.map ||
            function (callback, thisp) {
              var self = this
              var collect = []
              array_reduce(
                self,
                function (undefined, value, index) {
                  collect.push(callback.call(thisp, value, index, self))
                },
                void 0
              )
              return collect
            }
        )

        var object_create =
          Object.create ||
          function (prototype) {
            function Type() {}
            Type.prototype = prototype
            return new Type()
          }

        var object_defineProperty =
          Object.defineProperty ||
          function (obj, prop, descriptor) {
            obj[prop] = descriptor.value
            return obj
          }

        var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty)

        var object_keys =
          Object.keys ||
          function (object) {
            var keys = []
            for (var key in object) {
              if (object_hasOwnProperty(object, key)) {
                keys.push(key)
              }
            }
            return keys
          }

        var object_toString = uncurryThis(Object.prototype.toString)

        function isObject(value) {
          return value === Object(value)
        }

        // generator related shims

        // FIXME: Remove this function once ES6 generators are in SpiderMonkey.
        function isStopIteration(exception) {
          return (
            object_toString(exception) === "[object StopIteration]" ||
            exception instanceof QReturnValue
          )
        }

        // FIXME: Remove this helper and Q.return once ES6 generators are in
        // SpiderMonkey.
        var QReturnValue
        if (typeof ReturnValue !== "undefined") {
          QReturnValue = ReturnValue
        } else {
          QReturnValue = function (value) {
            this.value = value
          }
        }

        // long stack traces

        var STACK_JUMP_SEPARATOR = "From previous event:"

        function makeStackTraceLong(error, promise) {
          // If possible, transform the error stack trace by removing Node and Q
          // cruft, then concatenating with the stack trace of `promise`. See #57.
          if (
            hasStacks &&
            promise.stack &&
            typeof error === "object" &&
            error !== null &&
            error.stack
          ) {
            var stacks = []
            for (var p = promise; !!p; p = p.source) {
              if (
                p.stack &&
                (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)
              ) {
                object_defineProperty(error, "__minimumStackCounter__", {
                  value: p.stackCounter,
                  configurable: true
                })
                stacks.unshift(p.stack)
              }
            }
            stacks.unshift(error.stack)

            var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n")
            var stack = filterStackString(concatedStacks)
            object_defineProperty(error, "stack", { value: stack, configurable: true })
          }
        }

        function filterStackString(stackString) {
          var lines = stackString.split("\n")
          var desiredLines = []
          for (var i = 0; i < lines.length; ++i) {
            var line = lines[i]

            if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
              desiredLines.push(line)
            }
          }
          return desiredLines.join("\n")
        }

        function isNodeFrame(stackLine) {
          return stackLine.indexOf("(module.js:") !== -1 || stackLine.indexOf("(node.js:") !== -1
        }

        function getFileNameAndLineNumber(stackLine) {
          // Named functions: "at functionName (filename:lineNumber:columnNumber)"
          // In IE10 function name can have spaces ("Anonymous function") O_o
          var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine)
          if (attempt1) {
            return [attempt1[1], Number(attempt1[2])]
          }

          // Anonymous functions: "at filename:lineNumber:columnNumber"
          var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine)
          if (attempt2) {
            return [attempt2[1], Number(attempt2[2])]
          }

          // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
          var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine)
          if (attempt3) {
            return [attempt3[1], Number(attempt3[2])]
          }
        }

        function isInternalFrame(stackLine) {
          var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine)

          if (!fileNameAndLineNumber) {
            return false
          }

          var fileName = fileNameAndLineNumber[0]
          var lineNumber = fileNameAndLineNumber[1]

          return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine
        }

        // discover own file name and line number range for filtering stack
        // traces
        function captureLine() {
          if (!hasStacks) {
            return
          }

          try {
            throw new Error()
          } catch (e) {
            var lines = e.stack.split("\n")
            var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2]
            var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine)
            if (!fileNameAndLineNumber) {
              return
            }

            qFileName = fileNameAndLineNumber[0]
            return fileNameAndLineNumber[1]
          }
        }

        function deprecate(callback, name, alternative) {
          return function () {
            if (typeof console !== "undefined" && typeof console.warn === "function") {
              console.warn(
                name + " is deprecated, use " + alternative + " instead.",
                new Error("").stack
              )
            }
            return callback.apply(callback, arguments)
          }
        }

        // end of shims
        // beginning of real work

        /**
         * Constructs a promise for an immediate reference, passes promises through, or
         * coerces promises from different systems.
         * @param value immediate reference or promise
         */
        function Q(value) {
          // If the object is already a Promise, return it directly.  This enables
          // the resolve function to both be used to created references from objects,
          // but to tolerably coerce non-promises to promises.
          if (value instanceof Promise) {
            return value
          }

          // assimilate thenables
          if (isPromiseAlike(value)) {
            return coerce(value)
          } else {
            return fulfill(value)
          }
        }
        Q.resolve = Q

        /**
         * Performs a task in a future turn of the event loop.
         * @param {Function} task
         */
        Q.nextTick = nextTick

        /**
         * Controls whether or not long stack traces will be on
         */
        Q.longStackSupport = false

        /**
         * The counter is used to determine the stopping point for building
         * long stack traces. In makeStackTraceLong we walk backwards through
         * the linked list of promises, only stacks which were created before
         * the rejection are concatenated.
         */
        var longStackCounter = 1

        // enable long stacks if Q_DEBUG is set
        if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
          Q.longStackSupport = true
        }

        /**
         * Constructs a {promise, resolve, reject} object.
         *
         * `resolve` is a callback to invoke with a more resolved value for the
         * promise. To fulfill the promise, invoke `resolve` with any value that is
         * not a thenable. To reject the promise, invoke `resolve` with a rejected
         * thenable, or invoke `reject` with the reason directly. To resolve the
         * promise to another thenable, thus putting it in the same state, invoke
         * `resolve` with that other thenable.
         */
        Q.defer = defer
        function defer() {
          // if "messages" is an "Array", that indicates that the promise has not yet
          // been resolved.  If it is "undefined", it has been resolved.  Each
          // element of the messages array is itself an array of complete arguments to
          // forward to the resolved promise.  We coerce the resolution value to a
          // promise using the `resolve` function because it handles both fully
          // non-thenable values and other thenables gracefully.
          var messages = [],
            progressListeners = [],
            resolvedPromise

          var deferred = object_create(defer.prototype)
          var promise = object_create(Promise.prototype)

          promise.promiseDispatch = function (resolve, op, operands) {
            var args = array_slice(arguments)
            if (messages) {
              messages.push(args)
              if (op === "when" && operands[1]) {
                // progress operand
                progressListeners.push(operands[1])
              }
            } else {
              Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args)
              })
            }
          }

          // XXX deprecated
          promise.valueOf = function () {
            if (messages) {
              return promise
            }
            var nearerValue = nearer(resolvedPromise)
            if (isPromise(nearerValue)) {
              resolvedPromise = nearerValue // shorten chain
            }
            return nearerValue
          }

          promise.inspect = function () {
            if (!resolvedPromise) {
              return { state: "pending" }
            }
            return resolvedPromise.inspect()
          }

          if (Q.longStackSupport && hasStacks) {
            try {
              throw new Error()
            } catch (e) {
              // NOTE: don't try to use `Error.captureStackTrace` or transfer the
              // accessor around; that causes memory leaks as per GH-111. Just
              // reify the stack trace as a string ASAP.
              //
              // At the same time, cut off the first line; it's always just
              // "[object Promise]\n", as per the `toString`.
              promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1)
              promise.stackCounter = longStackCounter++
            }
          }

          // NOTE: we do the checks for `resolvedPromise` in each method, instead of
          // consolidating them into `become`, since otherwise we'd create new
          // promises with the lines `become(whatever(value))`. See e.g. GH-252.

          function become(newPromise) {
            resolvedPromise = newPromise

            if (Q.longStackSupport && hasStacks) {
              // Only hold a reference to the new promise if long stacks
              // are enabled to reduce memory usage
              promise.source = newPromise
            }

            array_reduce(
              messages,
              function (undefined, message) {
                Q.nextTick(function () {
                  newPromise.promiseDispatch.apply(newPromise, message)
                })
              },
              void 0
            )

            messages = void 0
            progressListeners = void 0
          }

          deferred.promise = promise
          deferred.resolve = function (value) {
            if (resolvedPromise) {
              return
            }

            become(Q(value))
          }

          deferred.fulfill = function (value) {
            if (resolvedPromise) {
              return
            }

            become(fulfill(value))
          }
          deferred.reject = function (reason) {
            if (resolvedPromise) {
              return
            }

            become(reject(reason))
          }
          deferred.notify = function (progress) {
            if (resolvedPromise) {
              return
            }

            array_reduce(
              progressListeners,
              function (undefined, progressListener) {
                Q.nextTick(function () {
                  progressListener(progress)
                })
              },
              void 0
            )
          }

          return deferred
        }

        /**
         * Creates a Node-style callback that will resolve or reject the deferred
         * promise.
         * @returns a nodeback
         */
        defer.prototype.makeNodeResolver = function () {
          var self = this
          return function (error, value) {
            if (error) {
              self.reject(error)
            } else if (arguments.length > 2) {
              self.resolve(array_slice(arguments, 1))
            } else {
              self.resolve(value)
            }
          }
        }

        /**
         * @param resolver {Function} a function that returns nothing and accepts
         * the resolve, reject, and notify functions for a deferred.
         * @returns a promise that may be resolved with the given resolve and reject
         * functions, or rejected by a thrown exception in resolver
         */
        Q.Promise = promise // ES6
        Q.promise = promise
        function promise(resolver) {
          if (typeof resolver !== "function") {
            throw new TypeError("resolver must be a function.")
          }
          var deferred = defer()
          try {
            resolver(deferred.resolve, deferred.reject, deferred.notify)
          } catch (reason) {
            deferred.reject(reason)
          }
          return deferred.promise
        }

        promise.race = race // ES6
        promise.all = all // ES6
        promise.reject = reject // ES6
        promise.resolve = Q // ES6

        // XXX experimental.  This method is a way to denote that a local value is
        // serializable and should be immediately dispatched to a remote upon request,
        // instead of passing a reference.
        Q.passByCopy = function (object) {
          //freeze(object);
          //passByCopies.set(object, true);
          return object
        }

        Promise.prototype.passByCopy = function () {
          //freeze(object);
          //passByCopies.set(object, true);
          return this
        }

        /**
         * If two promises eventually fulfill to the same value, promises that value,
         * but otherwise rejects.
         * @param x {Any*}
         * @param y {Any*}
         * @returns {Any*} a promise for x and y if they are the same, but a rejection
         * otherwise.
         *
         */
        Q.join = function (x, y) {
          return Q(x).join(y)
        }

        Promise.prototype.join = function (that) {
          return Q([this, that]).spread(function (x, y) {
            if (x === y) {
              // TODO: "===" should be Object.is or equiv
              return x
            } else {
              throw new Error("Q can't join: not the same: " + x + " " + y)
            }
          })
        }

        /**
         * Returns a promise for the first of an array of promises to become settled.
         * @param answers {Array[Any*]} promises to race
         * @returns {Any*} the first promise to be settled
         */
        Q.race = race
        function race(answerPs) {
          return promise(function (resolve, reject) {
            // Switch to this once we can assume at least ES5
            // answerPs.forEach(function (answerP) {
            //     Q(answerP).then(resolve, reject);
            // });
            // Use this in the meantime
            for (var i = 0, len = answerPs.length; i < len; i++) {
              Q(answerPs[i]).then(resolve, reject)
            }
          })
        }

        Promise.prototype.race = function () {
          return this.then(Q.race)
        }

        /**
         * Constructs a Promise with a promise descriptor object and optional fallback
         * function.  The descriptor contains methods like when(rejected), get(name),
         * set(name, value), post(name, args), and delete(name), which all
         * return either a value, a promise for a value, or a rejection.  The fallback
         * accepts the operation name, a resolver, and any further arguments that would
         * have been forwarded to the appropriate method above had a method been
         * provided with the proper name.  The API makes no guarantees about the nature
         * of the returned object, apart from that it is usable whereever promises are
         * bought and sold.
         */
        Q.makePromise = Promise
        function Promise(descriptor, fallback, inspect) {
          if (fallback === void 0) {
            fallback = function (op) {
              return reject(new Error("Promise does not support operation: " + op))
            }
          }
          if (inspect === void 0) {
            inspect = function () {
              return { state: "unknown" }
            }
          }

          var promise = object_create(Promise.prototype)

          promise.promiseDispatch = function (resolve, op, args) {
            var result
            try {
              if (descriptor[op]) {
                result = descriptor[op].apply(promise, args)
              } else {
                result = fallback.call(promise, op, args)
              }
            } catch (exception) {
              result = reject(exception)
            }
            if (resolve) {
              resolve(result)
            }
          }

          promise.inspect = inspect

          // XXX deprecated `valueOf` and `exception` support
          if (inspect) {
            var inspected = inspect()
            if (inspected.state === "rejected") {
              promise.exception = inspected.reason
            }

            promise.valueOf = function () {
              var inspected = inspect()
              if (inspected.state === "pending" || inspected.state === "rejected") {
                return promise
              }
              return inspected.value
            }
          }

          return promise
        }

        Promise.prototype.toString = function () {
          return "[object Promise]"
        }

        Promise.prototype.then = function (fulfilled, rejected, progressed) {
          var self = this
          var deferred = defer()
          var done = false // ensure the untrusted promise makes at most a
          // single call to one of the callbacks

          function _fulfilled(value) {
            try {
              return typeof fulfilled === "function" ? fulfilled(value) : value
            } catch (exception) {
              return reject(exception)
            }
          }

          function _rejected(exception) {
            if (typeof rejected === "function") {
              makeStackTraceLong(exception, self)
              try {
                return rejected(exception)
              } catch (newException) {
                return reject(newException)
              }
            }
            return reject(exception)
          }

          function _progressed(value) {
            return typeof progressed === "function" ? progressed(value) : value
          }

          Q.nextTick(function () {
            self.promiseDispatch(
              function (value) {
                if (done) {
                  return
                }
                done = true

                deferred.resolve(_fulfilled(value))
              },
              "when",
              [
                function (exception) {
                  if (done) {
                    return
                  }
                  done = true

                  deferred.resolve(_rejected(exception))
                }
              ]
            )
          })

          // Progress propagator need to be attached in the current tick.
          self.promiseDispatch(void 0, "when", [
            void 0,
            function (value) {
              var newValue
              var threw = false
              try {
                newValue = _progressed(value)
              } catch (e) {
                threw = true
                if (Q.onerror) {
                  Q.onerror(e)
                } else {
                  throw e
                }
              }

              if (!threw) {
                deferred.notify(newValue)
              }
            }
          ])

          return deferred.promise
        }

        Q.tap = function (promise, callback) {
          return Q(promise).tap(callback)
        }

        /**
         * Works almost like "finally", but not called for rejections.
         * Original resolution value is passed through callback unaffected.
         * Callback may return a promise that will be awaited for.
         * @param {Function} callback
         * @returns {Q.Promise}
         * @example
         * doSomething()
         *   .then(...)
         *   .tap(console.log)
         *   .then(...);
         */
        Promise.prototype.tap = function (callback) {
          callback = Q(callback)

          return this.then(function (value) {
            return callback.fcall(value).thenResolve(value)
          })
        }

        /**
         * Registers an observer on a promise.
         *
         * Guarantees:
         *
         * 1. that fulfilled and rejected will be called only once.
         * 2. that either the fulfilled callback or the rejected callback will be
         *    called, but not both.
         * 3. that fulfilled and rejected will not be called in this turn.
         *
         * @param value      promise or immediate reference to observe
         * @param fulfilled  function to be called with the fulfilled value
         * @param rejected   function to be called with the rejection exception
         * @param progressed function to be called on any progress notifications
         * @return promise for the return value from the invoked callback
         */
        Q.when = when
        function when(value, fulfilled, rejected, progressed) {
          return Q(value).then(fulfilled, rejected, progressed)
        }

        Promise.prototype.thenResolve = function (value) {
          return this.then(function () {
            return value
          })
        }

        Q.thenResolve = function (promise, value) {
          return Q(promise).thenResolve(value)
        }

        Promise.prototype.thenReject = function (reason) {
          return this.then(function () {
            throw reason
          })
        }

        Q.thenReject = function (promise, reason) {
          return Q(promise).thenReject(reason)
        }

        /**
         * If an object is not a promise, it is as "near" as possible.
         * If a promise is rejected, it is as "near" as possible too.
         * If it’s a fulfilled promise, the fulfillment value is nearer.
         * If it’s a deferred promise and the deferred has been resolved, the
         * resolution is "nearer".
         * @param object
         * @returns most resolved (nearest) form of the object
         */

        // XXX should we re-do this?
        Q.nearer = nearer
        function nearer(value) {
          if (isPromise(value)) {
            var inspected = value.inspect()
            if (inspected.state === "fulfilled") {
              return inspected.value
            }
          }
          return value
        }

        /**
         * @returns whether the given object is a promise.
         * Otherwise it is a fulfilled value.
         */
        Q.isPromise = isPromise
        function isPromise(object) {
          return object instanceof Promise
        }

        Q.isPromiseAlike = isPromiseAlike
        function isPromiseAlike(object) {
          return isObject(object) && typeof object.then === "function"
        }

        /**
         * @returns whether the given object is a pending promise, meaning not
         * fulfilled or rejected.
         */
        Q.isPending = isPending
        function isPending(object) {
          return isPromise(object) && object.inspect().state === "pending"
        }

        Promise.prototype.isPending = function () {
          return this.inspect().state === "pending"
        }

        /**
         * @returns whether the given object is a value or fulfilled
         * promise.
         */
        Q.isFulfilled = isFulfilled
        function isFulfilled(object) {
          return !isPromise(object) || object.inspect().state === "fulfilled"
        }

        Promise.prototype.isFulfilled = function () {
          return this.inspect().state === "fulfilled"
        }

        /**
         * @returns whether the given object is a rejected promise.
         */
        Q.isRejected = isRejected
        function isRejected(object) {
          return isPromise(object) && object.inspect().state === "rejected"
        }

        Promise.prototype.isRejected = function () {
          return this.inspect().state === "rejected"
        }

        //// BEGIN UNHANDLED REJECTION TRACKING

        // This promise library consumes exceptions thrown in handlers so they can be
        // handled by a subsequent promise.  The exceptions get added to this array when
        // they are created, and removed when they are handled.  Note that in ES6 or
        // shimmed environments, this would naturally be a `Set`.
        var unhandledReasons = []
        var unhandledRejections = []
        var reportedUnhandledRejections = []
        var trackUnhandledRejections = true

        function resetUnhandledRejections() {
          unhandledReasons.length = 0
          unhandledRejections.length = 0

          if (!trackUnhandledRejections) {
            trackUnhandledRejections = true
          }
        }

        function trackRejection(promise, reason) {
          if (!trackUnhandledRejections) {
            return
          }
          if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
              if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise)
                reportedUnhandledRejections.push(promise)
              }
            })
          }

          unhandledRejections.push(promise)
          if (reason && typeof reason.stack !== "undefined") {
            unhandledReasons.push(reason.stack)
          } else {
            unhandledReasons.push("(no stack) " + reason)
          }
        }

        function untrackRejection(promise) {
          if (!trackUnhandledRejections) {
            return
          }

          var at = array_indexOf(unhandledRejections, promise)
          if (at !== -1) {
            if (typeof process === "object" && typeof process.emit === "function") {
              Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise)
                if (atReport !== -1) {
                  process.emit("rejectionHandled", unhandledReasons[at], promise)
                  reportedUnhandledRejections.splice(atReport, 1)
                }
              })
            }
            unhandledRejections.splice(at, 1)
            unhandledReasons.splice(at, 1)
          }
        }

        Q.resetUnhandledRejections = resetUnhandledRejections

        Q.getUnhandledReasons = function () {
          // Make a copy so that consumers can't interfere with our internal state.
          return unhandledReasons.slice()
        }

        Q.stopUnhandledRejectionTracking = function () {
          resetUnhandledRejections()
          trackUnhandledRejections = false
        }

        resetUnhandledRejections()

        //// END UNHANDLED REJECTION TRACKING

        /**
         * Constructs a rejected promise.
         * @param reason value describing the failure
         */
        Q.reject = reject
        function reject(reason) {
          var rejection = Promise(
            {
              when: function (rejected) {
                // note that the error has been handled
                if (rejected) {
                  untrackRejection(this)
                }
                return rejected ? rejected(reason) : this
              }
            },
            function fallback() {
              return this
            },
            function inspect() {
              return { state: "rejected", reason: reason }
            }
          )

          // Note that the reason has not been handled.
          trackRejection(rejection, reason)

          return rejection
        }

        /**
         * Constructs a fulfilled promise for an immediate reference.
         * @param value immediate reference
         */
        Q.fulfill = fulfill
        function fulfill(value) {
          return Promise(
            {
              when: function () {
                return value
              },
              get: function (name) {
                return value[name]
              },
              set: function (name, rhs) {
                value[name] = rhs
              },
              delete: function (name) {
                delete value[name]
              },
              post: function (name, args) {
                // Mark Miller proposes that post with no name should apply a
                // promised function.
                if (name === null || name === void 0) {
                  return value.apply(void 0, args)
                } else {
                  return value[name].apply(value, args)
                }
              },
              apply: function (thisp, args) {
                return value.apply(thisp, args)
              },
              keys: function () {
                return object_keys(value)
              }
            },
            void 0,
            function inspect() {
              return { state: "fulfilled", value: value }
            }
          )
        }

        /**
         * Converts thenables to Q promises.
         * @param promise thenable promise
         * @returns a Q promise
         */
        function coerce(promise) {
          var deferred = defer()
          Q.nextTick(function () {
            try {
              promise.then(deferred.resolve, deferred.reject, deferred.notify)
            } catch (exception) {
              deferred.reject(exception)
            }
          })
          return deferred.promise
        }

        /**
         * Annotates an object such that it will never be
         * transferred away from this process over any promise
         * communication channel.
         * @param object
         * @returns promise a wrapping of that object that
         * additionally responds to the "isDef" message
         * without a rejection.
         */
        Q.master = master
        function master(object) {
          return Promise(
            {
              isDef: function () {}
            },
            function fallback(op, args) {
              return dispatch(object, op, args)
            },
            function () {
              return Q(object).inspect()
            }
          )
        }

        /**
         * Spreads the values of a promised array of arguments into the
         * fulfillment callback.
         * @param fulfilled callback that receives variadic arguments from the
         * promised array
         * @param rejected callback that receives the exception if the promise
         * is rejected.
         * @returns a promise for the return value or thrown exception of
         * either callback.
         */
        Q.spread = spread
        function spread(value, fulfilled, rejected) {
          return Q(value).spread(fulfilled, rejected)
        }

        Promise.prototype.spread = function (fulfilled, rejected) {
          return this.all().then(function (array) {
            return fulfilled.apply(void 0, array)
          }, rejected)
        }

        /**
         * The async function is a decorator for generator functions, turning
         * them into asynchronous generators.  Although generators are only part
         * of the newest ECMAScript 6 drafts, this code does not cause syntax
         * errors in older engines.  This code should continue to work and will
         * in fact improve over time as the language improves.
         *
         * ES6 generators are currently part of V8 version 3.19 with the
         * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
         * for longer, but under an older Python-inspired form.  This function
         * works on both kinds of generators.
         *
         * Decorates a generator function such that:
         *  - it may yield promises
         *  - execution will continue when that promise is fulfilled
         *  - the value of the yield expression will be the fulfilled value
         *  - it returns a promise for the return value (when the generator
         *    stops iterating)
         *  - the decorated function returns a promise for the return value
         *    of the generator or the first rejected promise among those
         *    yielded.
         *  - if an error is thrown in the generator, it propagates through
         *    every following yield until it is caught, or until it escapes
         *    the generator function altogether, and is translated into a
         *    rejection for the promise returned by the decorated generator.
         */
        Q.async = async
        function async(makeGenerator) {
          return function () {
            // when verb is "send", arg is a value
            // when verb is "throw", arg is an exception
            function continuer(verb, arg) {
              var result

              // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
              // engine that has a deployed base of browsers that support generators.
              // However, SM's generators use the Python-inspired semantics of
              // outdated ES6 drafts.  We would like to support ES6, but we'd also
              // like to make it possible to use generators in deployed browsers, so
              // we also support Python-style generators.  At some point we can remove
              // this block.

              if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                  result = generator[verb](arg)
                } catch (exception) {
                  return reject(exception)
                }
                if (result.done) {
                  return Q(result.value)
                } else {
                  return when(result.value, callback, errback)
                }
              } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                  result = generator[verb](arg)
                } catch (exception) {
                  if (isStopIteration(exception)) {
                    return Q(exception.value)
                  } else {
                    return reject(exception)
                  }
                }
                return when(result, callback, errback)
              }
            }
            var generator = makeGenerator.apply(this, arguments)
            var callback = continuer.bind(continuer, "next")
            var errback = continuer.bind(continuer, "throw")
            return callback()
          }
        }

        /**
         * The spawn function is a small wrapper around async that immediately
         * calls the generator and also ends the promise chain, so that any
         * unhandled errors are thrown instead of forwarded to the error
         * handler. This is useful because it's extremely common to run
         * generators at the top-level to work with libraries.
         */
        Q.spawn = spawn
        function spawn(makeGenerator) {
          Q.done(Q.async(makeGenerator)())
        }

        // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
        /**
         * Throws a ReturnValue exception to stop an asynchronous generator.
         *
         * This interface is a stop-gap measure to support generator return
         * values in older Firefox/SpiderMonkey.  In browsers that support ES6
         * generators like Chromium 29, just use "return" in your generator
         * functions.
         *
         * @param value the return value for the surrounding generator
         * @throws ReturnValue exception with the value.
         * @example
         * // ES6 style
         * Q.async(function* () {
         *      var foo = yield getFooPromise();
         *      var bar = yield getBarPromise();
         *      return foo + bar;
         * })
         * // Older SpiderMonkey style
         * Q.async(function () {
         *      var foo = yield getFooPromise();
         *      var bar = yield getBarPromise();
         *      Q.return(foo + bar);
         * })
         */
        Q["return"] = _return
        function _return(value) {
          throw new QReturnValue(value)
        }

        /**
         * The promised function decorator ensures that any promise arguments
         * are settled and passed as values (`this` is also settled and passed
         * as a value).  It will also ensure that the result of a function is
         * always a promise.
         *
         * @example
         * var add = Q.promised(function (a, b) {
         *     return a + b;
         * });
         * add(Q(a), Q(B));
         *
         * @param {function} callback The function to decorate
         * @returns {function} a function that has been decorated.
         */
        Q.promised = promised
        function promised(callback) {
          return function () {
            return spread([this, all(arguments)], function (self, args) {
              return callback.apply(self, args)
            })
          }
        }

        /**
         * sends a message to a value in a future turn
         * @param object* the recipient
         * @param op the name of the message operation, e.g., "when",
         * @param args further arguments to be forwarded to the operation
         * @returns result {Promise} a promise for the result of the operation
         */
        Q.dispatch = dispatch
        function dispatch(object, op, args) {
          return Q(object).dispatch(op, args)
        }

        Promise.prototype.dispatch = function (op, args) {
          var self = this
          var deferred = defer()
          Q.nextTick(function () {
            self.promiseDispatch(deferred.resolve, op, args)
          })
          return deferred.promise
        }

        /**
         * Gets the value of a property in a future turn.
         * @param object    promise or immediate reference for target object
         * @param name      name of property to get
         * @return promise for the property value
         */
        Q.get = function (object, key) {
          return Q(object).dispatch("get", [key])
        }

        Promise.prototype.get = function (key) {
          return this.dispatch("get", [key])
        }

        /**
         * Sets the value of a property in a future turn.
         * @param object    promise or immediate reference for object object
         * @param name      name of property to set
         * @param value     new value of property
         * @return promise for the return value
         */
        Q.set = function (object, key, value) {
          return Q(object).dispatch("set", [key, value])
        }

        Promise.prototype.set = function (key, value) {
          return this.dispatch("set", [key, value])
        }

        /**
         * Deletes a property in a future turn.
         * @param object    promise or immediate reference for target object
         * @param name      name of property to delete
         * @return promise for the return value
         */
        Q.del = Q["delete"] = function (object, key) { // XXX legacy
          return Q(object).dispatch("delete", [key])
        }

        Promise.prototype.del = Promise.prototype["delete"] = function (key) { // XXX legacy
          return this.dispatch("delete", [key])
        }

        /**
         * Invokes a method in a future turn.
         * @param object    promise or immediate reference for target object
         * @param name      name of method to invoke
         * @param value     a value to post, typically an array of
         *                  invocation arguments for promises that
         *                  are ultimately backed with `resolve` values,
         *                  as opposed to those backed with URLs
         *                  wherein the posted value can be any
         *                  JSON serializable object.
         * @return promise for the return value
         */
        // bound locally because it is used by other methods
        Q.mapply = Q.post = function (object, name, args) { // XXX As proposed by "Redsandro"
          return Q(object).dispatch("post", [name, args])
        }

        Promise.prototype.mapply = Promise.prototype.post = function (name, args) { // XXX As proposed by "Redsandro"
          return this.dispatch("post", [name, args])
        }

        /**
         * Invokes a method in a future turn.
         * @param object    promise or immediate reference for target object
         * @param name      name of method to invoke
         * @param ...args   array of invocation arguments
         * @return promise for the return value
         */
        Q.send = // XXX Mark Miller's proposed parlance
          Q.mcall = // XXX As proposed by "Redsandro"
          Q.invoke =
            function (object, name /*...args*/) {
              return Q(object).dispatch("post", [name, array_slice(arguments, 2)])
            }

        Promise.prototype.send = // XXX Mark Miller's proposed parlance
          Promise.prototype.mcall = // XXX As proposed by "Redsandro"
          Promise.prototype.invoke =
            function (name /*...args*/) {
              return this.dispatch("post", [name, array_slice(arguments, 1)])
            }

        /**
         * Applies the promised function in a future turn.
         * @param object    promise or immediate reference for target function
         * @param args      array of application arguments
         */
        Q.fapply = function (object, args) {
          return Q(object).dispatch("apply", [void 0, args])
        }

        Promise.prototype.fapply = function (args) {
          return this.dispatch("apply", [void 0, args])
        }

        /**
         * Calls the promised function in a future turn.
         * @param object    promise or immediate reference for target function
         * @param ...args   array of application arguments
         */
        Q["try"] = Q.fcall = function (object /* ...args*/) {
          return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)])
        }

        Promise.prototype.fcall = function (/*...args*/) {
          return this.dispatch("apply", [void 0, array_slice(arguments)])
        }

        /**
         * Binds the promised function, transforming return values into a fulfilled
         * promise and thrown errors into a rejected one.
         * @param object    promise or immediate reference for target function
         * @param ...args   array of application arguments
         */
        Q.fbind = function (object /*...args*/) {
          var promise = Q(object)
          var args = array_slice(arguments, 1)
          return function fbound() {
            return promise.dispatch("apply", [this, args.concat(array_slice(arguments))])
          }
        }
        Promise.prototype.fbind = function (/*...args*/) {
          var promise = this
          var args = array_slice(arguments)
          return function fbound() {
            return promise.dispatch("apply", [this, args.concat(array_slice(arguments))])
          }
        }

        /**
         * Requests the names of the owned properties of a promised
         * object in a future turn.
         * @param object    promise or immediate reference for target object
         * @return promise for the keys of the eventually settled object
         */
        Q.keys = function (object) {
          return Q(object).dispatch("keys", [])
        }

        Promise.prototype.keys = function () {
          return this.dispatch("keys", [])
        }

        /**
         * Turns an array of promises into a promise for an array.  If any of
         * the promises gets rejected, the whole array is rejected immediately.
         * @param {Array*} an array (or promise for an array) of values (or
         * promises for values)
         * @returns a promise for an array of the corresponding values
         */
        // By Mark Miller
        // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
        Q.all = all
        function all(promises) {
          return when(promises, function (promises) {
            var pendingCount = 0
            var deferred = defer()
            array_reduce(
              promises,
              function (undefined, promise, index) {
                var snapshot
                if (isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled") {
                  promises[index] = snapshot.value
                } else {
                  ++pendingCount
                  when(
                    promise,
                    function (value) {
                      promises[index] = value
                      if (--pendingCount === 0) {
                        deferred.resolve(promises)
                      }
                    },
                    deferred.reject,
                    function (progress) {
                      deferred.notify({ index: index, value: progress })
                    }
                  )
                }
              },
              void 0
            )
            if (pendingCount === 0) {
              deferred.resolve(promises)
            }
            return deferred.promise
          })
        }

        Promise.prototype.all = function () {
          return all(this)
        }

        /**
         * Returns the first resolved promise of an array. Prior rejected promises are
         * ignored.  Rejects only if all promises are rejected.
         * @param {Array*} an array containing values or promises for values
         * @returns a promise fulfilled with the value of the first resolved promise,
         * or a rejected promise if all promises are rejected.
         */
        Q.any = any

        function any(promises) {
          if (promises.length === 0) {
            return Q.resolve()
          }

          var deferred = Q.defer()
          var pendingCount = 0
          array_reduce(
            promises,
            function (prev, current, index) {
              var promise = promises[index]

              pendingCount++

              when(promise, onFulfilled, onRejected, onProgress)
              function onFulfilled(result) {
                deferred.resolve(result)
              }
              function onRejected(err) {
                pendingCount--
                if (pendingCount === 0) {
                  var rejection = err || new Error("" + err)

                  rejection.message =
                    "Q can't get fulfillment value from any promise, all " +
                    "promises were rejected. Last error message: " +
                    rejection.message

                  deferred.reject(rejection)
                }
              }
              function onProgress(progress) {
                deferred.notify({
                  index: index,
                  value: progress
                })
              }
            },
            undefined
          )

          return deferred.promise
        }

        Promise.prototype.any = function () {
          return any(this)
        }

        /**
         * Waits for all promises to be settled, either fulfilled or
         * rejected.  This is distinct from `all` since that would stop
         * waiting at the first rejection.  The promise returned by
         * `allResolved` will never be rejected.
         * @param promises a promise for an array (or an array) of promises
         * (or values)
         * @return a promise for an array of promises
         */
        Q.allResolved = deprecate(allResolved, "allResolved", "allSettled")
        function allResolved(promises) {
          return when(promises, function (promises) {
            promises = array_map(promises, Q)
            return when(
              all(
                array_map(promises, function (promise) {
                  return when(promise, noop, noop)
                })
              ),
              function () {
                return promises
              }
            )
          })
        }

        Promise.prototype.allResolved = function () {
          return allResolved(this)
        }

        /**
         * @see Promise#allSettled
         */
        Q.allSettled = allSettled
        function allSettled(promises) {
          return Q(promises).allSettled()
        }

        /**
         * Turns an array of promises into a promise for an array of their states (as
         * returned by `inspect`) when they have all settled.
         * @param {Array[Any*]} values an array (or promise for an array) of values (or
         * promises for values)
         * @returns {Array[State]} an array of states for the respective values.
         */
        Promise.prototype.allSettled = function () {
          return this.then(function (promises) {
            return all(
              array_map(promises, function (promise) {
                promise = Q(promise)
                function regardless() {
                  return promise.inspect()
                }
                return promise.then(regardless, regardless)
              })
            )
          })
        }

        /**
         * Captures the failure of a promise, giving an oportunity to recover
         * with a callback.  If the given promise is fulfilled, the returned
         * promise is fulfilled.
         * @param {Any*} promise for something
         * @param {Function} callback to fulfill the returned promise if the
         * given promise is rejected
         * @returns a promise for the return value of the callback
         */
        Q.fail = Q["catch"] = function (object, rejected) { // XXX legacy
          return Q(object).then(void 0, rejected)
        }

        Promise.prototype.fail = Promise.prototype["catch"] = function (rejected) { // XXX legacy
          return this.then(void 0, rejected)
        }

        /**
         * Attaches a listener that can respond to progress notifications from a
         * promise's originating deferred. This listener receives the exact arguments
         * passed to ``deferred.notify``.
         * @param {Any*} promise for something
         * @param {Function} callback to receive any progress notifications
         * @returns the given promise, unchanged
         */
        Q.progress = progress
        function progress(object, progressed) {
          return Q(object).then(void 0, void 0, progressed)
        }

        Promise.prototype.progress = function (progressed) {
          return this.then(void 0, void 0, progressed)
        }

        /**
         * Provides an opportunity to observe the settling of a promise,
         * regardless of whether the promise is fulfilled or rejected.  Forwards
         * the resolution to the returned promise when the callback is done.
         * The callback can return a promise to defer completion.
         * @param {Any*} promise
         * @param {Function} callback to observe the resolution of the given
         * promise, takes no arguments.
         * @returns a promise for the resolution of the given promise when
         * ``fin`` is done.
         */
        Q.fin = Q["finally"] = function (object, callback) { // XXX legacy
          return Q(object)["finally"](callback)
        }

        Promise.prototype.fin = Promise.prototype["finally"] = function (callback) { // XXX legacy
          if (!callback || typeof callback.apply !== "function") {
            throw new Error("Q can't apply finally callback")
          }
          callback = Q(callback)
          return this.then(
            function (value) {
              return callback.fcall().then(function () {
                return value
              })
            },
            function (reason) {
              // TODO attempt to recycle the rejection with "this".
              return callback.fcall().then(function () {
                throw reason
              })
            }
          )
        }

        /**
         * Terminates a chain of promises, forcing rejections to be
         * thrown as exceptions.
         * @param {Any*} promise at the end of a chain of promises
         * @returns nothing
         */
        Q.done = function (object, fulfilled, rejected, progress) {
          return Q(object).done(fulfilled, rejected, progress)
        }

        Promise.prototype.done = function (fulfilled, rejected, progress) {
          var onUnhandledError = function (error) {
            // forward to a future turn so that ``when``
            // does not catch it and turn it into a rejection.
            Q.nextTick(function () {
              makeStackTraceLong(error, promise)
              if (Q.onerror) {
                Q.onerror(error)
              } else {
                throw error
              }
            })
          }

          // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
          var promise =
            fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this

          if (typeof process === "object" && process && process.domain) {
            onUnhandledError = process.domain.bind(onUnhandledError)
          }

          promise.then(void 0, onUnhandledError)
        }

        /**
         * Causes a promise to be rejected if it does not get fulfilled before
         * some milliseconds time out.
         * @param {Any*} promise
         * @param {Number} milliseconds timeout
         * @param {Any*} custom error message or Error object (optional)
         * @returns a promise for the resolution of the given promise if it is
         * fulfilled before the timeout, otherwise rejected.
         */
        Q.timeout = function (object, ms, error) {
          return Q(object).timeout(ms, error)
        }

        Promise.prototype.timeout = function (ms, error) {
          var deferred = defer()
          var timeoutId = setTimeout(function () {
            if (!error || "string" === typeof error) {
              error = new Error(error || "Timed out after " + ms + " ms")
              error.code = "ETIMEDOUT"
            }
            deferred.reject(error)
          }, ms)

          this.then(
            function (value) {
              clearTimeout(timeoutId)
              deferred.resolve(value)
            },
            function (exception) {
              clearTimeout(timeoutId)
              deferred.reject(exception)
            },
            deferred.notify
          )

          return deferred.promise
        }

        /**
         * Returns a promise for the given value (or promised value), some
         * milliseconds after it resolved. Passes rejections immediately.
         * @param {Any*} promise
         * @param {Number} milliseconds
         * @returns a promise for the resolution of the given promise after milliseconds
         * time has elapsed since the resolution of the given promise.
         * If the given promise rejects, that is passed immediately.
         */
        Q.delay = function (object, timeout) {
          if (timeout === void 0) {
            timeout = object
            object = void 0
          }
          return Q(object).delay(timeout)
        }

        Promise.prototype.delay = function (timeout) {
          return this.then(function (value) {
            var deferred = defer()
            setTimeout(function () {
              deferred.resolve(value)
            }, timeout)
            return deferred.promise
          })
        }

        /**
         * Passes a continuation to a Node function, which is called with the given
         * arguments provided as an array, and returns a promise.
         *
         *      Q.nfapply(FS.readFile, [__filename])
         *      .then(function (content) {
         *      })
         *
         */
        Q.nfapply = function (callback, args) {
          return Q(callback).nfapply(args)
        }

        Promise.prototype.nfapply = function (args) {
          var deferred = defer()
          var nodeArgs = array_slice(args)
          nodeArgs.push(deferred.makeNodeResolver())
          this.fapply(nodeArgs).fail(deferred.reject)
          return deferred.promise
        }

        /**
         * Passes a continuation to a Node function, which is called with the given
         * arguments provided individually, and returns a promise.
         * @example
         * Q.nfcall(FS.readFile, __filename)
         * .then(function (content) {
         * })
         *
         */
        Q.nfcall = function (callback /*...args*/) {
          var args = array_slice(arguments, 1)
          return Q(callback).nfapply(args)
        }

        Promise.prototype.nfcall = function (/*...args*/) {
          var nodeArgs = array_slice(arguments)
          var deferred = defer()
          nodeArgs.push(deferred.makeNodeResolver())
          this.fapply(nodeArgs).fail(deferred.reject)
          return deferred.promise
        }

        /**
         * Wraps a NodeJS continuation passing function and returns an equivalent
         * version that returns a promise.
         * @example
         * Q.nfbind(FS.readFile, __filename)("utf-8")
         * .then(console.log)
         * .done()
         */
        Q.nfbind = Q.denodeify = function (callback /*...args*/) {
          if (callback === undefined) {
            throw new Error("Q can't wrap an undefined function")
          }
          var baseArgs = array_slice(arguments, 1)
          return function () {
            var nodeArgs = baseArgs.concat(array_slice(arguments))
            var deferred = defer()
            nodeArgs.push(deferred.makeNodeResolver())
            Q(callback).fapply(nodeArgs).fail(deferred.reject)
            return deferred.promise
          }
        }

        Promise.prototype.nfbind = Promise.prototype.denodeify = function (/*...args*/) {
          var args = array_slice(arguments)
          args.unshift(this)
          return Q.denodeify.apply(void 0, args)
        }

        Q.nbind = function (callback, thisp /*...args*/) {
          var baseArgs = array_slice(arguments, 2)
          return function () {
            var nodeArgs = baseArgs.concat(array_slice(arguments))
            var deferred = defer()
            nodeArgs.push(deferred.makeNodeResolver())
            function bound() {
              return callback.apply(thisp, arguments)
            }
            Q(bound).fapply(nodeArgs).fail(deferred.reject)
            return deferred.promise
          }
        }

        Promise.prototype.nbind = function (/*thisp, ...args*/) {
          var args = array_slice(arguments, 0)
          args.unshift(this)
          return Q.nbind.apply(void 0, args)
        }

        /**
         * Calls a method of a Node-style object that accepts a Node-style
         * callback with a given array of arguments, plus a provided callback.
         * @param object an object that has the named method
         * @param {String} name name of the method of object
         * @param {Array} args arguments to pass to the method; the callback
         * will be provided by Q and appended to these arguments.
         * @returns a promise for the value or error
         */
        Q.nmapply = Q.npost = function (object, name, args) { // XXX As proposed by "Redsandro"
          return Q(object).npost(name, args)
        }

        Promise.prototype.nmapply = Promise.prototype.npost = function (name, args) { // XXX As proposed by "Redsandro"
          var nodeArgs = array_slice(args || [])
          var deferred = defer()
          nodeArgs.push(deferred.makeNodeResolver())
          this.dispatch("post", [name, nodeArgs]).fail(deferred.reject)
          return deferred.promise
        }

        /**
         * Calls a method of a Node-style object that accepts a Node-style
         * callback, forwarding the given variadic arguments, plus a provided
         * callback argument.
         * @param object an object that has the named method
         * @param {String} name name of the method of object
         * @param ...args arguments to pass to the method; the callback will
         * be provided by Q and appended to these arguments.
         * @returns a promise for the value or error
         */
        Q.nsend = // XXX Based on Mark Miller's proposed "send"
          Q.nmcall = // XXX Based on "Redsandro's" proposal
          Q.ninvoke =
            function (object, name /*...args*/) {
              var nodeArgs = array_slice(arguments, 2)
              var deferred = defer()
              nodeArgs.push(deferred.makeNodeResolver())
              Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject)
              return deferred.promise
            }

        Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
          Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
          Promise.prototype.ninvoke =
            function (name /*...args*/) {
              var nodeArgs = array_slice(arguments, 1)
              var deferred = defer()
              nodeArgs.push(deferred.makeNodeResolver())
              this.dispatch("post", [name, nodeArgs]).fail(deferred.reject)
              return deferred.promise
            }

        /**
         * If a function would like to support both Node continuation-passing-style and
         * promise-returning-style, it can end its internal promise chain with
         * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
         * elects to use a nodeback, the result will be sent there.  If they do not
         * pass a nodeback, they will receive the result promise.
         * @param object a result (or a promise for a result)
         * @param {Function} nodeback a Node.js-style callback
         * @returns either the promise or nothing
         */
        Q.nodeify = nodeify
        function nodeify(object, nodeback) {
          return Q(object).nodeify(nodeback)
        }

        Promise.prototype.nodeify = function (nodeback) {
          if (nodeback) {
            this.then(
              function (value) {
                Q.nextTick(function () {
                  nodeback(null, value)
                })
              },
              function (error) {
                Q.nextTick(function () {
                  nodeback(error)
                })
              }
            )
          } else {
            return this
          }
        }

        Q.noConflict = function () {
          throw new Error("Q.noConflict only works when Q is used as a global")
        }

        // All code before this point will be filtered from stack traces.
        var qEndingLine = captureLine()

        return Q
      })

      /***/
    },

    /***/ 67214: /***/ (module) => {
      "use strict"

      const codes = {}

      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error
        }

        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message
          } else {
            return message(arg1, arg2, arg3)
          }
        }

        class NodeError extends Base {
          constructor(arg1, arg2, arg3) {
            super(getMessage(arg1, arg2, arg3))
          }
        }

        NodeError.prototype.name = Base.name
        NodeError.prototype.code = code

        codes[code] = NodeError
      }

      // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          const len = expected.length
          expected = expected.map((i) => String(i))
          if (len > 2) {
            return (
              `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1]
            )
          } else if (len === 2) {
            return `one of ${thing} ${expected[0]} or ${expected[1]}`
          } else {
            return `of ${thing} ${expected[0]}`
          }
        } else {
          return `of ${thing} ${String(expected)}`
        }
      }

      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search
      }

      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
      function endsWith(str, search, this_len) {
        if (this_len === undefined || this_len > str.length) {
          this_len = str.length
        }
        return str.substring(this_len - search.length, this_len) === search
      }

      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
      function includes(str, search, start) {
        if (typeof start !== "number") {
          start = 0
        }

        if (start + search.length > str.length) {
          return false
        } else {
          return str.indexOf(search, start) !== -1
        }
      }

      createErrorType(
        "ERR_INVALID_OPT_VALUE",
        function (name, value) {
          return 'The value "' + value + '" is invalid for option "' + name + '"'
        },
        TypeError
      )
      createErrorType(
        "ERR_INVALID_ARG_TYPE",
        function (name, expected, actual) {
          // determiner: 'must be' or 'must not be'
          let determiner
          if (typeof expected === "string" && startsWith(expected, "not ")) {
            determiner = "must not be"
            expected = expected.replace(/^not /, "")
          } else {
            determiner = "must be"
          }

          let msg
          if (endsWith(name, " argument")) {
            // For cases like 'first argument'
            msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`
          } else {
            const type = includes(name, ".") ? "property" : "argument"
            msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`
          }

          msg += `. Received type ${typeof actual}`
          return msg
        },
        TypeError
      )
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF")
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function (name) {
        return "The " + name + " method is not implemented"
      })
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close")
      createErrorType("ERR_STREAM_DESTROYED", function (name) {
        return "Cannot call " + name + " after a stream was destroyed"
      })
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times")
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable")
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end")
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError)
      createErrorType(
        "ERR_UNKNOWN_ENCODING",
        function (arg) {
          return "Unknown encoding: " + arg
        },
        TypeError
      )
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event")

      module.exports.q = codes

      /***/
    },

    /***/ 41359: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a duplex stream is just a stream that is both readable and writable.
      // Since JS doesn't have multiple prototypal inheritance, this class
      // prototypally inherits from Readable, and then parasitically from
      // Writable.

      /*<replacement>*/

      var objectKeys =
        Object.keys ||
        function (obj) {
          var keys = []

          for (var key in obj) {
            keys.push(key)
          }

          return keys
        }
      /*</replacement>*/

      module.exports = Duplex

      var Readable = __nccwpck_require__(51433)

      var Writable = __nccwpck_require__(26993)

      __nccwpck_require__(44124)(Duplex, Readable)

      {
        // Allow the keys array to be GC'ed.
        var keys = objectKeys(Writable.prototype)

        for (var v = 0; v < keys.length; v++) {
          var method = keys[v]
          if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method]
        }
      }

      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options)
        Readable.call(this, options)
        Writable.call(this, options)
        this.allowHalfOpen = true

        if (options) {
          if (options.readable === false) this.readable = false
          if (options.writable === false) this.writable = false

          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false
            this.once("end", onend)
          }
        }
      }

      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark
        }
      })
      Object.defineProperty(Duplex.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer()
        }
      })
      Object.defineProperty(Duplex.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.length
        }
      }) // the no-half-open enforcer

      function onend() {
        // If the writable side ended, then we're ok.
        if (this._writableState.ended) return // no more data can be written.
        // But allow more writes to happen in this tick.

        process.nextTick(onEndNT, this)
      }

      function onEndNT(self) {
        self.end()
      }

      Object.defineProperty(Duplex.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._readableState === undefined || this._writableState === undefined) {
            return false
          }

          return this._readableState.destroyed && this._writableState.destroyed
        },
        set: function set(value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (this._readableState === undefined || this._writableState === undefined) {
            return
          } // backward compatibility, the user is explicitly
          // managing destroyed

          this._readableState.destroyed = value
          this._writableState.destroyed = value
        }
      })

      /***/
    },

    /***/ 81542: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a passthrough stream.
      // basically just the most minimal sort of Transform stream.
      // Every written chunk gets output as-is.

      module.exports = PassThrough

      var Transform = __nccwpck_require__(34415)

      __nccwpck_require__(44124)(PassThrough, Transform)

      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options)
        Transform.call(this, options)
      }

      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk)
      }

      /***/
    },

    /***/ 51433: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      module.exports = Readable
      /*<replacement>*/

      var Duplex
      /*</replacement>*/

      Readable.ReadableState = ReadableState
      /*<replacement>*/

      var EE = __nccwpck_require__(82361).EventEmitter

      var EElistenerCount = function EElistenerCount(emitter, type) {
        return emitter.listeners(type).length
      }
      /*</replacement>*/

      /*<replacement>*/

      var Stream = __nccwpck_require__(62387)
      /*</replacement>*/

      var Buffer = __nccwpck_require__(14300).Buffer

      var OurUint8Array = global.Uint8Array || function () {}

      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk)
      }

      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array
      }
      /*<replacement>*/

      var debugUtil = __nccwpck_require__(73837)

      var debug

      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog("stream")
      } else {
        debug = function debug() {}
      }
      /*</replacement>*/

      var BufferList = __nccwpck_require__(52746)

      var destroyImpl = __nccwpck_require__(97049)

      var _require = __nccwpck_require__(39948),
        getHighWaterMark = _require.getHighWaterMark

      var _require$codes = __nccwpck_require__(67214) /* .codes */.q,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT // Lazy loaded to improve the startup performance.

      var StringDecoder
      var createReadableStreamAsyncIterator
      var from

      __nccwpck_require__(44124)(Readable, Stream)

      var errorOrDestroy = destroyImpl.errorOrDestroy
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"]

      function prependListener(emitter, event, fn) {
        // Sadly this is not cacheable as some libraries bundle their own
        // event emitter implementation with them.
        if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn) // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.

        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn)
        else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn)
        else emitter._events[event] = [fn, emitter._events[event]]
      }

      function ReadableState(options, stream, isDuplex) {
        Duplex = Duplex || __nccwpck_require__(41359)
        options = options || {} // Duplex streams are both readable and writable, but share
        // the same options object.
        // However, some cases require setting options to different
        // values for the readable and the writable sides of the duplex stream.
        // These options can be provided separately as readableXXX and writableXXX.

        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex // object stream flag. Used to make read(n) ignore n and to
        // make all the buffer merging and length checks go away

        this.objectMode = !!options.objectMode
        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode // the point at which it stops calling _read() to fill the buffer
        // Note: 0 is a valid value, means "don't call _read preemptively ever"

        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex) // A linked list is used to store data chunks instead of an array because the
        // linked list can remove elements from the beginning faster than
        // array.shift()

        this.buffer = new BufferList()
        this.length = 0
        this.pipes = null
        this.pipesCount = 0
        this.flowing = null
        this.ended = false
        this.endEmitted = false
        this.reading = false // a flag to be able to tell if the event 'readable'/'data' is emitted
        // immediately, or on a later tick.  We set this to true at first, because
        // any actions that shouldn't happen until "later" should generally also
        // not happen before the first read call.

        this.sync = true // whenever we return null, then we set a flag to say
        // that we're awaiting a 'readable' event emission.

        this.needReadable = false
        this.emittedReadable = false
        this.readableListening = false
        this.resumeScheduled = false
        this.paused = true // Should close be emitted on destroy. Defaults to true.

        this.emitClose = options.emitClose !== false // Should .destroy() be called after 'end' (and potentially 'finish')

        this.autoDestroy = !!options.autoDestroy // has it been destroyed

        this.destroyed = false // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.

        this.defaultEncoding = options.defaultEncoding || "utf8" // the number of writers that are awaiting a drain event in .pipe()s

        this.awaitDrain = 0 // if true, a maybeReadMore has been scheduled

        this.readingMore = false
        this.decoder = null
        this.encoding = null

        if (options.encoding) {
          if (!StringDecoder) StringDecoder = __nccwpck_require__(94841) /* .StringDecoder */.s
          this.decoder = new StringDecoder(options.encoding)
          this.encoding = options.encoding
        }
      }

      function Readable(options) {
        Duplex = Duplex || __nccwpck_require__(41359)
        if (!(this instanceof Readable)) return new Readable(options) // Checking for a Stream.Duplex instance is faster here instead of inside
        // the ReadableState constructor, at least with V8 6.5

        var isDuplex = this instanceof Duplex
        this._readableState = new ReadableState(options, this, isDuplex) // legacy

        this.readable = true

        if (options) {
          if (typeof options.read === "function") this._read = options.read
          if (typeof options.destroy === "function") this._destroy = options.destroy
        }

        Stream.call(this)
      }

      Object.defineProperty(Readable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._readableState === undefined) {
            return false
          }

          return this._readableState.destroyed
        },
        set: function set(value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (!this._readableState) {
            return
          } // backward compatibility, the user is explicitly
          // managing destroyed

          this._readableState.destroyed = value
        }
      })
      Readable.prototype.destroy = destroyImpl.destroy
      Readable.prototype._undestroy = destroyImpl.undestroy

      Readable.prototype._destroy = function (err, cb) {
        cb(err)
      } // Manually shove something into the read() buffer.
      // This returns true if the highWaterMark has not been hit yet,
      // similar to how Writable.write() returns true if you should
      // write() some more.

      Readable.prototype.push = function (chunk, encoding) {
        var state = this._readableState
        var skipChunkCheck

        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding

            if (encoding !== state.encoding) {
              chunk = Buffer.from(chunk, encoding)
              encoding = ""
            }

            skipChunkCheck = true
          }
        } else {
          skipChunkCheck = true
        }

        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck)
      } // Unshift should *always* be something directly out of read()

      Readable.prototype.unshift = function (chunk) {
        return readableAddChunk(this, chunk, null, true, false)
      }

      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug("readableAddChunk", chunk)
        var state = stream._readableState

        if (chunk === null) {
          state.reading = false
          onEofChunk(stream, state)
        } else {
          var er
          if (!skipChunkCheck) er = chunkInvalid(state, chunk)

          if (er) {
            errorOrDestroy(stream, er)
          } else if (state.objectMode || (chunk && chunk.length > 0)) {
            if (
              typeof chunk !== "string" &&
              !state.objectMode &&
              Object.getPrototypeOf(chunk) !== Buffer.prototype
            ) {
              chunk = _uint8ArrayToBuffer(chunk)
            }

            if (addToFront) {
              if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT())
              else addChunk(stream, state, chunk, true)
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF())
            } else if (state.destroyed) {
              return false
            } else {
              state.reading = false

              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk)
                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false)
                else maybeReadMore(stream, state)
              } else {
                addChunk(stream, state, chunk, false)
              }
            }
          } else if (!addToFront) {
            state.reading = false
            maybeReadMore(stream, state)
          }
        } // We can push more data if we are below the highWaterMark.
        // Also, if we have no data yet, we can stand some more bytes.
        // This is to work around cases where hwm=0, such as the repl.

        return !state.ended && (state.length < state.highWaterMark || state.length === 0)
      }

      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0
          stream.emit("data", chunk)
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length
          if (addToFront) state.buffer.unshift(chunk)
          else state.buffer.push(chunk)
          if (state.needReadable) emitReadable(stream)
        }

        maybeReadMore(stream, state)
      }

      function chunkInvalid(state, chunk) {
        var er

        if (
          !_isUint8Array(chunk) &&
          typeof chunk !== "string" &&
          chunk !== undefined &&
          !state.objectMode
        ) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk)
        }

        return er
      }

      Readable.prototype.isPaused = function () {
        return this._readableState.flowing === false
      } // backwards compatibility.

      Readable.prototype.setEncoding = function (enc) {
        if (!StringDecoder) StringDecoder = __nccwpck_require__(94841) /* .StringDecoder */.s
        var decoder = new StringDecoder(enc)
        this._readableState.decoder = decoder // If setEncoding(null), decoder.encoding equals utf8

        this._readableState.encoding = this._readableState.decoder.encoding // Iterate over current buffer to convert already stored Buffers:

        var p = this._readableState.buffer.head
        var content = ""

        while (p !== null) {
          content += decoder.write(p.data)
          p = p.next
        }

        this._readableState.buffer.clear()

        if (content !== "") this._readableState.buffer.push(content)
        this._readableState.length = content.length
        return this
      } // Don't raise the hwm > 1GB

      var MAX_HWM = 0x40000000

      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
          n = MAX_HWM
        } else {
          // Get the next highest power of 2 to prevent increasing hwm excessively in
          // tiny amounts
          n--
          n |= n >>> 1
          n |= n >>> 2
          n |= n >>> 4
          n |= n >>> 8
          n |= n >>> 16
          n++
        }

        return n
      } // This function is designed to be inlinable, so please take care when making
      // changes to the function body.

      function howMuchToRead(n, state) {
        if (n <= 0 || (state.length === 0 && state.ended)) return 0
        if (state.objectMode) return 1

        if (n !== n) {
          // Only flow one buffer at a time
          if (state.flowing && state.length) return state.buffer.head.data.length
          else return state.length
        } // If we're asking for more than the current hwm, then raise the hwm.

        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n)
        if (n <= state.length) return n // Don't have enough

        if (!state.ended) {
          state.needReadable = true
          return 0
        }

        return state.length
      } // you can override either this method, or the async _read(n) below.

      Readable.prototype.read = function (n) {
        debug("read", n)
        n = parseInt(n, 10)
        var state = this._readableState
        var nOrig = n
        if (n !== 0) state.emittedReadable = false // if we're doing read(0) to trigger a readable event, but we
        // already have a bunch of data in the buffer, then just trigger
        // the 'readable' event and move on.

        if (
          n === 0 &&
          state.needReadable &&
          ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) ||
            state.ended)
        ) {
          debug("read: emitReadable", state.length, state.ended)
          if (state.length === 0 && state.ended) endReadable(this)
          else emitReadable(this)
          return null
        }

        n = howMuchToRead(n, state) // if we've ended, and we're now clear, then finish it up.

        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this)
          return null
        } // All the actual chunk generation logic needs to be
        // *below* the call to _read.  The reason is that in certain
        // synthetic stream cases, such as passthrough streams, _read
        // may be a completely synchronous operation which may change
        // the state of the read buffer, providing enough data when
        // before there was *not* enough.
        //
        // So, the steps are:
        // 1. Figure out what the state of things will be after we do
        // a read from the buffer.
        //
        // 2. If that resulting state will trigger a _read, then call _read.
        // Note that this may be asynchronous, or synchronous.  Yes, it is
        // deeply ugly to write APIs this way, but that still doesn't mean
        // that the Readable class should behave improperly, as streams are
        // designed to be sync/async agnostic.
        // Take note if the _read call is sync or async (ie, if the read call
        // has returned yet), so that we know whether or not it's safe to emit
        // 'readable' etc.
        //
        // 3. Actually pull the requested chunks out of the buffer and return.
        // if we need a readable event, then we need to do some reading.

        var doRead = state.needReadable
        debug("need readable", doRead) // if we currently have less than the highWaterMark, then also read some

        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true
          debug("length less than watermark", doRead)
        } // however, if we've ended, then there's no point, and if we're already
        // reading, then it's unnecessary.

        if (state.ended || state.reading) {
          doRead = false
          debug("reading or ended", doRead)
        } else if (doRead) {
          debug("do read")
          state.reading = true
          state.sync = true // if the length is currently zero, then we *need* a readable event.

          if (state.length === 0) state.needReadable = true // call internal read method

          this._read(state.highWaterMark)

          state.sync = false // If _read pushed data synchronously, then `reading` will be false,
          // and we need to re-evaluate how much data we can return to the user.

          if (!state.reading) n = howMuchToRead(nOrig, state)
        }

        var ret
        if (n > 0) ret = fromList(n, state)
        else ret = null

        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark
          n = 0
        } else {
          state.length -= n
          state.awaitDrain = 0
        }

        if (state.length === 0) {
          // If we have nothing in the buffer, then we want to know
          // as soon as we *do* get something into the buffer.
          if (!state.ended) state.needReadable = true // If we tried to read() past the EOF, then emit end on the next tick.

          if (nOrig !== n && state.ended) endReadable(this)
        }

        if (ret !== null) this.emit("data", ret)
        return ret
      }

      function onEofChunk(stream, state) {
        debug("onEofChunk")
        if (state.ended) return

        if (state.decoder) {
          var chunk = state.decoder.end()

          if (chunk && chunk.length) {
            state.buffer.push(chunk)
            state.length += state.objectMode ? 1 : chunk.length
          }
        }

        state.ended = true

        if (state.sync) {
          // if we are sync, wait until next tick to emit the data.
          // Otherwise we risk emitting data in the flow()
          // the readable code triggers during a read() call
          emitReadable(stream)
        } else {
          // emit 'readable' now to make sure it gets picked up.
          state.needReadable = false

          if (!state.emittedReadable) {
            state.emittedReadable = true
            emitReadable_(stream)
          }
        }
      } // Don't emit readable right away in sync mode, because this can trigger
      // another read() call => stack overflow.  This way, it might trigger
      // a nextTick recursion warning, but that's not so bad.

      function emitReadable(stream) {
        var state = stream._readableState
        debug("emitReadable", state.needReadable, state.emittedReadable)
        state.needReadable = false

        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing)
          state.emittedReadable = true
          process.nextTick(emitReadable_, stream)
        }
      }

      function emitReadable_(stream) {
        var state = stream._readableState
        debug("emitReadable_", state.destroyed, state.length, state.ended)

        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable")
          state.emittedReadable = false
        } // The stream needs another readable event if
        // 1. It is not flowing, as the flow mechanism will take
        //    care of it.
        // 2. It is not ended.
        // 3. It is below the highWaterMark, so we can schedule
        //    another readable later.

        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark
        flow(stream)
      } // at this point, the user has presumably seen the 'readable' event,
      // and called read() to consume some data.  that may have triggered
      // in turn another _read(n) call, in which case reading = true if
      // it's in progress.
      // However, if we're not ended, or reading, and the length < hwm,
      // then go ahead and try to read some more preemptively.

      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true
          process.nextTick(maybeReadMore_, stream, state)
        }
      }

      function maybeReadMore_(stream, state) {
        // Attempt to read more data if we should.
        //
        // The conditions for reading more data are (one of):
        // - Not enough data buffered (state.length < state.highWaterMark). The loop
        //   is responsible for filling the buffer with enough data if such data
        //   is available. If highWaterMark is 0 and we are not in the flowing mode
        //   we should _not_ attempt to buffer any extra data. We'll get more data
        //   when the stream consumer calls read() instead.
        // - No data in the buffer, and the stream is in flowing mode. In this mode
        //   the loop below is responsible for ensuring read() is called. Failing to
        //   call read here would abort the flow and there's no other mechanism for
        //   continuing the flow if the stream consumer has just subscribed to the
        //   'data' event.
        //
        // In addition to the above conditions to keep reading data, the following
        // conditions prevent the data from being read:
        // - The stream has ended (state.ended).
        // - There is already a pending 'read' operation (state.reading). This is a
        //   case where the the stream has called the implementation defined _read()
        //   method, but they are processing the call asynchronously and have _not_
        //   called push() with new data. In this case we skip performing more
        //   read()s. The execution ends in this method again after the _read() ends
        //   up calling push() with more data.
        while (
          !state.reading &&
          !state.ended &&
          (state.length < state.highWaterMark || (state.flowing && state.length === 0))
        ) {
          var len = state.length
          debug("maybeReadMore read 0")
          stream.read(0)
          if (len === state.length)
            // didn't get any data, stop spinning.
            break
        }

        state.readingMore = false
      } // abstract method.  to be overridden in specific implementation classes.
      // call cb(er, data) where data is <= n in length.
      // for virtual (non-string, non-buffer) streams, "length" is somewhat
      // arbitrary, and perhaps not very meaningful.

      Readable.prototype._read = function (n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"))
      }

      Readable.prototype.pipe = function (dest, pipeOpts) {
        var src = this
        var state = this._readableState

        switch (state.pipesCount) {
          case 0:
            state.pipes = dest
            break

          case 1:
            state.pipes = [state.pipes, dest]
            break

          default:
            state.pipes.push(dest)
            break
        }

        state.pipesCount += 1
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts)
        var doEnd =
          (!pipeOpts || pipeOpts.end !== false) &&
          dest !== process.stdout &&
          dest !== process.stderr
        var endFn = doEnd ? onend : unpipe
        if (state.endEmitted) process.nextTick(endFn)
        else src.once("end", endFn)
        dest.on("unpipe", onunpipe)

        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe")

          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true
              cleanup()
            }
          }
        }

        function onend() {
          debug("onend")
          dest.end()
        } // when the dest drains, it reduces the awaitDrain counter
        // on the source.  This would be more elegant with a .once()
        // handler in flow(), but adding and removing repeatedly is
        // too slow.

        var ondrain = pipeOnDrain(src)
        dest.on("drain", ondrain)
        var cleanedUp = false

        function cleanup() {
          debug("cleanup") // cleanup event handlers once the pipe is broken

          dest.removeListener("close", onclose)
          dest.removeListener("finish", onfinish)
          dest.removeListener("drain", ondrain)
          dest.removeListener("error", onerror)
          dest.removeListener("unpipe", onunpipe)
          src.removeListener("end", onend)
          src.removeListener("end", unpipe)
          src.removeListener("data", ondata)
          cleanedUp = true // if the reader is waiting for a drain event from this
          // specific writer, then it would cause it to never start
          // flowing again.
          // So, if this is awaiting a drain, then we just call it now.
          // If we don't know, then assume that we are waiting for one.

          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain()
        }

        src.on("data", ondata)

        function ondata(chunk) {
          debug("ondata")
          var ret = dest.write(chunk)
          debug("dest.write", ret)

          if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if (
              ((state.pipesCount === 1 && state.pipes === dest) ||
                (state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1)) &&
              !cleanedUp
            ) {
              debug("false write response, pause", state.awaitDrain)
              state.awaitDrain++
            }

            src.pause()
          }
        } // if the dest has an error, then stop piping into it.
        // however, don't suppress the throwing behavior for this.

        function onerror(er) {
          debug("onerror", er)
          unpipe()
          dest.removeListener("error", onerror)
          if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er)
        } // Make sure our error handler is attached before userland ones.

        prependListener(dest, "error", onerror) // Both close and finish should trigger unpipe, but only once.

        function onclose() {
          dest.removeListener("finish", onfinish)
          unpipe()
        }

        dest.once("close", onclose)

        function onfinish() {
          debug("onfinish")
          dest.removeListener("close", onclose)
          unpipe()
        }

        dest.once("finish", onfinish)

        function unpipe() {
          debug("unpipe")
          src.unpipe(dest)
        } // tell the dest that it's being piped to

        dest.emit("pipe", src) // start the flow if it hasn't been started already.

        if (!state.flowing) {
          debug("pipe resume")
          src.resume()
        }

        return dest
      }

      function pipeOnDrain(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState
          debug("pipeOnDrain", state.awaitDrain)
          if (state.awaitDrain) state.awaitDrain--

          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true
            flow(src)
          }
        }
      }

      Readable.prototype.unpipe = function (dest) {
        var state = this._readableState
        var unpipeInfo = {
          hasUnpiped: false
        } // if we're not piping anywhere, then do nothing.

        if (state.pipesCount === 0) return this // just one destination.  most common case.

        if (state.pipesCount === 1) {
          // passed in one, but it's not the right one.
          if (dest && dest !== state.pipes) return this
          if (!dest) dest = state.pipes // got a match.

          state.pipes = null
          state.pipesCount = 0
          state.flowing = false
          if (dest) dest.emit("unpipe", this, unpipeInfo)
          return this
        } // slow case. multiple pipe destinations.

        if (!dest) {
          // remove all.
          var dests = state.pipes
          var len = state.pipesCount
          state.pipes = null
          state.pipesCount = 0
          state.flowing = false

          for (var i = 0; i < len; i++) {
            dests[i].emit("unpipe", this, {
              hasUnpiped: false
            })
          }

          return this
        } // try to find the right one.

        var index = indexOf(state.pipes, dest)
        if (index === -1) return this
        state.pipes.splice(index, 1)
        state.pipesCount -= 1
        if (state.pipesCount === 1) state.pipes = state.pipes[0]
        dest.emit("unpipe", this, unpipeInfo)
        return this
      } // set up data events if they are asked for
      // Ensure readable listeners eventually get something

      Readable.prototype.on = function (ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn)
        var state = this._readableState

        if (ev === "data") {
          // update readableListening so that resume() may be a no-op
          // a few lines down. This is needed to support once('readable').
          state.readableListening = this.listenerCount("readable") > 0 // Try start flowing on next tick if stream isn't explicitly paused

          if (state.flowing !== false) this.resume()
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true
            state.flowing = false
            state.emittedReadable = false
            debug("on readable", state.length, state.reading)

            if (state.length) {
              emitReadable(this)
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this)
            }
          }
        }

        return res
      }

      Readable.prototype.addListener = Readable.prototype.on

      Readable.prototype.removeListener = function (ev, fn) {
        var res = Stream.prototype.removeListener.call(this, ev, fn)

        if (ev === "readable") {
          // We need to check if there is someone still listening to
          // readable and reset the state. However this needs to happen
          // after readable has been emitted but before I/O (nextTick) to
          // support once('readable', fn) cycles. This means that calling
          // resume within the same tick will have no
          // effect.
          process.nextTick(updateReadableListening, this)
        }

        return res
      }

      Readable.prototype.removeAllListeners = function (ev) {
        var res = Stream.prototype.removeAllListeners.apply(this, arguments)

        if (ev === "readable" || ev === undefined) {
          // We need to check if there is someone still listening to
          // readable and reset the state. However this needs to happen
          // after readable has been emitted but before I/O (nextTick) to
          // support once('readable', fn) cycles. This means that calling
          // resume within the same tick will have no
          // effect.
          process.nextTick(updateReadableListening, this)
        }

        return res
      }

      function updateReadableListening(self) {
        var state = self._readableState
        state.readableListening = self.listenerCount("readable") > 0

        if (state.resumeScheduled && !state.paused) {
          // flowing needs to be set to true now, otherwise
          // the upcoming resume will not flow.
          state.flowing = true // crude way to check if we should resume
        } else if (self.listenerCount("data") > 0) {
          self.resume()
        }
      }

      function nReadingNextTick(self) {
        debug("readable nexttick read 0")
        self.read(0)
      } // pause() and resume() are remnants of the legacy readable stream API
      // If the user uses them, then switch into old mode.

      Readable.prototype.resume = function () {
        var state = this._readableState

        if (!state.flowing) {
          debug("resume") // we flow only if there is no one listening
          // for readable, but we still have to call
          // resume()

          state.flowing = !state.readableListening
          resume(this, state)
        }

        state.paused = false
        return this
      }

      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true
          process.nextTick(resume_, stream, state)
        }
      }

      function resume_(stream, state) {
        debug("resume", state.reading)

        if (!state.reading) {
          stream.read(0)
        }

        state.resumeScheduled = false
        stream.emit("resume")
        flow(stream)
        if (state.flowing && !state.reading) stream.read(0)
      }

      Readable.prototype.pause = function () {
        debug("call pause flowing=%j", this._readableState.flowing)

        if (this._readableState.flowing !== false) {
          debug("pause")
          this._readableState.flowing = false
          this.emit("pause")
        }

        this._readableState.paused = true
        return this
      }

      function flow(stream) {
        var state = stream._readableState
        debug("flow", state.flowing)

        while (state.flowing && stream.read() !== null) {}
      } // wrap an old-style stream as the async data source.
      // This is *not* part of the readable stream interface.
      // It is an ugly unfortunate mess of history.

      Readable.prototype.wrap = function (stream) {
        var _this = this

        var state = this._readableState
        var paused = false
        stream.on("end", function () {
          debug("wrapped end")

          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end()
            if (chunk && chunk.length) _this.push(chunk)
          }

          _this.push(null)
        })
        stream.on("data", function (chunk) {
          debug("wrapped data")
          if (state.decoder) chunk = state.decoder.write(chunk) // don't skip over falsy values in objectMode

          if (state.objectMode && (chunk === null || chunk === undefined)) return
          else if (!state.objectMode && (!chunk || !chunk.length)) return

          var ret = _this.push(chunk)

          if (!ret) {
            paused = true
            stream.pause()
          }
        }) // proxy all the other methods.
        // important when wrapping filters and duplexes.

        for (var i in stream) {
          if (this[i] === undefined && typeof stream[i] === "function") {
            this[i] = (function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments)
              }
            })(i)
          }
        } // proxy certain important events.

        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]))
        } // when we try to consume some more bytes, simply unpause the
        // underlying stream.

        this._read = function (n) {
          debug("wrapped _read", n)

          if (paused) {
            paused = false
            stream.resume()
          }
        }

        return this
      }

      if (typeof Symbol === "function") {
        Readable.prototype[Symbol.asyncIterator] = function () {
          if (createReadableStreamAsyncIterator === undefined) {
            createReadableStreamAsyncIterator = __nccwpck_require__(43306)
          }

          return createReadableStreamAsyncIterator(this)
        }
      }

      Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.highWaterMark
        }
      })
      Object.defineProperty(Readable.prototype, "readableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState && this._readableState.buffer
        }
      })
      Object.defineProperty(Readable.prototype, "readableFlowing", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.flowing
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state
          }
        }
      }) // exposed for testing purposes only.

      Readable._fromList = fromList
      Object.defineProperty(Readable.prototype, "readableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.length
        }
      }) // Pluck off n bytes from an array of buffers.
      // Length is the combined lengths of all the buffers in the list.
      // This function is designed to be inlinable, so please take care when making
      // changes to the function body.

      function fromList(n, state) {
        // nothing buffered
        if (state.length === 0) return null
        var ret
        if (state.objectMode) ret = state.buffer.shift()
        else if (!n || n >= state.length) {
          // read it all, truncate the list
          if (state.decoder) ret = state.buffer.join("")
          else if (state.buffer.length === 1) ret = state.buffer.first()
          else ret = state.buffer.concat(state.length)
          state.buffer.clear()
        } else {
          // read part of list
          ret = state.buffer.consume(n, state.decoder)
        }
        return ret
      }

      function endReadable(stream) {
        var state = stream._readableState
        debug("endReadable", state.endEmitted)

        if (!state.endEmitted) {
          state.ended = true
          process.nextTick(endReadableNT, state, stream)
        }
      }

      function endReadableNT(state, stream) {
        debug("endReadableNT", state.endEmitted, state.length) // Check that we didn't get one last unshift.

        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true
          stream.readable = false
          stream.emit("end")

          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState

            if (!wState || (wState.autoDestroy && wState.finished)) {
              stream.destroy()
            }
          }
        }
      }

      if (typeof Symbol === "function") {
        Readable.from = function (iterable, opts) {
          if (from === undefined) {
            from = __nccwpck_require__(39082)
          }

          return from(Readable, iterable, opts)
        }
      }

      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i
        }

        return -1
      }

      /***/
    },

    /***/ 34415: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a transform stream is a readable/writable stream where you do
      // something with the data.  Sometimes it's called a "filter",
      // but that's not a great name for it, since that implies a thing where
      // some bits pass through, and others are simply ignored.  (That would
      // be a valid example of a transform, of course.)
      //
      // While the output is causally related to the input, it's not a
      // necessarily symmetric or synchronous transformation.  For example,
      // a zlib stream might take multiple plain-text writes(), and then
      // emit a single compressed chunk some time in the future.
      //
      // Here's how this works:
      //
      // The Transform stream has all the aspects of the readable and writable
      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
      // internally, and returns false if there's a lot of pending writes
      // buffered up.  When you call read(), that calls _read(n) until
      // there's enough pending readable data buffered up.
      //
      // In a transform stream, the written data is placed in a buffer.  When
      // _read(n) is called, it transforms the queued up data, calling the
      // buffered _write cb's as it consumes chunks.  If consuming a single
      // written chunk would result in multiple output chunks, then the first
      // outputted bit calls the readcb, and subsequent chunks just go into
      // the read buffer, and will cause it to emit 'readable' if necessary.
      //
      // This way, back-pressure is actually determined by the reading side,
      // since _read has to be called to start processing a new chunk.  However,
      // a pathological inflate type of transform can cause excessive buffering
      // here.  For example, imagine a stream where every byte of input is
      // interpreted as an integer from 0-255, and then results in that many
      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
      // 1kb of data being output.  In this case, you could write a very small
      // amount of input, and end up with a very large amount of output.  In
      // such a pathological inflating mechanism, there'd be no way to tell
      // the system to stop doing the transform.  A single 4MB write could
      // cause the system to run out of memory.
      //
      // However, even in such a pathological case, only a single written chunk
      // would be consumed, and then the rest would wait (un-transformed) until
      // the results of the previous transformed chunk were consumed.

      module.exports = Transform

      var _require$codes = __nccwpck_require__(67214) /* .codes */.q,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0

      var Duplex = __nccwpck_require__(41359)

      __nccwpck_require__(44124)(Transform, Duplex)

      function afterTransform(er, data) {
        var ts = this._transformState
        ts.transforming = false
        var cb = ts.writecb

        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK())
        }

        ts.writechunk = null
        ts.writecb = null
        if (data != null)
          // single equals check for both `null` and `undefined`
          this.push(data)
        cb(er)
        var rs = this._readableState
        rs.reading = false

        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark)
        }
      }

      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options)
        Duplex.call(this, options)
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        } // start out asking for a readable event once data is transformed.

        this._readableState.needReadable = true // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.

        this._readableState.sync = false

        if (options) {
          if (typeof options.transform === "function") this._transform = options.transform
          if (typeof options.flush === "function") this._flush = options.flush
        } // When the writable side finishes, then flush out anything remaining.

        this.on("prefinish", prefinish)
      }

      function prefinish() {
        var _this = this

        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function (er, data) {
            done(_this, er, data)
          })
        } else {
          done(this, null, null)
        }
      }

      Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false
        return Duplex.prototype.push.call(this, chunk, encoding)
      } // This is the part where you do stuff!
      // override this function in implementation classes.
      // 'chunk' is an input chunk.
      //
      // Call `push(newChunk)` to pass along transformed output
      // to the readable side.  You may call 'push' zero or more times.
      //
      // Call `cb(err)` when you are done with this chunk.  If you pass
      // an error, then that'll put the hurt on the whole operation.  If you
      // never call cb(), then you'll never get another chunk.

      Transform.prototype._transform = function (chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"))
      }

      Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState
        ts.writecb = cb
        ts.writechunk = chunk
        ts.writeencoding = encoding

        if (!ts.transforming) {
          var rs = this._readableState
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
            this._read(rs.highWaterMark)
        }
      } // Doesn't matter what the args are here.
      // _transform does all the work.
      // That we got here means that the readable side wants more data.

      Transform.prototype._read = function (n) {
        var ts = this._transformState

        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true

          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform)
        } else {
          // mark that we need a transform, so that any data that comes in
          // will get processed, now that we've asked for it.
          ts.needTransform = true
        }
      }

      Transform.prototype._destroy = function (err, cb) {
        Duplex.prototype._destroy.call(this, err, function (err2) {
          cb(err2)
        })
      }

      function done(stream, er, data) {
        if (er) return stream.emit("error", er)
        if (data != null)
          // single equals check for both `null` and `undefined`
          stream.push(data) // TODO(BridgeAR): Write a test for these two error cases
        // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided

        if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0()
        if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING()
        return stream.push(null)
      }

      /***/
    },

    /***/ 26993: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // A bit simpler than readable streams.
      // Implement an async ._write(chunk, encoding, cb), and it'll handle all
      // the drain event emission and buffering.

      module.exports = Writable
      /* <replacement> */

      function WriteReq(chunk, encoding, cb) {
        this.chunk = chunk
        this.encoding = encoding
        this.callback = cb
        this.next = null
      } // It seems a linked list but it is not
      // there will be only 2 of these for each stream

      function CorkedRequest(state) {
        var _this = this

        this.next = null
        this.entry = null

        this.finish = function () {
          onCorkedFinish(_this, state)
        }
      }
      /* </replacement> */

      /*<replacement>*/

      var Duplex
      /*</replacement>*/

      Writable.WritableState = WritableState
      /*<replacement>*/

      var internalUtil = {
        deprecate: __nccwpck_require__(65278)
      }
      /*</replacement>*/

      /*<replacement>*/

      var Stream = __nccwpck_require__(62387)
      /*</replacement>*/

      var Buffer = __nccwpck_require__(14300).Buffer

      var OurUint8Array = global.Uint8Array || function () {}

      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk)
      }

      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array
      }

      var destroyImpl = __nccwpck_require__(97049)

      var _require = __nccwpck_require__(39948),
        getHighWaterMark = _require.getHighWaterMark

      var _require$codes = __nccwpck_require__(67214) /* .codes */.q,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
        ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING

      var errorOrDestroy = destroyImpl.errorOrDestroy

      __nccwpck_require__(44124)(Writable, Stream)

      function nop() {}

      function WritableState(options, stream, isDuplex) {
        Duplex = Duplex || __nccwpck_require__(41359)
        options = options || {} // Duplex streams are both readable and writable, but share
        // the same options object.
        // However, some cases require setting options to different
        // values for the readable and the writable sides of the duplex stream,
        // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex // object stream flag to indicate whether or not this stream
        // contains buffers or objects.

        this.objectMode = !!options.objectMode
        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode // the point at which write() starts returning false
        // Note: 0 is a valid value, means that we always return false if
        // the entire buffer is not flushed immediately on write()

        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex) // if _final has been called

        this.finalCalled = false // drain event flag.

        this.needDrain = false // at the start of calling end()

        this.ending = false // when end() has been called, and returned

        this.ended = false // when 'finish' is emitted

        this.finished = false // has it been destroyed

        this.destroyed = false // should we decode strings into buffers before passing to _write?
        // this is here so that some node-core streams can optimize string
        // handling at a lower level.

        var noDecode = options.decodeStrings === false
        this.decodeStrings = !noDecode // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.

        this.defaultEncoding = options.defaultEncoding || "utf8" // not an actual buffer we keep track of, but a measurement
        // of how much we're waiting to get pushed to some underlying
        // socket or file.

        this.length = 0 // a flag to see when we're in the middle of a write.

        this.writing = false // when true all writes will be buffered until .uncork() call

        this.corked = 0 // a flag to be able to tell if the onwrite cb is called immediately,
        // or on a later tick.  We set this to true at first, because any
        // actions that shouldn't happen until "later" should generally also
        // not happen before the first write call.

        this.sync = true // a flag to know if we're processing previously buffered items, which
        // may call the _write() callback in the same tick, so that we don't
        // end up in an overlapped onwrite situation.

        this.bufferProcessing = false // the callback that's passed to _write(chunk,cb)

        this.onwrite = function (er) {
          onwrite(stream, er)
        } // the callback that the user supplies to write(chunk,encoding,cb)

        this.writecb = null // the amount that is being written when _write is called.

        this.writelen = 0
        this.bufferedRequest = null
        this.lastBufferedRequest = null // number of pending user-supplied write callbacks
        // this must be 0 before 'finish' can be emitted

        this.pendingcb = 0 // emit prefinish if the only thing we're waiting for is _write cbs
        // This is relevant for synchronous Transform streams

        this.prefinished = false // True if the error was already emitted and should not be thrown again

        this.errorEmitted = false // Should close be emitted on destroy. Defaults to true.

        this.emitClose = options.emitClose !== false // Should .destroy() be called after 'finish' (and potentially 'end')

        this.autoDestroy = !!options.autoDestroy // count buffered requests

        this.bufferedRequestCount = 0 // allocate the first CorkedRequest, there is always
        // one allocated and free to use, and we maintain at most two

        this.corkedRequestsFree = new CorkedRequest(this)
      }

      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest
        var out = []

        while (current) {
          out.push(current)
          current = current.next
        }

        return out
      }

      ;(function () {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(
              function writableStateBufferGetter() {
                return this.getBuffer()
              },
              "_writableState.buffer is deprecated. Use _writableState.getBuffer " + "instead.",
              "DEP0003"
            )
          })
        } catch (_) {}
      })() // Test _writableState for inheritance to account for Duplex streams,
      // whose prototype chain only points to Readable.

      var realHasInstance

      if (
        typeof Symbol === "function" &&
        Symbol.hasInstance &&
        typeof Function.prototype[Symbol.hasInstance] === "function"
      ) {
        realHasInstance = Function.prototype[Symbol.hasInstance]
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object)) return true
            if (this !== Writable) return false
            return object && object._writableState instanceof WritableState
          }
        })
      } else {
        realHasInstance = function realHasInstance(object) {
          return object instanceof this
        }
      }

      function Writable(options) {
        Duplex = Duplex || __nccwpck_require__(41359) // Writable ctor is applied to Duplexes, too.
        // `realHasInstance` is necessary because using plain `instanceof`
        // would return false, as no `_writableState` property is attached.
        // Trying to use the custom `instanceof` for Writable here will also break the
        // Node.js LazyTransform implementation, which has a non-trivial getter for
        // `_writableState` that would lead to infinite recursion.
        // Checking for a Stream.Duplex instance is faster here instead of inside
        // the WritableState constructor, at least with V8 6.5

        var isDuplex = this instanceof Duplex
        if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options)
        this._writableState = new WritableState(options, this, isDuplex) // legacy.

        this.writable = true

        if (options) {
          if (typeof options.write === "function") this._write = options.write
          if (typeof options.writev === "function") this._writev = options.writev
          if (typeof options.destroy === "function") this._destroy = options.destroy
          if (typeof options.final === "function") this._final = options.final
        }

        Stream.call(this)
      } // Otherwise people can pipe Writable streams, which is just wrong.

      Writable.prototype.pipe = function () {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE())
      }

      function writeAfterEnd(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END() // TODO: defer error events consistently everywhere, not just the cb

        errorOrDestroy(stream, er)
        process.nextTick(cb, er)
      } // Checks that a user-supplied chunk is valid, especially for the particular
      // mode the stream is in. Currently this means that `null` is never accepted
      // and undefined/non-string values are only allowed in object mode.

      function validChunk(stream, state, chunk, cb) {
        var er

        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES()
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk)
        }

        if (er) {
          errorOrDestroy(stream, er)
          process.nextTick(cb, er)
          return false
        }

        return true
      }

      Writable.prototype.write = function (chunk, encoding, cb) {
        var state = this._writableState
        var ret = false

        var isBuf = !state.objectMode && _isUint8Array(chunk)

        if (isBuf && !Buffer.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk)
        }

        if (typeof encoding === "function") {
          cb = encoding
          encoding = null
        }

        if (isBuf) encoding = "buffer"
        else if (!encoding) encoding = state.defaultEncoding
        if (typeof cb !== "function") cb = nop
        if (state.ending) writeAfterEnd(this, cb)
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb)
        }
        return ret
      }

      Writable.prototype.cork = function () {
        this._writableState.corked++
      }

      Writable.prototype.uncork = function () {
        var state = this._writableState

        if (state.corked) {
          state.corked--
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
            clearBuffer(this, state)
        }
      }

      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        // node::ParseEncoding() requires lower case.
        if (typeof encoding === "string") encoding = encoding.toLowerCase()
        if (
          !(
            [
              "hex",
              "utf8",
              "utf-8",
              "ascii",
              "binary",
              "base64",
              "ucs2",
              "ucs-2",
              "utf16le",
              "utf-16le",
              "raw"
            ].indexOf((encoding + "").toLowerCase()) > -1
          )
        )
          throw new ERR_UNKNOWN_ENCODING(encoding)
        this._writableState.defaultEncoding = encoding
        return this
      }

      Object.defineProperty(Writable.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer()
        }
      })

      function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer.from(chunk, encoding)
        }

        return chunk
      }

      Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark
        }
      }) // if we're already writing something, then just put this
      // in the queue, and wait our turn.  Otherwise, call _write
      // If we return false, then we need a drain event, so set that flag.

      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding)

          if (chunk !== newChunk) {
            isBuf = true
            encoding = "buffer"
            chunk = newChunk
          }
        }

        var len = state.objectMode ? 1 : chunk.length
        state.length += len
        var ret = state.length < state.highWaterMark // we must ensure that previous needDrain will not be reset to false.

        if (!ret) state.needDrain = true

        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest
          state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
          }

          if (last) {
            last.next = state.lastBufferedRequest
          } else {
            state.bufferedRequest = state.lastBufferedRequest
          }

          state.bufferedRequestCount += 1
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb)
        }

        return ret
      }

      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len
        state.writecb = cb
        state.writing = true
        state.sync = true
        if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"))
        else if (writev) stream._writev(chunk, state.onwrite)
        else stream._write(chunk, encoding, state.onwrite)
        state.sync = false
      }

      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb

        if (sync) {
          // defer the callback if we are being called synchronously
          // to avoid piling up things on the stack
          process.nextTick(cb, er) // this can emit finish, and it will always happen
          // after error

          process.nextTick(finishMaybe, stream, state)
          stream._writableState.errorEmitted = true
          errorOrDestroy(stream, er)
        } else {
          // the caller expect this to happen before if
          // it is async
          cb(er)
          stream._writableState.errorEmitted = true
          errorOrDestroy(stream, er) // this can emit finish, but finish must
          // always follow error

          finishMaybe(stream, state)
        }
      }

      function onwriteStateUpdate(state) {
        state.writing = false
        state.writecb = null
        state.length -= state.writelen
        state.writelen = 0
      }

      function onwrite(stream, er) {
        var state = stream._writableState
        var sync = state.sync
        var cb = state.writecb
        if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK()
        onwriteStateUpdate(state)
        if (er) onwriteError(stream, state, sync, er, cb)
        else {
          // Check if we're actually ready to finish, but don't emit yet
          var finished = needFinish(state) || stream.destroyed

          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state)
          }

          if (sync) {
            process.nextTick(afterWrite, stream, state, finished, cb)
          } else {
            afterWrite(stream, state, finished, cb)
          }
        }
      }

      function afterWrite(stream, state, finished, cb) {
        if (!finished) onwriteDrain(stream, state)
        state.pendingcb--
        cb()
        finishMaybe(stream, state)
      } // Must force callback to be called on nextTick, so that we don't
      // emit 'drain' before the write() consumer gets the 'false' return
      // value, and has a chance to attach a 'drain' listener.

      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false
          stream.emit("drain")
        }
      } // if there's something in the buffer waiting, then process it

      function clearBuffer(stream, state) {
        state.bufferProcessing = true
        var entry = state.bufferedRequest

        if (stream._writev && entry && entry.next) {
          // Fast case, write everything using _writev()
          var l = state.bufferedRequestCount
          var buffer = new Array(l)
          var holder = state.corkedRequestsFree
          holder.entry = entry
          var count = 0
          var allBuffers = true

          while (entry) {
            buffer[count] = entry
            if (!entry.isBuf) allBuffers = false
            entry = entry.next
            count += 1
          }

          buffer.allBuffers = allBuffers
          doWrite(stream, state, true, state.length, buffer, "", holder.finish) // doWrite is almost always async, defer these to save a bit of time
          // as the hot path ends with doWrite

          state.pendingcb++
          state.lastBufferedRequest = null

          if (holder.next) {
            state.corkedRequestsFree = holder.next
            holder.next = null
          } else {
            state.corkedRequestsFree = new CorkedRequest(state)
          }

          state.bufferedRequestCount = 0
        } else {
          // Slow case, write chunks one-by-one
          while (entry) {
            var chunk = entry.chunk
            var encoding = entry.encoding
            var cb = entry.callback
            var len = state.objectMode ? 1 : chunk.length
            doWrite(stream, state, false, len, chunk, encoding, cb)
            entry = entry.next
            state.bufferedRequestCount-- // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.

            if (state.writing) {
              break
            }
          }

          if (entry === null) state.lastBufferedRequest = null
        }

        state.bufferedRequest = entry
        state.bufferProcessing = false
      }

      Writable.prototype._write = function (chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"))
      }

      Writable.prototype._writev = null

      Writable.prototype.end = function (chunk, encoding, cb) {
        var state = this._writableState

        if (typeof chunk === "function") {
          cb = chunk
          chunk = null
          encoding = null
        } else if (typeof encoding === "function") {
          cb = encoding
          encoding = null
        }

        if (chunk !== null && chunk !== undefined) this.write(chunk, encoding) // .end() fully uncorks

        if (state.corked) {
          state.corked = 1
          this.uncork()
        } // ignore unnecessary end() calls.

        if (!state.ending) endWritable(this, state, cb)
        return this
      }

      Object.defineProperty(Writable.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.length
        }
      })

      function needFinish(state) {
        return (
          state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing
        )
      }

      function callFinal(stream, state) {
        stream._final(function (err) {
          state.pendingcb--

          if (err) {
            errorOrDestroy(stream, err)
          }

          state.prefinished = true
          stream.emit("prefinish")
          finishMaybe(stream, state)
        })
      }

      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++
            state.finalCalled = true
            process.nextTick(callFinal, stream, state)
          } else {
            state.prefinished = true
            stream.emit("prefinish")
          }
        }
      }

      function finishMaybe(stream, state) {
        var need = needFinish(state)

        if (need) {
          prefinish(stream, state)

          if (state.pendingcb === 0) {
            state.finished = true
            stream.emit("finish")

            if (state.autoDestroy) {
              // In case of duplex streams we need a way to detect
              // if the readable side is ready for autoDestroy as well
              var rState = stream._readableState

              if (!rState || (rState.autoDestroy && rState.endEmitted)) {
                stream.destroy()
              }
            }
          }
        }

        return need
      }

      function endWritable(stream, state, cb) {
        state.ending = true
        finishMaybe(stream, state)

        if (cb) {
          if (state.finished) process.nextTick(cb)
          else stream.once("finish", cb)
        }

        state.ended = true
        stream.writable = false
      }

      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry
        corkReq.entry = null

        while (entry) {
          var cb = entry.callback
          state.pendingcb--
          cb(err)
          entry = entry.next
        } // reuse the free corkReq.

        state.corkedRequestsFree.next = corkReq
      }

      Object.defineProperty(Writable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._writableState === undefined) {
            return false
          }

          return this._writableState.destroyed
        },
        set: function set(value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (!this._writableState) {
            return
          } // backward compatibility, the user is explicitly
          // managing destroyed

          this._writableState.destroyed = value
        }
      })
      Writable.prototype.destroy = destroyImpl.destroy
      Writable.prototype._undestroy = destroyImpl.undestroy

      Writable.prototype._destroy = function (err, cb) {
        cb(err)
      }

      /***/
    },

    /***/ 43306: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var _Object$setPrototypeO

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }
        return obj
      }

      var finished = __nccwpck_require__(76080)

      var kLastResolve = Symbol("lastResolve")
      var kLastReject = Symbol("lastReject")
      var kError = Symbol("error")
      var kEnded = Symbol("ended")
      var kLastPromise = Symbol("lastPromise")
      var kHandlePromise = Symbol("handlePromise")
      var kStream = Symbol("stream")

      function createIterResult(value, done) {
        return {
          value: value,
          done: done
        }
      }

      function readAndResolve(iter) {
        var resolve = iter[kLastResolve]

        if (resolve !== null) {
          var data = iter[kStream].read() // we defer if data is null
          // we can be expecting either 'end' or
          // 'error'

          if (data !== null) {
            iter[kLastPromise] = null
            iter[kLastResolve] = null
            iter[kLastReject] = null
            resolve(createIterResult(data, false))
          }
        }
      }

      function onReadable(iter) {
        // we wait for the next tick, because it might
        // emit an error with process.nextTick
        process.nextTick(readAndResolve, iter)
      }

      function wrapForNext(lastPromise, iter) {
        return function (resolve, reject) {
          lastPromise.then(function () {
            if (iter[kEnded]) {
              resolve(createIterResult(undefined, true))
              return
            }

            iter[kHandlePromise](resolve, reject)
          }, reject)
        }
      }

      var AsyncIteratorPrototype = Object.getPrototypeOf(function () {})
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(
        ((_Object$setPrototypeO = {
          get stream() {
            return this[kStream]
          },

          next: function next() {
            var _this = this

            // if we have detected an error in the meanwhile
            // reject straight away
            var error = this[kError]

            if (error !== null) {
              return Promise.reject(error)
            }

            if (this[kEnded]) {
              return Promise.resolve(createIterResult(undefined, true))
            }

            if (this[kStream].destroyed) {
              // We need to defer via nextTick because if .destroy(err) is
              // called, the error will be emitted via nextTick, and
              // we cannot guarantee that there is no error lingering around
              // waiting to be emitted.
              return new Promise(function (resolve, reject) {
                process.nextTick(function () {
                  if (_this[kError]) {
                    reject(_this[kError])
                  } else {
                    resolve(createIterResult(undefined, true))
                  }
                })
              })
            } // if we have multiple next() calls
            // we will wait for the previous Promise to finish
            // this logic is optimized to support for await loops,
            // where next() is only called once at a time

            var lastPromise = this[kLastPromise]
            var promise

            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this))
            } else {
              // fast path needed to support multiple this.push()
              // without triggering the next() queue
              var data = this[kStream].read()

              if (data !== null) {
                return Promise.resolve(createIterResult(data, false))
              }

              promise = new Promise(this[kHandlePromise])
            }

            this[kLastPromise] = promise
            return promise
          }
        }),
        _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
          return this
        }),
        _defineProperty(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this

          // destroy(err, cb) is a private API
          // we can guarantee we have that here, because we control the
          // Readable class this is attached to
          return new Promise(function (resolve, reject) {
            _this2[kStream].destroy(null, function (err) {
              if (err) {
                reject(err)
                return
              }

              resolve(createIterResult(undefined, true))
            })
          })
        }),
        _Object$setPrototypeO),
        AsyncIteratorPrototype
      )

      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
        var _Object$create

        var iterator = Object.create(
          ReadableStreamAsyncIteratorPrototype,
          ((_Object$create = {}),
          _defineProperty(_Object$create, kStream, {
            value: stream,
            writable: true
          }),
          _defineProperty(_Object$create, kLastResolve, {
            value: null,
            writable: true
          }),
          _defineProperty(_Object$create, kLastReject, {
            value: null,
            writable: true
          }),
          _defineProperty(_Object$create, kError, {
            value: null,
            writable: true
          }),
          _defineProperty(_Object$create, kEnded, {
            value: stream._readableState.endEmitted,
            writable: true
          }),
          _defineProperty(_Object$create, kHandlePromise, {
            value: function value(resolve, reject) {
              var data = iterator[kStream].read()

              if (data) {
                iterator[kLastPromise] = null
                iterator[kLastResolve] = null
                iterator[kLastReject] = null
                resolve(createIterResult(data, false))
              } else {
                iterator[kLastResolve] = resolve
                iterator[kLastReject] = reject
              }
            },
            writable: true
          }),
          _Object$create)
        )
        iterator[kLastPromise] = null
        finished(stream, function (err) {
          if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject] // reject if we are waiting for data in the Promise
            // returned by next() and store the error

            if (reject !== null) {
              iterator[kLastPromise] = null
              iterator[kLastResolve] = null
              iterator[kLastReject] = null
              reject(err)
            }

            iterator[kError] = err
            return
          }

          var resolve = iterator[kLastResolve]

          if (resolve !== null) {
            iterator[kLastPromise] = null
            iterator[kLastResolve] = null
            iterator[kLastReject] = null
            resolve(createIterResult(undefined, true))
          }

          iterator[kEnded] = true
        })
        stream.on("readable", onReadable.bind(null, iterator))
        return iterator
      }

      module.exports = createReadableStreamAsyncIterator

      /***/
    },

    /***/ 52746: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object)
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object)
          if (enumerableOnly)
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable
            })
          keys.push.apply(keys, symbols)
        }
        return keys
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {}
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key])
            })
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))
            })
          }
        }
        return target
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }
        return obj
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function")
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i]
          descriptor.enumerable = descriptor.enumerable || false
          descriptor.configurable = true
          if ("value" in descriptor) descriptor.writable = true
          Object.defineProperty(target, descriptor.key, descriptor)
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps)
        if (staticProps) _defineProperties(Constructor, staticProps)
        return Constructor
      }

      var _require = __nccwpck_require__(14300),
        Buffer = _require.Buffer

      var _require2 = __nccwpck_require__(73837),
        inspect = _require2.inspect

      var custom = (inspect && inspect.custom) || "inspect"

      function copyBuffer(src, target, offset) {
        Buffer.prototype.copy.call(src, target, offset)
      }

      module.exports =
        /*#__PURE__*/
        (function () {
          function BufferList() {
            _classCallCheck(this, BufferList)

            this.head = null
            this.tail = null
            this.length = 0
          }

          _createClass(BufferList, [
            {
              key: "push",
              value: function push(v) {
                var entry = {
                  data: v,
                  next: null
                }
                if (this.length > 0) this.tail.next = entry
                else this.head = entry
                this.tail = entry
                ++this.length
              }
            },
            {
              key: "unshift",
              value: function unshift(v) {
                var entry = {
                  data: v,
                  next: this.head
                }
                if (this.length === 0) this.tail = entry
                this.head = entry
                ++this.length
              }
            },
            {
              key: "shift",
              value: function shift() {
                if (this.length === 0) return
                var ret = this.head.data
                if (this.length === 1) this.head = this.tail = null
                else this.head = this.head.next
                --this.length
                return ret
              }
            },
            {
              key: "clear",
              value: function clear() {
                this.head = this.tail = null
                this.length = 0
              }
            },
            {
              key: "join",
              value: function join(s) {
                if (this.length === 0) return ""
                var p = this.head
                var ret = "" + p.data

                while ((p = p.next)) {
                  ret += s + p.data
                }

                return ret
              }
            },
            {
              key: "concat",
              value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0)
                var ret = Buffer.allocUnsafe(n >>> 0)
                var p = this.head
                var i = 0

                while (p) {
                  copyBuffer(p.data, ret, i)
                  i += p.data.length
                  p = p.next
                }

                return ret
              } // Consumes a specified amount of bytes or characters from the buffered data.
            },
            {
              key: "consume",
              value: function consume(n, hasStrings) {
                var ret

                if (n < this.head.data.length) {
                  // `slice` is the same for buffers and strings.
                  ret = this.head.data.slice(0, n)
                  this.head.data = this.head.data.slice(n)
                } else if (n === this.head.data.length) {
                  // First chunk is a perfect match.
                  ret = this.shift()
                } else {
                  // Result spans more than one buffer.
                  ret = hasStrings ? this._getString(n) : this._getBuffer(n)
                }

                return ret
              }
            },
            {
              key: "first",
              value: function first() {
                return this.head.data
              } // Consumes a specified amount of characters from the buffered data.
            },
            {
              key: "_getString",
              value: function _getString(n) {
                var p = this.head
                var c = 1
                var ret = p.data
                n -= ret.length

                while ((p = p.next)) {
                  var str = p.data
                  var nb = n > str.length ? str.length : n
                  if (nb === str.length) ret += str
                  else ret += str.slice(0, n)
                  n -= nb

                  if (n === 0) {
                    if (nb === str.length) {
                      ++c
                      if (p.next) this.head = p.next
                      else this.head = this.tail = null
                    } else {
                      this.head = p
                      p.data = str.slice(nb)
                    }

                    break
                  }

                  ++c
                }

                this.length -= c
                return ret
              } // Consumes a specified amount of bytes from the buffered data.
            },
            {
              key: "_getBuffer",
              value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n)
                var p = this.head
                var c = 1
                p.data.copy(ret)
                n -= p.data.length

                while ((p = p.next)) {
                  var buf = p.data
                  var nb = n > buf.length ? buf.length : n
                  buf.copy(ret, ret.length - n, 0, nb)
                  n -= nb

                  if (n === 0) {
                    if (nb === buf.length) {
                      ++c
                      if (p.next) this.head = p.next
                      else this.head = this.tail = null
                    } else {
                      this.head = p
                      p.data = buf.slice(nb)
                    }

                    break
                  }

                  ++c
                }

                this.length -= c
                return ret
              } // Make sure the linked list only shows the minimal necessary information.
            },
            {
              key: custom,
              value: function value(_, options) {
                return inspect(
                  this,
                  _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                  })
                )
              }
            }
          ])

          return BufferList
        })()

      /***/
    },

    /***/ 97049: /***/ (module) => {
      "use strict"
      // undocumented cb() API, needed for core, not for public API

      function destroy(err, cb) {
        var _this = this

        var readableDestroyed = this._readableState && this._readableState.destroyed
        var writableDestroyed = this._writableState && this._writableState.destroyed

        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err)
          } else if (err) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err)
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true
              process.nextTick(emitErrorNT, this, err)
            }
          }

          return this
        } // we set destroyed to true before firing error callbacks in order
        // to make it re-entrance safe in case destroy() is called within callbacks

        if (this._readableState) {
          this._readableState.destroyed = true
        } // if this is a duplex stream mark the writable part as destroyed as well

        if (this._writableState) {
          this._writableState.destroyed = true
        }

        this._destroy(err || null, function (err) {
          if (!cb && err) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err)
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true
              process.nextTick(emitErrorAndCloseNT, _this, err)
            } else {
              process.nextTick(emitCloseNT, _this)
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this)
            cb(err)
          } else {
            process.nextTick(emitCloseNT, _this)
          }
        })

        return this
      }

      function emitErrorAndCloseNT(self, err) {
        emitErrorNT(self, err)
        emitCloseNT(self)
      }

      function emitCloseNT(self) {
        if (self._writableState && !self._writableState.emitClose) return
        if (self._readableState && !self._readableState.emitClose) return
        self.emit("close")
      }

      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false
          this._readableState.reading = false
          this._readableState.ended = false
          this._readableState.endEmitted = false
        }

        if (this._writableState) {
          this._writableState.destroyed = false
          this._writableState.ended = false
          this._writableState.ending = false
          this._writableState.finalCalled = false
          this._writableState.prefinished = false
          this._writableState.finished = false
          this._writableState.errorEmitted = false
        }
      }

      function emitErrorNT(self, err) {
        self.emit("error", err)
      }

      function errorOrDestroy(stream, err) {
        // We have tests that rely on errors being emitted
        // in the same tick, so changing this is semver major.
        // For now when you opt-in to autoDestroy we allow
        // the error to be emitted nextTick. In a future
        // semver major update we should change the default to this.
        var rState = stream._readableState
        var wState = stream._writableState
        if ((rState && rState.autoDestroy) || (wState && wState.autoDestroy)) stream.destroy(err)
        else stream.emit("error", err)
      }

      module.exports = {
        destroy: destroy,
        undestroy: undestroy,
        errorOrDestroy: errorOrDestroy
      }

      /***/
    },

    /***/ 76080: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Ported from https://github.com/mafintosh/end-of-stream with
      // permission from the author, Mathias Buus (@mafintosh).

      var ERR_STREAM_PREMATURE_CLOSE =
        __nccwpck_require__(67214) /* .codes.ERR_STREAM_PREMATURE_CLOSE */.q
          .ERR_STREAM_PREMATURE_CLOSE

      function once(callback) {
        var called = false
        return function () {
          if (called) return
          called = true

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
          }

          callback.apply(this, args)
        }
      }

      function noop() {}

      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function"
      }

      function eos(stream, opts, callback) {
        if (typeof opts === "function") return eos(stream, null, opts)
        if (!opts) opts = {}
        callback = once(callback || noop)
        var readable = opts.readable || (opts.readable !== false && stream.readable)
        var writable = opts.writable || (opts.writable !== false && stream.writable)

        var onlegacyfinish = function onlegacyfinish() {
          if (!stream.writable) onfinish()
        }

        var writableEnded = stream._writableState && stream._writableState.finished

        var onfinish = function onfinish() {
          writable = false
          writableEnded = true
          if (!readable) callback.call(stream)
        }

        var readableEnded = stream._readableState && stream._readableState.endEmitted

        var onend = function onend() {
          readable = false
          readableEnded = true
          if (!writable) callback.call(stream)
        }

        var onerror = function onerror(err) {
          callback.call(stream, err)
        }

        var onclose = function onclose() {
          var err

          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE()
            return callback.call(stream, err)
          }

          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE()
            return callback.call(stream, err)
          }
        }

        var onrequest = function onrequest() {
          stream.req.on("finish", onfinish)
        }

        if (isRequest(stream)) {
          stream.on("complete", onfinish)
          stream.on("abort", onclose)
          if (stream.req) onrequest()
          else stream.on("request", onrequest)
        } else if (writable && !stream._writableState) {
          // legacy streams
          stream.on("end", onlegacyfinish)
          stream.on("close", onlegacyfinish)
        }

        stream.on("end", onend)
        stream.on("finish", onfinish)
        if (opts.error !== false) stream.on("error", onerror)
        stream.on("close", onclose)
        return function () {
          stream.removeListener("complete", onfinish)
          stream.removeListener("abort", onclose)
          stream.removeListener("request", onrequest)
          if (stream.req) stream.req.removeListener("finish", onfinish)
          stream.removeListener("end", onlegacyfinish)
          stream.removeListener("close", onlegacyfinish)
          stream.removeListener("finish", onfinish)
          stream.removeListener("end", onend)
          stream.removeListener("error", onerror)
          stream.removeListener("close", onclose)
        }
      }

      module.exports = eos

      /***/
    },

    /***/ 39082: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg)
          var value = info.value
        } catch (error) {
          reject(error)
          return
        }
        if (info.done) {
          resolve(value)
        } else {
          Promise.resolve(value).then(_next, _throw)
        }
      }

      function _asyncToGenerator(fn) {
        return function () {
          var self = this,
            args = arguments
          return new Promise(function (resolve, reject) {
            var gen = fn.apply(self, args)
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value)
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err)
            }
            _next(undefined)
          })
        }
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object)
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object)
          if (enumerableOnly)
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable
            })
          keys.push.apply(keys, symbols)
        }
        return keys
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {}
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key])
            })
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))
            })
          }
        }
        return target
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }
        return obj
      }

      var ERR_INVALID_ARG_TYPE =
        __nccwpck_require__(67214) /* .codes.ERR_INVALID_ARG_TYPE */.q.ERR_INVALID_ARG_TYPE

      function from(Readable, iterable, opts) {
        var iterator

        if (iterable && typeof iterable.next === "function") {
          iterator = iterable
        } else if (iterable && iterable[Symbol.asyncIterator])
          iterator = iterable[Symbol.asyncIterator]()
        else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]()
        else throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable)

        var readable = new Readable(
          _objectSpread(
            {
              objectMode: true
            },
            opts
          )
        ) // Reading boolean to protect against _read
        // being called before last iteration completion.

        var reading = false

        readable._read = function () {
          if (!reading) {
            reading = true
            next()
          }
        }

        function next() {
          return _next2.apply(this, arguments)
        }

        function _next2() {
          _next2 = _asyncToGenerator(function* () {
            try {
              var _ref = yield iterator.next(),
                value = _ref.value,
                done = _ref.done

              if (done) {
                readable.push(null)
              } else if (readable.push(yield value)) {
                next()
              } else {
                reading = false
              }
            } catch (err) {
              readable.destroy(err)
            }
          })
          return _next2.apply(this, arguments)
        }

        return readable
      }

      module.exports = from

      /***/
    },

    /***/ 76989: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Ported from https://github.com/mafintosh/pump with
      // permission from the author, Mathias Buus (@mafintosh).

      var eos

      function once(callback) {
        var called = false
        return function () {
          if (called) return
          called = true
          callback.apply(void 0, arguments)
        }
      }

      var _require$codes = __nccwpck_require__(67214) /* .codes */.q,
        ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED

      function noop(err) {
        // Rethrow the error if it exists to avoid swallowing it
        if (err) throw err
      }

      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function"
      }

      function destroyer(stream, reading, writing, callback) {
        callback = once(callback)
        var closed = false
        stream.on("close", function () {
          closed = true
        })
        if (eos === undefined) eos = __nccwpck_require__(76080)
        eos(
          stream,
          {
            readable: reading,
            writable: writing
          },
          function (err) {
            if (err) return callback(err)
            closed = true
            callback()
          }
        )
        var destroyed = false
        return function (err) {
          if (closed) return
          if (destroyed) return
          destroyed = true // request.destroy just do .end - .abort is what we want

          if (isRequest(stream)) return stream.abort()
          if (typeof stream.destroy === "function") return stream.destroy()
          callback(err || new ERR_STREAM_DESTROYED("pipe"))
        }
      }

      function call(fn) {
        fn()
      }

      function pipe(from, to) {
        return from.pipe(to)
      }

      function popCallback(streams) {
        if (!streams.length) return noop
        if (typeof streams[streams.length - 1] !== "function") return noop
        return streams.pop()
      }

      function pipeline() {
        for (
          var _len = arguments.length, streams = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          streams[_key] = arguments[_key]
        }

        var callback = popCallback(streams)
        if (Array.isArray(streams[0])) streams = streams[0]

        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams")
        }

        var error
        var destroys = streams.map(function (stream, i) {
          var reading = i < streams.length - 1
          var writing = i > 0
          return destroyer(stream, reading, writing, function (err) {
            if (!error) error = err
            if (err) destroys.forEach(call)
            if (reading) return
            destroys.forEach(call)
            callback(error)
          })
        })
        return streams.reduce(pipe)
      }

      module.exports = pipeline

      /***/
    },

    /***/ 39948: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      var ERR_INVALID_OPT_VALUE =
        __nccwpck_require__(67214) /* .codes.ERR_INVALID_OPT_VALUE */.q.ERR_INVALID_OPT_VALUE

      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null
          ? options.highWaterMark
          : isDuplex
          ? options[duplexKey]
          : null
      }

      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey)

        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark"
            throw new ERR_INVALID_OPT_VALUE(name, hwm)
          }

          return Math.floor(hwm)
        } // Default value

        return state.objectMode ? 16 : 16 * 1024
      }

      module.exports = {
        getHighWaterMark: getHighWaterMark
      }

      /***/
    },

    /***/ 62387: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      module.exports = __nccwpck_require__(12781)

      /***/
    },

    /***/ 51642: /***/ (module, exports, __nccwpck_require__) => {
      var Stream = __nccwpck_require__(12781)
      if (process.env.READABLE_STREAM === "disable" && Stream) {
        module.exports = Stream.Readable
        Object.assign(module.exports, Stream)
        module.exports.Stream = Stream
      } else {
        exports = module.exports = __nccwpck_require__(51433)
        exports.Stream = Stream || exports
        exports.Readable = exports
        exports.Writable = __nccwpck_require__(26993)
        exports.Duplex = __nccwpck_require__(41359)
        exports.Transform = __nccwpck_require__(34415)
        exports.PassThrough = __nccwpck_require__(81542)
        exports.finished = __nccwpck_require__(76080)
        exports.pipeline = __nccwpck_require__(76989)
      }

      /***/
    },

    /***/ 34417: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const Module = __nccwpck_require__(98188)
      const fs = __nccwpck_require__(57147)

      const resolveFrom = (fromDir, moduleId, silent) => {
        if (typeof fromDir !== "string") {
          throw new TypeError(
            `Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDir}\``
          )
        }

        if (typeof moduleId !== "string") {
          throw new TypeError(
            `Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``
          )
        }

        try {
          fromDir = fs.realpathSync(fromDir)
        } catch (err) {
          if (err.code === "ENOENT") {
            fromDir = path.resolve(fromDir)
          } else if (silent) {
            return null
          } else {
            throw err
          }
        }

        const fromFile = path.join(fromDir, "noop.js")

        const resolveFileName = () =>
          Module._resolveFilename(moduleId, {
            id: fromFile,
            filename: fromFile,
            paths: Module._nodeModulePaths(fromDir)
          })

        if (silent) {
          try {
            return resolveFileName()
          } catch (err) {
            return null
          }
        }

        return resolveFileName()
      }

      module.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId)
      module.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true)

      /***/
    },

    /***/ 51429: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const path = __nccwpck_require__(71017)
      const globalDirs = __nccwpck_require__(80891)

      const resolveGlobal = (moduleId) => {
        try {
          return require.resolve(path.join(globalDirs.yarn.packages, moduleId))
        } catch (_) {
          return require.resolve(path.join(globalDirs.npm.packages, moduleId))
        }
      }

      module.exports = resolveGlobal

      module.exports.silent = (moduleId) => {
        try {
          return resolveGlobal(moduleId)
        } catch (_) {
          return undefined
        }
      }

      /***/
    },

    /***/ 91532: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const ANY = Symbol("SemVer ANY")
      // hoisted class for cyclic dependency
      class Comparator {
        static get ANY() {
          return ANY
        }
        constructor(comp, options) {
          options = parseOptions(options)

          if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) {
              return comp
            } else {
              comp = comp.value
            }
          }

          debug("comparator", comp, options)
          this.options = options
          this.loose = !!options.loose
          this.parse(comp)

          if (this.semver === ANY) {
            this.value = ""
          } else {
            this.value = this.operator + this.semver.version
          }

          debug("comp", this)
        }

        parse(comp) {
          const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
          const m = comp.match(r)

          if (!m) {
            throw new TypeError(`Invalid comparator: ${comp}`)
          }

          this.operator = m[1] !== undefined ? m[1] : ""
          if (this.operator === "=") {
            this.operator = ""
          }

          // if it literally is just '>' or '' then allow anything.
          if (!m[2]) {
            this.semver = ANY
          } else {
            this.semver = new SemVer(m[2], this.options.loose)
          }
        }

        toString() {
          return this.value
        }

        test(version) {
          debug("Comparator.test", version, this.options.loose)

          if (this.semver === ANY || version === ANY) {
            return true
          }

          if (typeof version === "string") {
            try {
              version = new SemVer(version, this.options)
            } catch (er) {
              return false
            }
          }

          return cmp(version, this.operator, this.semver, this.options)
        }

        intersects(comp, options) {
          if (!(comp instanceof Comparator)) {
            throw new TypeError("a Comparator is required")
          }

          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            }
          }

          if (this.operator === "") {
            if (this.value === "") {
              return true
            }
            return new Range(comp.value, options).test(this.value)
          } else if (comp.operator === "") {
            if (comp.value === "") {
              return true
            }
            return new Range(this.value, options).test(comp.semver)
          }

          const sameDirectionIncreasing =
            (this.operator === ">=" || this.operator === ">") &&
            (comp.operator === ">=" || comp.operator === ">")
          const sameDirectionDecreasing =
            (this.operator === "<=" || this.operator === "<") &&
            (comp.operator === "<=" || comp.operator === "<")
          const sameSemVer = this.semver.version === comp.semver.version
          const differentDirectionsInclusive =
            (this.operator === ">=" || this.operator === "<=") &&
            (comp.operator === ">=" || comp.operator === "<=")
          const oppositeDirectionsLessThan =
            cmp(this.semver, "<", comp.semver, options) &&
            (this.operator === ">=" || this.operator === ">") &&
            (comp.operator === "<=" || comp.operator === "<")
          const oppositeDirectionsGreaterThan =
            cmp(this.semver, ">", comp.semver, options) &&
            (this.operator === "<=" || this.operator === "<") &&
            (comp.operator === ">=" || comp.operator === ">")

          return (
            sameDirectionIncreasing ||
            sameDirectionDecreasing ||
            (sameSemVer && differentDirectionsInclusive) ||
            oppositeDirectionsLessThan ||
            oppositeDirectionsGreaterThan
          )
        }
      }

      module.exports = Comparator

      const parseOptions = __nccwpck_require__(40785)
      const { re, t } = __nccwpck_require__(9523)
      const cmp = __nccwpck_require__(75098)
      const debug = __nccwpck_require__(50427)
      const SemVer = __nccwpck_require__(48088)
      const Range = __nccwpck_require__(9828)

      /***/
    },

    /***/ 9828: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      // hoisted class for cyclic dependency
      class Range {
        constructor(range, options) {
          options = parseOptions(options)

          if (range instanceof Range) {
            if (
              range.loose === !!options.loose &&
              range.includePrerelease === !!options.includePrerelease
            ) {
              return range
            } else {
              return new Range(range.raw, options)
            }
          }

          if (range instanceof Comparator) {
            // just put it in the set and return
            this.raw = range.value
            this.set = [[range]]
            this.format()
            return this
          }

          this.options = options
          this.loose = !!options.loose
          this.includePrerelease = !!options.includePrerelease

          // First, split based on boolean or ||
          this.raw = range
          this.set = range
            .split(/\s*\|\|\s*/)
            // map the range to a 2d array of comparators
            .map((range) => this.parseRange(range.trim()))
            // throw out any comparator lists that are empty
            // this generally means that it was not a valid range, which is allowed
            // in loose mode, but will still throw if the WHOLE range is invalid.
            .filter((c) => c.length)

          if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${range}`)
          }

          // if we have any that are not the null set, throw out null sets.
          if (this.set.length > 1) {
            // keep the first one, in case they're all null sets
            const first = this.set[0]
            this.set = this.set.filter((c) => !isNullSet(c[0]))
            if (this.set.length === 0) this.set = [first]
            else if (this.set.length > 1) {
              // if we have any that are *, then the range is just *
              for (const c of this.set) {
                if (c.length === 1 && isAny(c[0])) {
                  this.set = [c]
                  break
                }
              }
            }
          }

          this.format()
        }

        format() {
          this.range = this.set
            .map((comps) => {
              return comps.join(" ").trim()
            })
            .join("||")
            .trim()
          return this.range
        }

        toString() {
          return this.range
        }

        parseRange(range) {
          range = range.trim()

          // memoize range parsing for performance.
          // this is a very hot path, and fully deterministic.
          const memoOpts = Object.keys(this.options).join(",")
          const memoKey = `parseRange:${memoOpts}:${range}`
          const cached = cache.get(memoKey)
          if (cached) return cached

          const loose = this.options.loose
          // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
          const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
          range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
          debug("hyphen replace", range)
          // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
          range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
          debug("comparator trim", range, re[t.COMPARATORTRIM])

          // `~ 1.2.3` => `~1.2.3`
          range = range.replace(re[t.TILDETRIM], tildeTrimReplace)

          // `^ 1.2.3` => `^1.2.3`
          range = range.replace(re[t.CARETTRIM], caretTrimReplace)

          // normalize spaces
          range = range.split(/\s+/).join(" ")

          // At this point, the range is completely trimmed and
          // ready to be split into comparators.

          const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
          const rangeList = range
            .split(" ")
            .map((comp) => parseComparator(comp, this.options))
            .join(" ")
            .split(/\s+/)
            // >=0.0.0 is equivalent to *
            .map((comp) => replaceGTE0(comp, this.options))
            // in loose mode, throw out any that are not valid comparators
            .filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => true)
            .map((comp) => new Comparator(comp, this.options))

          // if any comparators are the null set, then replace with JUST null set
          // if more than one comparator, remove any * comparators
          // also, don't include the same comparator more than once
          const l = rangeList.length
          const rangeMap = new Map()
          for (const comp of rangeList) {
            if (isNullSet(comp)) return [comp]
            rangeMap.set(comp.value, comp)
          }
          if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("")

          const result = [...rangeMap.values()]
          cache.set(memoKey, result)
          return result
        }

        intersects(range, options) {
          if (!(range instanceof Range)) {
            throw new TypeError("a Range is required")
          }

          return this.set.some((thisComparators) => {
            return (
              isSatisfiable(thisComparators, options) &&
              range.set.some((rangeComparators) => {
                return (
                  isSatisfiable(rangeComparators, options) &&
                  thisComparators.every((thisComparator) => {
                    return rangeComparators.every((rangeComparator) => {
                      return thisComparator.intersects(rangeComparator, options)
                    })
                  })
                )
              })
            )
          })
        }

        // if ANY of the sets match ALL of its comparators, then pass
        test(version) {
          if (!version) {
            return false
          }

          if (typeof version === "string") {
            try {
              version = new SemVer(version, this.options)
            } catch (er) {
              return false
            }
          }

          for (let i = 0; i < this.set.length; i++) {
            if (testSet(this.set[i], version, this.options)) {
              return true
            }
          }
          return false
        }
      }
      module.exports = Range

      const LRU = __nccwpck_require__(7129)
      const cache = new LRU({ max: 1000 })

      const parseOptions = __nccwpck_require__(40785)
      const Comparator = __nccwpck_require__(91532)
      const debug = __nccwpck_require__(50427)
      const SemVer = __nccwpck_require__(48088)
      const { re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } =
        __nccwpck_require__(9523)

      const isNullSet = (c) => c.value === "<0.0.0-0"
      const isAny = (c) => c.value === ""

      // take a set of comparators and determine whether there
      // exists a version which can satisfy it
      const isSatisfiable = (comparators, options) => {
        let result = true
        const remainingComparators = comparators.slice()
        let testComparator = remainingComparators.pop()

        while (result && remainingComparators.length) {
          result = remainingComparators.every((otherComparator) => {
            return testComparator.intersects(otherComparator, options)
          })

          testComparator = remainingComparators.pop()
        }

        return result
      }

      // comprised of xranges, tildes, stars, and gtlt's at this point.
      // already replaced the hyphen ranges
      // turn into a set of JUST comparators.
      const parseComparator = (comp, options) => {
        debug("comp", comp, options)
        comp = replaceCarets(comp, options)
        debug("caret", comp)
        comp = replaceTildes(comp, options)
        debug("tildes", comp)
        comp = replaceXRanges(comp, options)
        debug("xrange", comp)
        comp = replaceStars(comp, options)
        debug("stars", comp)
        return comp
      }

      const isX = (id) => !id || id.toLowerCase() === "x" || id === "*"

      // ~, ~> --> * (any, kinda silly)
      // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
      // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
      // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
      // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
      // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
      const replaceTildes = (comp, options) =>
        comp
          .trim()
          .split(/\s+/)
          .map((comp) => {
            return replaceTilde(comp, options)
          })
          .join(" ")

      const replaceTilde = (comp, options) => {
        const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
        return comp.replace(r, (_, M, m, p, pr) => {
          debug("tilde", comp, _, M, m, p, pr)
          let ret

          if (isX(M)) {
            ret = ""
          } else if (isX(m)) {
            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
          } else if (isX(p)) {
            // ~1.2 == >=1.2.0 <1.3.0-0
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
          } else if (pr) {
            debug("replaceTilde pr", pr)
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`
          } else {
            // ~1.2.3 == >=1.2.3 <1.3.0-0
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`
          }

          debug("tilde return", ret)
          return ret
        })
      }

      // ^ --> * (any, kinda silly)
      // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
      // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
      // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
      // ^1.2.3 --> >=1.2.3 <2.0.0-0
      // ^1.2.0 --> >=1.2.0 <2.0.0-0
      const replaceCarets = (comp, options) =>
        comp
          .trim()
          .split(/\s+/)
          .map((comp) => {
            return replaceCaret(comp, options)
          })
          .join(" ")

      const replaceCaret = (comp, options) => {
        debug("caret", comp, options)
        const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
        const z = options.includePrerelease ? "-0" : ""
        return comp.replace(r, (_, M, m, p, pr) => {
          debug("caret", comp, _, M, m, p, pr)
          let ret

          if (isX(M)) {
            ret = ""
          } else if (isX(m)) {
            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
          } else if (isX(p)) {
            if (M === "0") {
              ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
            } else {
              ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
            }
          } else if (pr) {
            debug("replaceCaret pr", pr)
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`
              } else {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`
              }
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`
            }
          } else {
            debug("no pr")
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`
              } else {
                ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`
              }
            } else {
              ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`
            }
          }

          debug("caret return", ret)
          return ret
        })
      }

      const replaceXRanges = (comp, options) => {
        debug("replaceXRanges", comp, options)
        return comp
          .split(/\s+/)
          .map((comp) => {
            return replaceXRange(comp, options)
          })
          .join(" ")
      }

      const replaceXRange = (comp, options) => {
        comp = comp.trim()
        const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
        return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
          debug("xRange", comp, ret, gtlt, M, m, p, pr)
          const xM = isX(M)
          const xm = xM || isX(m)
          const xp = xm || isX(p)
          const anyX = xp

          if (gtlt === "=" && anyX) {
            gtlt = ""
          }

          // if we're including prereleases in the match, then we need
          // to fix this to -0, the lowest possible prerelease value
          pr = options.includePrerelease ? "-0" : ""

          if (xM) {
            if (gtlt === ">" || gtlt === "<") {
              // nothing is allowed
              ret = "<0.0.0-0"
            } else {
              // nothing is forbidden
              ret = "*"
            }
          } else if (gtlt && anyX) {
            // we know patch is an x, because we have any x at all.
            // replace X with 0
            if (xm) {
              m = 0
            }
            p = 0

            if (gtlt === ">") {
              // >1 => >=2.0.0
              // >1.2 => >=1.3.0
              gtlt = ">="
              if (xm) {
                M = +M + 1
                m = 0
                p = 0
              } else {
                m = +m + 1
                p = 0
              }
            } else if (gtlt === "<=") {
              // <=0.7.x is actually <0.8.0, since any 0.7.x should
              // pass.  Similarly, <=7.x is actually <8.0.0, etc.
              gtlt = "<"
              if (xm) {
                M = +M + 1
              } else {
                m = +m + 1
              }
            }

            if (gtlt === "<") pr = "-0"

            ret = `${gtlt + M}.${m}.${p}${pr}`
          } else if (xm) {
            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
          } else if (xp) {
            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`
          }

          debug("xRange return", ret)

          return ret
        })
      }

      // Because * is AND-ed with everything else in the comparator,
      // and '' means "any version", just remove the *s entirely.
      const replaceStars = (comp, options) => {
        debug("replaceStars", comp, options)
        // Looseness is ignored here.  star is always as loose as it gets!
        return comp.trim().replace(re[t.STAR], "")
      }

      const replaceGTE0 = (comp, options) => {
        debug("replaceGTE0", comp, options)
        return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")
      }

      // This function is passed to string.replace(re[t.HYPHENRANGE])
      // M, m, patch, prerelease, build
      // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
      // 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
      // 1.2 - 3.4 => >=1.2.0 <3.5.0-0
      const hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
        if (isX(fM)) {
          from = ""
        } else if (isX(fm)) {
          from = `>=${fM}.0.0${incPr ? "-0" : ""}`
        } else if (isX(fp)) {
          from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`
        } else if (fpr) {
          from = `>=${from}`
        } else {
          from = `>=${from}${incPr ? "-0" : ""}`
        }

        if (isX(tM)) {
          to = ""
        } else if (isX(tm)) {
          to = `<${+tM + 1}.0.0-0`
        } else if (isX(tp)) {
          to = `<${tM}.${+tm + 1}.0-0`
        } else if (tpr) {
          to = `<=${tM}.${tm}.${tp}-${tpr}`
        } else if (incPr) {
          to = `<${tM}.${tm}.${+tp + 1}-0`
        } else {
          to = `<=${to}`
        }

        return `${from} ${to}`.trim()
      }

      const testSet = (set, version, options) => {
        for (let i = 0; i < set.length; i++) {
          if (!set[i].test(version)) {
            return false
          }
        }

        if (version.prerelease.length && !options.includePrerelease) {
          // Find the set of versions that are allowed to have prereleases
          // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
          // That should allow `1.2.3-pr.2` to pass.
          // However, `1.2.4-alpha.notready` should NOT be allowed,
          // even though it's within the range set by the comparators.
          for (let i = 0; i < set.length; i++) {
            debug(set[i].semver)
            if (set[i].semver === Comparator.ANY) {
              continue
            }

            if (set[i].semver.prerelease.length > 0) {
              const allowed = set[i].semver
              if (
                allowed.major === version.major &&
                allowed.minor === version.minor &&
                allowed.patch === version.patch
              ) {
                return true
              }
            }
          }

          // Version has a -pre, but it's not one of the ones we like.
          return false
        }

        return true
      }

      /***/
    },

    /***/ 48088: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const debug = __nccwpck_require__(50427)
      const { MAX_LENGTH, MAX_SAFE_INTEGER } = __nccwpck_require__(42293)
      const { re, t } = __nccwpck_require__(9523)

      const parseOptions = __nccwpck_require__(40785)
      const { compareIdentifiers } = __nccwpck_require__(92463)
      class SemVer {
        constructor(version, options) {
          options = parseOptions(options)

          if (version instanceof SemVer) {
            if (
              version.loose === !!options.loose &&
              version.includePrerelease === !!options.includePrerelease
            ) {
              return version
            } else {
              version = version.version
            }
          } else if (typeof version !== "string") {
            throw new TypeError(`Invalid Version: ${version}`)
          }

          if (version.length > MAX_LENGTH) {
            throw new TypeError(`version is longer than ${MAX_LENGTH} characters`)
          }

          debug("SemVer", version, options)
          this.options = options
          this.loose = !!options.loose
          // this isn't actually relevant for versions, but keep it so that we
          // don't run into trouble passing this.options around.
          this.includePrerelease = !!options.includePrerelease

          const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

          if (!m) {
            throw new TypeError(`Invalid Version: ${version}`)
          }

          this.raw = version

          // these are actually numbers
          this.major = +m[1]
          this.minor = +m[2]
          this.patch = +m[3]

          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError("Invalid major version")
          }

          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError("Invalid minor version")
          }

          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError("Invalid patch version")
          }

          // numberify any prerelease numeric ids
          if (!m[4]) {
            this.prerelease = []
          } else {
            this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id
                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num
                }
              }
              return id
            })
          }

          this.build = m[5] ? m[5].split(".") : []
          this.format()
        }

        format() {
          this.version = `${this.major}.${this.minor}.${this.patch}`
          if (this.prerelease.length) {
            this.version += `-${this.prerelease.join(".")}`
          }
          return this.version
        }

        toString() {
          return this.version
        }

        compare(other) {
          debug("SemVer.compare", this.version, this.options, other)
          if (!(other instanceof SemVer)) {
            if (typeof other === "string" && other === this.version) {
              return 0
            }
            other = new SemVer(other, this.options)
          }

          if (other.version === this.version) {
            return 0
          }

          return this.compareMain(other) || this.comparePre(other)
        }

        compareMain(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options)
          }

          return (
            compareIdentifiers(this.major, other.major) ||
            compareIdentifiers(this.minor, other.minor) ||
            compareIdentifiers(this.patch, other.patch)
          )
        }

        comparePre(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options)
          }

          // NOT having a prerelease is > having one
          if (this.prerelease.length && !other.prerelease.length) {
            return -1
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0
          }

          let i = 0
          do {
            const a = this.prerelease[i]
            const b = other.prerelease[i]
            debug("prerelease compare", i, a, b)
            if (a === undefined && b === undefined) {
              return 0
            } else if (b === undefined) {
              return 1
            } else if (a === undefined) {
              return -1
            } else if (a === b) {
              continue
            } else {
              return compareIdentifiers(a, b)
            }
          } while (++i)
        }

        compareBuild(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options)
          }

          let i = 0
          do {
            const a = this.build[i]
            const b = other.build[i]
            debug("prerelease compare", i, a, b)
            if (a === undefined && b === undefined) {
              return 0
            } else if (b === undefined) {
              return 1
            } else if (a === undefined) {
              return -1
            } else if (a === b) {
              continue
            } else {
              return compareIdentifiers(a, b)
            }
          } while (++i)
        }

        // preminor will bump the version up to the next minor release, and immediately
        // down to pre-release. premajor and prepatch work the same way.
        inc(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0
              this.patch = 0
              this.minor = 0
              this.major++
              this.inc("pre", identifier)
              break
            case "preminor":
              this.prerelease.length = 0
              this.patch = 0
              this.minor++
              this.inc("pre", identifier)
              break
            case "prepatch":
              // If this is already a prerelease, it will bump to the next version
              // drop any prereleases that might already exist, since they are not
              // relevant at this point.
              this.prerelease.length = 0
              this.inc("patch", identifier)
              this.inc("pre", identifier)
              break
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", identifier)
              }
              this.inc("pre", identifier)
              break

            case "major":
              // If this is a pre-major version, bump up to the same major version.
              // Otherwise increment major.
              // 1.0.0-5 bumps to 1.0.0
              // 1.1.0 bumps to 2.0.0
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++
              }
              this.minor = 0
              this.patch = 0
              this.prerelease = []
              break
            case "minor":
              // If this is a pre-minor version, bump up to the same minor version.
              // Otherwise increment minor.
              // 1.2.0-5 bumps to 1.2.0
              // 1.2.1 bumps to 1.3.0
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++
              }
              this.patch = 0
              this.prerelease = []
              break
            case "patch":
              // If this is not a pre-release version, it will increment the patch.
              // If it is a pre-release it will bump up to the same patch version.
              // 1.2.0-5 patches to 1.2.0
              // 1.2.0 patches to 1.2.1
              if (this.prerelease.length === 0) {
                this.patch++
              }
              this.prerelease = []
              break
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre":
              if (this.prerelease.length === 0) {
                this.prerelease = [0]
              } else {
                let i = this.prerelease.length
                while (--i >= 0) {
                  if (typeof this.prerelease[i] === "number") {
                    this.prerelease[i]++
                    i = -2
                  }
                }
                if (i === -1) {
                  // didn't increment anything
                  this.prerelease.push(0)
                }
              }
              if (identifier) {
                // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                if (this.prerelease[0] === identifier) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = [identifier, 0]
                  }
                } else {
                  this.prerelease = [identifier, 0]
                }
              }
              break

            default:
              throw new Error(`invalid increment argument: ${release}`)
          }
          this.format()
          this.raw = this.version
          return this
        }
      }

      module.exports = SemVer

      /***/
    },

    /***/ 48848: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const parse = __nccwpck_require__(75925)
      const clean = (version, options) => {
        const s = parse(version.trim().replace(/^[=v]+/, ""), options)
        return s ? s.version : null
      }
      module.exports = clean

      /***/
    },

    /***/ 75098: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const eq = __nccwpck_require__(91898)
      const neq = __nccwpck_require__(6017)
      const gt = __nccwpck_require__(84123)
      const gte = __nccwpck_require__(15522)
      const lt = __nccwpck_require__(80194)
      const lte = __nccwpck_require__(77520)

      const cmp = (a, op, b, loose) => {
        switch (op) {
          case "===":
            if (typeof a === "object") a = a.version
            if (typeof b === "object") b = b.version
            return a === b

          case "!==":
            if (typeof a === "object") a = a.version
            if (typeof b === "object") b = b.version
            return a !== b

          case "":
          case "=":
          case "==":
            return eq(a, b, loose)

          case "!=":
            return neq(a, b, loose)

          case ">":
            return gt(a, b, loose)

          case ">=":
            return gte(a, b, loose)

          case "<":
            return lt(a, b, loose)

          case "<=":
            return lte(a, b, loose)

          default:
            throw new TypeError(`Invalid operator: ${op}`)
        }
      }
      module.exports = cmp

      /***/
    },

    /***/ 13466: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const parse = __nccwpck_require__(75925)
      const { re, t } = __nccwpck_require__(9523)

      const coerce = (version, options) => {
        if (version instanceof SemVer) {
          return version
        }

        if (typeof version === "number") {
          version = String(version)
        }

        if (typeof version !== "string") {
          return null
        }

        options = options || {}

        let match = null
        if (!options.rtl) {
          match = version.match(re[t.COERCE])
        } else {
          // Find the right-most coercible string that does not share
          // a terminus with a more left-ward coercible string.
          // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
          //
          // Walk through the string checking with a /g regexp
          // Manually set the index so as to pick up overlapping matches.
          // Stop when we get a match that ends at the string end, since no
          // coercible string can be more right-ward without the same terminus.
          let next
          while (
            (next = re[t.COERCERTL].exec(version)) &&
            (!match || match.index + match[0].length !== version.length)
          ) {
            if (!match || next.index + next[0].length !== match.index + match[0].length) {
              match = next
            }
            re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length
          }
          // leave it in a clean state
          re[t.COERCERTL].lastIndex = -1
        }

        if (match === null) return null

        return parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options)
      }
      module.exports = coerce

      /***/
    },

    /***/ 92156: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const compareBuild = (a, b, loose) => {
        const versionA = new SemVer(a, loose)
        const versionB = new SemVer(b, loose)
        return versionA.compare(versionB) || versionA.compareBuild(versionB)
      }
      module.exports = compareBuild

      /***/
    },

    /***/ 62804: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const compareLoose = (a, b) => compare(a, b, true)
      module.exports = compareLoose

      /***/
    },

    /***/ 44309: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose))

      module.exports = compare

      /***/
    },

    /***/ 64297: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const parse = __nccwpck_require__(75925)
      const eq = __nccwpck_require__(91898)

      const diff = (version1, version2) => {
        if (eq(version1, version2)) {
          return null
        } else {
          const v1 = parse(version1)
          const v2 = parse(version2)
          const hasPre = v1.prerelease.length || v2.prerelease.length
          const prefix = hasPre ? "pre" : ""
          const defaultResult = hasPre ? "prerelease" : ""
          for (const key in v1) {
            if (key === "major" || key === "minor" || key === "patch") {
              if (v1[key] !== v2[key]) {
                return prefix + key
              }
            }
          }
          return defaultResult // may be undefined
        }
      }
      module.exports = diff

      /***/
    },

    /***/ 91898: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const eq = (a, b, loose) => compare(a, b, loose) === 0
      module.exports = eq

      /***/
    },

    /***/ 84123: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const gt = (a, b, loose) => compare(a, b, loose) > 0
      module.exports = gt

      /***/
    },

    /***/ 15522: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const gte = (a, b, loose) => compare(a, b, loose) >= 0
      module.exports = gte

      /***/
    },

    /***/ 30900: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)

      const inc = (version, release, options, identifier) => {
        if (typeof options === "string") {
          identifier = options
          options = undefined
        }

        try {
          return new SemVer(version, options).inc(release, identifier).version
        } catch (er) {
          return null
        }
      }
      module.exports = inc

      /***/
    },

    /***/ 80194: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const lt = (a, b, loose) => compare(a, b, loose) < 0
      module.exports = lt

      /***/
    },

    /***/ 77520: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const lte = (a, b, loose) => compare(a, b, loose) <= 0
      module.exports = lte

      /***/
    },

    /***/ 76688: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const major = (a, loose) => new SemVer(a, loose).major
      module.exports = major

      /***/
    },

    /***/ 38447: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const minor = (a, loose) => new SemVer(a, loose).minor
      module.exports = minor

      /***/
    },

    /***/ 6017: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const neq = (a, b, loose) => compare(a, b, loose) !== 0
      module.exports = neq

      /***/
    },

    /***/ 75925: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const { MAX_LENGTH } = __nccwpck_require__(42293)
      const { re, t } = __nccwpck_require__(9523)
      const SemVer = __nccwpck_require__(48088)

      const parseOptions = __nccwpck_require__(40785)
      const parse = (version, options) => {
        options = parseOptions(options)

        if (version instanceof SemVer) {
          return version
        }

        if (typeof version !== "string") {
          return null
        }

        if (version.length > MAX_LENGTH) {
          return null
        }

        const r = options.loose ? re[t.LOOSE] : re[t.FULL]
        if (!r.test(version)) {
          return null
        }

        try {
          return new SemVer(version, options)
        } catch (er) {
          return null
        }
      }

      module.exports = parse

      /***/
    },

    /***/ 42866: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const patch = (a, loose) => new SemVer(a, loose).patch
      module.exports = patch

      /***/
    },

    /***/ 24016: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const parse = __nccwpck_require__(75925)
      const prerelease = (version, options) => {
        const parsed = parse(version, options)
        return parsed && parsed.prerelease.length ? parsed.prerelease : null
      }
      module.exports = prerelease

      /***/
    },

    /***/ 76417: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compare = __nccwpck_require__(44309)
      const rcompare = (a, b, loose) => compare(b, a, loose)
      module.exports = rcompare

      /***/
    },

    /***/ 8701: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compareBuild = __nccwpck_require__(92156)
      const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
      module.exports = rsort

      /***/
    },

    /***/ 6055: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const Range = __nccwpck_require__(9828)
      const satisfies = (version, range, options) => {
        try {
          range = new Range(range, options)
        } catch (er) {
          return false
        }
        return range.test(version)
      }
      module.exports = satisfies

      /***/
    },

    /***/ 61426: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const compareBuild = __nccwpck_require__(92156)
      const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
      module.exports = sort

      /***/
    },

    /***/ 19601: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const parse = __nccwpck_require__(75925)
      const valid = (version, options) => {
        const v = parse(version, options)
        return v ? v.version : null
      }
      module.exports = valid

      /***/
    },

    /***/ 11383: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      // just pre-load all the stuff that index.js lazily exports
      const internalRe = __nccwpck_require__(9523)
      module.exports = {
        re: internalRe.re,
        src: internalRe.src,
        tokens: internalRe.t,
        SEMVER_SPEC_VERSION: __nccwpck_require__(42293).SEMVER_SPEC_VERSION,
        SemVer: __nccwpck_require__(48088),
        compareIdentifiers: __nccwpck_require__(92463).compareIdentifiers,
        rcompareIdentifiers: __nccwpck_require__(92463).rcompareIdentifiers,
        parse: __nccwpck_require__(75925),
        valid: __nccwpck_require__(19601),
        clean: __nccwpck_require__(48848),
        inc: __nccwpck_require__(30900),
        diff: __nccwpck_require__(64297),
        major: __nccwpck_require__(76688),
        minor: __nccwpck_require__(38447),
        patch: __nccwpck_require__(42866),
        prerelease: __nccwpck_require__(24016),
        compare: __nccwpck_require__(44309),
        rcompare: __nccwpck_require__(76417),
        compareLoose: __nccwpck_require__(62804),
        compareBuild: __nccwpck_require__(92156),
        sort: __nccwpck_require__(61426),
        rsort: __nccwpck_require__(8701),
        gt: __nccwpck_require__(84123),
        lt: __nccwpck_require__(80194),
        eq: __nccwpck_require__(91898),
        neq: __nccwpck_require__(6017),
        gte: __nccwpck_require__(15522),
        lte: __nccwpck_require__(77520),
        cmp: __nccwpck_require__(75098),
        coerce: __nccwpck_require__(13466),
        Comparator: __nccwpck_require__(91532),
        Range: __nccwpck_require__(9828),
        satisfies: __nccwpck_require__(6055),
        toComparators: __nccwpck_require__(52706),
        maxSatisfying: __nccwpck_require__(20579),
        minSatisfying: __nccwpck_require__(10832),
        minVersion: __nccwpck_require__(34179),
        validRange: __nccwpck_require__(2098),
        outside: __nccwpck_require__(60420),
        gtr: __nccwpck_require__(9380),
        ltr: __nccwpck_require__(33323),
        intersects: __nccwpck_require__(27008),
        simplifyRange: __nccwpck_require__(75297),
        subset: __nccwpck_require__(7863)
      }

      /***/
    },

    /***/ 42293: /***/ (module) => {
      // Note: this is the semver.org version of the spec that it implements
      // Not necessarily the package version of this code.
      const SEMVER_SPEC_VERSION = "2.0.0"

      const MAX_LENGTH = 256
      const MAX_SAFE_INTEGER =
        Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991

      // Max safe segment length for coercion.
      const MAX_SAFE_COMPONENT_LENGTH = 16

      module.exports = {
        SEMVER_SPEC_VERSION,
        MAX_LENGTH,
        MAX_SAFE_INTEGER,
        MAX_SAFE_COMPONENT_LENGTH
      }

      /***/
    },

    /***/ 50427: /***/ (module) => {
      const debug =
        typeof process === "object" &&
        process.env &&
        process.env.NODE_DEBUG &&
        /\bsemver\b/i.test(process.env.NODE_DEBUG)
          ? (...args) => console.error("SEMVER", ...args)
          : () => {}

      module.exports = debug

      /***/
    },

    /***/ 92463: /***/ (module) => {
      const numeric = /^[0-9]+$/
      const compareIdentifiers = (a, b) => {
        const anum = numeric.test(a)
        const bnum = numeric.test(b)

        if (anum && bnum) {
          a = +a
          b = +b
        }

        return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1
      }

      const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

      module.exports = {
        compareIdentifiers,
        rcompareIdentifiers
      }

      /***/
    },

    /***/ 40785: /***/ (module) => {
      // parse out just the options we care about so we always get a consistent
      // obj with keys in a consistent order.
      const opts = ["includePrerelease", "loose", "rtl"]
      const parseOptions = (options) =>
        !options
          ? {}
          : typeof options !== "object"
          ? { loose: true }
          : opts
              .filter((k) => options[k])
              .reduce((options, k) => {
                options[k] = true
                return options
              }, {})
      module.exports = parseOptions

      /***/
    },

    /***/ 9523: /***/ (module, exports, __nccwpck_require__) => {
      const { MAX_SAFE_COMPONENT_LENGTH } = __nccwpck_require__(42293)
      const debug = __nccwpck_require__(50427)
      exports = module.exports = {}

      // The actual regexps go on exports.re
      const re = (exports.re = [])
      const src = (exports.src = [])
      const t = (exports.t = {})
      let R = 0

      const createToken = (name, value, isGlobal) => {
        const index = R++
        debug(index, value)
        t[name] = index
        src[index] = value
        re[index] = new RegExp(value, isGlobal ? "g" : undefined)
      }

      // The following Regular Expressions can be used for tokenizing,
      // validating, and parsing SemVer version strings.

      // ## Numeric Identifier
      // A single `0`, or a non-zero digit followed by zero or more digits.

      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*")
      createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+")

      // ## Non-numeric Identifier
      // Zero or more digits, followed by a letter or hyphen, and then zero or
      // more letters, digits, or hyphens.

      createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*")

      // ## Main Version
      // Three dot-separated numeric identifiers.

      createToken(
        "MAINVERSION",
        `(${src[t.NUMERICIDENTIFIER]})\\.` +
          `(${src[t.NUMERICIDENTIFIER]})\\.` +
          `(${src[t.NUMERICIDENTIFIER]})`
      )

      createToken(
        "MAINVERSIONLOOSE",
        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
          `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
          `(${src[t.NUMERICIDENTIFIERLOOSE]})`
      )

      // ## Pre-release Version Identifier
      // A numeric identifier, or a non-numeric identifier.

      createToken(
        "PRERELEASEIDENTIFIER",
        `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`
      )

      createToken(
        "PRERELEASEIDENTIFIERLOOSE",
        `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`
      )

      // ## Pre-release Version
      // Hyphen, followed by one or more dot-separated pre-release version
      // identifiers.

      createToken(
        "PRERELEASE",
        `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`
      )

      createToken(
        "PRERELEASELOOSE",
        `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`
      )

      // ## Build Metadata Identifier
      // Any combination of digits, letters, or hyphens.

      createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+")

      // ## Build Metadata
      // Plus sign, followed by one or more period-separated build metadata
      // identifiers.

      createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

      // ## Full Version String
      // A main version, followed optionally by a pre-release version and
      // build metadata.

      // Note that the only major, minor, patch, and pre-release sections of
      // the version string are capturing groups.  The build metadata is not a
      // capturing group, because it should not ever be used in version
      // comparison.

      createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`)

      createToken("FULL", `^${src[t.FULLPLAIN]}$`)

      // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
      // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
      // common in the npm registry.
      createToken(
        "LOOSEPLAIN",
        `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`
      )

      createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`)

      createToken("GTLT", "((?:<|>)?=?)")

      // Something like "2.*" or "1.2.x".
      // Note that "x.x" is a valid xRange identifer, meaning "any version"
      // Only the first item is strictly required.
      createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
      createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

      createToken(
        "XRANGEPLAIN",
        `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
          `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
          `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
          `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` +
          `)?)?`
      )

      createToken(
        "XRANGEPLAINLOOSE",
        `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
          `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
          `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
          `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` +
          `)?)?`
      )

      createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
      createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

      // Coercion.
      // Extract anything that could conceivably be a part of a valid semver
      createToken(
        "COERCE",
        `${"(^|[^\\d])" + "(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})` +
          `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
          `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
          `(?:$|[^\\d])`
      )
      createToken("COERCERTL", src[t.COERCE], true)

      // Tilde ranges.
      // Meaning is "reasonably at or greater than"
      createToken("LONETILDE", "(?:~>?)")

      createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true)
      exports.tildeTrimReplace = "$1~"

      createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
      createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

      // Caret ranges.
      // Meaning is "at least and backwards compatible with"
      createToken("LONECARET", "(?:\\^)")

      createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true)
      exports.caretTrimReplace = "$1^"

      createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
      createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

      // A simple gt/lt/eq thing, or just "" to indicate "any version"
      createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
      createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

      // An expression to strip any whitespace between the gtlt and the thing
      // it modifies, so that `> 1.2.3` ==> `>1.2.3`
      createToken(
        "COMPARATORTRIM",
        `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,
        true
      )
      exports.comparatorTrimReplace = "$1$2$3"

      // Something like `1.2.3 - 1.2.4`
      // Note that these all use the loose form, because they'll be
      // checked against either the strict or loose comparator form
      // later.
      createToken(
        "HYPHENRANGE",
        `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`
      )

      createToken(
        "HYPHENRANGELOOSE",
        `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`
      )

      // Star ranges basically just allow anything at all.
      createToken("STAR", "(<|>)?=?\\s*\\*")
      // >=0.0.0 is like a star
      createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$")
      createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$")

      /***/
    },

    /***/ 9380: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      // Determine if version is greater than all the versions possible in the range.
      const outside = __nccwpck_require__(60420)
      const gtr = (version, range, options) => outside(version, range, ">", options)
      module.exports = gtr

      /***/
    },

    /***/ 27008: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const Range = __nccwpck_require__(9828)
      const intersects = (r1, r2, options) => {
        r1 = new Range(r1, options)
        r2 = new Range(r2, options)
        return r1.intersects(r2)
      }
      module.exports = intersects

      /***/
    },

    /***/ 33323: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const outside = __nccwpck_require__(60420)
      // Determine if version is less than all the versions possible in the range
      const ltr = (version, range, options) => outside(version, range, "<", options)
      module.exports = ltr

      /***/
    },

    /***/ 20579: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const Range = __nccwpck_require__(9828)

      const maxSatisfying = (versions, range, options) => {
        let max = null
        let maxSV = null
        let rangeObj = null
        try {
          rangeObj = new Range(range, options)
        } catch (er) {
          return null
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            // satisfies(v, range, options)
            if (!max || maxSV.compare(v) === -1) {
              // compare(max, v, true)
              max = v
              maxSV = new SemVer(max, options)
            }
          }
        })
        return max
      }
      module.exports = maxSatisfying

      /***/
    },

    /***/ 10832: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const Range = __nccwpck_require__(9828)
      const minSatisfying = (versions, range, options) => {
        let min = null
        let minSV = null
        let rangeObj = null
        try {
          rangeObj = new Range(range, options)
        } catch (er) {
          return null
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            // satisfies(v, range, options)
            if (!min || minSV.compare(v) === 1) {
              // compare(min, v, true)
              min = v
              minSV = new SemVer(min, options)
            }
          }
        })
        return min
      }
      module.exports = minSatisfying

      /***/
    },

    /***/ 34179: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const Range = __nccwpck_require__(9828)
      const gt = __nccwpck_require__(84123)

      const minVersion = (range, loose) => {
        range = new Range(range, loose)

        let minver = new SemVer("0.0.0")
        if (range.test(minver)) {
          return minver
        }

        minver = new SemVer("0.0.0-0")
        if (range.test(minver)) {
          return minver
        }

        minver = null
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i]

          let setMin = null
          comparators.forEach((comparator) => {
            // Clone to avoid manipulating the comparator's semver object.
            const compver = new SemVer(comparator.semver.version)
            switch (comparator.operator) {
              case ">":
                if (compver.prerelease.length === 0) {
                  compver.patch++
                } else {
                  compver.prerelease.push(0)
                }
                compver.raw = compver.format()
              /* fallthrough */
              case "":
              case ">=":
                if (!setMin || gt(compver, setMin)) {
                  setMin = compver
                }
                break
              case "<":
              case "<=":
                /* Ignore maximum versions */
                break
              /* istanbul ignore next */
              default:
                throw new Error(`Unexpected operation: ${comparator.operator}`)
            }
          })
          if (setMin && (!minver || gt(minver, setMin))) minver = setMin
        }

        if (minver && range.test(minver)) {
          return minver
        }

        return null
      }
      module.exports = minVersion

      /***/
    },

    /***/ 60420: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const SemVer = __nccwpck_require__(48088)
      const Comparator = __nccwpck_require__(91532)
      const { ANY } = Comparator
      const Range = __nccwpck_require__(9828)
      const satisfies = __nccwpck_require__(6055)
      const gt = __nccwpck_require__(84123)
      const lt = __nccwpck_require__(80194)
      const lte = __nccwpck_require__(77520)
      const gte = __nccwpck_require__(15522)

      const outside = (version, range, hilo, options) => {
        version = new SemVer(version, options)
        range = new Range(range, options)

        let gtfn, ltefn, ltfn, comp, ecomp
        switch (hilo) {
          case ">":
            gtfn = gt
            ltefn = lte
            ltfn = lt
            comp = ">"
            ecomp = ">="
            break
          case "<":
            gtfn = lt
            ltefn = gte
            ltfn = gt
            comp = "<"
            ecomp = "<="
            break
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"')
        }

        // If it satisfies the range it is not outside
        if (satisfies(version, range, options)) {
          return false
        }

        // From now on, variable terms are as if we're in "gtr" mode.
        // but note that everything is flipped for the "ltr" function.

        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i]

          let high = null
          let low = null

          comparators.forEach((comparator) => {
            if (comparator.semver === ANY) {
              comparator = new Comparator(">=0.0.0")
            }
            high = high || comparator
            low = low || comparator
            if (gtfn(comparator.semver, high.semver, options)) {
              high = comparator
            } else if (ltfn(comparator.semver, low.semver, options)) {
              low = comparator
            }
          })

          // If the edge version comparator has a operator then our version
          // isn't outside it
          if (high.operator === comp || high.operator === ecomp) {
            return false
          }

          // If the lowest version comparator has an operator and our version
          // is less than it then it isn't higher than the range
          if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
            return false
          } else if (low.operator === ecomp && ltfn(version, low.semver)) {
            return false
          }
        }
        return true
      }

      module.exports = outside

      /***/
    },

    /***/ 75297: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      // given a set of versions and a range, create a "simplified" range
      // that includes the same versions that the original range does
      // If the original range is shorter than the simplified one, return that.
      const satisfies = __nccwpck_require__(6055)
      const compare = __nccwpck_require__(44309)
      module.exports = (versions, range, options) => {
        const set = []
        let min = null
        let prev = null
        const v = versions.sort((a, b) => compare(a, b, options))
        for (const version of v) {
          const included = satisfies(version, range, options)
          if (included) {
            prev = version
            if (!min) min = version
          } else {
            if (prev) {
              set.push([min, prev])
            }
            prev = null
            min = null
          }
        }
        if (min) set.push([min, null])

        const ranges = []
        for (const [min, max] of set) {
          if (min === max) ranges.push(min)
          else if (!max && min === v[0]) ranges.push("*")
          else if (!max) ranges.push(`>=${min}`)
          else if (min === v[0]) ranges.push(`<=${max}`)
          else ranges.push(`${min} - ${max}`)
        }
        const simplified = ranges.join(" || ")
        const original = typeof range.raw === "string" ? range.raw : String(range)
        return simplified.length < original.length ? simplified : range
      }

      /***/
    },

    /***/ 7863: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const Range = __nccwpck_require__(9828)
      const Comparator = __nccwpck_require__(91532)
      const { ANY } = Comparator
      const satisfies = __nccwpck_require__(6055)
      const compare = __nccwpck_require__(44309)

      // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
      // - Every simple range `r1, r2, ...` is a null set, OR
      // - Every simple range `r1, r2, ...` which is not a null set is a subset of
      //   some `R1, R2, ...`
      //
      // Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
      // - If c is only the ANY comparator
      //   - If C is only the ANY comparator, return true
      //   - Else if in prerelease mode, return false
      //   - else replace c with `[>=0.0.0]`
      // - If C is only the ANY comparator
      //   - if in prerelease mode, return true
      //   - else replace C with `[>=0.0.0]`
      // - Let EQ be the set of = comparators in c
      // - If EQ is more than one, return true (null set)
      // - Let GT be the highest > or >= comparator in c
      // - Let LT be the lowest < or <= comparator in c
      // - If GT and LT, and GT.semver > LT.semver, return true (null set)
      // - If any C is a = range, and GT or LT are set, return false
      // - If EQ
      //   - If GT, and EQ does not satisfy GT, return true (null set)
      //   - If LT, and EQ does not satisfy LT, return true (null set)
      //   - If EQ satisfies every C, return true
      //   - Else return false
      // - If GT
      //   - If GT.semver is lower than any > or >= comp in C, return false
      //   - If GT is >=, and GT.semver does not satisfy every C, return false
      //   - If GT.semver has a prerelease, and not in prerelease mode
      //     - If no C has a prerelease and the GT.semver tuple, return false
      // - If LT
      //   - If LT.semver is greater than any < or <= comp in C, return false
      //   - If LT is <=, and LT.semver does not satisfy every C, return false
      //   - If GT.semver has a prerelease, and not in prerelease mode
      //     - If no C has a prerelease and the LT.semver tuple, return false
      // - Else return true

      const subset = (sub, dom, options = {}) => {
        if (sub === dom) return true

        sub = new Range(sub, options)
        dom = new Range(dom, options)
        let sawNonNull = false

        OUTER: for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options)
            sawNonNull = sawNonNull || isSub !== null
            if (isSub) continue OUTER
          }
          // the null set is a subset of everything, but null simple ranges in
          // a complex range should be ignored.  so if we saw a non-null range,
          // then we know this isn't a subset, but if EVERY simple range was null,
          // then it is a subset.
          if (sawNonNull) return false
        }
        return true
      }

      const simpleSubset = (sub, dom, options) => {
        if (sub === dom) return true

        if (sub.length === 1 && sub[0].semver === ANY) {
          if (dom.length === 1 && dom[0].semver === ANY) return true
          else if (options.includePrerelease) sub = [new Comparator(">=0.0.0-0")]
          else sub = [new Comparator(">=0.0.0")]
        }

        if (dom.length === 1 && dom[0].semver === ANY) {
          if (options.includePrerelease) return true
          else dom = [new Comparator(">=0.0.0")]
        }

        const eqSet = new Set()
        let gt, lt
        for (const c of sub) {
          if (c.operator === ">" || c.operator === ">=") gt = higherGT(gt, c, options)
          else if (c.operator === "<" || c.operator === "<=") lt = lowerLT(lt, c, options)
          else eqSet.add(c.semver)
        }

        if (eqSet.size > 1) return null

        let gtltComp
        if (gt && lt) {
          gtltComp = compare(gt.semver, lt.semver, options)
          if (gtltComp > 0) return null
          else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) return null
        }

        // will iterate one or zero times
        for (const eq of eqSet) {
          if (gt && !satisfies(eq, String(gt), options)) return null

          if (lt && !satisfies(eq, String(lt), options)) return null

          for (const c of dom) {
            if (!satisfies(eq, String(c), options)) return false
          }

          return true
        }

        let higher, lower
        let hasDomLT, hasDomGT
        // if the subset has a prerelease, we need a comparator in the superset
        // with the same tuple and a prerelease, or it's not a subset
        let needDomLTPre =
          lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false
        let needDomGTPre =
          gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false
        // exception: <1.2.3-0 is the same as <1.2.3
        if (
          needDomLTPre &&
          needDomLTPre.prerelease.length === 1 &&
          lt.operator === "<" &&
          needDomLTPre.prerelease[0] === 0
        ) {
          needDomLTPre = false
        }

        for (const c of dom) {
          hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">="
          hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<="
          if (gt) {
            if (needDomGTPre) {
              if (
                c.semver.prerelease &&
                c.semver.prerelease.length &&
                c.semver.major === needDomGTPre.major &&
                c.semver.minor === needDomGTPre.minor &&
                c.semver.patch === needDomGTPre.patch
              ) {
                needDomGTPre = false
              }
            }
            if (c.operator === ">" || c.operator === ">=") {
              higher = higherGT(gt, c, options)
              if (higher === c && higher !== gt) return false
            } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options))
              return false
          }
          if (lt) {
            if (needDomLTPre) {
              if (
                c.semver.prerelease &&
                c.semver.prerelease.length &&
                c.semver.major === needDomLTPre.major &&
                c.semver.minor === needDomLTPre.minor &&
                c.semver.patch === needDomLTPre.patch
              ) {
                needDomLTPre = false
              }
            }
            if (c.operator === "<" || c.operator === "<=") {
              lower = lowerLT(lt, c, options)
              if (lower === c && lower !== lt) return false
            } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options))
              return false
          }
          if (!c.operator && (lt || gt) && gtltComp !== 0) return false
        }

        // if there was a < or >, and nothing in the dom, then must be false
        // UNLESS it was limited by another range in the other direction.
        // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
        if (gt && hasDomLT && !lt && gtltComp !== 0) return false

        if (lt && hasDomGT && !gt && gtltComp !== 0) return false

        // we needed a prerelease range in a specific tuple, but didn't get one
        // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
        // because it includes prereleases in the 1.2.3 tuple
        if (needDomGTPre || needDomLTPre) return false

        return true
      }

      // >=1.2.3 is lower than >1.2.3
      const higherGT = (a, b, options) => {
        if (!a) return b
        const comp = compare(a.semver, b.semver, options)
        return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a
      }

      // <=1.2.3 is higher than <1.2.3
      const lowerLT = (a, b, options) => {
        if (!a) return b
        const comp = compare(a.semver, b.semver, options)
        return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a
      }

      module.exports = subset

      /***/
    },

    /***/ 52706: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const Range = __nccwpck_require__(9828)

      // Mostly just for testing and legacy API reasons
      const toComparators = (range, options) =>
        new Range(range, options).set.map((comp) =>
          comp
            .map((c) => c.value)
            .join(" ")
            .trim()
            .split(" ")
        )

      module.exports = toComparators

      /***/
    },

    /***/ 2098: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const Range = __nccwpck_require__(9828)
      const validRange = (range, options) => {
        try {
          // Return '*' instead of '' so that truthiness works.
          // This will throw if it's invalid anyway
          return new Range(range, options).range || "*"
        } catch (er) {
          return null
        }
      }
      module.exports = validRange

      /***/
    },

    /***/ 67032: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const shebangRegex = __nccwpck_require__(72638)

      module.exports = (string = "") => {
        const match = string.match(shebangRegex)

        if (!match) {
          return null
        }

        const [path, argument] = match[0].replace(/#! ?/, "").split(" ")
        const binary = path.split("/").pop()

        if (binary === "env") {
          return argument
        }

        return argument ? `${binary} ${argument}` : binary
      }

      /***/
    },

    /***/ 72638: /***/ (module) => {
      "use strict"

      module.exports = /^#!(.*)/

      /***/
    },

    /***/ 24931: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      // Note: since nyc uses this module to output coverage, any lines
      // that are in the direct sync flow of nyc's outputCoverage are
      // ignored, since we can never get coverage for them.
      // grab a reference to node's real process object right away
      var process = global.process

      const processOk = function (process) {
        return (
          process &&
          typeof process === "object" &&
          typeof process.removeListener === "function" &&
          typeof process.emit === "function" &&
          typeof process.reallyExit === "function" &&
          typeof process.listeners === "function" &&
          typeof process.kill === "function" &&
          typeof process.pid === "number" &&
          typeof process.on === "function"
        )
      }

      // some kind of non-node environment, just no-op
      /* istanbul ignore if */
      if (!processOk(process)) {
        module.exports = function () {}
      } else {
        var assert = __nccwpck_require__(39491)
        var signals = __nccwpck_require__(63710)
        var isWin = /^win/i.test(process.platform)

        var EE = __nccwpck_require__(82361)
        /* istanbul ignore if */
        if (typeof EE !== "function") {
          EE = EE.EventEmitter
        }

        var emitter
        if (process.__signal_exit_emitter__) {
          emitter = process.__signal_exit_emitter__
        } else {
          emitter = process.__signal_exit_emitter__ = new EE()
          emitter.count = 0
          emitter.emitted = {}
        }

        // Because this emitter is a global, we have to check to see if a
        // previous version of this library failed to enable infinite listeners.
        // I know what you're about to say.  But literally everything about
        // signal-exit is a compromise with evil.  Get used to it.
        if (!emitter.infinite) {
          emitter.setMaxListeners(Infinity)
          emitter.infinite = true
        }

        module.exports = function (cb, opts) {
          /* istanbul ignore if */
          if (!processOk(global.process)) {
            return
          }
          assert.equal(typeof cb, "function", "a callback must be provided for exit handler")

          if (loaded === false) {
            load()
          }

          var ev = "exit"
          if (opts && opts.alwaysLast) {
            ev = "afterexit"
          }

          var remove = function () {
            emitter.removeListener(ev, cb)
            if (
              emitter.listeners("exit").length === 0 &&
              emitter.listeners("afterexit").length === 0
            ) {
              unload()
            }
          }
          emitter.on(ev, cb)

          return remove
        }

        var unload = function unload() {
          if (!loaded || !processOk(global.process)) {
            return
          }
          loaded = false

          signals.forEach(function (sig) {
            try {
              process.removeListener(sig, sigListeners[sig])
            } catch (er) {}
          })
          process.emit = originalProcessEmit
          process.reallyExit = originalProcessReallyExit
          emitter.count -= 1
        }
        module.exports.unload = unload

        var emit = function emit(event, code, signal) {
          /* istanbul ignore if */
          if (emitter.emitted[event]) {
            return
          }
          emitter.emitted[event] = true
          emitter.emit(event, code, signal)
        }

        // { <signal>: <listener fn>, ... }
        var sigListeners = {}
        signals.forEach(function (sig) {
          sigListeners[sig] = function listener() {
            /* istanbul ignore if */
            if (!processOk(global.process)) {
              return
            }
            // If there are no other listeners, an exit is coming!
            // Simplest way: remove us and then re-send the signal.
            // We know that this will kill the process, so we can
            // safely emit now.
            var listeners = process.listeners(sig)
            if (listeners.length === emitter.count) {
              unload()
              emit("exit", null, sig)
              /* istanbul ignore next */
              emit("afterexit", null, sig)
              /* istanbul ignore next */
              if (isWin && sig === "SIGHUP") {
                // "SIGHUP" throws an `ENOSYS` error on Windows,
                // so use a supported signal instead
                sig = "SIGINT"
              }
              /* istanbul ignore next */
              process.kill(process.pid, sig)
            }
          }
        })

        module.exports.signals = function () {
          return signals
        }

        var loaded = false

        var load = function load() {
          if (loaded || !processOk(global.process)) {
            return
          }
          loaded = true

          // This is the number of onSignalExit's that are in play.
          // It's important so that we can count the correct number of
          // listeners on signals, and don't wait for the other one to
          // handle it instead of us.
          emitter.count += 1

          signals = signals.filter(function (sig) {
            try {
              process.on(sig, sigListeners[sig])
              return true
            } catch (er) {
              return false
            }
          })

          process.emit = processEmit
          process.reallyExit = processReallyExit
        }
        module.exports.load = load

        var originalProcessReallyExit = process.reallyExit
        var processReallyExit = function processReallyExit(code) {
          /* istanbul ignore if */
          if (!processOk(global.process)) {
            return
          }
          process.exitCode = code || /* istanbul ignore next */ 0
          emit("exit", process.exitCode, null)
          /* istanbul ignore next */
          emit("afterexit", process.exitCode, null)
          /* istanbul ignore next */
          originalProcessReallyExit.call(process, process.exitCode)
        }

        var originalProcessEmit = process.emit
        var processEmit = function processEmit(ev, arg) {
          if (ev === "exit" && processOk(global.process)) {
            /* istanbul ignore else */
            if (arg !== undefined) {
              process.exitCode = arg
            }
            var ret = originalProcessEmit.apply(this, arguments)
            /* istanbul ignore next */
            emit("exit", process.exitCode, null)
            /* istanbul ignore next */
            emit("afterexit", process.exitCode, null)
            /* istanbul ignore next */
            return ret
          } else {
            return originalProcessEmit.apply(this, arguments)
          }
        }
      }

      /***/
    },

    /***/ 63710: /***/ (module) => {
      // This is not the set of all possible signals.
      //
      // It IS, however, the set of all signals that trigger
      // an exit on either Linux or BSD systems.  Linux is a
      // superset of the signal names supported on BSD, and
      // the unknown signals just fail to register, so we can
      // catch that easily enough.
      //
      // Don't bother with SIGKILL.  It's uncatchable, which
      // means that we can't fire any callbacks anyway.
      //
      // If a user does happen to register a handler on a non-
      // fatal signal like SIGWINCH or something, and then
      // exit, it'll end up firing `process.emit('exit')`, so
      // the handler will be fired anyway.
      //
      // SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
      // artificially, inherently leave the process in a
      // state from which it is not safe to try and enter JS
      // listeners.
      module.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"]

      if (process.platform !== "win32") {
        module.exports.push(
          "SIGVTALRM",
          "SIGXCPU",
          "SIGXFSZ",
          "SIGUSR2",
          "SIGTRAP",
          "SIGSYS",
          "SIGQUIT",
          "SIGIOT"
          // should detect profiler and enable/disable accordingly.
          // see #21
          // 'SIGPROF'
        )
      }

      if (process.platform === "linux") {
        module.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED")
      }

      /***/
    },

    /***/ 13259: /***/ function (module) {
      void function (global) {
        "use strict"

        //  ValueError :: String -> Error
        function ValueError(message) {
          var err = new Error(message)
          err.name = "ValueError"
          return err
        }

        //  create :: Object -> String,*... -> String
        function create(transformers) {
          return function (template) {
            var args = Array.prototype.slice.call(arguments, 1)
            var idx = 0
            var state = "UNDEFINED"

            return template.replace(
              /([{}])\1|[{](.*?)(?:!(.+?))?[}]/g,
              function (match, literal, _key, xf) {
                if (literal != null) {
                  return literal
                }
                var key = _key
                if (key.length > 0) {
                  if (state === "IMPLICIT") {
                    throw ValueError("cannot switch from " + "implicit to explicit numbering")
                  }
                  state = "EXPLICIT"
                } else {
                  if (state === "EXPLICIT") {
                    throw ValueError("cannot switch from " + "explicit to implicit numbering")
                  }
                  state = "IMPLICIT"
                  key = String(idx)
                  idx += 1
                }

                //  1.  Split the key into a lookup path.
                //  2.  If the first path component is not an index, prepend '0'.
                //  3.  Reduce the lookup path to a single result. If the lookup
                //      succeeds the result is a singleton array containing the
                //      value at the lookup path; otherwise the result is [].
                //  4.  Unwrap the result by reducing with '' as the default value.
                var path = key.split(".")
                var value = (/^\d+$/.test(path[0]) ? path : ["0"].concat(path))
                  .reduce(
                    function (maybe, key) {
                      return maybe.reduce(function (_, x) {
                        return x != null && key in Object(x)
                          ? [typeof x[key] === "function" ? x[key]() : x[key]]
                          : []
                      }, [])
                    },
                    [args]
                  )
                  .reduce(function (_, x) {
                    return x
                  }, "")

                if (xf == null) {
                  return value
                } else if (Object.prototype.hasOwnProperty.call(transformers, xf)) {
                  return transformers[xf](value)
                } else {
                  throw ValueError('no transformer named "' + xf + '"')
                }
              }
            )
          }
        }

        //  format :: String,*... -> String
        var format = create({})

        //  format.create :: Object -> String,*... -> String
        format.create = create

        //  format.extend :: Object,Object -> ()
        format.extend = function (prototype, transformers) {
          var $format = create(transformers)
          prototype.format = function () {
            var args = Array.prototype.slice.call(arguments)
            args.unshift(this)
            return $format.apply(global, args)
          }
        }

        /* istanbul ignore else */
        if (true) {
          module.exports = format
        } else {
        }
      }.call(this, this)

      /***/
    },

    /***/ 94841: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      /*<replacement>*/

      var Buffer = __nccwpck_require__(2279).Buffer
      /*</replacement>*/

      var isEncoding =
        Buffer.isEncoding ||
        function (encoding) {
          encoding = "" + encoding
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true
            default:
              return false
          }
        }

      function _normalizeEncoding(enc) {
        if (!enc) return "utf8"
        var retried
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8"
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le"
            case "latin1":
            case "binary":
              return "latin1"
            case "base64":
            case "ascii":
            case "hex":
              return enc
            default:
              if (retried) return // undefined
              enc = ("" + enc).toLowerCase()
              retried = true
          }
        }
      }

      // Do not cache `Buffer.isEncoding` when checking encoding names as some
      // modules monkey-patch it to support additional encodings
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc)
        if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc)))
          throw new Error("Unknown encoding: " + enc)
        return nenc || enc
      }

      // StringDecoder provides an interface for efficiently splitting a series of
      // buffers into a series of JS strings without breaking apart multi-byte
      // characters.
      exports.s = StringDecoder
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding)
        var nb
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text
            this.end = utf16End
            nb = 4
            break
          case "utf8":
            this.fillLast = utf8FillLast
            nb = 4
            break
          case "base64":
            this.text = base64Text
            this.end = base64End
            nb = 3
            break
          default:
            this.write = simpleWrite
            this.end = simpleEnd
            return
        }
        this.lastNeed = 0
        this.lastTotal = 0
        this.lastChar = Buffer.allocUnsafe(nb)
      }

      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return ""
        var r
        var i
        if (this.lastNeed) {
          r = this.fillLast(buf)
          if (r === undefined) return ""
          i = this.lastNeed
          this.lastNeed = 0
        } else {
          i = 0
        }
        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i)
        return r || ""
      }

      StringDecoder.prototype.end = utf8End

      // Returns only complete characters in a Buffer
      StringDecoder.prototype.text = utf8Text

      // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed)
          return this.lastChar.toString(this.encoding, 0, this.lastTotal)
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length)
        this.lastNeed -= buf.length
      }

      // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
      // continuation byte. If an invalid byte is detected, -2 is returned.
      function utf8CheckByte(byte) {
        if (byte <= 0x7f) return 0
        else if (byte >> 5 === 0x06) return 2
        else if (byte >> 4 === 0x0e) return 3
        else if (byte >> 3 === 0x1e) return 4
        return byte >> 6 === 0x02 ? -1 : -2
      }

      // Checks at most 3 bytes at the end of a Buffer in order to detect an
      // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
      // needed to complete the UTF-8 character (if applicable) are returned.
      function utf8CheckIncomplete(self, buf, i) {
        var j = buf.length - 1
        if (j < i) return 0
        var nb = utf8CheckByte(buf[j])
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 1
          return nb
        }
        if (--j < i || nb === -2) return 0
        nb = utf8CheckByte(buf[j])
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 2
          return nb
        }
        if (--j < i || nb === -2) return 0
        nb = utf8CheckByte(buf[j])
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0
            else self.lastNeed = nb - 3
          }
          return nb
        }
        return 0
      }

      // Validates as many continuation bytes for a multi-byte UTF-8 character as
      // needed or are available. If we see a non-continuation byte where we expect
      // one, we "replace" the validated continuation bytes we've seen so far with
      // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
      // behavior. The continuation byte check is included three times in the case
      // where all of the continuation bytes for a character exist in the same buffer.
      // It is also done this way as a slight performance increase instead of using a
      // loop.
      function utf8CheckExtraBytes(self, buf, p) {
        if ((buf[0] & 0xc0) !== 0x80) {
          self.lastNeed = 0
          return "\ufffd"
        }
        if (self.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 0xc0) !== 0x80) {
            self.lastNeed = 1
            return "\ufffd"
          }
          if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xc0) !== 0x80) {
              self.lastNeed = 2
              return "\ufffd"
            }
          }
        }
      }

      // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed
        var r = utf8CheckExtraBytes(this, buf, p)
        if (r !== undefined) return r
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed)
          return this.lastChar.toString(this.encoding, 0, this.lastTotal)
        }
        buf.copy(this.lastChar, p, 0, buf.length)
        this.lastNeed -= buf.length
      }

      // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
      // partial character, the character's bytes are buffered until the required
      // number of bytes are available.
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i)
        if (!this.lastNeed) return buf.toString("utf8", i)
        this.lastTotal = total
        var end = buf.length - (total - this.lastNeed)
        buf.copy(this.lastChar, 0, end)
        return buf.toString("utf8", i, end)
      }

      // For UTF-8, a replacement character is added when ending on a partial
      // character.
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : ""
        if (this.lastNeed) return r + "\ufffd"
        return r
      }

      // UTF-16LE typically needs two bytes per character, but even if we have an even
      // number of bytes available, we need to check if we end on a leading/high
      // surrogate. In that case, we need to wait for the next two bytes in order to
      // decode the last character properly.
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i)
          if (r) {
            var c = r.charCodeAt(r.length - 1)
            if (c >= 0xd800 && c <= 0xdbff) {
              this.lastNeed = 2
              this.lastTotal = 4
              this.lastChar[0] = buf[buf.length - 2]
              this.lastChar[1] = buf[buf.length - 1]
              return r.slice(0, -1)
            }
          }
          return r
        }
        this.lastNeed = 1
        this.lastTotal = 2
        this.lastChar[0] = buf[buf.length - 1]
        return buf.toString("utf16le", i, buf.length - 1)
      }

      // For UTF-16LE we do not explicitly append special replacement characters if we
      // end on a partial character, we simply let v8 handle that.
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : ""
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed
          return r + this.lastChar.toString("utf16le", 0, end)
        }
        return r
      }

      function base64Text(buf, i) {
        var n = (buf.length - i) % 3
        if (n === 0) return buf.toString("base64", i)
        this.lastNeed = 3 - n
        this.lastTotal = 3
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1]
        } else {
          this.lastChar[0] = buf[buf.length - 2]
          this.lastChar[1] = buf[buf.length - 1]
        }
        return buf.toString("base64", i, buf.length - n)
      }

      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : ""
        if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed)
        return r
      }

      // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
      function simpleWrite(buf) {
        return buf.toString(this.encoding)
      }

      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : ""
      }

      /***/
    },

    /***/ 2279: /***/ (module, exports, __nccwpck_require__) => {
      /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
      /* eslint-disable node/no-deprecated-api */
      var buffer = __nccwpck_require__(14300)
      var Buffer = buffer.Buffer

      // alternative to using Object.keys for old browsers
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key]
        }
      }
      if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
        module.exports = buffer
      } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports)
        exports.Buffer = SafeBuffer
      }

      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length)
      }

      SafeBuffer.prototype = Object.create(Buffer.prototype)

      // Copy static methods from Buffer
      copyProps(Buffer, SafeBuffer)

      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number")
        }
        return Buffer(arg, encodingOrOffset, length)
      }

      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number")
        }
        var buf = Buffer(size)
        if (fill !== undefined) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding)
          } else {
            buf.fill(fill)
          }
        } else {
          buf.fill(0)
        }
        return buf
      }

      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number")
        }
        return Buffer(size)
      }

      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number")
        }
        return buffer.SlowBuffer(size)
      }

      /***/
    },

    /***/ 88174: /***/ (module) => {
      "use strict"

      module.exports = (input) => {
        const LF = typeof input === "string" ? "\n" : "\n".charCodeAt()
        const CR = typeof input === "string" ? "\r" : "\r".charCodeAt()

        if (input[input.length - 1] === LF) {
          input = input.slice(0, input.length - 1)
        }

        if (input[input.length - 1] === CR) {
          input = input.slice(0, input.length - 1)
        }

        return input
      }

      /***/
    },

    /***/ 59318: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const os = __nccwpck_require__(22037)
      const tty = __nccwpck_require__(76224)
      const hasFlag = __nccwpck_require__(31621)

      const { env } = process

      let forceColor
      if (
        hasFlag("no-color") ||
        hasFlag("no-colors") ||
        hasFlag("color=false") ||
        hasFlag("color=never")
      ) {
        forceColor = 0
      } else if (
        hasFlag("color") ||
        hasFlag("colors") ||
        hasFlag("color=true") ||
        hasFlag("color=always")
      ) {
        forceColor = 1
      }

      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          forceColor = 1
        } else if (env.FORCE_COLOR === "false") {
          forceColor = 0
        } else {
          forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3)
        }
      }

      function translateLevel(level) {
        if (level === 0) {
          return false
        }

        return {
          level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3
        }
      }

      function supportsColor(haveStream, streamIsTTY) {
        if (forceColor === 0) {
          return 0
        }

        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3
        }

        if (hasFlag("color=256")) {
          return 2
        }

        if (haveStream && !streamIsTTY && forceColor === undefined) {
          return 0
        }

        const min = forceColor || 0

        if (env.TERM === "dumb") {
          return min
        }

        if (process.platform === "win32") {
          // Windows 10 build 10586 is the first Windows release that supports 256 colors.
          // Windows 10 build 14931 is the first release that supports 16m/TrueColor.
          const osRelease = os.release().split(".")
          if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2
          }

          return 1
        }

        if ("CI" in env) {
          if (
            ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some(
              (sign) => sign in env
            ) ||
            env.CI_NAME === "codeship"
          ) {
            return 1
          }

          return min
        }

        if ("TEAMCITY_VERSION" in env) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0
        }

        if (env.COLORTERM === "truecolor") {
          return 3
        }

        if ("TERM_PROGRAM" in env) {
          const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10)

          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version >= 3 ? 3 : 2
            case "Apple_Terminal":
              return 2
            // No default
          }
        }

        if (/-256(color)?$/i.test(env.TERM)) {
          return 2
        }

        if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
          return 1
        }

        if ("COLORTERM" in env) {
          return 1
        }

        return min
      }

      function getSupportLevel(stream) {
        const level = supportsColor(stream, stream && stream.isTTY)
        return translateLevel(level)
      }

      module.exports = {
        supportsColor: getSupportLevel,
        stdout: translateLevel(supportsColor(true, tty.isatty(1))),
        stderr: translateLevel(supportsColor(true, tty.isatty(2)))
      }

      /***/
    },

    /***/ 18180: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const { Transform } = __nccwpck_require__(51642)

      function inherits(fn, sup) {
        fn.super_ = sup
        fn.prototype = Object.create(sup.prototype, {
          constructor: { value: fn, enumerable: false, writable: true, configurable: true }
        })
      }

      // create a new export function, used by both the main export and
      // the .ctor export, contains common logic for dealing with arguments
      function through2(construct) {
        return (options, transform, flush) => {
          if (typeof options === "function") {
            flush = transform
            transform = options
            options = {}
          }

          if (typeof transform !== "function") {
            // noop
            transform = (chunk, enc, cb) => cb(null, chunk)
          }

          if (typeof flush !== "function") {
            flush = null
          }

          return construct(options, transform, flush)
        }
      }

      // main export, just make me a transform stream!
      const make = through2((options, transform, flush) => {
        const t2 = new Transform(options)

        t2._transform = transform

        if (flush) {
          t2._flush = flush
        }

        return t2
      })

      // make me a reusable prototype that I can `new`, or implicitly `new`
      // with a constructor call
      const ctor = through2((options, transform, flush) => {
        function Through2(override) {
          if (!(this instanceof Through2)) {
            return new Through2(override)
          }

          this.options = Object.assign({}, options, override)

          Transform.call(this, this.options)

          this._transform = transform
          if (flush) {
            this._flush = flush
          }
        }

        inherits(Through2, Transform)

        return Through2
      })

      const obj = through2(function (options, transform, flush) {
        const t2 = new Transform(Object.assign({ objectMode: true, highWaterMark: 16 }, options))

        t2._transform = transform

        if (flush) {
          t2._flush = flush
        }

        return t2
      })

      module.exports = make
      module.exports.ctor = ctor
      module.exports.obj = obj

      /***/
    },

    /***/ 1861: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      /*!
       * to-regex-range <https://github.com/micromatch/to-regex-range>
       *
       * Copyright (c) 2015-present, Jon Schlinkert.
       * Released under the MIT License.
       */

      const isNumber = __nccwpck_require__(75680)

      const toRegexRange = (min, max, options) => {
        if (isNumber(min) === false) {
          throw new TypeError("toRegexRange: expected the first argument to be a number")
        }

        if (max === void 0 || min === max) {
          return String(min)
        }

        if (isNumber(max) === false) {
          throw new TypeError("toRegexRange: expected the second argument to be a number.")
        }

        let opts = { relaxZeros: true, ...options }
        if (typeof opts.strictZeros === "boolean") {
          opts.relaxZeros = opts.strictZeros === false
        }

        let relax = String(opts.relaxZeros)
        let shorthand = String(opts.shorthand)
        let capture = String(opts.capture)
        let wrap = String(opts.wrap)
        let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap

        if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
          return toRegexRange.cache[cacheKey].result
        }

        let a = Math.min(min, max)
        let b = Math.max(min, max)

        if (Math.abs(a - b) === 1) {
          let result = min + "|" + max
          if (opts.capture) {
            return `(${result})`
          }
          if (opts.wrap === false) {
            return result
          }
          return `(?:${result})`
        }

        let isPadded = hasPadding(min) || hasPadding(max)
        let state = { min, max, a, b }
        let positives = []
        let negatives = []

        if (isPadded) {
          state.isPadded = isPadded
          state.maxLen = String(state.max).length
        }

        if (a < 0) {
          let newMin = b < 0 ? Math.abs(b) : 1
          negatives = splitToPatterns(newMin, Math.abs(a), state, opts)
          a = state.a = 0
        }

        if (b >= 0) {
          positives = splitToPatterns(a, b, state, opts)
        }

        state.negatives = negatives
        state.positives = positives
        state.result = collatePatterns(negatives, positives, opts)

        if (opts.capture === true) {
          state.result = `(${state.result})`
        } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
          state.result = `(?:${state.result})`
        }

        toRegexRange.cache[cacheKey] = state
        return state.result
      }

      function collatePatterns(neg, pos, options) {
        let onlyNegative = filterPatterns(neg, pos, "-", false, options) || []
        let onlyPositive = filterPatterns(pos, neg, "", false, options) || []
        let intersected = filterPatterns(neg, pos, "-?", true, options) || []
        let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive)
        return subpatterns.join("|")
      }

      function splitToRanges(min, max) {
        let nines = 1
        let zeros = 1

        let stop = countNines(min, nines)
        let stops = new Set([max])

        while (min <= stop && stop <= max) {
          stops.add(stop)
          nines += 1
          stop = countNines(min, nines)
        }

        stop = countZeros(max + 1, zeros) - 1

        while (min < stop && stop <= max) {
          stops.add(stop)
          zeros += 1
          stop = countZeros(max + 1, zeros) - 1
        }

        stops = [...stops]
        stops.sort(compare)
        return stops
      }

      /**
       * Convert a range to a regex pattern
       * @param {Number} `start`
       * @param {Number} `stop`
       * @return {String}
       */

      function rangeToPattern(start, stop, options) {
        if (start === stop) {
          return { pattern: start, count: [], digits: 0 }
        }

        let zipped = zip(start, stop)
        let digits = zipped.length
        let pattern = ""
        let count = 0

        for (let i = 0; i < digits; i++) {
          let [startDigit, stopDigit] = zipped[i]

          if (startDigit === stopDigit) {
            pattern += startDigit
          } else if (startDigit !== "0" || stopDigit !== "9") {
            pattern += toCharacterClass(startDigit, stopDigit, options)
          } else {
            count++
          }
        }

        if (count) {
          pattern += options.shorthand === true ? "\\d" : "[0-9]"
        }

        return { pattern, count: [count], digits }
      }

      function splitToPatterns(min, max, tok, options) {
        let ranges = splitToRanges(min, max)
        let tokens = []
        let start = min
        let prev

        for (let i = 0; i < ranges.length; i++) {
          let max = ranges[i]
          let obj = rangeToPattern(String(start), String(max), options)
          let zeros = ""

          if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
            if (prev.count.length > 1) {
              prev.count.pop()
            }

            prev.count.push(obj.count[0])
            prev.string = prev.pattern + toQuantifier(prev.count)
            start = max + 1
            continue
          }

          if (tok.isPadded) {
            zeros = padZeros(max, tok, options)
          }

          obj.string = zeros + obj.pattern + toQuantifier(obj.count)
          tokens.push(obj)
          start = max + 1
          prev = obj
        }

        return tokens
      }

      function filterPatterns(arr, comparison, prefix, intersection, options) {
        let result = []

        for (let ele of arr) {
          let { string } = ele

          // only push if _both_ are negative...
          if (!intersection && !contains(comparison, "string", string)) {
            result.push(prefix + string)
          }

          // or _both_ are positive
          if (intersection && contains(comparison, "string", string)) {
            result.push(prefix + string)
          }
        }
        return result
      }

      /**
       * Zip strings
       */

      function zip(a, b) {
        let arr = []
        for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]])
        return arr
      }

      function compare(a, b) {
        return a > b ? 1 : b > a ? -1 : 0
      }

      function contains(arr, key, val) {
        return arr.some((ele) => ele[key] === val)
      }

      function countNines(min, len) {
        return Number(String(min).slice(0, -len) + "9".repeat(len))
      }

      function countZeros(integer, zeros) {
        return integer - (integer % Math.pow(10, zeros))
      }

      function toQuantifier(digits) {
        let [start = 0, stop = ""] = digits
        if (stop || start > 1) {
          return `{${start + (stop ? "," + stop : "")}}`
        }
        return ""
      }

      function toCharacterClass(a, b, options) {
        return `[${a}${b - a === 1 ? "" : "-"}${b}]`
      }

      function hasPadding(str) {
        return /^-?(0+)\d/.test(str)
      }

      function padZeros(value, tok, options) {
        if (!tok.isPadded) {
          return value
        }

        let diff = Math.abs(tok.maxLen - String(value).length)
        let relax = options.relaxZeros !== false

        switch (diff) {
          case 0:
            return ""
          case 1:
            return relax ? "0?" : "0"
          case 2:
            return relax ? "0{0,2}" : "00"
          default: {
            return relax ? `0{0,${diff}}` : `0{${diff}}`
          }
        }
      }

      /**
       * Cache
       */

      toRegexRange.cache = {}
      toRegexRange.clearCache = () => (toRegexRange.cache = {})

      /**
       * Expose `toRegexRange`
       */

      module.exports = toRegexRange

      /***/
    },

    /***/ 26765: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      // Copied from several files in node's source code.
      // https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js
      // Each function and variable below must have a comment linking to the source in node's github repo.

      const path = __nccwpck_require__(71017)
      const packageJsonReader = __nccwpck_require__(67995)
      const { JSONParse } = __nccwpck_require__(26326)
      const { normalizeSlashes } = __nccwpck_require__(64745)

      module.exports.z = assertScriptCanLoadAsCJSImpl

      /**
       * copied from Module._extensions['.js']
       * https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/cjs/loader.js#L1113-L1120
       * @param {import('../src/index').Service} service
       * @param {NodeJS.Module} module
       * @param {string} filename
       */
      function assertScriptCanLoadAsCJSImpl(service, module, filename) {
        const pkg = readPackageScope(filename)

        // ts-node modification: allow our configuration to override
        const tsNodeClassification = service.moduleTypeClassifier.classifyModule(
          normalizeSlashes(filename)
        )
        if (tsNodeClassification.moduleType === "cjs") return

        // Function require shouldn't be used in ES modules.
        if (
          tsNodeClassification.moduleType === "esm" ||
          (pkg && pkg.data && pkg.data.type === "module")
        ) {
          const parentPath = module.parent && module.parent.filename
          const packageJsonPath = pkg ? path.resolve(pkg.path, "package.json") : null
          throw createErrRequireEsm(filename, parentPath, packageJsonPath)
        }
      }

      // Copied from https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js#L285-L301
      function readPackageScope(checkPath) {
        const rootSeparatorIndex = checkPath.indexOf(path.sep)
        let separatorIndex
        while ((separatorIndex = checkPath.lastIndexOf(path.sep)) > rootSeparatorIndex) {
          checkPath = checkPath.slice(0, separatorIndex)
          if (checkPath.endsWith(path.sep + "node_modules")) return false
          const pjson = readPackage(checkPath)
          if (pjson)
            return {
              path: checkPath,
              data: pjson
            }
        }
        return false
      }

      // Copied from https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js#L249
      const packageJsonCache = new Map()

      // Copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/cjs/loader.js#L275-L304
      function readPackage(requestPath) {
        const jsonPath = path.resolve(requestPath, "package.json")

        const existing = packageJsonCache.get(jsonPath)
        if (existing !== undefined) return existing

        const result = packageJsonReader.read(jsonPath)
        const json = result.containsKeys === false ? "{}" : result.string
        if (json === undefined) {
          packageJsonCache.set(jsonPath, false)
          return false
        }

        try {
          const parsed = JSONParse(json)
          const filtered = {
            name: parsed.name,
            main: parsed.main,
            exports: parsed.exports,
            imports: parsed.imports,
            type: parsed.type
          }
          packageJsonCache.set(jsonPath, filtered)
          return filtered
        } catch (e) {
          e.path = jsonPath
          e.message = "Error parsing " + jsonPath + ": " + e.message
          throw e
        }
      }

      // Native ERR_REQUIRE_ESM Error is declared here:
      //   https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L1294-L1313
      // Error class factory is implemented here:
      //   function E: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L323-L341
      //   function makeNodeErrorWithCode: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L251-L278
      // The code below should create an error that matches the native error as closely as possible.
      // Third-party libraries which attempt to catch the native ERR_REQUIRE_ESM should recognize our imitation error.
      function createErrRequireEsm(filename, parentPath, packageJsonPath) {
        const code = "ERR_REQUIRE_ESM"
        const err = new Error(getMessage(filename, parentPath, packageJsonPath))
        // Set `name` to be used in stack trace, generate stack trace with that name baked in, then re-declare the `name` field.
        // This trick is copied from node's source.
        err.name = `Error [${code}]`
        err.stack
        Object.defineProperty(err, "name", {
          value: "Error",
          enumerable: false,
          writable: true,
          configurable: true
        })
        err.code = code
        return err

        // Copy-pasted from https://github.com/nodejs/node/blob/b533fb3508009e5f567cc776daba8fbf665386a6/lib/internal/errors.js#L1293-L1311
        // so that our error message is identical to the native message.
        function getMessage(filename, parentPath = null, packageJsonPath = null) {
          const ext = path.extname(filename)
          let msg = `Must use import to load ES Module: ${filename}`
          if (parentPath && packageJsonPath) {
            const path = __nccwpck_require__(71017)
            const basename =
              path.basename(filename) === path.basename(parentPath)
                ? filename
                : path.basename(filename)
            msg +=
              "\nrequire() of ES modules is not supported.\nrequire() of " +
              `${filename} ${parentPath ? `from ${parentPath} ` : ""}` +
              `is an ES module file as it is a ${ext} file whose nearest parent ` +
              `package.json contains "type": "module" which defines all ${ext} ` +
              "files in that package scope as ES modules.\nInstead " +
              "change the requiring code to use " +
              'import(), or remove "type": "module" from ' +
              `${packageJsonPath}.\n`
            return msg
          }
          return msg
        }
      }

      /***/
    },

    /***/ 63052: /***/ (__unused_webpack_module, exports) => {
      exports.q = {
        ERR_INPUT_TYPE_NOT_ALLOWED: createErrorCtor(joinArgs("ERR_INPUT_TYPE_NOT_ALLOWED")),
        ERR_INVALID_ARG_VALUE: createErrorCtor(joinArgs("ERR_INVALID_ARG_VALUE")),
        ERR_INVALID_MODULE_SPECIFIER: createErrorCtor(joinArgs("ERR_INVALID_MODULE_SPECIFIER")),
        ERR_INVALID_PACKAGE_CONFIG: createErrorCtor(joinArgs("ERR_INVALID_PACKAGE_CONFIG")),
        ERR_INVALID_PACKAGE_TARGET: createErrorCtor(joinArgs("ERR_INVALID_PACKAGE_TARGET")),
        ERR_MANIFEST_DEPENDENCY_MISSING: createErrorCtor(
          joinArgs("ERR_MANIFEST_DEPENDENCY_MISSING")
        ),
        ERR_MODULE_NOT_FOUND: createErrorCtor((path, base, type = "package") => {
          return `Cannot find ${type} '${path}' imported from ${base}`
        }),
        ERR_PACKAGE_IMPORT_NOT_DEFINED: createErrorCtor(joinArgs("ERR_PACKAGE_IMPORT_NOT_DEFINED")),
        ERR_PACKAGE_PATH_NOT_EXPORTED: createErrorCtor(joinArgs("ERR_PACKAGE_PATH_NOT_EXPORTED")),
        ERR_UNSUPPORTED_DIR_IMPORT: createErrorCtor(joinArgs("ERR_UNSUPPORTED_DIR_IMPORT")),
        ERR_UNSUPPORTED_ESM_URL_SCHEME: createErrorCtor(joinArgs("ERR_UNSUPPORTED_ESM_URL_SCHEME"))
      }

      function joinArgs(name) {
        return (...args) => {
          return [name, ...args].join(" ")
        }
      }

      function createErrorCtor(errorMessageCreator) {
        return class CustomError extends Error {
          constructor(...args) {
            super(errorMessageCreator(...args))
          }
        }
      }

      /***/
    },

    /***/ 31571: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"
      // Copied from https://raw.githubusercontent.com/nodejs/node/v15.3.0/lib/internal/modules/esm/get_format.js
      // Then modified to suite our needs.
      // Formatting is intentionally bad to keep the diff as small as possible, to make it easier to merge
      // upstream changes and understand our modifications.

      const { RegExpPrototypeExec, StringPrototypeStartsWith } = __nccwpck_require__(26326)
      const { extname } = __nccwpck_require__(71017)
      const { getOptionValue } = __nccwpck_require__(40690)

      const experimentalJsonModules = getOptionValue("--experimental-json-modules")
      const experimentalSpeciferResolution = getOptionValue("--experimental-specifier-resolution")
      const experimentalWasmModules = getOptionValue("--experimental-wasm-modules")
      const { getPackageType } = __nccwpck_require__(91131).createResolve({
        tsExtensions: [],
        jsExtensions: []
      })
      const { URL, fileURLToPath } = __nccwpck_require__(57310)
      const { ERR_UNKNOWN_FILE_EXTENSION } = __nccwpck_require__(63052) /* .codes */.q

      const extensionFormatMap = {
        __proto__: null,
        ".cjs": "commonjs",
        ".js": "module",
        ".mjs": "module"
      }

      const legacyExtensionFormatMap = {
        __proto__: null,
        ".cjs": "commonjs",
        ".js": "commonjs",
        ".json": "commonjs",
        ".mjs": "module",
        ".node": "commonjs"
      }

      if (experimentalWasmModules)
        extensionFormatMap[".wasm"] = legacyExtensionFormatMap[".wasm"] = "wasm"

      if (experimentalJsonModules)
        extensionFormatMap[".json"] = legacyExtensionFormatMap[".json"] = "json"

      function defaultGetFormat(url, context, defaultGetFormatUnused) {
        if (StringPrototypeStartsWith(url, "node:")) {
          return { format: "builtin" }
        }
        const parsed = new URL(url)
        if (parsed.protocol === "data:") {
          const [, mime] = RegExpPrototypeExec(
            /^([^/]+\/[^;,]+)(?:[^,]*?)(;base64)?,/,
            parsed.pathname
          ) || [null, null, null]
          const format =
            {
              __proto__: null,
              "text/javascript": "module",
              "application/json": experimentalJsonModules ? "json" : null,
              "application/wasm": experimentalWasmModules ? "wasm" : null
            }[mime] || null
          return { format }
        } else if (parsed.protocol === "file:") {
          const ext = extname(parsed.pathname)
          let format
          if (ext === ".js") {
            format = getPackageType(parsed.href) === "module" ? "module" : "commonjs"
          } else {
            format = extensionFormatMap[ext]
          }
          if (!format) {
            if (experimentalSpeciferResolution === "node") {
              process.emitWarning(
                "The Node.js specifier resolution in ESM is experimental.",
                "ExperimentalWarning"
              )
              format = legacyExtensionFormatMap[ext]
            } else {
              throw new ERR_UNKNOWN_FILE_EXTENSION(ext, fileURLToPath(url))
            }
          }
          return { format: format || null }
        }
        return { format: null }
      }
      exports.defaultGetFormat = defaultGetFormat

      /***/
    },

    /***/ 91131: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // Copied from https://raw.githubusercontent.com/nodejs/node/v15.3.0/lib/internal/modules/esm/resolve.js
      // Then modified to suite our needs.
      // Formatting is intentionally bad to keep the diff as small as possible, to make it easier to merge
      // upstream changes and understand our modifications.
      //
      // Github diff to easily view the changes:
      //   https://github.com/TypeStrong/ts-node/compare/esm-resolver-diff..main

      const [nodeMajor, nodeMinor, nodePatch] = process.versions.node
        .split(".")
        .map((s) => parseInt(s, 10))
      // Test for node >14.13.1 || (>=12.20.0 && <13)
      const builtinModuleProtocol =
        nodeMajor > 14 ||
        (nodeMajor === 14 && (nodeMinor > 13 || (nodeMinor === 13 && nodePatch > 0))) ||
        (nodeMajor === 12 && (nodeMinor > 20 || nodeMinor === 20))
          ? "node:"
          : "nodejs:"

      const {
        ArrayIsArray,
        ArrayPrototypeJoin,
        ArrayPrototypeShift,
        JSONParse,
        JSONStringify,
        ObjectFreeze,
        ObjectGetOwnPropertyNames,
        ObjectPrototypeHasOwnProperty,
        // RegExp,
        RegExpPrototypeTest,
        SafeMap,
        SafeSet,
        // String,
        StringPrototypeEndsWith,
        StringPrototypeIndexOf,
        StringPrototypeLastIndexOf,
        StringPrototypeReplace,
        StringPrototypeSlice,
        StringPrototypeSplit,
        StringPrototypeStartsWith,
        StringPrototypeSubstr
      } = __nccwpck_require__(26326)

      // const internalFS = require('internal/fs/utils');
      // const { NativeModule } = require('internal/bootstrap/loaders');
      const Module = __nccwpck_require__(98188)
      const NativeModule = {
        canBeRequiredByUsers(specifier) {
          return Module.builtinModules.includes(specifier)
        }
      }
      const { realpathSync, statSync, Stats } = __nccwpck_require__(57147)
      // const { getOptionValue } = require('internal/options');
      const { getOptionValue } = __nccwpck_require__(40690)
      // // Do not eagerly grab .manifest, it may be in TDZ
      // const policy = getOptionValue('--experimental-policy') ?
      //   require('internal/process/policy') :
      //   null;
      // disabled for now.  I am not sure if/how we should support this
      const policy = null
      const { sep, relative } = __nccwpck_require__(71017)
      const preserveSymlinks = getOptionValue("--preserve-symlinks")
      const preserveSymlinksMain = getOptionValue("--preserve-symlinks-main")
      const typeFlag = getOptionValue("--input-type")
      // const { URL, pathToFileURL, fileURLToPath } = require('internal/url');
      const { URL, pathToFileURL, fileURLToPath } = __nccwpck_require__(57310)
      const {
        ERR_INPUT_TYPE_NOT_ALLOWED,
        ERR_INVALID_ARG_VALUE,
        ERR_INVALID_MODULE_SPECIFIER,
        ERR_INVALID_PACKAGE_CONFIG,
        ERR_INVALID_PACKAGE_TARGET,
        ERR_MANIFEST_DEPENDENCY_MISSING,
        ERR_MODULE_NOT_FOUND,
        ERR_PACKAGE_IMPORT_NOT_DEFINED,
        ERR_PACKAGE_PATH_NOT_EXPORTED,
        ERR_UNSUPPORTED_DIR_IMPORT,
        ERR_UNSUPPORTED_ESM_URL_SCHEME
        // } = require('internal/errors').codes;
      } = __nccwpck_require__(63052) /* .codes */.q

      // const { Module: CJSModule } = require('internal/modules/cjs/loader');
      const CJSModule = Module

      // const packageJsonReader = require('internal/modules/package_json_reader');
      const packageJsonReader = __nccwpck_require__(67995)
      const userConditions = getOptionValue("--conditions")
      const DEFAULT_CONDITIONS = ObjectFreeze(["node", "import", ...userConditions])
      const DEFAULT_CONDITIONS_SET = new SafeSet(DEFAULT_CONDITIONS)

      const pendingDeprecation = getOptionValue("--pending-deprecation")

      function createResolve(opts) {
        // TODO receive cached fs implementations here
        const { tsExtensions, jsExtensions, preferTsExts } = opts

        const emittedPackageWarnings = new SafeSet()
        function emitFolderMapDeprecation(match, pjsonUrl, isExports, base) {
          const pjsonPath = fileURLToPath(pjsonUrl)
          if (!pendingDeprecation) {
            const nodeModulesIndex = StringPrototypeLastIndexOf(pjsonPath, "/node_modules/")
            if (nodeModulesIndex !== -1) {
              const afterNodeModulesPath = StringPrototypeSlice(
                pjsonPath,
                nodeModulesIndex + 14,
                -13
              )
              try {
                const { packageSubpath } = parsePackageName(afterNodeModulesPath)
                if (packageSubpath === ".") return
              } catch {}
            }
          }
          if (emittedPackageWarnings.has(pjsonPath + "|" + match)) return
          emittedPackageWarnings.add(pjsonPath + "|" + match)
          process.emitWarning(
            `Use of deprecated folder mapping "${match}" in the ${
              isExports ? '"exports"' : '"imports"'
            } field module resolution of the package at ${pjsonPath}${
              base ? ` imported from ${fileURLToPath(base)}` : ""
            }.\n` + `Update this package.json to use a subpath pattern like "${match}*".`,
            "DeprecationWarning",
            "DEP0148"
          )
        }

        function getConditionsSet(conditions) {
          if (conditions !== undefined && conditions !== DEFAULT_CONDITIONS) {
            if (!ArrayIsArray(conditions)) {
              throw new ERR_INVALID_ARG_VALUE("conditions", conditions, "expected an array")
            }
            return new SafeSet(conditions)
          }
          return DEFAULT_CONDITIONS_SET
        }

        const realpathCache = new SafeMap()
        const packageJSONCache = new SafeMap() /* string -> PackageConfig */

        function tryStatSync(path) {
          try {
            return statSync(path)
          } catch {
            return new Stats()
          }
        }

        function getPackageConfig(path, specifier, base) {
          const existing = packageJSONCache.get(path)
          if (existing !== undefined) {
            return existing
          }
          const source = packageJsonReader.read(path).string
          if (source === undefined) {
            const packageConfig = {
              pjsonPath: path,
              exists: false,
              main: undefined,
              name: undefined,
              type: "none",
              exports: undefined,
              imports: undefined
            }
            packageJSONCache.set(path, packageConfig)
            return packageConfig
          }

          let packageJSON
          try {
            packageJSON = JSONParse(source)
          } catch (error) {
            throw new ERR_INVALID_PACKAGE_CONFIG(
              path,
              (base ? `"${specifier}" from ` : "") + fileURLToPath(base || specifier),
              error.message
            )
          }

          let { imports, main, name, type } = packageJSON
          const { exports } = packageJSON
          if (typeof imports !== "object" || imports === null) imports = undefined
          if (typeof main !== "string") main = undefined
          if (typeof name !== "string") name = undefined
          // Ignore unknown types for forwards compatibility
          if (type !== "module" && type !== "commonjs") type = "none"

          const packageConfig = {
            pjsonPath: path,
            exists: true,
            main,
            name,
            type,
            exports,
            imports
          }
          packageJSONCache.set(path, packageConfig)
          return packageConfig
        }

        function getPackageScopeConfig(resolved) {
          let packageJSONUrl = new URL("./package.json", resolved)
          while (true) {
            const packageJSONPath = packageJSONUrl.pathname
            if (StringPrototypeEndsWith(packageJSONPath, "node_modules/package.json")) break
            const packageConfig = getPackageConfig(fileURLToPath(packageJSONUrl), resolved)
            if (packageConfig.exists) return packageConfig

            const lastPackageJSONUrl = packageJSONUrl
            packageJSONUrl = new URL("../package.json", packageJSONUrl)

            // Terminates at root where ../package.json equals ../../package.json
            // (can't just check "/package.json" for Windows support).
            if (packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break
          }
          const packageJSONPath = fileURLToPath(packageJSONUrl)
          const packageConfig = {
            pjsonPath: packageJSONPath,
            exists: false,
            main: undefined,
            name: undefined,
            type: "none",
            exports: undefined,
            imports: undefined
          }
          packageJSONCache.set(packageJSONPath, packageConfig)
          return packageConfig
        }

        /*
         * Legacy CommonJS main resolution:
         * 1. let M = pkg_url + (json main field)
         * 2. TRY(M, M.js, M.json, M.node)
         * 3. TRY(M/index.js, M/index.json, M/index.node)
         * 4. TRY(pkg_url/index.js, pkg_url/index.json, pkg_url/index.node)
         * 5. NOT_FOUND
         */
        function fileExists(url) {
          return tryStatSync(fileURLToPath(url)).isFile()
        }

        function legacyMainResolve(packageJSONUrl, packageConfig, base) {
          let guess
          if (packageConfig.main !== undefined) {
            // Note: fs check redundances will be handled by Descriptor cache here.
            if (fileExists((guess = new URL(`./${packageConfig.main}`, packageJSONUrl)))) {
              return guess
            }
            if (fileExists((guess = new URL(`./${packageConfig.main}.js`, packageJSONUrl)))) {
              return guess
            }
            if (fileExists((guess = new URL(`./${packageConfig.main}.json`, packageJSONUrl)))) {
              return guess
            }
            if (fileExists((guess = new URL(`./${packageConfig.main}.node`, packageJSONUrl)))) {
              return guess
            }
            if (fileExists((guess = new URL(`./${packageConfig.main}/index.js`, packageJSONUrl)))) {
              return guess
            }
            if (
              fileExists((guess = new URL(`./${packageConfig.main}/index.json`, packageJSONUrl)))
            ) {
              return guess
            }
            if (
              fileExists((guess = new URL(`./${packageConfig.main}/index.node`, packageJSONUrl)))
            ) {
              return guess
            }
            // Fallthrough.
          }
          if (fileExists((guess = new URL("./index.js", packageJSONUrl)))) {
            return guess
          }
          // So fs.
          if (fileExists((guess = new URL("./index.json", packageJSONUrl)))) {
            return guess
          }
          if (fileExists((guess = new URL("./index.node", packageJSONUrl)))) {
            return guess
          }
          // Not found.
          throw new ERR_MODULE_NOT_FOUND(
            fileURLToPath(new URL(".", packageJSONUrl)),
            fileURLToPath(base)
          )
        }

        function resolveExtensionsWithTryExactName(search) {
          if (fileExists(search)) return search
          const resolvedReplacementExtension = resolveReplacementExtensions(search)
          if (resolvedReplacementExtension) return resolvedReplacementExtension
          return resolveExtensions(search)
        }

        const extensions = Array.from(
          new Set([
            ...(preferTsExts ? tsExtensions : []),
            ".js",
            ...jsExtensions,
            ".json",
            ".node",
            ".mjs",
            ...tsExtensions
          ])
        )

        function resolveExtensions(search) {
          for (let i = 0; i < extensions.length; i++) {
            const extension = extensions[i]
            const guess = new URL(`${search.pathname}${extension}`, search)
            if (fileExists(guess)) return guess
          }
          return undefined
        }

        /**
         * TS's resolver can resolve foo.js to foo.ts, by replacing .js extension with several source extensions.
         * IMPORTANT: preserve ordering according to preferTsExts; this affects resolution behavior!
         */
        const replacementExtensions = extensions.filter((ext) =>
          [".js", ".jsx", ".ts", ".tsx"].includes(ext)
        )

        function resolveReplacementExtensions(search) {
          if (search.pathname.match(/\.js$/)) {
            const pathnameWithoutExtension = search.pathname.slice(0, search.pathname.length - 3)
            for (let i = 0; i < replacementExtensions.length; i++) {
              const extension = replacementExtensions[i]
              const guess = new URL(search.toString())
              guess.pathname = `${pathnameWithoutExtension}${extension}`
              if (fileExists(guess)) return guess
            }
          }
          return undefined
        }

        function resolveIndex(search) {
          return resolveExtensions(new URL("index", search))
        }

        const encodedSepRegEx = /%2F|%2C/i
        function finalizeResolution(resolved, base) {
          if (RegExpPrototypeTest(encodedSepRegEx, resolved.pathname))
            throw new ERR_INVALID_MODULE_SPECIFIER(
              resolved.pathname,
              'must not include encoded "/" or "\\" characters',
              fileURLToPath(base)
            )

          if (getOptionValue("--experimental-specifier-resolution") === "node") {
            const path = fileURLToPath(resolved)
            let file = resolveExtensionsWithTryExactName(resolved)
            if (file !== undefined) return file
            if (!StringPrototypeEndsWith(path, "/")) {
              file = resolveIndex(new URL(`${resolved}/`))
              if (file !== undefined) return file
            } else {
              return resolveIndex(resolved) || resolved
            }
            throw new ERR_MODULE_NOT_FOUND(resolved.pathname, fileURLToPath(base), "module")
          }

          const file = resolveReplacementExtensions(resolved) || resolved
          const path = fileURLToPath(file)

          const stats = tryStatSync(
            StringPrototypeEndsWith(path, "/") ? StringPrototypeSlice(path, -1) : path
          )
          if (stats.isDirectory()) {
            const err = new ERR_UNSUPPORTED_DIR_IMPORT(path, fileURLToPath(base))
            err.url = String(resolved)
            throw err
          } else if (!stats.isFile()) {
            throw new ERR_MODULE_NOT_FOUND(path || resolved.pathname, fileURLToPath(base), "module")
          }

          return file
        }

        function throwImportNotDefined(specifier, packageJSONUrl, base) {
          throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(
            specifier,
            packageJSONUrl && fileURLToPath(new URL(".", packageJSONUrl)),
            fileURLToPath(base)
          )
        }

        function throwExportsNotFound(subpath, packageJSONUrl, base) {
          throw new ERR_PACKAGE_PATH_NOT_EXPORTED(
            fileURLToPath(new URL(".", packageJSONUrl)),
            subpath,
            base && fileURLToPath(base)
          )
        }

        function throwInvalidSubpath(subpath, packageJSONUrl, internal, base) {
          const reason = `request is not a valid subpath for the "${
            internal ? "imports" : "exports"
          }" resolution of ${fileURLToPath(packageJSONUrl)}`
          throw new ERR_INVALID_MODULE_SPECIFIER(subpath, reason, base && fileURLToPath(base))
        }

        function throwInvalidPackageTarget(subpath, target, packageJSONUrl, internal, base) {
          if (typeof target === "object" && target !== null) {
            target = JSONStringify(target, null, "")
          } else {
            target = `${target}`
          }
          throw new ERR_INVALID_PACKAGE_TARGET(
            fileURLToPath(new URL(".", packageJSONUrl)),
            subpath,
            target,
            internal,
            base && fileURLToPath(base)
          )
        }

        const invalidSegmentRegEx = /(^|\\|\/)(\.\.?|node_modules)(\\|\/|$)/
        const patternRegEx = /\*/g

        function resolvePackageTargetString(
          target,
          subpath,
          match,
          packageJSONUrl,
          base,
          pattern,
          internal,
          conditions
        ) {
          if (subpath !== "" && !pattern && target[target.length - 1] !== "/")
            throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base)

          if (!StringPrototypeStartsWith(target, "./")) {
            if (
              internal &&
              !StringPrototypeStartsWith(target, "../") &&
              !StringPrototypeStartsWith(target, "/")
            ) {
              let isURL = false
              try {
                new URL(target)
                isURL = true
              } catch {}
              if (!isURL) {
                const exportTarget = pattern
                  ? StringPrototypeReplace(target, patternRegEx, subpath)
                  : target + subpath
                return packageResolve(exportTarget, packageJSONUrl, conditions)
              }
            }
            throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base)
          }

          if (RegExpPrototypeTest(invalidSegmentRegEx, StringPrototypeSlice(target, 2)))
            throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base)

          const resolved = new URL(target, packageJSONUrl)
          const resolvedPath = resolved.pathname
          const packagePath = new URL(".", packageJSONUrl).pathname

          if (!StringPrototypeStartsWith(resolvedPath, packagePath))
            throwInvalidPackageTarget(match, target, packageJSONUrl, internal, base)

          if (subpath === "") return resolved

          if (RegExpPrototypeTest(invalidSegmentRegEx, subpath))
            throwInvalidSubpath(match + subpath, packageJSONUrl, internal, base)

          if (pattern) return new URL(StringPrototypeReplace(resolved.href, patternRegEx, subpath))
          return new URL(subpath, resolved)
        }

        /**
         * @param {string} key
         * @returns {boolean}
         */
        function isArrayIndex(key) {
          const keyNum = +key
          if (`${keyNum}` !== key) return false
          return keyNum >= 0 && keyNum < 0xffff_ffff
        }

        function resolvePackageTarget(
          packageJSONUrl,
          target,
          subpath,
          packageSubpath,
          base,
          pattern,
          internal,
          conditions
        ) {
          if (typeof target === "string") {
            return resolvePackageTargetString(
              target,
              subpath,
              packageSubpath,
              packageJSONUrl,
              base,
              pattern,
              internal,
              conditions
            )
          } else if (ArrayIsArray(target)) {
            if (target.length === 0) return null

            let lastException
            for (let i = 0; i < target.length; i++) {
              const targetItem = target[i]
              let resolved
              try {
                resolved = resolvePackageTarget(
                  packageJSONUrl,
                  targetItem,
                  subpath,
                  packageSubpath,
                  base,
                  pattern,
                  internal,
                  conditions
                )
              } catch (e) {
                lastException = e
                if (e.code === "ERR_INVALID_PACKAGE_TARGET") continue
                throw e
              }
              if (resolved === undefined) continue
              if (resolved === null) {
                lastException = null
                continue
              }
              return resolved
            }
            if (lastException === undefined || lastException === null) return lastException
            throw lastException
          } else if (typeof target === "object" && target !== null) {
            const keys = ObjectGetOwnPropertyNames(target)
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i]
              if (isArrayIndex(key)) {
                throw new ERR_INVALID_PACKAGE_CONFIG(
                  fileURLToPath(packageJSONUrl),
                  base,
                  '"exports" cannot contain numeric property keys.'
                )
              }
            }
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i]
              if (key === "default" || conditions.has(key)) {
                const conditionalTarget = target[key]
                const resolved = resolvePackageTarget(
                  packageJSONUrl,
                  conditionalTarget,
                  subpath,
                  packageSubpath,
                  base,
                  pattern,
                  internal,
                  conditions
                )
                if (resolved === undefined) continue
                return resolved
              }
            }
            return undefined
          } else if (target === null) {
            return null
          }
          throwInvalidPackageTarget(packageSubpath, target, packageJSONUrl, internal, base)
        }

        function isConditionalExportsMainSugar(exports, packageJSONUrl, base) {
          if (typeof exports === "string" || ArrayIsArray(exports)) return true
          if (typeof exports !== "object" || exports === null) return false

          const keys = ObjectGetOwnPropertyNames(exports)
          let isConditionalSugar = false
          let i = 0
          for (let j = 0; j < keys.length; j++) {
            const key = keys[j]
            const curIsConditionalSugar = key === "" || key[0] !== "."
            if (i++ === 0) {
              isConditionalSugar = curIsConditionalSugar
            } else if (isConditionalSugar !== curIsConditionalSugar) {
              throw new ERR_INVALID_PACKAGE_CONFIG(
                fileURLToPath(packageJSONUrl),
                base,
                "\"exports\" cannot contain some keys starting with '.' and some not." +
                  " The exports object must either be an object of package subpath keys" +
                  " or an object of main entry condition name keys only."
              )
            }
          }
          return isConditionalSugar
        }

        /**
         * @param {URL} packageJSONUrl
         * @param {string} packageSubpath
         * @param {object} packageConfig
         * @param {string} base
         * @param {Set<string>} conditions
         * @returns {URL}
         */
        function packageExportsResolve(
          packageJSONUrl,
          packageSubpath,
          packageConfig,
          base,
          conditions
        ) {
          let exports = packageConfig.exports
          if (isConditionalExportsMainSugar(exports, packageJSONUrl, base))
            exports = { ".": exports }

          if (ObjectPrototypeHasOwnProperty(exports, packageSubpath)) {
            const target = exports[packageSubpath]
            const resolved = resolvePackageTarget(
              packageJSONUrl,
              target,
              "",
              packageSubpath,
              base,
              false,
              false,
              conditions
            )
            if (resolved === null || resolved === undefined)
              throwExportsNotFound(packageSubpath, packageJSONUrl, base)
            return { resolved, exact: true }
          }

          let bestMatch = ""
          const keys = ObjectGetOwnPropertyNames(exports)
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i]
            if (
              key[key.length - 1] === "*" &&
              StringPrototypeStartsWith(packageSubpath, StringPrototypeSlice(key, 0, -1)) &&
              packageSubpath.length >= key.length &&
              key.length > bestMatch.length
            ) {
              bestMatch = key
            } else if (
              key[key.length - 1] === "/" &&
              StringPrototypeStartsWith(packageSubpath, key) &&
              key.length > bestMatch.length
            ) {
              bestMatch = key
            }
          }

          if (bestMatch) {
            const target = exports[bestMatch]
            const pattern = bestMatch[bestMatch.length - 1] === "*"
            const subpath = StringPrototypeSubstr(
              packageSubpath,
              bestMatch.length - (pattern ? 1 : 0)
            )
            const resolved = resolvePackageTarget(
              packageJSONUrl,
              target,
              subpath,
              bestMatch,
              base,
              pattern,
              false,
              conditions
            )
            if (resolved === null || resolved === undefined)
              throwExportsNotFound(packageSubpath, packageJSONUrl, base)
            if (!pattern) emitFolderMapDeprecation(bestMatch, packageJSONUrl, true, base)
            return { resolved, exact: pattern }
          }

          throwExportsNotFound(packageSubpath, packageJSONUrl, base)
        }

        function packageImportsResolve(name, base, conditions) {
          if (name === "#" || StringPrototypeStartsWith(name, "#/")) {
            const reason = "is not a valid internal imports specifier name"
            throw new ERR_INVALID_MODULE_SPECIFIER(name, reason, fileURLToPath(base))
          }
          let packageJSONUrl
          const packageConfig = getPackageScopeConfig(base)
          if (packageConfig.exists) {
            packageJSONUrl = pathToFileURL(packageConfig.pjsonPath)
            const imports = packageConfig.imports
            if (imports) {
              if (ObjectPrototypeHasOwnProperty(imports, name)) {
                const resolved = resolvePackageTarget(
                  packageJSONUrl,
                  imports[name],
                  "",
                  name,
                  base,
                  false,
                  true,
                  conditions
                )
                if (resolved !== null) return { resolved, exact: true }
              } else {
                let bestMatch = ""
                const keys = ObjectGetOwnPropertyNames(imports)
                for (let i = 0; i < keys.length; i++) {
                  const key = keys[i]
                  if (
                    key[key.length - 1] === "*" &&
                    StringPrototypeStartsWith(name, StringPrototypeSlice(key, 0, -1)) &&
                    name.length >= key.length &&
                    key.length > bestMatch.length
                  ) {
                    bestMatch = key
                  } else if (
                    key[key.length - 1] === "/" &&
                    StringPrototypeStartsWith(name, key) &&
                    key.length > bestMatch.length
                  ) {
                    bestMatch = key
                  }
                }

                if (bestMatch) {
                  const target = imports[bestMatch]
                  const pattern = bestMatch[bestMatch.length - 1] === "*"
                  const subpath = StringPrototypeSubstr(name, bestMatch.length - (pattern ? 1 : 0))
                  const resolved = resolvePackageTarget(
                    packageJSONUrl,
                    target,
                    subpath,
                    bestMatch,
                    base,
                    pattern,
                    true,
                    conditions
                  )
                  if (resolved !== null) {
                    if (!pattern) emitFolderMapDeprecation(bestMatch, packageJSONUrl, false, base)
                    return { resolved, exact: pattern }
                  }
                }
              }
            }
          }
          throwImportNotDefined(name, packageJSONUrl, base)
        }

        function getPackageType(url) {
          const packageConfig = getPackageScopeConfig(url)
          return packageConfig.type
        }

        function parsePackageName(specifier, base) {
          let separatorIndex = StringPrototypeIndexOf(specifier, "/")
          let validPackageName = true
          let isScoped = false
          if (specifier[0] === "@") {
            isScoped = true
            if (separatorIndex === -1 || specifier.length === 0) {
              validPackageName = false
            } else {
              separatorIndex = StringPrototypeIndexOf(specifier, "/", separatorIndex + 1)
            }
          }

          const packageName =
            separatorIndex === -1 ? specifier : StringPrototypeSlice(specifier, 0, separatorIndex)

          // Package name cannot have leading . and cannot have percent-encoding or
          // separators.
          for (let i = 0; i < packageName.length; i++) {
            if (packageName[i] === "%" || packageName[i] === "\\") {
              validPackageName = false
              break
            }
          }

          if (!validPackageName) {
            throw new ERR_INVALID_MODULE_SPECIFIER(
              specifier,
              "is not a valid package name",
              fileURLToPath(base)
            )
          }

          const packageSubpath =
            "." + (separatorIndex === -1 ? "" : StringPrototypeSlice(specifier, separatorIndex))

          return { packageName, packageSubpath, isScoped }
        }

        /**
         * @param {string} specifier
         * @param {URL} base
         * @param {Set<string>} conditions
         * @returns {URL}
         */
        function packageResolve(specifier, base, conditions) {
          const { packageName, packageSubpath, isScoped } = parsePackageName(specifier, base)

          // ResolveSelf
          const packageConfig = getPackageScopeConfig(base)
          if (packageConfig.exists) {
            const packageJSONUrl = pathToFileURL(packageConfig.pjsonPath)
            if (
              packageConfig.name === packageName &&
              packageConfig.exports !== undefined &&
              packageConfig.exports !== null
            ) {
              return packageExportsResolve(
                packageJSONUrl,
                packageSubpath,
                packageConfig,
                base,
                conditions
              ).resolved
            }
          }

          let packageJSONUrl = new URL("./node_modules/" + packageName + "/package.json", base)
          let packageJSONPath = fileURLToPath(packageJSONUrl)
          let lastPath
          do {
            const stat = tryStatSync(
              StringPrototypeSlice(packageJSONPath, 0, packageJSONPath.length - 13)
            )
            if (!stat.isDirectory()) {
              lastPath = packageJSONPath
              packageJSONUrl = new URL(
                (isScoped ? "../../../../node_modules/" : "../../../node_modules/") +
                  packageName +
                  "/package.json",
                packageJSONUrl
              )
              packageJSONPath = fileURLToPath(packageJSONUrl)
              continue
            }

            // Package match.
            const packageConfig = getPackageConfig(packageJSONPath, specifier, base)
            if (packageConfig.exports !== undefined && packageConfig.exports !== null)
              return packageExportsResolve(
                packageJSONUrl,
                packageSubpath,
                packageConfig,
                base,
                conditions
              ).resolved
            if (packageSubpath === ".")
              return legacyMainResolve(packageJSONUrl, packageConfig, base)
            return new URL(packageSubpath, packageJSONUrl)
            // Cross-platform root check.
          } while (packageJSONPath.length !== lastPath.length)

          // eslint can't handle the above code.
          // eslint-disable-next-line no-unreachable
          throw new ERR_MODULE_NOT_FOUND(packageName, fileURLToPath(base))
        }

        function isBareSpecifier(specifier) {
          return specifier[0] && specifier[0] !== "/" && specifier[0] !== "."
        }

        function isRelativeSpecifier(specifier) {
          if (specifier[0] === ".") {
            if (specifier.length === 1 || specifier[1] === "/") return true
            if (specifier[1] === ".") {
              if (specifier.length === 2 || specifier[2] === "/") return true
            }
          }
          return false
        }

        function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
          if (specifier === "") return false
          if (specifier[0] === "/") return true
          return isRelativeSpecifier(specifier)
        }

        /**
         * @param {string} specifier
         * @param {URL} base
         * @param {Set<string>} conditions
         * @returns {URL}
         */
        function moduleResolve(specifier, base, conditions) {
          // Order swapped from spec for minor perf gain.
          // Ok since relative URLs cannot parse as URLs.
          let resolved
          if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {
            resolved = new URL(specifier, base)
          } else if (specifier[0] === "#") {
            ;({ resolved } = packageImportsResolve(specifier, base, conditions))
          } else {
            try {
              resolved = new URL(specifier)
            } catch {
              resolved = packageResolve(specifier, base, conditions)
            }
          }
          return finalizeResolution(resolved, base)
        }

        /**
         * Try to resolve an import as a CommonJS module
         * @param {string} specifier
         * @param {string} parentURL
         * @returns {boolean|string}
         */
        function resolveAsCommonJS(specifier, parentURL) {
          try {
            const parent = fileURLToPath(parentURL)
            const tmpModule = new CJSModule(parent, null)
            tmpModule.paths = CJSModule._nodeModulePaths(parent)

            let found = CJSModule._resolveFilename(specifier, tmpModule, false)

            // If it is a relative specifier return the relative path
            // to the parent
            if (isRelativeSpecifier(specifier)) {
              found = relative(parent, found)
              // Add '.separator if the path does not start with '..separator'
              // This should be a safe assumption because when loading
              // esm modules there should be always a file specified so
              // there should not be a specifier like '..' or '.'
              if (!StringPrototypeStartsWith(found, `..${sep}`)) {
                found = `.${sep}${found}`
              }
            } else if (isBareSpecifier(specifier)) {
              // If it is a bare specifier return the relative path within the
              // module
              const pkg = StringPrototypeSplit(specifier, "/")[0]
              const index = StringPrototypeIndexOf(found, pkg)
              if (index !== -1) {
                found = StringPrototypeSlice(found, index)
              }
            }
            // Normalize the path separator to give a valid suggestion
            // on Windows
            if (process.platform === "win32") {
              found = StringPrototypeReplace(found, new RegExp(`\\${sep}`, "g"), "/")
            }
            return found
          } catch {
            return false
          }
        }

        function defaultResolve(specifier, context = {}, defaultResolveUnused) {
          let { parentURL, conditions } = context
          if (parentURL && policy != null && policy.manifest) {
            const redirects = policy.manifest.getDependencyMapper(parentURL)
            if (redirects) {
              const { resolve, reaction } = redirects
              const destination = resolve(specifier, new SafeSet(conditions))
              let missing = true
              if (destination === true) {
                missing = false
              } else if (destination) {
                const href = destination.href
                return { url: href }
              }
              if (missing) {
                reaction(
                  new ERR_MANIFEST_DEPENDENCY_MISSING(
                    parentURL,
                    specifier,
                    ArrayPrototypeJoin([...conditions], ", ")
                  )
                )
              }
            }
          }
          let parsed
          try {
            parsed = new URL(specifier)
            if (parsed.protocol === "data:") {
              return {
                url: specifier
              }
            }
          } catch {}
          if (parsed && parsed.protocol === builtinModuleProtocol) return { url: specifier }
          if (parsed && parsed.protocol !== "file:" && parsed.protocol !== "data:")
            throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed)
          if (NativeModule.canBeRequiredByUsers(specifier)) {
            return {
              url: builtinModuleProtocol + specifier
            }
          }
          if (parentURL && StringPrototypeStartsWith(parentURL, "data:")) {
            // This is gonna blow up, we want the error
            new URL(specifier, parentURL)
          }

          const isMain = parentURL === undefined
          if (isMain) {
            parentURL = pathToFileURL(`${process.cwd()}/`).href

            // This is the initial entry point to the program, and --input-type has
            // been passed as an option; but --input-type can only be used with
            // --eval, --print or STDIN string input. It is not allowed with file
            // input, to avoid user confusion over how expansive the effect of the
            // flag should be (i.e. entry point only, package scope surrounding the
            // entry point, etc.).
            if (typeFlag) throw new ERR_INPUT_TYPE_NOT_ALLOWED()
          }

          conditions = getConditionsSet(conditions)
          let url
          try {
            url = moduleResolve(specifier, parentURL, conditions)
          } catch (error) {
            // Try to give the user a hint of what would have been the
            // resolved CommonJS module
            if (
              error.code === "ERR_MODULE_NOT_FOUND" ||
              error.code === "ERR_UNSUPPORTED_DIR_IMPORT"
            ) {
              if (StringPrototypeStartsWith(specifier, "file://")) {
                specifier = fileURLToPath(specifier)
              }
              const found = resolveAsCommonJS(specifier, parentURL)
              if (found) {
                // Modify the stack and message string to include the hint
                const lines = StringPrototypeSplit(error.stack, "\n")
                const hint = `Did you mean to import ${found}?`
                error.stack =
                  ArrayPrototypeShift(lines) + "\n" + hint + "\n" + ArrayPrototypeJoin(lines, "\n")
                error.message += `\n${hint}`
              }
            }
            throw error
          }

          if (isMain ? !preserveSymlinksMain : !preserveSymlinks) {
            const urlPath = fileURLToPath(url)
            const real = realpathSync(urlPath, {
              // [internalFS.realpathCacheKey]: realpathCache
            })
            const old = url
            url = pathToFileURL(real + (StringPrototypeEndsWith(urlPath, sep) ? "/" : ""))
            url.search = old.search
            url.hash = old.hash
          }

          return { url: `${url}` }
        }

        return {
          DEFAULT_CONDITIONS,
          defaultResolve,
          encodedSepRegEx,
          getPackageType,
          packageExportsResolve,
          packageImportsResolve
        }
      }
      module.exports = {
        createResolve
      }

      /***/
    },

    /***/ 65864: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const fs = __nccwpck_require__(57147)

      // In node's core, this is implemented in C
      // https://github.com/nodejs/node/blob/v15.3.0/src/node_file.cc#L891-L985
      function internalModuleReadJSON(path) {
        let string
        try {
          string = fs.readFileSync(path, "utf8")
        } catch (e) {
          if (e.code === "ENOENT") return []
          throw e
        }
        // Node's implementation checks for the presence of relevant keys: main, name, type, exports, imports
        // Node does this for performance to skip unnecessary parsing.
        // This would slow us down and, based on our usage, we can skip it.
        const containsKeys = true
        return [string, containsKeys]
      }

      module.exports = {
        internalModuleReadJSON
      }

      /***/
    },

    /***/ 40690: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      // Replacement for node's internal 'internal/options' module

      exports.getOptionValue = getOptionValue
      function getOptionValue(opt) {
        parseOptions()
        return options[opt]
      }

      let options
      function parseOptions() {
        if (!options) {
          options = {
            "--preserve-symlinks": false,
            "--preserve-symlinks-main": false,
            "--input-type": undefined,
            "--experimental-specifier-resolution": "explicit",
            "--experimental-policy": undefined,
            "--conditions": [],
            "--pending-deprecation": false,
            ...parseArgv(getNodeOptionsEnvArgv()),
            ...parseArgv(process.execArgv),
            ...getOptionValuesFromOtherEnvVars()
          }
        }
      }

      function parseArgv(argv) {
        return __nccwpck_require__(59482)(
          {
            "--preserve-symlinks": Boolean,
            "--preserve-symlinks-main": Boolean,
            "--input-type": String,
            "--experimental-specifier-resolution": String,
            // Legacy alias for node versions prior to 12.16
            "--es-module-specifier-resolution": "--experimental-specifier-resolution",
            "--experimental-policy": String,
            "--conditions": [String],
            "--pending-deprecation": Boolean
          },
          {
            argv,
            permissive: true
          }
        )
      }

      function getNodeOptionsEnvArgv() {
        const errors = []
        const envArgv = ParseNodeOptionsEnvVar(process.env.NODE_OPTIONS || "", errors)
        if (errors.length !== 0) {
          // TODO: handle errors somehow
        }
        return envArgv
      }

      // Direct JS port of C implementation: https://github.com/nodejs/node/blob/67ba825037b4082d5d16f922fb9ce54516b4a869/src/node_options.cc#L1024-L1063
      function ParseNodeOptionsEnvVar(node_options, errors) {
        const env_argv = []

        let is_in_string = false
        let will_start_new_arg = true
        for (let index = 0; index < node_options.length; ++index) {
          let c = node_options[index]

          // Backslashes escape the following character
          if (c === "\\" && is_in_string) {
            if (index + 1 === node_options.length) {
              errors.push("invalid value for NODE_OPTIONS " + "(invalid escape)\n")
              return env_argv
            } else {
              c = node_options[++index]
            }
          } else if (c === " " && !is_in_string) {
            will_start_new_arg = true
            continue
          } else if (c === '"') {
            is_in_string = !is_in_string
            continue
          }

          if (will_start_new_arg) {
            env_argv.push(c)
            will_start_new_arg = false
          } else {
            env_argv[env_argv.length - 1] += c
          }
        }

        if (is_in_string) {
          errors.push("invalid value for NODE_OPTIONS " + "(unterminated string)\n")
        }
        return env_argv
      }

      // Get option values that can be specified via env vars besides NODE_OPTIONS
      function getOptionValuesFromOtherEnvVars() {
        const options = {}
        if (process.env.NODE_PENDING_DEPRECATION === "1") {
          options["--pending-deprecation"] = true
        }
        return options
      }

      /***/
    },

    /***/ 67995: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/package_json_reader.js

      const { SafeMap } = __nccwpck_require__(26326)
      const { internalModuleReadJSON } = __nccwpck_require__(65864)
      const { pathToFileURL } = __nccwpck_require__(57310)
      const { toNamespacedPath } = __nccwpck_require__(71017)
      // const { getOptionValue } = require('./node-options');

      const cache = new SafeMap()

      let manifest

      /**
       * @param {string} jsonPath
       * @return {[string, boolean]}
       */
      function read(jsonPath) {
        if (cache.has(jsonPath)) {
          return cache.get(jsonPath)
        }

        const [string, containsKeys] = internalModuleReadJSON(toNamespacedPath(jsonPath))
        const result = { string, containsKeys }
        if (string !== undefined) {
          if (manifest === undefined) {
            // manifest = getOptionValue('--experimental-policy') ?
            //   require('internal/process/policy').manifest :
            //   null;
            // disabled for now.  I am not sure if/how we should support this
            manifest = null
          }
          if (manifest !== null) {
            const jsonURL = pathToFileURL(jsonPath)
            manifest.assertIntegrity(jsonURL, string)
          }
        }
        cache.set(jsonPath, result)
        return result
      }

      module.exports = { read }

      /***/
    },

    /***/ 26326: /***/ (module) => {
      module.exports = {
        ArrayFrom: Array.from,
        ArrayIsArray: Array.isArray,
        ArrayPrototypeJoin: (obj, separator) => Array.prototype.join.call(obj, separator),
        ArrayPrototypeShift: (obj) => Array.prototype.shift.call(obj),
        ArrayPrototypeForEach: (arr, ...rest) => Array.prototype.forEach.apply(arr, rest),
        ArrayPrototypeIncludes: (arr, ...rest) => Array.prototype.includes.apply(arr, rest),
        ArrayPrototypeJoin: (arr, ...rest) => Array.prototype.join.apply(arr, rest),
        ArrayPrototypePop: (arr, ...rest) => Array.prototype.pop.apply(arr, rest),
        ArrayPrototypePush: (arr, ...rest) => Array.prototype.push.apply(arr, rest),
        FunctionPrototype: Function.prototype,
        JSONParse: JSON.parse,
        JSONStringify: JSON.stringify,
        ObjectFreeze: Object.freeze,
        ObjectKeys: Object.keys,
        ObjectGetOwnPropertyNames: Object.getOwnPropertyNames,
        ObjectDefineProperty: Object.defineProperty,
        ObjectPrototypeHasOwnProperty: (obj, prop) =>
          Object.prototype.hasOwnProperty.call(obj, prop),
        RegExpPrototypeExec: (obj, string) => RegExp.prototype.exec.call(obj, string),
        RegExpPrototypeTest: (obj, string) => RegExp.prototype.test.call(obj, string),
        RegExpPrototypeSymbolReplace: (obj, ...rest) =>
          RegExp.prototype[Symbol.replace].apply(obj, rest),
        SafeMap: Map,
        SafeSet: Set,
        StringPrototypeEndsWith: (str, ...rest) => String.prototype.endsWith.apply(str, rest),
        StringPrototypeIncludes: (str, ...rest) => String.prototype.includes.apply(str, rest),
        StringPrototypeLastIndexOf: (str, ...rest) => String.prototype.lastIndexOf.apply(str, rest),
        StringPrototypeIndexOf: (str, ...rest) => String.prototype.indexOf.apply(str, rest),
        StringPrototypeRepeat: (str, ...rest) => String.prototype.repeat.apply(str, rest),
        StringPrototypeReplace: (str, ...rest) => String.prototype.replace.apply(str, rest),
        StringPrototypeSlice: (str, ...rest) => String.prototype.slice.apply(str, rest),
        StringPrototypeSplit: (str, ...rest) => String.prototype.split.apply(str, rest),
        StringPrototypeStartsWith: (str, ...rest) => String.prototype.startsWith.apply(str, rest),
        StringPrototypeSubstr: (str, ...rest) => String.prototype.substr.apply(str, rest),
        SyntaxError: SyntaxError
      }

      /***/
    },

    /***/ 13374: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"
      // copied from https://github.com/nodejs/node/blob/88799930794045795e8abac874730f9eba7e2300/lib/internal/repl/await.js

      const {
        ArrayFrom,
        ArrayPrototypeForEach,
        ArrayPrototypeIncludes,
        ArrayPrototypeJoin,
        ArrayPrototypePop,
        ArrayPrototypePush,
        FunctionPrototype,
        ObjectKeys,
        RegExpPrototypeSymbolReplace,
        StringPrototypeEndsWith,
        StringPrototypeIncludes,
        StringPrototypeIndexOf,
        StringPrototypeRepeat,
        StringPrototypeSplit,
        StringPrototypeStartsWith,
        SyntaxError
      } = __nccwpck_require__(26326)

      const parser = __nccwpck_require__(80390).Parser
      const walk = __nccwpck_require__(60419)
      const { Recoverable } = __nccwpck_require__(38102)

      function isTopLevelDeclaration(state) {
        return state.ancestors[state.ancestors.length - 2] === state.body
      }

      const noop = FunctionPrototype
      const visitorsWithoutAncestors = {
        ClassDeclaration(node, state, c) {
          if (isTopLevelDeclaration(state)) {
            state.prepend(node, `${node.id.name}=`)
            ArrayPrototypePush(state.hoistedDeclarationStatements, `let ${node.id.name}; `)
          }

          walk.base.ClassDeclaration(node, state, c)
        },
        ForOfStatement(node, state, c) {
          if (node.await === true) {
            state.containsAwait = true
          }
          walk.base.ForOfStatement(node, state, c)
        },
        FunctionDeclaration(node, state, c) {
          state.prepend(node, `${node.id.name}=`)
          ArrayPrototypePush(state.hoistedDeclarationStatements, `var ${node.id.name}; `)
        },
        FunctionExpression: noop,
        ArrowFunctionExpression: noop,
        MethodDefinition: noop,
        AwaitExpression(node, state, c) {
          state.containsAwait = true
          walk.base.AwaitExpression(node, state, c)
        },
        ReturnStatement(node, state, c) {
          state.containsReturn = true
          walk.base.ReturnStatement(node, state, c)
        },
        VariableDeclaration(node, state, c) {
          const variableKind = node.kind
          const isIterableForDeclaration = ArrayPrototypeIncludes(
            ["ForOfStatement", "ForInStatement"],
            state.ancestors[state.ancestors.length - 2].type
          )

          if (variableKind === "var" || isTopLevelDeclaration(state)) {
            state.replace(
              node.start,
              node.start + variableKind.length + (isIterableForDeclaration ? 1 : 0),
              variableKind === "var" && isIterableForDeclaration
                ? ""
                : "void" + (node.declarations.length === 1 ? "" : " (")
            )

            if (!isIterableForDeclaration) {
              ArrayPrototypeForEach(node.declarations, (decl) => {
                state.prepend(decl, "(")
                state.append(decl, decl.init ? ")" : "=undefined)")
              })

              if (node.declarations.length !== 1) {
                state.append(node.declarations[node.declarations.length - 1], ")")
              }
            }

            const variableIdentifiersToHoist = [
              ["var", []],
              ["let", []]
            ]
            function registerVariableDeclarationIdentifiers(node) {
              switch (node.type) {
                case "Identifier":
                  ArrayPrototypePush(
                    variableIdentifiersToHoist[variableKind === "var" ? 0 : 1][1],
                    node.name
                  )
                  break
                case "ObjectPattern":
                  ArrayPrototypeForEach(node.properties, (property) => {
                    registerVariableDeclarationIdentifiers(property.value)
                  })
                  break
                case "ArrayPattern":
                  ArrayPrototypeForEach(node.elements, (element) => {
                    registerVariableDeclarationIdentifiers(element)
                  })
                  break
              }
            }

            ArrayPrototypeForEach(node.declarations, (decl) => {
              registerVariableDeclarationIdentifiers(decl.id)
            })

            ArrayPrototypeForEach(variableIdentifiersToHoist, ({ 0: kind, 1: identifiers }) => {
              if (identifiers.length > 0) {
                ArrayPrototypePush(
                  state.hoistedDeclarationStatements,
                  `${kind} ${ArrayPrototypeJoin(identifiers, ", ")}; `
                )
              }
            })
          }

          walk.base.VariableDeclaration(node, state, c)
        }
      }

      const visitors = {}
      for (const nodeType of ObjectKeys(walk.base)) {
        const callback = visitorsWithoutAncestors[nodeType] || walk.base[nodeType]
        visitors[nodeType] = (node, state, c) => {
          const isNew = node !== state.ancestors[state.ancestors.length - 1]
          if (isNew) {
            ArrayPrototypePush(state.ancestors, node)
          }
          callback(node, state, c)
          if (isNew) {
            ArrayPrototypePop(state.ancestors)
          }
        }
      }

      function processTopLevelAwait(src) {
        const wrapPrefix = "(async () => { "
        const wrapped = `${wrapPrefix}${src} })()`
        const wrappedArray = ArrayFrom(wrapped)
        let root
        try {
          root = parser.parse(wrapped, { ecmaVersion: "latest" })
        } catch (e) {
          if (StringPrototypeStartsWith(e.message, "Unterminated ")) throw new Recoverable(e)
          // If the parse error is before the first "await", then use the execution
          // error. Otherwise we must emit this parse error, making it look like a
          // proper syntax error.
          const awaitPos = StringPrototypeIndexOf(src, "await")
          const errPos = e.pos - wrapPrefix.length
          if (awaitPos > errPos) return null
          // Convert keyword parse errors on await into their original errors when
          // possible.
          if (
            errPos === awaitPos + 6 &&
            StringPrototypeIncludes(e.message, "Expecting Unicode escape sequence")
          )
            return null
          if (errPos === awaitPos + 7 && StringPrototypeIncludes(e.message, "Unexpected token"))
            return null
          const line = e.loc.line
          const column = line === 1 ? e.loc.column - wrapPrefix.length : e.loc.column
          let message =
            "\n" +
            StringPrototypeSplit(src, "\n")[line - 1] +
            "\n" +
            StringPrototypeRepeat(" ", column) +
            "^\n\n" +
            RegExpPrototypeSymbolReplace(/ \([^)]+\)/, e.message, "")
          // V8 unexpected token errors include the token string.
          if (StringPrototypeEndsWith(message, "Unexpected token"))
            message +=
              " '" +
              // Wrapper end may cause acorn to report error position after the source
              (src.length - 1 >= e.pos - wrapPrefix.length
                ? src[e.pos - wrapPrefix.length]
                : src[src.length - 1]) +
              "'"
          // eslint-disable-next-line no-restricted-syntax
          throw new SyntaxError(message)
        }
        const body = root.body[0].expression.callee.body
        const state = {
          body,
          ancestors: [],
          hoistedDeclarationStatements: [],
          replace(from, to, str) {
            for (let i = from; i < to; i++) {
              wrappedArray[i] = ""
            }
            if (from === to) str += wrappedArray[from]
            wrappedArray[from] = str
          },
          prepend(node, str) {
            wrappedArray[node.start] = str + wrappedArray[node.start]
          },
          append(node, str) {
            wrappedArray[node.end - 1] += str
          },
          containsAwait: false,
          containsReturn: false
        }

        walk.recursive(body, state, visitors)

        // Do not transform if
        // 1. False alarm: there isn't actually an await expression.
        // 2. There is a top-level return, which is not allowed.
        if (!state.containsAwait || state.containsReturn) {
          return null
        }

        const last = body.body[body.body.length - 1]
        if (last.type === "ExpressionStatement") {
          // For an expression statement of the form
          // ( expr ) ;
          // ^^^^^^^^^^   // last
          //   ^^^^       // last.expression
          //
          // We do not want the left parenthesis before the `return` keyword;
          // therefore we prepend the `return (` to `last`.
          //
          // On the other hand, we do not want the right parenthesis after the
          // semicolon. Since there can only be more right parentheses between
          // last.expression.end and the semicolon, appending one more to
          // last.expression should be fine.
          state.prepend(last, "return (")
          state.append(last.expression, ")")
        }

        return (
          ArrayPrototypeJoin(state.hoistedDeclarationStatements, "") +
          ArrayPrototypeJoin(wrappedArray, "")
        )
      }

      module.exports = {
        processTopLevelAwait
      }

      /***/
    },

    /***/ 29906: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __rest =
        (this && this.__rest) ||
        function (s, e) {
          var t = {}
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p]
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]]
            }
          return t
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.readConfig = void 0
      const path_1 = __nccwpck_require__(71017)
      const index_1 = __nccwpck_require__(72719)
      const ts_internals_1 = __nccwpck_require__(14851)
      const tsconfigs_1 = __nccwpck_require__(91533)
      const util_1 = __nccwpck_require__(64745)
      /**
       * TypeScript compiler option values required by `ts-node` which cannot be overridden.
       */
      const TS_NODE_COMPILER_OPTIONS = {
        sourceMap: true,
        inlineSourceMap: false,
        inlineSources: true,
        declaration: false,
        noEmit: false,
        outDir: ".ts-node"
      }
      /*
       * Do post-processing on config options to support `ts-node`.
       */
      function fixConfig(ts, config) {
        // Delete options that *should not* be passed through.
        delete config.options.out
        delete config.options.outFile
        delete config.options.composite
        delete config.options.declarationDir
        delete config.options.declarationMap
        delete config.options.emitDeclarationOnly
        // Target ES5 output by default (instead of ES3).
        if (config.options.target === undefined) {
          config.options.target = ts.ScriptTarget.ES5
        }
        // Target CommonJS modules by default (instead of magically switching to ES6 when the target is ES6).
        if (config.options.module === undefined) {
          config.options.module = ts.ModuleKind.CommonJS
        }
        return config
      }
      /**
       * Load TypeScript configuration. Returns the parsed TypeScript config and
       * any `ts-node` options specified in the config file.
       *
       * Even when a tsconfig.json is not loaded, this function still handles merging
       * compilerOptions from various sources: API, environment variables, etc.
       *
       * @internal
       */
      function readConfig(cwd, ts, rawApiOptions) {
        var _a, _b, _c
        // Ordered [a, b, c] where config a extends b extends c
        const configChain = []
        let config = { compilerOptions: {} }
        let basePath = cwd
        let configFilePath = undefined
        const projectSearchDir = (0, path_1.resolve)(
          cwd,
          (_a = rawApiOptions.projectSearchDir) !== null && _a !== void 0 ? _a : cwd
        )
        const {
          fileExists = ts.sys.fileExists,
          readFile = ts.sys.readFile,
          skipProject = index_1.DEFAULTS.skipProject,
          project = index_1.DEFAULTS.project
        } = rawApiOptions
        // Read project configuration when available.
        if (!skipProject) {
          configFilePath = project
            ? (0, path_1.resolve)(cwd, project)
            : ts.findConfigFile(projectSearchDir, fileExists)
          if (configFilePath) {
            let pathToNextConfigInChain = configFilePath
            const tsInternals = (0, ts_internals_1.createTsInternals)(ts)
            const errors = []
            // Follow chain of "extends"
            while (true) {
              const result = ts.readConfigFile(pathToNextConfigInChain, readFile)
              // Return diagnostics.
              if (result.error) {
                return {
                  configFilePath,
                  config: { errors: [result.error], fileNames: [], options: {} },
                  tsNodeOptionsFromTsconfig: {},
                  optionBasePaths: {}
                }
              }
              const c = result.config
              const bp = (0, path_1.dirname)(pathToNextConfigInChain)
              configChain.push({
                config: c,
                basePath: bp,
                configPath: pathToNextConfigInChain
              })
              if (c.extends == null) break
              const resolvedExtendedConfigPath = tsInternals.getExtendsConfigPath(
                c.extends,
                {
                  fileExists,
                  readDirectory: ts.sys.readDirectory,
                  readFile,
                  useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,
                  trace: util_1.trace
                },
                bp,
                errors,
                ts.createCompilerDiagnostic
              )
              if (errors.length) {
                return {
                  configFilePath,
                  config: { errors, fileNames: [], options: {} },
                  tsNodeOptionsFromTsconfig: {},
                  optionBasePaths: {}
                }
              }
              if (resolvedExtendedConfigPath == null) break
              pathToNextConfigInChain = resolvedExtendedConfigPath
            }
            ;({ config, basePath } = configChain[0])
          }
        }
        // Merge and fix ts-node options that come from tsconfig.json(s)
        const tsNodeOptionsFromTsconfig = {}
        const optionBasePaths = {}
        for (let i = configChain.length - 1; i >= 0; i--) {
          const { config, basePath, configPath } = configChain[i]
          const options = filterRecognizedTsConfigTsNodeOptions(config["ts-node"]).recognized
          // Some options are relative to the config file, so must be converted to absolute paths here
          if (options.require) {
            // Modules are found relative to the tsconfig file, not the `dir` option
            const tsconfigRelativeRequire = (0, util_1.createRequire)(configPath)
            options.require = options.require.map((path) => tsconfigRelativeRequire.resolve(path))
          }
          if (options.scopeDir) {
            options.scopeDir = (0, path_1.resolve)(basePath, options.scopeDir)
          }
          // Downstream code uses the basePath; we do not do that here.
          if (options.moduleTypes) {
            optionBasePaths.moduleTypes = basePath
          }
          ;(0, util_1.assign)(tsNodeOptionsFromTsconfig, options)
        }
        // Remove resolution of "files".
        const files =
          (_c =
            (_b = rawApiOptions.files) !== null && _b !== void 0
              ? _b
              : tsNodeOptionsFromTsconfig.files) !== null && _c !== void 0
            ? _c
            : index_1.DEFAULTS.files
        if (!files) {
          config.files = []
          config.include = []
        }
        // Only if a config file is *not* loaded, load an implicit configuration from @tsconfig/bases
        const skipDefaultCompilerOptions = configFilePath != null
        const defaultCompilerOptionsForNodeVersion = skipDefaultCompilerOptions
          ? undefined
          : Object.assign(
              Object.assign(
                {},
                (0, tsconfigs_1.getDefaultTsconfigJsonForNodeVersion)(ts).compilerOptions
              ),
              { types: ["node"] }
            )
        // Merge compilerOptions from all sources
        config.compilerOptions = Object.assign(
          {},
          // automatically-applied options from @tsconfig/bases
          defaultCompilerOptionsForNodeVersion,
          // tsconfig.json "compilerOptions"
          config.compilerOptions,
          // from env var
          index_1.DEFAULTS.compilerOptions,
          // tsconfig.json "ts-node": "compilerOptions"
          tsNodeOptionsFromTsconfig.compilerOptions,
          // passed programmatically
          rawApiOptions.compilerOptions,
          // overrides required by ts-node, cannot be changed
          TS_NODE_COMPILER_OPTIONS
        )
        const fixedConfig = fixConfig(
          ts,
          ts.parseJsonConfigFileContent(
            config,
            {
              fileExists,
              readFile,
              readDirectory: ts.sys.readDirectory,
              useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames
            },
            basePath,
            undefined,
            configFilePath
          )
        )
        return {
          configFilePath,
          config: fixedConfig,
          tsNodeOptionsFromTsconfig,
          optionBasePaths
        }
      }
      exports.readConfig = readConfig
      /**
       * Given the raw "ts-node" sub-object from a tsconfig, return an object with only the properties
       * recognized by "ts-node"
       */
      function filterRecognizedTsConfigTsNodeOptions(jsonObject) {
        if (jsonObject == null) return { recognized: {}, unrecognized: {} }
        const _a = jsonObject,
          {
            compiler,
            compilerHost,
            compilerOptions,
            emit,
            files,
            ignore,
            ignoreDiagnostics,
            logError,
            preferTsExts,
            pretty,
            require,
            skipIgnore,
            transpileOnly,
            typeCheck,
            transpiler,
            scope,
            scopeDir,
            moduleTypes,
            experimentalReplAwait
          } = _a,
          unrecognized = __rest(_a, [
            "compiler",
            "compilerHost",
            "compilerOptions",
            "emit",
            "files",
            "ignore",
            "ignoreDiagnostics",
            "logError",
            "preferTsExts",
            "pretty",
            "require",
            "skipIgnore",
            "transpileOnly",
            "typeCheck",
            "transpiler",
            "scope",
            "scopeDir",
            "moduleTypes",
            "experimentalReplAwait"
          ])
        const filteredTsConfigOptions = {
          compiler,
          compilerHost,
          compilerOptions,
          emit,
          experimentalReplAwait,
          files,
          ignore,
          ignoreDiagnostics,
          logError,
          preferTsExts,
          pretty,
          require,
          skipIgnore,
          transpileOnly,
          typeCheck,
          transpiler,
          scope,
          scopeDir,
          moduleTypes
        }
        // Use the typechecker to make sure this implementation has the correct set of properties
        const catchExtraneousProps = null
        const catchMissingProps = null
        return { recognized: filteredTsConfigOptions, unrecognized }
      }
      //# sourceMappingURL=configuration.js.map

      /***/
    },

    /***/ 84998: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __awaiter =
        (this && this.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value)
                })
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value))
              } catch (e) {
                reject(e)
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value))
              } catch (e) {
                reject(e)
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected)
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next())
          })
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.createEsmHooks = exports.registerAndCreateEsmHooks = void 0
      const index_1 = __nccwpck_require__(72719)
      const url_1 = __nccwpck_require__(57310)
      const path_1 = __nccwpck_require__(71017)
      const assert = __nccwpck_require__(39491)
      const util_1 = __nccwpck_require__(64745)
      const { createResolve } = __nccwpck_require__(91131)
      const { defaultGetFormat } = __nccwpck_require__(31571)
      /** @internal */
      function registerAndCreateEsmHooks(opts) {
        // Automatically performs registration just like `-r ts-node/register`
        const tsNodeInstance = (0, index_1.register)(opts)
        return createEsmHooks(tsNodeInstance)
      }
      exports.registerAndCreateEsmHooks = registerAndCreateEsmHooks
      function createEsmHooks(tsNodeService) {
        tsNodeService.enableExperimentalEsmLoaderInterop()
        // Custom implementation that considers additional file extensions and automatically adds file extensions
        const nodeResolveImplementation = createResolve(
          Object.assign(Object.assign({}, (0, index_1.getExtensions)(tsNodeService.config)), {
            preferTsExts: tsNodeService.options.preferTsExts
          })
        )
        // The hooks API changed in node version X so we need to check for backwards compatibility.
        // TODO: When the new API is backported to v12, v14, update these version checks accordingly.
        const newHooksAPI =
          (0, index_1.versionGteLt)(process.versions.node, "17.0.0") ||
          (0, index_1.versionGteLt)(process.versions.node, "16.12.0", "17.0.0") ||
          (0, index_1.versionGteLt)(process.versions.node, "14.999.999", "15.0.0") ||
          (0, index_1.versionGteLt)(process.versions.node, "12.999.999", "13.0.0")
        // Explicit return type to avoid TS's non-ideal inferred type
        const hooksAPI = newHooksAPI
          ? { resolve, load, getFormat: undefined, transformSource: undefined }
          : { resolve, getFormat, transformSource, load: undefined }
        return hooksAPI
        function isFileUrlOrNodeStyleSpecifier(parsed) {
          // We only understand file:// URLs, but in node, the specifier can be a node-style `./foo` or `foo`
          const { protocol } = parsed
          return protocol === null || protocol === "file:"
        }
        function resolve(specifier, context, defaultResolve) {
          return __awaiter(this, void 0, void 0, function* () {
            const defer = () =>
              __awaiter(this, void 0, void 0, function* () {
                const r = yield defaultResolve(specifier, context, defaultResolve)
                return r
              })
            const parsed = (0, url_1.parse)(specifier)
            const { pathname, protocol, hostname } = parsed
            if (!isFileUrlOrNodeStyleSpecifier(parsed)) {
              return defer()
            }
            if (protocol !== null && protocol !== "file:") {
              return defer()
            }
            // Malformed file:// URL?  We should always see `null` or `''`
            if (hostname) {
              // TODO file://./foo sets `hostname` to `'.'`.  Perhaps we should special-case this.
              return defer()
            }
            // pathname is the path to be resolved
            return nodeResolveImplementation.defaultResolve(specifier, context, defaultResolve)
          })
        }
        // `load` from new loader hook API (See description at the top of this file)
        function load(url, context, defaultLoad) {
          var _a
          return __awaiter(this, void 0, void 0, function* () {
            // If we get a format hint from resolve() on the context then use it
            // otherwise call the old getFormat() hook using node's old built-in defaultGetFormat() that ships with ts-node
            const format =
              (_a = context.format) !== null && _a !== void 0
                ? _a
                : (yield getFormat(url, context, defaultGetFormat)).format
            let source = undefined
            if (format !== "builtin" && format !== "commonjs") {
              // Call the new defaultLoad() to get the source
              const { source: rawSource } = yield defaultLoad(url, { format }, defaultLoad)
              if (rawSource === undefined || rawSource === null) {
                throw new Error(
                  `Failed to load raw source: Format was '${format}' and url was '${url}''.`
                )
              }
              // Emulate node's built-in old defaultTransformSource() so we can re-use the old transformSource() hook
              const defaultTransformSource = (source, _context, _defaultTransformSource) =>
                __awaiter(this, void 0, void 0, function* () {
                  return { source }
                })
              // Call the old hook
              const { source: transformedSource } = yield transformSource(
                rawSource,
                { url, format },
                defaultTransformSource
              )
              source = transformedSource
            }
            return { format, source }
          })
        }
        function getFormat(url, context, defaultGetFormat) {
          return __awaiter(this, void 0, void 0, function* () {
            const defer = (overrideUrl = url) =>
              defaultGetFormat(overrideUrl, context, defaultGetFormat)
            const parsed = (0, url_1.parse)(url)
            if (!isFileUrlOrNodeStyleSpecifier(parsed)) {
              return defer()
            }
            const { pathname } = parsed
            assert(pathname !== null, "ESM getFormat() hook: URL should never have null pathname")
            const nativePath = (0, url_1.fileURLToPath)(url)
            // If file has .ts, .tsx, or .jsx extension, then ask node how it would treat this file if it were .js
            const ext = (0, path_1.extname)(nativePath)
            let nodeSays
            if (ext !== ".js" && !tsNodeService.ignored(nativePath)) {
              nodeSays = yield defer(
                (0, url_1.format)((0, url_1.pathToFileURL)(nativePath + ".js"))
              )
            } else {
              nodeSays = yield defer()
            }
            // For files compiled by ts-node that node believes are either CJS or ESM, check if we should override that classification
            if (
              !tsNodeService.ignored(nativePath) &&
              (nodeSays.format === "commonjs" || nodeSays.format === "module")
            ) {
              const { moduleType } = tsNodeService.moduleTypeClassifier.classifyModule(
                (0, util_1.normalizeSlashes)(nativePath)
              )
              if (moduleType === "cjs") {
                return { format: "commonjs" }
              } else if (moduleType === "esm") {
                return { format: "module" }
              }
            }
            return nodeSays
          })
        }
        function transformSource(source, context, defaultTransformSource) {
          return __awaiter(this, void 0, void 0, function* () {
            if (source === null || source === undefined) {
              throw new Error("No source")
            }
            const defer = () => defaultTransformSource(source, context, defaultTransformSource)
            const sourceAsString = typeof source === "string" ? source : source.toString("utf8")
            const { url } = context
            const parsed = (0, url_1.parse)(url)
            if (!isFileUrlOrNodeStyleSpecifier(parsed)) {
              return defer()
            }
            const nativePath = (0, url_1.fileURLToPath)(url)
            if (tsNodeService.ignored(nativePath)) {
              return defer()
            }
            const emittedJs = tsNodeService.compile(sourceAsString, nativePath)
            return { source: emittedJs }
          })
        }
      }
      exports.createEsmHooks = createEsmHooks
      //# sourceMappingURL=esm.js.map

      /***/
    },

    /***/ 72719: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var _a, _b
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.createEsmHooks =
        exports.create =
        exports.register =
        exports.getExtensions =
        exports.TSError =
        exports.DEFAULTS =
        exports.VERSION =
        exports.debug =
        exports.INSPECT_CUSTOM =
        exports.env =
        exports.REGISTER_INSTANCE =
        exports.versionGteLt =
        exports.createRepl =
          void 0
      const path_1 = __nccwpck_require__(71017)
      const module_1 = __nccwpck_require__(98188)
      const util = __nccwpck_require__(73837)
      const url_1 = __nccwpck_require__(57310)
      const sourceMapSupport = __nccwpck_require__(99964)
      const make_error_1 = __nccwpck_require__(21381)
      const util_1 = __nccwpck_require__(64745)
      const configuration_1 = __nccwpck_require__(29906)
      const module_type_classifier_1 = __nccwpck_require__(23922)
      const resolver_functions_1 = __nccwpck_require__(19148)
      var repl_1 = __nccwpck_require__(10204)
      Object.defineProperty(exports, "createRepl", {
        enumerable: true,
        get: function () {
          return repl_1.createRepl
        }
      })
      /**
       * Does this version of node obey the package.json "type" field
       * and throw ERR_REQUIRE_ESM when attempting to require() an ESM modules.
       */
      const engineSupportsPackageTypeField = parseInt(process.versions.node.split(".")[0], 10) >= 12
      /** @internal */
      function versionGteLt(version, gteRequirement, ltRequirement) {
        const [major, minor, patch, extra] = parse(version)
        const [gteMajor, gteMinor, gtePatch] = parse(gteRequirement)
        const isGte =
          major > gteMajor ||
          (major === gteMajor && (minor > gteMinor || (minor === gteMinor && patch >= gtePatch)))
        let isLt = true
        if (ltRequirement) {
          const [ltMajor, ltMinor, ltPatch] = parse(ltRequirement)
          isLt =
            major < ltMajor ||
            (major === ltMajor && (minor < ltMinor || (minor === ltMinor && patch < ltPatch)))
        }
        return isGte && isLt
        function parse(requirement) {
          return requirement.split(/[\.-]/).map((s) => parseInt(s, 10))
        }
      }
      exports.versionGteLt = versionGteLt
      /**
       * Assert that script can be loaded as CommonJS when we attempt to require it.
       * If it should be loaded as ESM, throw ERR_REQUIRE_ESM like node does.
       *
       * Loaded conditionally so we don't need to support older node versions
       */
      let assertScriptCanLoadAsCJS = engineSupportsPackageTypeField
        ? __nccwpck_require__(26765) /* .assertScriptCanLoadAsCJSImpl */.z
        : () => {
            /* noop */
          }
      /**
       * Registered `ts-node` instance information.
       */
      exports.REGISTER_INSTANCE = Symbol.for("ts-node.register.instance")
      /** @internal */
      exports.env = process.env
      /**
       * @internal
       */
      exports.INSPECT_CUSTOM = util.inspect.custom || "inspect"
      /**
       * Debugging `ts-node`.
       */
      const shouldDebug = (0, util_1.yn)(exports.env.TS_NODE_DEBUG)
      /** @internal */
      exports.debug = shouldDebug
        ? (...args) => console.log(`[ts-node ${new Date().toISOString()}]`, ...args)
        : () => undefined
      const debugFn = shouldDebug
        ? (key, fn) => {
            let i = 0
            return (x) => {
              ;(0, exports.debug)(key, x, ++i)
              return fn(x)
            }
          }
        : (_, fn) => fn
      /**
       * Export the current version.
       */
      exports.VERSION = __nccwpck_require__(46686).version
      /**
       * Default register options, including values specified via environment
       * variables.
       * @internal
       */
      exports.DEFAULTS = {
        cwd:
          (_a = exports.env.TS_NODE_CWD) !== null && _a !== void 0 ? _a : exports.env.TS_NODE_DIR,
        emit: (0, util_1.yn)(exports.env.TS_NODE_EMIT),
        scope: (0, util_1.yn)(exports.env.TS_NODE_SCOPE),
        scopeDir: exports.env.TS_NODE_SCOPE_DIR,
        files: (0, util_1.yn)(exports.env.TS_NODE_FILES),
        pretty: (0, util_1.yn)(exports.env.TS_NODE_PRETTY),
        compiler: exports.env.TS_NODE_COMPILER,
        compilerOptions: (0, util_1.parse)(exports.env.TS_NODE_COMPILER_OPTIONS),
        ignore: (0, util_1.split)(exports.env.TS_NODE_IGNORE),
        project: exports.env.TS_NODE_PROJECT,
        skipProject: (0, util_1.yn)(exports.env.TS_NODE_SKIP_PROJECT),
        skipIgnore: (0, util_1.yn)(exports.env.TS_NODE_SKIP_IGNORE),
        preferTsExts: (0, util_1.yn)(exports.env.TS_NODE_PREFER_TS_EXTS),
        ignoreDiagnostics: (0, util_1.split)(exports.env.TS_NODE_IGNORE_DIAGNOSTICS),
        transpileOnly: (0, util_1.yn)(exports.env.TS_NODE_TRANSPILE_ONLY),
        typeCheck: (0, util_1.yn)(exports.env.TS_NODE_TYPE_CHECK),
        compilerHost: (0, util_1.yn)(exports.env.TS_NODE_COMPILER_HOST),
        logError: (0, util_1.yn)(exports.env.TS_NODE_LOG_ERROR),
        experimentalReplAwait:
          (_b = (0, util_1.yn)(exports.env.TS_NODE_EXPERIMENTAL_REPL_AWAIT)) !== null &&
          _b !== void 0
            ? _b
            : undefined
      }
      /**
       * TypeScript diagnostics error.
       */
      class TSError extends make_error_1.BaseError {
        constructor(diagnosticText, diagnosticCodes) {
          super(`⨯ Unable to compile TypeScript:\n${diagnosticText}`)
          this.diagnosticText = diagnosticText
          this.diagnosticCodes = diagnosticCodes
          this.name = "TSError"
        }
        /**
         * @internal
         */
        [exports.INSPECT_CUSTOM]() {
          return this.diagnosticText
        }
      }
      exports.TSError = TSError
      const TS_NODE_SERVICE_BRAND = Symbol("TS_NODE_SERVICE_BRAND")
      /** @internal */
      function getExtensions(config) {
        const tsExtensions = [".ts"]
        const jsExtensions = []
        // Enable additional extensions when JSX or `allowJs` is enabled.
        if (config.options.jsx) tsExtensions.push(".tsx")
        if (config.options.allowJs) jsExtensions.push(".js")
        if (config.options.jsx && config.options.allowJs) jsExtensions.push(".jsx")
        return { tsExtensions, jsExtensions }
      }
      exports.getExtensions = getExtensions
      function register(serviceOrOpts) {
        var _a
        // Is this a Service or a RegisterOptions?
        let service = serviceOrOpts
        if (
          !((_a = serviceOrOpts) === null || _a === void 0 ? void 0 : _a[TS_NODE_SERVICE_BRAND])
        ) {
          // Not a service; is options
          service = create(serviceOrOpts !== null && serviceOrOpts !== void 0 ? serviceOrOpts : {})
        }
        const originalJsHandler = require.extensions[".js"]
        const { tsExtensions, jsExtensions } = getExtensions(service.config)
        const extensions = [...tsExtensions, ...jsExtensions]
        // Expose registered instance globally.
        process[exports.REGISTER_INSTANCE] = service
        // Register the extensions.
        registerExtensions(service.options.preferTsExts, extensions, service, originalJsHandler)
        // Require specified modules before start-up.
        module_1.Module._preloadModules(service.options.require)
        return service
      }
      exports.register = register
      /**
       * Create TypeScript compiler instance.
       */
      function create(rawOptions = {}) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l
        const cwd = (0, path_1.resolve)(
          (_c =
            (_b = (_a = rawOptions.cwd) !== null && _a !== void 0 ? _a : rawOptions.dir) !== null &&
            _b !== void 0
              ? _b
              : exports.DEFAULTS.cwd) !== null && _c !== void 0
            ? _c
            : process.cwd()
        )
        const compilerName =
          (_d = rawOptions.compiler) !== null && _d !== void 0 ? _d : exports.DEFAULTS.compiler
        /**
         * Load the typescript compiler. It is required to load the tsconfig but might
         * be changed by the tsconfig, so we have to do this twice.
         */
        function loadCompiler(name, relativeToPath) {
          const compiler = require.resolve(name || "typescript", {
            paths: [relativeToPath, __dirname]
          })
          const ts = require(compiler)
          return { compiler, ts }
        }
        // Compute minimum options to read the config file.
        let { compiler, ts } = loadCompiler(
          compilerName,
          (_f =
            (_e = rawOptions.projectSearchDir) !== null && _e !== void 0
              ? _e
              : rawOptions.project) !== null && _f !== void 0
            ? _f
            : cwd
        )
        // Read config file and merge new options between env and CLI options.
        const { configFilePath, config, tsNodeOptionsFromTsconfig, optionBasePaths } = (0,
        configuration_1.readConfig)(cwd, ts, rawOptions)
        const options = (0, util_1.assign)(
          {},
          exports.DEFAULTS,
          tsNodeOptionsFromTsconfig || {},
          { optionBasePaths },
          rawOptions
        )
        options.require = [
          ...(tsNodeOptionsFromTsconfig.require || []),
          ...(rawOptions.require || [])
        ]
        // Experimental REPL await is not compatible targets lower than ES2018
        const targetSupportsTla = config.options.target >= ts.ScriptTarget.ES2018
        if (options.experimentalReplAwait === true && !targetSupportsTla) {
          throw new Error(
            "Experimental REPL await is not compatible with targets lower than ES2018"
          )
        }
        // Top-level await was added in TS 3.8
        const tsVersionSupportsTla = versionGteLt(ts.version, "3.8.0")
        if (options.experimentalReplAwait === true && !tsVersionSupportsTla) {
          throw new Error(
            "Experimental REPL await is not compatible with TypeScript versions older than 3.8"
          )
        }
        const shouldReplAwait =
          options.experimentalReplAwait !== false && tsVersionSupportsTla && targetSupportsTla
        // Re-load the compiler in case it has changed.
        // Compiler is loaded relative to tsconfig.json, so tsconfig discovery may cause us to load a
        // different compiler than we did above, even if the name has not changed.
        if (configFilePath) {
          ;({ compiler, ts } = loadCompiler(options.compiler, configFilePath))
        }
        const readFile = options.readFile || ts.sys.readFile
        const fileExists = options.fileExists || ts.sys.fileExists
        // typeCheck can override transpileOnly, useful for CLI flag to override config file
        const transpileOnly = options.transpileOnly === true && options.typeCheck !== true
        const transformers = options.transformers || undefined
        const diagnosticFilters = [
          {
            appliesToAllFiles: true,
            filenamesAbsolute: [],
            diagnosticsIgnored: [6059, 18002, 18003, ...(options.ignoreDiagnostics || [])].map(
              Number
            )
          }
        ]
        const configDiagnosticList = filterDiagnostics(config.errors, diagnosticFilters)
        const outputCache = new Map()
        const configFileDirname = configFilePath ? (0, path_1.dirname)(configFilePath) : null
        const scopeDir =
          (_j =
            (_h =
              (_g = options.scopeDir) !== null && _g !== void 0 ? _g : config.options.rootDir) !==
              null && _h !== void 0
              ? _h
              : configFileDirname) !== null && _j !== void 0
            ? _j
            : cwd
        const ignoreBaseDir =
          configFileDirname !== null && configFileDirname !== void 0 ? configFileDirname : cwd
        const isScoped = options.scope
          ? (fileName) => (0, path_1.relative)(scopeDir, fileName).charAt(0) !== "."
          : () => true
        const shouldIgnore = createIgnore(
          ignoreBaseDir,
          options.skipIgnore
            ? []
            : (options.ignore || ["(?:^|/)node_modules/"]).map((str) => new RegExp(str))
        )
        const diagnosticHost = {
          getNewLine: () => ts.sys.newLine,
          getCurrentDirectory: () => cwd,
          getCanonicalFileName: ts.sys.useCaseSensitiveFileNames ? (x) => x : (x) => x.toLowerCase()
        }
        if (options.transpileOnly && typeof transformers === "function") {
          throw new TypeError('Transformers function is unavailable in "--transpile-only"')
        }
        let customTranspiler = undefined
        if (options.transpiler) {
          if (!transpileOnly)
            throw new Error("Custom transpiler can only be used when transpileOnly is enabled.")
          const transpilerName =
            typeof options.transpiler === "string" ? options.transpiler : options.transpiler[0]
          const transpilerOptions =
            typeof options.transpiler === "string"
              ? {}
              : (_k = options.transpiler[1]) !== null && _k !== void 0
              ? _k
              : {}
          // TODO mimic fixed resolution logic from loadCompiler main
          // TODO refactor into a more generic "resolve dep relative to project" helper
          const transpilerPath = require.resolve(transpilerName, {
            paths: [cwd, __dirname]
          })
          const transpilerFactory = require(transpilerPath).create
          customTranspiler = transpilerFactory(
            Object.assign({ service: { options, config } }, transpilerOptions)
          )
        }
        /**
         * True if require() hooks should interop with experimental ESM loader.
         * Enabled explicitly via a flag since it is a breaking change.
         */
        let experimentalEsmLoader = false
        function enableExperimentalEsmLoaderInterop() {
          experimentalEsmLoader = true
        }
        // Install source map support and read from memory cache.
        installSourceMapSupport()
        function installSourceMapSupport() {
          sourceMapSupport.install({
            environment: "node",
            retrieveFile(pathOrUrl) {
              var _a
              let path = pathOrUrl
              // If it's a file URL, convert to local path
              // Note: fileURLToPath does not exist on early node v10
              // I could not find a way to handle non-URLs except to swallow an error
              if (experimentalEsmLoader && path.startsWith("file://")) {
                try {
                  path = (0, url_1.fileURLToPath)(path)
                } catch (e) {
                  /* swallow error */
                }
              }
              path = (0, util_1.normalizeSlashes)(path)
              return (
                ((_a = outputCache.get(path)) === null || _a === void 0 ? void 0 : _a.content) || ""
              )
            },
            redirectConflictingLibrary: true,
            onConflictingLibraryRedirect(request, parent, isMain, options, redirectedRequest) {
              ;(0, exports.debug)(
                `Redirected an attempt to require source-map-support to instead receive @cspotcode/source-map-support.  "${parent.filename}" attempted to require or resolve "${request}" and was redirected to "${redirectedRequest}".`
              )
            }
          })
        }
        const shouldHavePrettyErrors =
          options.pretty === undefined ? process.stdout.isTTY : options.pretty
        const formatDiagnostics = shouldHavePrettyErrors
          ? ts.formatDiagnosticsWithColorAndContext || ts.formatDiagnostics
          : ts.formatDiagnostics
        function createTSError(diagnostics) {
          const diagnosticText = formatDiagnostics(diagnostics, diagnosticHost)
          const diagnosticCodes = diagnostics.map((x) => x.code)
          return new TSError(diagnosticText, diagnosticCodes)
        }
        function reportTSError(configDiagnosticList) {
          const error = createTSError(configDiagnosticList)
          if (options.logError) {
            // Print error in red color and continue execution.
            console.error("\x1b[31m%s\x1b[0m", error)
          } else {
            // Throw error and exit the script.
            throw error
          }
        }
        // Render the configuration errors.
        if (configDiagnosticList.length) reportTSError(configDiagnosticList)
        /**
         * Get the extension for a transpiled file.
         */
        const getExtension =
          config.options.jsx === ts.JsxEmit.Preserve
            ? (path) => (/\.[tj]sx$/.test(path) ? ".jsx" : ".js")
            : (_) => ".js"
        /**
         * Create the basic required function using transpile mode.
         */
        let getOutput
        let getTypeInfo
        const getCanonicalFileName = ts.createGetCanonicalFileName(ts.sys.useCaseSensitiveFileNames)
        const moduleTypeClassifier = (0, module_type_classifier_1.createModuleTypeClassifier)({
          basePath:
            (_l = options.optionBasePaths) === null || _l === void 0 ? void 0 : _l.moduleTypes,
          patterns: options.moduleTypes
        })
        // Use full language services when the fast option is disabled.
        if (!transpileOnly) {
          const fileContents = new Map()
          const rootFileNames = new Set(config.fileNames)
          const cachedReadFile = (0, util_1.cachedLookup)(debugFn("readFile", readFile))
          // Use language services by default (TODO: invert next major version).
          if (!options.compilerHost) {
            let projectVersion = 1
            const fileVersions = new Map(Array.from(rootFileNames).map((fileName) => [fileName, 0]))
            const getCustomTransformers = () => {
              if (typeof transformers === "function") {
                const program = service.getProgram()
                return program ? transformers(program) : undefined
              }
              return transformers
            }
            // Create the compiler host for type checking.
            const serviceHost = {
              getProjectVersion: () => String(projectVersion),
              getScriptFileNames: () => Array.from(rootFileNames),
              getScriptVersion: (fileName) => {
                const version = fileVersions.get(fileName)
                return version ? version.toString() : ""
              },
              getScriptSnapshot(fileName) {
                // TODO ordering of this with getScriptVersion?  Should they sync up?
                let contents = fileContents.get(fileName)
                // Read contents into TypeScript memory cache.
                if (contents === undefined) {
                  contents = cachedReadFile(fileName)
                  if (contents === undefined) return
                  fileVersions.set(fileName, 1)
                  fileContents.set(fileName, contents)
                  projectVersion++
                }
                return ts.ScriptSnapshot.fromString(contents)
              },
              readFile: cachedReadFile,
              readDirectory: ts.sys.readDirectory,
              getDirectories: (0, util_1.cachedLookup)(
                debugFn("getDirectories", ts.sys.getDirectories)
              ),
              fileExists: (0, util_1.cachedLookup)(debugFn("fileExists", fileExists)),
              directoryExists: (0, util_1.cachedLookup)(
                debugFn("directoryExists", ts.sys.directoryExists)
              ),
              realpath: ts.sys.realpath
                ? (0, util_1.cachedLookup)(debugFn("realpath", ts.sys.realpath))
                : undefined,
              getNewLine: () => ts.sys.newLine,
              useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,
              getCurrentDirectory: () => cwd,
              getCompilationSettings: () => config.options,
              getDefaultLibFileName: () => ts.getDefaultLibFilePath(config.options),
              getCustomTransformers: getCustomTransformers
            }
            const {
              resolveModuleNames,
              getResolvedModuleWithFailedLookupLocationsFromCache,
              resolveTypeReferenceDirectives,
              isFileKnownToBeInternal,
              markBucketOfFilenameInternal
            } = (0, resolver_functions_1.createResolverFunctions)({
              serviceHost,
              getCanonicalFileName,
              ts,
              cwd,
              config,
              configFilePath
            })
            serviceHost.resolveModuleNames = resolveModuleNames
            serviceHost.getResolvedModuleWithFailedLookupLocationsFromCache =
              getResolvedModuleWithFailedLookupLocationsFromCache
            serviceHost.resolveTypeReferenceDirectives = resolveTypeReferenceDirectives
            const registry = ts.createDocumentRegistry(ts.sys.useCaseSensitiveFileNames, cwd)
            const service = ts.createLanguageService(serviceHost, registry)
            const updateMemoryCache = (contents, fileName) => {
              // Add to `rootFiles` as necessary, either to make TS include a file it has not seen,
              // or to trigger a re-classification of files from external to internal.
              if (!rootFileNames.has(fileName) && !isFileKnownToBeInternal(fileName)) {
                markBucketOfFilenameInternal(fileName)
                rootFileNames.add(fileName)
                // Increment project version for every change to rootFileNames.
                projectVersion++
              }
              const previousVersion = fileVersions.get(fileName) || 0
              const previousContents = fileContents.get(fileName)
              // Avoid incrementing cache when nothing has changed.
              if (contents !== previousContents) {
                fileVersions.set(fileName, previousVersion + 1)
                fileContents.set(fileName, contents)
                // Increment project version for every file change.
                projectVersion++
              }
            }
            let previousProgram = undefined
            getOutput = (code, fileName) => {
              updateMemoryCache(code, fileName)
              const programBefore = service.getProgram()
              if (programBefore !== previousProgram) {
                ;(0, exports.debug)(
                  `compiler rebuilt Program instance when getting output for ${fileName}`
                )
              }
              const output = service.getEmitOutput(fileName)
              // Get the relevant diagnostics - this is 3x faster than `getPreEmitDiagnostics`.
              const diagnostics = service
                .getSemanticDiagnostics(fileName)
                .concat(service.getSyntacticDiagnostics(fileName))
              const programAfter = service.getProgram()
              ;(0, exports.debug)(
                "invariant: Is service.getProject() identical before and after getting emit output and diagnostics? (should always be true) ",
                programBefore === programAfter
              )
              previousProgram = programAfter
              const diagnosticList = filterDiagnostics(diagnostics, diagnosticFilters)
              if (diagnosticList.length) reportTSError(diagnosticList)
              if (output.emitSkipped) {
                throw new TypeError(`${(0, path_1.relative)(cwd, fileName)}: Emit skipped`)
              }
              // Throw an error when requiring `.d.ts` files.
              if (output.outputFiles.length === 0) {
                throw new TypeError(
                  `Unable to require file: ${(0, path_1.relative)(cwd, fileName)}\n` +
                    "This is usually the result of a faulty configuration or import. " +
                    "Make sure there is a `.js`, `.json` or other executable extension with " +
                    "loader attached before `ts-node` available."
                )
              }
              return [output.outputFiles[1].text, output.outputFiles[0].text]
            }
            getTypeInfo = (code, fileName, position) => {
              updateMemoryCache(code, fileName)
              const info = service.getQuickInfoAtPosition(fileName, position)
              const name = ts.displayPartsToString(info ? info.displayParts : [])
              const comment = ts.displayPartsToString(info ? info.documentation : [])
              return { name, comment }
            }
          } else {
            const sys = Object.assign(Object.assign(Object.assign({}, ts.sys), diagnosticHost), {
              readFile: (fileName) => {
                const cacheContents = fileContents.get(fileName)
                if (cacheContents !== undefined) return cacheContents
                const contents = cachedReadFile(fileName)
                if (contents) fileContents.set(fileName, contents)
                return contents
              },
              readDirectory: ts.sys.readDirectory,
              getDirectories: (0, util_1.cachedLookup)(
                debugFn("getDirectories", ts.sys.getDirectories)
              ),
              fileExists: (0, util_1.cachedLookup)(debugFn("fileExists", fileExists)),
              directoryExists: (0, util_1.cachedLookup)(
                debugFn("directoryExists", ts.sys.directoryExists)
              ),
              resolvePath: (0, util_1.cachedLookup)(debugFn("resolvePath", ts.sys.resolvePath)),
              realpath: ts.sys.realpath
                ? (0, util_1.cachedLookup)(debugFn("realpath", ts.sys.realpath))
                : undefined
            })
            const host = ts.createIncrementalCompilerHost
              ? ts.createIncrementalCompilerHost(config.options, sys)
              : Object.assign(Object.assign({}, sys), {
                  getSourceFile: (fileName, languageVersion) => {
                    const contents = sys.readFile(fileName)
                    if (contents === undefined) return
                    return ts.createSourceFile(fileName, contents, languageVersion)
                  },
                  getDefaultLibLocation: () =>
                    (0, util_1.normalizeSlashes)((0, path_1.dirname)(compiler)),
                  getDefaultLibFileName: () =>
                    (0, util_1.normalizeSlashes)(
                      (0, path_1.join)(
                        (0, path_1.dirname)(compiler),
                        ts.getDefaultLibFileName(config.options)
                      )
                    ),
                  useCaseSensitiveFileNames: () => sys.useCaseSensitiveFileNames
                })
            const {
              resolveModuleNames,
              resolveTypeReferenceDirectives,
              isFileKnownToBeInternal,
              markBucketOfFilenameInternal
            } = (0, resolver_functions_1.createResolverFunctions)({
              serviceHost: host,
              cwd,
              configFilePath,
              config,
              ts,
              getCanonicalFileName
            })
            host.resolveModuleNames = resolveModuleNames
            host.resolveTypeReferenceDirectives = resolveTypeReferenceDirectives
            // Fallback for older TypeScript releases without incremental API.
            let builderProgram = ts.createIncrementalProgram
              ? ts.createIncrementalProgram({
                  rootNames: Array.from(rootFileNames),
                  options: config.options,
                  host: host,
                  configFileParsingDiagnostics: config.errors,
                  projectReferences: config.projectReferences
                })
              : ts.createEmitAndSemanticDiagnosticsBuilderProgram(
                  Array.from(rootFileNames),
                  config.options,
                  host,
                  undefined,
                  config.errors,
                  config.projectReferences
                )
            // Read and cache custom transformers.
            const customTransformers =
              typeof transformers === "function"
                ? transformers(builderProgram.getProgram())
                : transformers
            // Set the file contents into cache manually.
            const updateMemoryCache = (contents, fileName) => {
              const previousContents = fileContents.get(fileName)
              const contentsChanged = previousContents !== contents
              if (contentsChanged) {
                fileContents.set(fileName, contents)
              }
              // Add to `rootFiles` when discovered by compiler for the first time.
              let addedToRootFileNames = false
              if (!rootFileNames.has(fileName) && !isFileKnownToBeInternal(fileName)) {
                markBucketOfFilenameInternal(fileName)
                rootFileNames.add(fileName)
                addedToRootFileNames = true
              }
              // Update program when file changes.
              if (addedToRootFileNames || contentsChanged) {
                builderProgram = ts.createEmitAndSemanticDiagnosticsBuilderProgram(
                  Array.from(rootFileNames),
                  config.options,
                  host,
                  builderProgram,
                  config.errors,
                  config.projectReferences
                )
              }
            }
            getOutput = (code, fileName) => {
              const output = ["", ""]
              updateMemoryCache(code, fileName)
              const sourceFile = builderProgram.getSourceFile(fileName)
              if (!sourceFile) throw new TypeError(`Unable to read file: ${fileName}`)
              const program = builderProgram.getProgram()
              const diagnostics = ts.getPreEmitDiagnostics(program, sourceFile)
              const diagnosticList = filterDiagnostics(diagnostics, diagnosticFilters)
              if (diagnosticList.length) reportTSError(diagnosticList)
              const result = builderProgram.emit(
                sourceFile,
                (path, file, writeByteOrderMark) => {
                  if (path.endsWith(".map")) {
                    output[1] = file
                  } else {
                    output[0] = file
                  }
                  if (options.emit) sys.writeFile(path, file, writeByteOrderMark)
                },
                undefined,
                undefined,
                customTransformers
              )
              if (result.emitSkipped) {
                throw new TypeError(`${(0, path_1.relative)(cwd, fileName)}: Emit skipped`)
              }
              // Throw an error when requiring files that cannot be compiled.
              if (output[0] === "") {
                if (program.isSourceFileFromExternalLibrary(sourceFile)) {
                  throw new TypeError(
                    `Unable to compile file from external library: ${(0, path_1.relative)(
                      cwd,
                      fileName
                    )}`
                  )
                }
                throw new TypeError(
                  `Unable to require file: ${(0, path_1.relative)(cwd, fileName)}\n` +
                    "This is usually the result of a faulty configuration or import. " +
                    "Make sure there is a `.js`, `.json` or other executable extension with " +
                    "loader attached before `ts-node` available."
                )
              }
              return output
            }
            getTypeInfo = (code, fileName, position) => {
              updateMemoryCache(code, fileName)
              const sourceFile = builderProgram.getSourceFile(fileName)
              if (!sourceFile) throw new TypeError(`Unable to read file: ${fileName}`)
              const node = getTokenAtPosition(ts, sourceFile, position)
              const checker = builderProgram.getProgram().getTypeChecker()
              const symbol = checker.getSymbolAtLocation(node)
              if (!symbol) return { name: "", comment: "" }
              const type = checker.getTypeOfSymbolAtLocation(symbol, node)
              const signatures = [...type.getConstructSignatures(), ...type.getCallSignatures()]
              return {
                name: signatures.length
                  ? signatures.map((x) => checker.signatureToString(x)).join("\n")
                  : checker.typeToString(type),
                comment: ts.displayPartsToString(
                  symbol ? symbol.getDocumentationComment(checker) : []
                )
              }
            }
            // Write `.tsbuildinfo` when `--build` is enabled.
            if (options.emit && config.options.incremental) {
              process.on("exit", () => {
                // Emits `.tsbuildinfo` to filesystem.
                builderProgram.getProgram().emitBuildInfo()
              })
            }
          }
        } else {
          getOutput = createTranspileOnlyGetOutputFunction()
          getTypeInfo = () => {
            throw new TypeError('Type information is unavailable in "--transpile-only"')
          }
        }
        function createTranspileOnlyGetOutputFunction(overrideModuleType) {
          const compilerOptions = Object.assign({}, config.options)
          if (overrideModuleType !== undefined) compilerOptions.module = overrideModuleType
          return (code, fileName) => {
            let result
            if (customTranspiler) {
              result = customTranspiler.transpile(code, {
                fileName
              })
            } else {
              result = ts.transpileModule(code, {
                fileName,
                compilerOptions,
                reportDiagnostics: true,
                transformers: transformers
              })
            }
            const diagnosticList = filterDiagnostics(result.diagnostics || [], diagnosticFilters)
            if (diagnosticList.length) reportTSError(diagnosticList)
            return [result.outputText, result.sourceMapText]
          }
        }
        // When either is undefined, it means normal `getOutput` should be used
        const getOutputForceCommonJS =
          config.options.module === ts.ModuleKind.CommonJS
            ? undefined
            : createTranspileOnlyGetOutputFunction(ts.ModuleKind.CommonJS)
        const getOutputForceESM =
          config.options.module === ts.ModuleKind.ES2015 ||
          config.options.module === ts.ModuleKind.ES2020 ||
          config.options.module === ts.ModuleKind.ESNext
            ? undefined
            : createTranspileOnlyGetOutputFunction(ts.ModuleKind.ES2020 || ts.ModuleKind.ES2015)
        // Create a simple TypeScript compiler proxy.
        function compile(code, fileName, lineOffset = 0) {
          const normalizedFileName = (0, util_1.normalizeSlashes)(fileName)
          const classification = moduleTypeClassifier.classifyModule(normalizedFileName)
          // Must always call normal getOutput to throw typechecking errors
          let [value, sourceMap] = getOutput(code, normalizedFileName)
          // If module classification contradicts the above, call the relevant transpiler
          if (classification.moduleType === "cjs" && getOutputForceCommonJS) {
            ;[value, sourceMap] = getOutputForceCommonJS(code, normalizedFileName)
          } else if (classification.moduleType === "esm" && getOutputForceESM) {
            ;[value, sourceMap] = getOutputForceESM(code, normalizedFileName)
          }
          const output = updateOutput(value, normalizedFileName, sourceMap, getExtension)
          outputCache.set(normalizedFileName, { content: output })
          return output
        }
        let active = true
        const enabled = (enabled) => (enabled === undefined ? active : (active = !!enabled))
        const extensions = getExtensions(config)
        const ignored = (fileName) => {
          if (!active) return true
          const ext = (0, path_1.extname)(fileName)
          if (extensions.tsExtensions.includes(ext) || extensions.jsExtensions.includes(ext)) {
            return !isScoped(fileName) || shouldIgnore(fileName)
          }
          return true
        }
        function addDiagnosticFilter(filter) {
          diagnosticFilters.push(
            Object.assign(Object.assign({}, filter), {
              filenamesAbsolute: filter.filenamesAbsolute.map((f) =>
                (0, util_1.normalizeSlashes)(f)
              )
            })
          )
        }
        return {
          [TS_NODE_SERVICE_BRAND]: true,
          ts,
          config,
          compile,
          getTypeInfo,
          ignored,
          enabled,
          options,
          configFilePath,
          moduleTypeClassifier,
          shouldReplAwait,
          addDiagnosticFilter,
          installSourceMapSupport,
          enableExperimentalEsmLoaderInterop
        }
      }
      exports.create = create
      /**
       * Check if the filename should be ignored.
       */
      function createIgnore(ignoreBaseDir, ignore) {
        return (fileName) => {
          const relname = (0, path_1.relative)(ignoreBaseDir, fileName)
          const path = (0, util_1.normalizeSlashes)(relname)
          return ignore.some((x) => x.test(path))
        }
      }
      /**
       * "Refreshes" an extension on `require.extensions`.
       *
       * @param {string} ext
       */
      function reorderRequireExtension(ext) {
        const old = require.extensions[ext]
        delete require.extensions[ext]
        require.extensions[ext] = old
      }
      /**
       * Register the extensions to support when importing files.
       */
      function registerExtensions(preferTsExts, extensions, service, originalJsHandler) {
        // Register new extensions.
        for (const ext of extensions) {
          registerExtension(ext, service, originalJsHandler)
        }
        if (preferTsExts) {
          const preferredExtensions = new Set([...extensions, ...Object.keys(require.extensions)])
          for (const ext of preferredExtensions) reorderRequireExtension(ext)
        }
      }
      /**
       * Register the extension for node.
       */
      function registerExtension(ext, service, originalHandler) {
        const old = require.extensions[ext] || originalHandler
        require.extensions[ext] = function (m, filename) {
          if (service.ignored(filename)) return old(m, filename)
          assertScriptCanLoadAsCJS(service, m, filename)
          const _compile = m._compile
          m._compile = function (code, fileName) {
            ;(0, exports.debug)("module._compile", fileName)
            const result = service.compile(code, fileName)
            return _compile.call(this, result, fileName)
          }
          return old(m, filename)
        }
      }
      /**
       * Update the output remapping the source map.
       */
      function updateOutput(outputText, fileName, sourceMap, getExtension) {
        const base64Map = Buffer.from(updateSourceMap(sourceMap, fileName), "utf8").toString(
          "base64"
        )
        const sourceMapContent = `//# sourceMappingURL=data:application/json;charset=utf-8;base64,${base64Map}`
        // Expected form: `//# sourceMappingURL=foo bar.js.map` or `//# sourceMappingURL=foo%20bar.js.map` for input file "foo bar.tsx"
        // Percent-encoding behavior added in TS 4.1.1: https://github.com/microsoft/TypeScript/issues/40951
        const prefix = "//# sourceMappingURL="
        const prefixLength = prefix.length
        const baseName = /*foo.tsx*/ (0, path_1.basename)(fileName)
        const extName = /*.tsx*/ (0, path_1.extname)(fileName)
        const extension = /*.js*/ getExtension(fileName)
        const sourcemapFilename = baseName.slice(0, -extName.length) + extension + ".map"
        const sourceMapLengthWithoutPercentEncoding = prefixLength + sourcemapFilename.length
        /*
         * Only rewrite if existing directive exists at the location we expect, to support:
         *   a) compilers that do not append a sourcemap directive
         *   b) situations where we did the math wrong
         *     Not ideal, but appending our sourcemap *after* a pre-existing sourcemap still overrides, so the end-user is happy.
         */
        if (outputText.substr(-sourceMapLengthWithoutPercentEncoding, prefixLength) === prefix) {
          return outputText.slice(0, -sourceMapLengthWithoutPercentEncoding) + sourceMapContent
        }
        // If anyone asks why we're not using URL, the URL equivalent is: `u = new URL('http://d'); u.pathname = "/" + sourcemapFilename; return u.pathname.slice(1);
        const sourceMapLengthWithPercentEncoding =
          prefixLength + encodeURI(sourcemapFilename).length
        if (outputText.substr(-sourceMapLengthWithPercentEncoding, prefixLength) === prefix) {
          return outputText.slice(0, -sourceMapLengthWithPercentEncoding) + sourceMapContent
        }
        return `${outputText}\n${sourceMapContent}`
      }
      /**
       * Update the source map contents for improved output.
       */
      function updateSourceMap(sourceMapText, fileName) {
        const sourceMap = JSON.parse(sourceMapText)
        sourceMap.file = fileName
        sourceMap.sources = [fileName]
        delete sourceMap.sourceRoot
        return JSON.stringify(sourceMap)
      }
      /**
       * Filter diagnostics.
       */
      function filterDiagnostics(diagnostics, filters) {
        return diagnostics.filter((d) =>
          filters.every((f) => {
            var _a
            return (
              (!f.appliesToAllFiles &&
                f.filenamesAbsolute.indexOf(
                  (_a = d.file) === null || _a === void 0 ? void 0 : _a.fileName
                ) === -1) ||
              f.diagnosticsIgnored.indexOf(d.code) === -1
            )
          })
        )
      }
      /**
       * Get token at file position.
       *
       * Reference: https://github.com/microsoft/TypeScript/blob/fcd9334f57d85b73dd66ad2d21c02e84822f4841/src/services/utilities.ts#L705-L731
       */
      function getTokenAtPosition(ts, sourceFile, position) {
        let current = sourceFile
        outer: while (true) {
          for (const child of current.getChildren(sourceFile)) {
            const start = child.getFullStart()
            if (start > position) break
            const end = child.getEnd()
            if (position <= end) {
              current = child
              continue outer
            }
          }
          return current
        }
      }
      /**
       * Create an implementation of node's ESM loader hooks.
       *
       * This may be useful if you
       * want to wrap or compose the loader hooks to add additional functionality or
       * combine with another loader.
       *
       * Node changed the hooks API, so there are two possible APIs.  This function
       * detects your node version and returns the appropriate API.
       */
      const createEsmHooks = (tsNodeService) =>
        __nccwpck_require__(84998).createEsmHooks(tsNodeService)
      exports.createEsmHooks = createEsmHooks
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 23922: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.createModuleTypeClassifier = void 0
      __nccwpck_require__(71017)
      const ts_internals_1 = __nccwpck_require__(14851)
      const util_1 = __nccwpck_require__(64745)
      /**
       * @internal
       * May receive non-normalized options -- basePath and patterns -- and will normalize them
       * internally.
       * However, calls to `classifyModule` must pass pre-normalized paths!
       */
      function createModuleTypeClassifier(options) {
        const { patterns, basePath: _basePath } = options
        const basePath =
          _basePath !== undefined
            ? (0, util_1.normalizeSlashes)(_basePath).replace(/\/$/, "")
            : undefined
        const patternTypePairs = Object.entries(
          patterns !== null && patterns !== void 0 ? patterns : []
        ).map(([_pattern, type]) => {
          const pattern = (0, util_1.normalizeSlashes)(_pattern)
          return { pattern: parsePattern(basePath, pattern), type }
        })
        const classifications = {
          package: {
            moduleType: "package"
          },
          cjs: {
            moduleType: "cjs"
          },
          esm: {
            moduleType: "esm"
          }
        }
        const auto = classifications.package
        // Passed path must be normalized!
        function classifyModuleNonCached(path) {
          const matched = matchPatterns(patternTypePairs, (_) => _.pattern, path)
          if (matched) return classifications[matched.type]
          return auto
        }
        const classifyModule = (0, util_1.cachedLookup)(classifyModuleNonCached)
        function classifyModuleAuto(path) {
          return auto
        }
        return {
          classifyModule: patternTypePairs.length ? classifyModule : classifyModuleAuto
        }
      }
      exports.createModuleTypeClassifier = createModuleTypeClassifier
      function parsePattern(basePath, patternString) {
        const pattern = (0, ts_internals_1.getPatternFromSpec)(patternString, basePath)
        return pattern !== undefined ? new RegExp(pattern) : /(?:)/
      }
      function matchPatterns(objects, getPattern, candidate) {
        for (let i = objects.length - 1; i >= 0; i--) {
          const object = objects[i]
          const pattern = getPattern(object)
          if (pattern === null || pattern === void 0 ? void 0 : pattern.test(candidate)) {
            return object
          }
        }
      }
      //# sourceMappingURL=module-type-classifier.js.map

      /***/
    },

    /***/ 10204: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __awaiter =
        (this && this.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value)
                })
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value))
              } catch (e) {
                reject(e)
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value))
              } catch (e) {
                reject(e)
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected)
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next())
          })
        }
      var __rest =
        (this && this.__rest) ||
        function (s, e) {
          var t = {}
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p]
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]]
            }
          return t
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.setupContext =
        exports.createEvalAwarePartialHost =
        exports.EvalState =
        exports.createRepl =
        exports.REPL_NAME =
        exports.REPL_FILENAME =
        exports.STDIN_NAME =
        exports.STDIN_FILENAME =
        exports.EVAL_NAME =
        exports.EVAL_FILENAME =
          void 0
      const diff_1 = __nccwpck_require__(71672)
      const os_1 = __nccwpck_require__(22037)
      const path_1 = __nccwpck_require__(71017)
      const repl_1 = __nccwpck_require__(38102)
      const vm_1 = __nccwpck_require__(26144)
      const index_1 = __nccwpck_require__(72719)
      const fs_1 = __nccwpck_require__(57147)
      const console_1 = __nccwpck_require__(96206)
      const assert = __nccwpck_require__(39491)
      const module_1 = __nccwpck_require__(98188)
      // Lazy-loaded.
      let _processTopLevelAwait
      function getProcessTopLevelAwait() {
        if (_processTopLevelAwait === undefined) {
          ;({ processTopLevelAwait: _processTopLevelAwait } = __nccwpck_require__(13374))
        }
        return _processTopLevelAwait
      }
      /** @internal */
      exports.EVAL_FILENAME = `[eval].ts`
      /** @internal */
      exports.EVAL_NAME = `[eval]`
      /** @internal */
      exports.STDIN_FILENAME = `[stdin].ts`
      /** @internal */
      exports.STDIN_NAME = `[stdin]`
      /** @internal */
      exports.REPL_FILENAME = "<repl>.ts"
      /** @internal */
      exports.REPL_NAME = "<repl>"
      /**
       * Create a ts-node REPL instance.
       *
       * Pay close attention to the example below.  Today, the API requires a few lines
       * of boilerplate to correctly bind the `ReplService` to the ts-node `Service` and
       * vice-versa.
       *
       * Usage example:
       *
       *     const repl = tsNode.createRepl();
       *     const service = tsNode.create({...repl.evalAwarePartialHost});
       *     repl.setService(service);
       *     repl.start();
       */
      function createRepl(options = {}) {
        var _a, _b, _c, _d, _e
        const { ignoreDiagnosticsThatAreAnnoyingInInteractiveRepl = true } = options
        let service = options.service
        let nodeReplServer
        // If `useGlobal` is not true, then REPL creates a context when started.
        // This stores a reference to it or to `global`, whichever is used, after REPL has started.
        let context
        const state =
          (_a = options.state) !== null && _a !== void 0
            ? _a
            : new EvalState((0, path_1.join)(process.cwd(), exports.REPL_FILENAME))
        const evalAwarePartialHost = createEvalAwarePartialHost(
          state,
          options.composeWithEvalAwarePartialHost
        )
        const stdin = (_b = options.stdin) !== null && _b !== void 0 ? _b : process.stdin
        const stdout = (_c = options.stdout) !== null && _c !== void 0 ? _c : process.stdout
        const stderr = (_d = options.stderr) !== null && _d !== void 0 ? _d : process.stderr
        const _console =
          stdout === process.stdout && stderr === process.stderr
            ? console
            : new console_1.Console(stdout, stderr)
        const replService = {
          state:
            (_e = options.state) !== null && _e !== void 0
              ? _e
              : new EvalState((0, path_1.join)(process.cwd(), exports.EVAL_FILENAME)),
          setService,
          evalCode,
          evalCodeInternal,
          nodeEval,
          evalAwarePartialHost,
          start,
          startInternal,
          stdin,
          stdout,
          stderr,
          console: _console
        }
        return replService
        function setService(_service) {
          service = _service
          if (ignoreDiagnosticsThatAreAnnoyingInInteractiveRepl) {
            service.addDiagnosticFilter({
              appliesToAllFiles: false,
              filenamesAbsolute: [state.path],
              diagnosticsIgnored: [
                2393,
                6133,
                7027,
                ...(service.shouldReplAwait ? topLevelAwaitDiagnosticCodes : [])
              ]
            })
          }
        }
        function evalCode(code) {
          const result = appendCompileAndEvalInput({
            service: service,
            state,
            input: code,
            context
          })
          assert(result.containsTopLevelAwait === false)
          return result.value
        }
        function evalCodeInternal(options) {
          const { code, enableTopLevelAwait, context } = options
          return appendCompileAndEvalInput({
            service: service,
            state,
            input: code,
            enableTopLevelAwait,
            context
          })
        }
        function nodeEval(code, context, _filename, callback) {
          // TODO: Figure out how to handle completion here.
          if (code === ".scope") {
            callback(null)
            return
          }
          try {
            const evalResult = evalCodeInternal({
              code,
              enableTopLevelAwait: true,
              context
            })
            if (evalResult.containsTopLevelAwait) {
              ;(() =>
                __awaiter(this, void 0, void 0, function* () {
                  try {
                    callback(null, yield evalResult.valuePromise)
                  } catch (promiseError) {
                    handleError(promiseError)
                  }
                }))()
            } else {
              callback(null, evalResult.value)
            }
          } catch (error) {
            handleError(error)
          }
          // Log TSErrors, check if they're recoverable, log helpful hints for certain
          // well-known errors, and invoke `callback()`
          // TODO should evalCode API get the same error-handling benefits?
          function handleError(error) {
            var _a, _b
            // Don't show TLA hint if the user explicitly disabled repl top level await
            const canLogTopLevelAwaitHint =
              service.options.experimentalReplAwait !== false && !service.shouldReplAwait
            if (error instanceof index_1.TSError) {
              // Support recoverable compilations using >= node 6.
              if (repl_1.Recoverable && isRecoverable(error)) {
                callback(new repl_1.Recoverable(error))
                return
              } else {
                _console.error(error)
                if (
                  canLogTopLevelAwaitHint &&
                  error.diagnosticCodes.some((dC) => topLevelAwaitDiagnosticCodes.includes(dC))
                ) {
                  _console.error(getTopLevelAwaitHint())
                }
                callback(null)
              }
            } else {
              let _error = error
              if (
                canLogTopLevelAwaitHint &&
                _error instanceof SyntaxError &&
                ((_a = _error.message) === null || _a === void 0
                  ? void 0
                  : _a.includes("await is only valid"))
              ) {
                try {
                  // Only way I know to make our hint appear after the error
                  _error.message += `\n\n${getTopLevelAwaitHint()}`
                  _error.stack =
                    (_b = _error.stack) === null || _b === void 0
                      ? void 0
                      : _b.replace(
                          /(SyntaxError:.*)/,
                          (_, $1) => `${$1}\n\n${getTopLevelAwaitHint()}`
                        )
                } catch (_c) {}
              }
              callback(_error)
            }
          }
          function getTopLevelAwaitHint() {
            return `Hint: REPL top-level await requires TypeScript version 3.8 or higher and target ES2018 or higher. You are using TypeScript ${
              service.ts.version
            } and target ${service.ts.ScriptTarget[service.config.options.target]}.`
          }
        }
        // Note: `code` argument is deprecated
        function start(code) {
          startInternal({ code })
        }
        // Note: `code` argument is deprecated
        function startInternal(options) {
          const _a = options !== null && options !== void 0 ? options : {},
            { code, forceToBeModule = true } = _a,
            optionsOverride = __rest(_a, ["code", "forceToBeModule"])
          // TODO assert that `service` is set; remove all `service!` non-null assertions
          // Eval incoming code before the REPL starts.
          // Note: deprecated
          if (code) {
            try {
              evalCode(`${code}\n`)
            } catch (err) {
              _console.error(err)
              // Note: should not be killing the process here, but this codepath is deprecated anyway
              process.exit(1)
            }
          }
          const repl = (0, repl_1.start)(
            Object.assign(
              {
                prompt: "> ",
                input: replService.stdin,
                output: replService.stdout,
                // Mimicking node's REPL implementation: https://github.com/nodejs/node/blob/168b22ba073ee1cbf8d0bcb4ded7ff3099335d04/lib/internal/repl.js#L28-L30
                terminal: stdout.isTTY && !parseInt(index_1.env.NODE_NO_READLINE, 10),
                eval: nodeEval,
                useGlobal: true
              },
              optionsOverride
            )
          )
          nodeReplServer = repl
          context = repl.context
          // Bookmark the point where we should reset the REPL state.
          const resetEval = appendToEvalState(state, "")
          function reset() {
            resetEval()
            // Hard fix for TypeScript forcing `Object.defineProperty(exports, ...)`.
            runInContext("exports = module.exports", state.path, context)
            if (forceToBeModule) {
              state.input += "export {};void 0;\n"
            }
            // Declare node builtins.
            // Skip the same builtins as `addBuiltinLibsToObject`:
            //   those starting with _
            //   those containing /
            //   those that already exist as globals
            // Intentionally suppress type errors in case @types/node does not declare any of them.
            state.input += `// @ts-ignore\n${module_1.builtinModules
              .filter(
                (name) =>
                  !name.startsWith("_") &&
                  !name.includes("/") &&
                  !["console", "module", "process"].includes(name)
              )
              .map((name) => `declare import ${name} = require('${name}')`)
              .join(";")}\n`
          }
          reset()
          repl.on("reset", reset)
          repl.defineCommand("type", {
            help: "Check the type of a TypeScript identifier",
            action: function (identifier) {
              if (!identifier) {
                repl.displayPrompt()
                return
              }
              const undo = appendToEvalState(state, identifier)
              const { name, comment } = service.getTypeInfo(
                state.input,
                state.path,
                state.input.length
              )
              undo()
              if (name) repl.outputStream.write(`${name}\n`)
              if (comment) repl.outputStream.write(`${comment}\n`)
              repl.displayPrompt()
            }
          })
          // Set up REPL history when available natively via node.js >= 11.
          if (repl.setupHistory) {
            const historyPath =
              index_1.env.TS_NODE_HISTORY ||
              (0, path_1.join)((0, os_1.homedir)(), ".ts_node_repl_history")
            repl.setupHistory(historyPath, (err) => {
              if (!err) return
              _console.error(err)
              process.exit(1)
            })
          }
          return repl
        }
      }
      exports.createRepl = createRepl
      /**
       * Eval state management. Stores virtual `[eval].ts` file
       */
      class EvalState {
        constructor(path) {
          this.path = path
          /** @internal */
          this.input = ""
          /** @internal */
          this.output = ""
          /** @internal */
          this.version = 0
          /** @internal */
          this.lines = 0
        }
      }
      exports.EvalState = EvalState
      function createEvalAwarePartialHost(state, composeWith) {
        function readFile(path) {
          if (path === state.path) return state.input
          if (composeWith === null || composeWith === void 0 ? void 0 : composeWith.readFile)
            return composeWith.readFile(path)
          try {
            return (0, fs_1.readFileSync)(path, "utf8")
          } catch (err) {
            /* Ignore. */
          }
        }
        function fileExists(path) {
          if (path === state.path) return true
          if (composeWith === null || composeWith === void 0 ? void 0 : composeWith.fileExists)
            return composeWith.fileExists(path)
          try {
            const stats = (0, fs_1.statSync)(path)
            return stats.isFile() || stats.isFIFO()
          } catch (err) {
            return false
          }
        }
        return { readFile, fileExists }
      }
      exports.createEvalAwarePartialHost = createEvalAwarePartialHost
      /**
       * Evaluate the code snippet.
       *
       * Append it to virtual .ts file, compile, handle compiler errors, compute a diff of the JS, and eval any code that
       * appears as "added" in the diff.
       */
      function appendCompileAndEvalInput(options) {
        const { service, state, input, enableTopLevelAwait = false, context } = options
        const lines = state.lines
        const isCompletion = !/\n$/.test(input)
        const undo = appendToEvalState(state, input)
        let output
        // Based on https://github.com/nodejs/node/blob/92573721c7cff104ccb82b6ed3e8aa69c4b27510/lib/repl.js#L457-L461
        function adjustUseStrict(code) {
          // "void 0" keeps the repl from returning "use strict" as the result
          // value for statements and declarations that don't return a value.
          return code.replace(/^"use strict";/, '"use strict"; void 0;')
        }
        try {
          output = service.compile(state.input, state.path, -lines)
        } catch (err) {
          undo()
          throw err
        }
        output = adjustUseStrict(output)
        // Use `diff` to check for new JavaScript to execute.
        const changes = (0, diff_1.diffLines)(state.output, output)
        if (isCompletion) {
          undo()
        } else {
          state.output = output
          // Insert a semicolon to make sure that the code doesn't interact with the next line,
          // for example to prevent `2\n+ 2` from producing 4.
          // This is safe since the output will not change since we can only get here with successful inputs,
          // and adding a semicolon to the end of a successful input won't ever change the output.
          state.input = state.input.replace(/([^\n\s])([\n\s]*)$/, (all, lastChar, whitespace) => {
            if (lastChar !== ";") return `${lastChar};${whitespace}`
            return all
          })
        }
        let commands = []
        let containsTopLevelAwait = false
        // Build a list of "commands": bits of JS code in the diff that must be executed.
        for (const change of changes) {
          if (change.added) {
            if (
              enableTopLevelAwait &&
              service.shouldReplAwait &&
              change.value.indexOf("await") > -1
            ) {
              const processTopLevelAwait = getProcessTopLevelAwait()
              // Newline prevents comments to mess with wrapper
              const wrappedResult = processTopLevelAwait(change.value + "\n")
              if (wrappedResult !== null) {
                containsTopLevelAwait = true
                commands.push({
                  mustAwait: true,
                  execCommand: () => runInContext(wrappedResult, state.path, context)
                })
                continue
              }
            }
            commands.push({
              execCommand: () => runInContext(change.value, state.path, context)
            })
          }
        }
        // Execute all commands asynchronously if necessary, returning the result or a
        // promise of the result.
        if (containsTopLevelAwait) {
          return {
            containsTopLevelAwait,
            valuePromise: (() =>
              __awaiter(this, void 0, void 0, function* () {
                let value
                for (const command of commands) {
                  const r = command.execCommand()
                  value = command.mustAwait ? yield r : r
                }
                return value
              }))()
          }
        } else {
          return {
            containsTopLevelAwait: false,
            value: commands.reduce((_, c) => c.execCommand(), undefined)
          }
        }
      }
      /**
       * Low-level execution of JS code in context
       */
      function runInContext(code, filename, context) {
        const script = new vm_1.Script(code, { filename })
        if (context === undefined || context === global) {
          return script.runInThisContext()
        } else {
          return script.runInContext(context)
        }
      }
      /**
       * Append to the eval instance and return an undo function.
       */
      function appendToEvalState(state, input) {
        const undoInput = state.input
        const undoVersion = state.version
        const undoOutput = state.output
        const undoLines = state.lines
        state.input += input
        state.lines += lineCount(input)
        state.version++
        return function () {
          state.input = undoInput
          state.output = undoOutput
          state.version = undoVersion
          state.lines = undoLines
        }
      }
      /**
       * Count the number of lines.
       */
      function lineCount(value) {
        let count = 0
        for (const char of value) {
          if (char === "\n") {
            count++
          }
        }
        return count
      }
      /**
       * TS diagnostic codes which are recoverable, meaning that the user likely entered and incomplete line of code
       * and should be prompted for the next.  For example, starting a multi-line for() loop and not finishing it.
       */
      const RECOVERY_CODES = new Set([
        1003,
        1005,
        1109,
        1126,
        1160,
        1161,
        2355 // "A function whose declared type is neither 'void' nor 'any' must return a value."
      ])
      /**
       * Diagnostic codes raised when using top-level await.
       * These are suppressed when top-level await is enabled.
       * When it is *not* enabled, these trigger a helpful hint about enabling top-level await.
       */
      const topLevelAwaitDiagnosticCodes = [
        1375,
        1378,
        1431,
        1432 // Top-level 'for await' loops are only allowed when the 'module' option is set to 'esnext' or 'system', and the 'target' option is set to 'es2017' or higher.
      ]
      /**
       * Check if a function can recover gracefully.
       */
      function isRecoverable(error) {
        return error.diagnosticCodes.every((code) => RECOVERY_CODES.has(code))
      }
      /**
       * @internal
       * Set properties on `context` before eval-ing [stdin] or [eval] input.
       */
      function setupContext(context, module, filenameAndDirname) {
        if (filenameAndDirname) {
          context.__dirname = "."
          context.__filename = `[${filenameAndDirname}]`
        }
        context.module = module
        context.exports = module.exports
        context.require = __nccwpck_require__(3833).bind(module)
      }
      exports.setupContext = setupContext
      //# sourceMappingURL=repl.js.map

      /***/
    },

    /***/ 19148: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.createResolverFunctions = void 0
      const path_1 = __nccwpck_require__(71017)
      /**
       * @internal
       * In a factory because these are shared across both CompilerHost and LanguageService codepaths
       */
      function createResolverFunctions(kwargs) {
        const { serviceHost, ts, config, cwd, getCanonicalFileName, configFilePath } = kwargs
        const moduleResolutionCache = ts.createModuleResolutionCache(
          cwd,
          getCanonicalFileName,
          config.options
        )
        const knownInternalFilenames = new Set()
        /** "Buckets" (module directories) whose contents should be marked "internal" */
        const internalBuckets = new Set()
        // Get bucket for a source filename.  Bucket is the containing `./node_modules/*/` directory
        // For '/project/node_modules/foo/node_modules/bar/lib/index.js' bucket is '/project/node_modules/foo/node_modules/bar/'
        // For '/project/node_modules/foo/node_modules/@scope/bar/lib/index.js' bucket is '/project/node_modules/foo/node_modules/@scope/bar/'
        const moduleBucketRe = /.*\/node_modules\/(?:@[^\/]+\/)?[^\/]+\//
        function getModuleBucket(filename) {
          const find = moduleBucketRe.exec(filename)
          if (find) return find[0]
          return ""
        }
        // Mark that this file and all siblings in its bucket should be "internal"
        function markBucketOfFilenameInternal(filename) {
          internalBuckets.add(getModuleBucket(filename))
        }
        function isFileInInternalBucket(filename) {
          return internalBuckets.has(getModuleBucket(filename))
        }
        function isFileKnownToBeInternal(filename) {
          return knownInternalFilenames.has(filename)
        }
        /**
         * If we need to emit JS for a file, force TS to consider it non-external
         */
        const fixupResolvedModule = (resolvedModule) => {
          const { resolvedFileName } = resolvedModule
          if (resolvedFileName === undefined) return
          // .ts is always switched to internal
          // .js is switched on-demand
          if (
            resolvedModule.isExternalLibraryImport &&
            ((resolvedFileName.endsWith(".ts") && !resolvedFileName.endsWith(".d.ts")) ||
              isFileKnownToBeInternal(resolvedFileName) ||
              isFileInInternalBucket(resolvedFileName))
          ) {
            resolvedModule.isExternalLibraryImport = false
          }
          if (!resolvedModule.isExternalLibraryImport) {
            knownInternalFilenames.add(resolvedFileName)
          }
        }
        /*
         * NOTE:
         * Older ts versions do not pass `redirectedReference` nor `options`.
         * We must pass `redirectedReference` to newer ts versions, but cannot rely on `options`, hence the weird argument name
         */
        const resolveModuleNames = (
          moduleNames,
          containingFile,
          reusedNames,
          redirectedReference,
          optionsOnlyWithNewerTsVersions
        ) => {
          return moduleNames.map((moduleName) => {
            const { resolvedModule } = ts.resolveModuleName(
              moduleName,
              containingFile,
              config.options,
              serviceHost,
              moduleResolutionCache,
              redirectedReference
            )
            if (resolvedModule) {
              fixupResolvedModule(resolvedModule)
            }
            return resolvedModule
          })
        }
        // language service never calls this, but TS docs recommend that we implement it
        const getResolvedModuleWithFailedLookupLocationsFromCache = (
          moduleName,
          containingFile
        ) => {
          const ret = ts.resolveModuleNameFromCache(
            moduleName,
            containingFile,
            moduleResolutionCache
          )
          if (ret && ret.resolvedModule) {
            fixupResolvedModule(ret.resolvedModule)
          }
          return ret
        }
        const resolveTypeReferenceDirectives = (
          typeDirectiveNames,
          containingFile,
          redirectedReference,
          options
        ) => {
          // Note: seems to be called with empty typeDirectiveNames array for all files.
          return typeDirectiveNames.map((typeDirectiveName) => {
            let { resolvedTypeReferenceDirective } = ts.resolveTypeReferenceDirective(
              typeDirectiveName,
              containingFile,
              config.options,
              serviceHost,
              redirectedReference
            )
            if (typeDirectiveName === "node" && !resolvedTypeReferenceDirective) {
              // Resolve @types/node relative to project first, then __dirname (copy logic from elsewhere / refactor into reusable function)
              let typesNodePackageJsonPath
              try {
                typesNodePackageJsonPath = require.resolve("@types/node/package.json", {
                  paths: [
                    configFilePath !== null && configFilePath !== void 0 ? configFilePath : cwd,
                    __dirname
                  ]
                })
              } catch (_a) {} // gracefully do nothing when @types/node is not installed for any reason
              if (typesNodePackageJsonPath) {
                const typeRoots = [(0, path_1.resolve)(typesNodePackageJsonPath, "../..")]
                ;({ resolvedTypeReferenceDirective } = ts.resolveTypeReferenceDirective(
                  typeDirectiveName,
                  containingFile,
                  Object.assign(Object.assign({}, config.options), { typeRoots }),
                  serviceHost,
                  redirectedReference
                ))
              }
            }
            if (resolvedTypeReferenceDirective) {
              fixupResolvedModule(resolvedTypeReferenceDirective)
            }
            return resolvedTypeReferenceDirective
          })
        }
        return {
          resolveModuleNames,
          getResolvedModuleWithFailedLookupLocationsFromCache,
          resolveTypeReferenceDirectives,
          isFileKnownToBeInternal,
          markBucketOfFilenameInternal
        }
      }
      exports.createResolverFunctions = createResolverFunctions
      //# sourceMappingURL=resolver-functions.js.map

      /***/
    },

    /***/ 14851: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getPatternFromSpec = exports.createTsInternals = void 0
      const path_1 = __nccwpck_require__(71017)
      const util_1 = __nccwpck_require__(64745)
      /** @internal */
      exports.createTsInternals = (0, util_1.cachedLookup)(createTsInternalsUncached)
      /**
       * Given a reference to the TS compiler, return some TS internal functions that we
       * could not or did not want to grab off the `ts` object.
       * These have been copy-pasted from TS's source and tweaked as necessary.
       *
       * NOTE: This factory returns *only* functions which need a reference to the TS
       * compiler.  Other functions do not need a reference to the TS compiler so are
       * exported directly from this file.
       */
      function createTsInternalsUncached(_ts) {
        const ts = _ts
        /**
         * Copied from:
         * https://github.com/microsoft/TypeScript/blob/v4.3.2/src/compiler/commandLineParser.ts#L2821-L2846
         */
        function getExtendsConfigPath(extendedConfig, host, basePath, errors, createDiagnostic) {
          extendedConfig = (0, util_1.normalizeSlashes)(extendedConfig)
          if (
            isRootedDiskPath(extendedConfig) ||
            startsWith(extendedConfig, "./") ||
            startsWith(extendedConfig, "../")
          ) {
            let extendedConfigPath = getNormalizedAbsolutePath(extendedConfig, basePath)
            if (
              !host.fileExists(extendedConfigPath) &&
              !endsWith(extendedConfigPath, ts.Extension.Json)
            ) {
              extendedConfigPath = `${extendedConfigPath}.json`
              if (!host.fileExists(extendedConfigPath)) {
                errors.push(createDiagnostic(ts.Diagnostics.File_0_not_found, extendedConfig))
                return undefined
              }
            }
            return extendedConfigPath
          }
          // If the path isn't a rooted or relative path, resolve like a module
          const resolved = ts.nodeModuleNameResolver(
            extendedConfig,
            combinePaths(basePath, "tsconfig.json"),
            { moduleResolution: ts.ModuleResolutionKind.NodeJs },
            host,
            /*cache*/ undefined,
            /*projectRefs*/ undefined,
            /*lookupConfig*/ true
          )
          if (resolved.resolvedModule) {
            return resolved.resolvedModule.resolvedFileName
          }
          errors.push(createDiagnostic(ts.Diagnostics.File_0_not_found, extendedConfig))
          return undefined
        }
        return { getExtendsConfigPath }
      }
      // These functions have alternative implementation to avoid copying too much from TS
      function isRootedDiskPath(path) {
        return (0, path_1.isAbsolute)(path)
      }
      function combinePaths(path, ...paths) {
        return (0, util_1.normalizeSlashes)(
          (0, path_1.resolve)(path, ...paths.filter((path) => path))
        )
      }
      function getNormalizedAbsolutePath(fileName, currentDirectory) {
        return (0, util_1.normalizeSlashes)(
          currentDirectory != null
            ? (0, path_1.resolve)(currentDirectory, fileName)
            : (0, path_1.resolve)(fileName)
        )
      }
      function startsWith(str, prefix) {
        return str.lastIndexOf(prefix, 0) === 0
      }
      function endsWith(str, suffix) {
        const expectedPos = str.length - suffix.length
        return expectedPos >= 0 && str.indexOf(suffix, expectedPos) === expectedPos
      }
      // Reserved characters, forces escaping of any non-word (or digit), non-whitespace character.
      // It may be inefficient (we could just match (/[-[\]{}()*+?.,\\^$|#\s]/g), but this is future
      // proof.
      const reservedCharacterPattern = /[^\w\s\/]/g
      /**
       * @internal
       * See also: getRegularExpressionForWildcard, which seems to do almost the same thing
       */
      function getPatternFromSpec(spec, basePath) {
        const pattern = spec && getSubPatternFromSpec(spec, basePath, excludeMatcher)
        return pattern && `^(${pattern})${"($|/)"}`
      }
      exports.getPatternFromSpec = getPatternFromSpec
      function getSubPatternFromSpec(
        spec,
        basePath,
        { singleAsteriskRegexFragment, doubleAsteriskRegexFragment, replaceWildcardCharacter }
      ) {
        let subpattern = ""
        let hasWrittenComponent = false
        const components = getNormalizedPathComponents(spec, basePath)
        const lastComponent = last(components)
        // getNormalizedPathComponents includes the separator for the root component.
        // We need to remove to create our regex correctly.
        components[0] = removeTrailingDirectorySeparator(components[0])
        if (isImplicitGlob(lastComponent)) {
          components.push("**", "*")
        }
        let optionalCount = 0
        for (let component of components) {
          if (component === "**") {
            subpattern += doubleAsteriskRegexFragment
          } else {
            if (hasWrittenComponent) {
              subpattern += directorySeparator
            }
            subpattern += component.replace(reservedCharacterPattern, replaceWildcardCharacter)
          }
          hasWrittenComponent = true
        }
        while (optionalCount > 0) {
          subpattern += ")?"
          optionalCount--
        }
        return subpattern
      }
      const directoriesMatcher = {
        singleAsteriskRegexFragment: "[^/]*",
        /**
         * Regex for the ** wildcard. Matches any num of subdirectories. When used for including
         * files or directories, does not match subdirectories that start with a . character
         */
        doubleAsteriskRegexFragment: `(/[^/.][^/]*)*?`,
        replaceWildcardCharacter: (match) =>
          replaceWildcardCharacter(match, directoriesMatcher.singleAsteriskRegexFragment)
      }
      const excludeMatcher = {
        singleAsteriskRegexFragment: "[^/]*",
        doubleAsteriskRegexFragment: "(/.+?)?",
        replaceWildcardCharacter: (match) =>
          replaceWildcardCharacter(match, excludeMatcher.singleAsteriskRegexFragment)
      }
      function getNormalizedPathComponents(path, currentDirectory) {
        return reducePathComponents(getPathComponents(path, currentDirectory))
      }
      function getPathComponents(path, currentDirectory = "") {
        path = combinePaths(currentDirectory, path)
        return pathComponents(path, getRootLength(path))
      }
      function reducePathComponents(components) {
        if (!some(components)) return []
        const reduced = [components[0]]
        for (let i = 1; i < components.length; i++) {
          const component = components[i]
          if (!component) continue
          if (component === ".") continue
          if (component === "..") {
            if (reduced.length > 1) {
              if (reduced[reduced.length - 1] !== "..") {
                reduced.pop()
                continue
              }
            } else if (reduced[0]) continue
          }
          reduced.push(component)
        }
        return reduced
      }
      function getRootLength(path) {
        const rootLength = getEncodedRootLength(path)
        return rootLength < 0 ? ~rootLength : rootLength
      }
      function getEncodedRootLength(path) {
        if (!path) return 0
        const ch0 = path.charCodeAt(0)
        // POSIX or UNC
        if (ch0 === 47 /* slash */ || ch0 === 92 /* backslash */) {
          if (path.charCodeAt(1) !== ch0) return 1 // POSIX: "/" (or non-normalized "\")
          const p1 = path.indexOf(
            ch0 === 47 /* slash */ ? directorySeparator : altDirectorySeparator,
            2
          )
          if (p1 < 0) return path.length // UNC: "//server" or "\\server"
          return p1 + 1 // UNC: "//server/" or "\\server\"
        }
        // DOS
        if (isVolumeCharacter(ch0) && path.charCodeAt(1) === 58 /* colon */) {
          const ch2 = path.charCodeAt(2)
          if (ch2 === 47 /* slash */ || ch2 === 92 /* backslash */) return 3 // DOS: "c:/" or "c:\"
          if (path.length === 2) return 2 // DOS: "c:" (but not "c:d")
        }
        // URL
        const schemeEnd = path.indexOf(urlSchemeSeparator)
        if (schemeEnd !== -1) {
          const authorityStart = schemeEnd + urlSchemeSeparator.length
          const authorityEnd = path.indexOf(directorySeparator, authorityStart)
          if (authorityEnd !== -1) {
            // URL: "file:///", "file://server/", "file://server/path"
            // For local "file" URLs, include the leading DOS volume (if present).
            // Per https://www.ietf.org/rfc/rfc1738.txt, a host of "" or "localhost" is a
            // special case interpreted as "the machine from which the URL is being interpreted".
            const scheme = path.slice(0, schemeEnd)
            const authority = path.slice(authorityStart, authorityEnd)
            if (
              scheme === "file" &&
              (authority === "" || authority === "localhost") &&
              isVolumeCharacter(path.charCodeAt(authorityEnd + 1))
            ) {
              const volumeSeparatorEnd = getFileUrlVolumeSeparatorEnd(path, authorityEnd + 2)
              if (volumeSeparatorEnd !== -1) {
                if (path.charCodeAt(volumeSeparatorEnd) === 47 /* slash */) {
                  // URL: "file:///c:/", "file://localhost/c:/", "file:///c%3a/", "file://localhost/c%3a/"
                  return ~(volumeSeparatorEnd + 1)
                }
                if (volumeSeparatorEnd === path.length) {
                  // URL: "file:///c:", "file://localhost/c:", "file:///c$3a", "file://localhost/c%3a"
                  // but not "file:///c:d" or "file:///c%3ad"
                  return ~volumeSeparatorEnd
                }
              }
            }
            return ~(authorityEnd + 1) // URL: "file://server/", "http://server/"
          }
          return ~path.length // URL: "file://server", "http://server"
        }
        // relative
        return 0
      }
      function ensureTrailingDirectorySeparator(path) {
        if (!hasTrailingDirectorySeparator(path)) {
          return path + directorySeparator
        }
        return path
      }
      function hasTrailingDirectorySeparator(path) {
        return path.length > 0 && isAnyDirectorySeparator(path.charCodeAt(path.length - 1))
      }
      function isAnyDirectorySeparator(charCode) {
        return charCode === 47 /* slash */ || charCode === 92 /* backslash */
      }
      function removeTrailingDirectorySeparator(path) {
        if (hasTrailingDirectorySeparator(path)) {
          return path.substr(0, path.length - 1)
        }
        return path
      }
      const directorySeparator = "/"
      const altDirectorySeparator = "\\"
      const urlSchemeSeparator = "://"
      function isVolumeCharacter(charCode) {
        return (
          (charCode >= 97 /* a */ && charCode <= 122) /* z */ ||
          (charCode >= 65 /* A */ && charCode <= 90) /* Z */
        )
      }
      function getFileUrlVolumeSeparatorEnd(url, start) {
        const ch0 = url.charCodeAt(start)
        if (ch0 === 58 /* colon */) return start + 1
        if (ch0 === 37 /* percent */ && url.charCodeAt(start + 1) === 51 /* _3 */) {
          const ch2 = url.charCodeAt(start + 2)
          if (ch2 === 97 /* a */ || ch2 === 65 /* A */) return start + 3
        }
        return -1
      }
      function some(array, predicate) {
        if (array) {
          if (predicate) {
            for (const v of array) {
              if (predicate(v)) {
                return true
              }
            }
          } else {
            return array.length > 0
          }
        }
        return false
      }
      function pathComponents(path, rootLength) {
        const root = path.substring(0, rootLength)
        const rest = path.substring(rootLength).split(directorySeparator)
        if (rest.length && !lastOrUndefined(rest)) rest.pop()
        return [root, ...rest]
      }
      function lastOrUndefined(array) {
        return array.length === 0 ? undefined : array[array.length - 1]
      }
      function last(array) {
        // Debug.assert(array.length !== 0);
        return array[array.length - 1]
      }
      function replaceWildcardCharacter(match, singleAsteriskRegexFragment) {
        return match === "*" ? singleAsteriskRegexFragment : match === "?" ? "[^/]" : "\\" + match
      }
      /**
       * An "includes" path "foo" is implicitly a glob "foo/** /*" (without the space) if its last component has no extension,
       * and does not contain any glob characters itself.
       */
      function isImplicitGlob(lastPathComponent) {
        return !/[.*?]/.test(lastPathComponent)
      }
      //# sourceMappingURL=ts-internals.js.map

      /***/
    },

    /***/ 91533: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getDefaultTsconfigJsonForNodeVersion = void 0
      const nodeMajor = parseInt(process.versions.node.split(".")[0], 10)
      /**
       * return parsed JSON of the bundled @tsconfig/bases config appropriate for the
       * running version of nodejs
       * @internal
       */
      function getDefaultTsconfigJsonForNodeVersion(ts) {
        const tsInternal = ts
        if (nodeMajor >= 16) {
          const config = __nccwpck_require__(39777)
          if (configCompatible(config)) return config
        }
        if (nodeMajor >= 14) {
          const config = __nccwpck_require__(83754)
          if (configCompatible(config)) return config
        }
        if (nodeMajor >= 12) {
          const config = __nccwpck_require__(56049)
          if (configCompatible(config)) return config
        }
        return __nccwpck_require__(78250)
        // Verify that tsconfig target and lib options are compatible with TypeScript compiler
        function configCompatible(config) {
          return (
            typeof ts.ScriptTarget[config.compilerOptions.target.toUpperCase()] === "number" &&
            tsInternal.libs &&
            config.compilerOptions.lib.every((lib) => tsInternal.libs.includes(lib))
          )
        }
      }
      exports.getDefaultTsconfigJsonForNodeVersion = getDefaultTsconfigJsonForNodeVersion
      //# sourceMappingURL=tsconfigs.js.map

      /***/
    },

    /***/ 64745: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var _a
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.trace =
        exports.cachedLookup =
        exports.hasOwnProperty =
        exports.normalizeSlashes =
        exports.parse =
        exports.split =
        exports.assign =
        exports.yn =
        exports.createRequire =
          void 0
      const module_1 = __nccwpck_require__(98188)
      const ynModule = __nccwpck_require__(79647)
      /** @internal */
      exports.createRequire =
        (_a =
          module_1.createRequire !== null && module_1.createRequire !== void 0
            ? module_1.createRequire
            : module_1.createRequireFromPath) !== null && _a !== void 0
          ? _a
          : __nccwpck_require__(45830)
      /**
       * Wrapper around yn module that returns `undefined` instead of `null`.
       * This is implemented by yn v4, but we're staying on v3 to avoid v4's node 10 requirement.
       * @internal
       */
      function yn(value) {
        var _a
        return (_a = ynModule(value)) !== null && _a !== void 0 ? _a : undefined
      }
      exports.yn = yn
      /**
       * Like `Object.assign`, but ignores `undefined` properties.
       *
       * @internal
       */
      function assign(initialValue, ...sources) {
        for (const source of sources) {
          for (const key of Object.keys(source)) {
            const value = source[key]
            if (value !== undefined) initialValue[key] = value
          }
        }
        return initialValue
      }
      exports.assign = assign
      /**
       * Split a string array of values
       * and remove empty strings from the resulting array.
       * @internal
       */
      function split(value) {
        return typeof value === "string" ? value.split(/ *, */g).filter((v) => v !== "") : undefined
      }
      exports.split = split
      /**
       * Parse a string as JSON.
       * @internal
       */
      function parse(value) {
        return typeof value === "string" ? JSON.parse(value) : undefined
      }
      exports.parse = parse
      const directorySeparator = "/"
      const backslashRegExp = /\\/g
      /**
       * Replace backslashes with forward slashes.
       * @internal
       */
      function normalizeSlashes(value) {
        return value.replace(backslashRegExp, directorySeparator)
      }
      exports.normalizeSlashes = normalizeSlashes
      /**
       * Safe `hasOwnProperty`
       * @internal
       */
      function hasOwnProperty(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property)
      }
      exports.hasOwnProperty = hasOwnProperty
      /**
       * Cached fs operation wrapper.
       */
      function cachedLookup(fn) {
        const cache = new Map()
        return (arg) => {
          if (!cache.has(arg)) {
            const v = fn(arg)
            cache.set(arg, v)
            return v
          }
          return cache.get(arg)
        }
      }
      exports.cachedLookup = cachedLookup
      /**
       * We do not support ts's `trace` option yet.  In the meantime, rather than omit
       * `trace` options in hosts, I am using this placeholder.
       */
      function trace(s) {}
      exports.trace = trace
      //# sourceMappingURL=util.js.map

      /***/
    },

    /***/ 60419: /***/ function (__unused_webpack_module, exports) {
      ;(function (global, factory) {
        true ? factory(exports) : 0
      })(this, function (exports) {
        "use strict"

        // AST walker module for Mozilla Parser API compatible trees

        // A simple walk is one where you simply specify callbacks to be
        // called on specific nodes. The last two arguments are optional. A
        // simple use would be
        //
        //     walk.simple(myTree, {
        //         Expression: function(node) { ... }
        //     });
        //
        // to do something with all expressions. All Parser API node types
        // can be used to identify node types, as well as Expression and
        // Statement, which denote categories of nodes.
        //
        // The base argument can be used to pass a custom (recursive)
        // walker, and state can be used to give this walked an initial
        // state.

        function simple(node, visitors, baseVisitor, state, override) {
          if (!baseVisitor) {
            baseVisitor = base
          }
          ;(function c(node, st, override) {
            var type = override || node.type,
              found = visitors[type]
            baseVisitor[type](node, st, c)
            if (found) {
              found(node, st)
            }
          })(node, state, override)
        }

        // An ancestor walk keeps an array of ancestor nodes (including the
        // current node) and passes them to the callback as third parameter
        // (and also as state parameter when no other state is present).
        function ancestor(node, visitors, baseVisitor, state, override) {
          var ancestors = []
          if (!baseVisitor) {
            baseVisitor = base
          }
          ;(function c(node, st, override) {
            var type = override || node.type,
              found = visitors[type]
            var isNew = node !== ancestors[ancestors.length - 1]
            if (isNew) {
              ancestors.push(node)
            }
            baseVisitor[type](node, st, c)
            if (found) {
              found(node, st || ancestors, ancestors)
            }
            if (isNew) {
              ancestors.pop()
            }
          })(node, state, override)
        }

        // A recursive walk is one where your functions override the default
        // walkers. They can modify and replace the state parameter that's
        // threaded through the walk, and can opt how and whether to walk
        // their child nodes (by calling their third argument on these
        // nodes).
        function recursive(node, state, funcs, baseVisitor, override) {
          var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor
          ;(function c(node, st, override) {
            visitor[override || node.type](node, st, c)
          })(node, state, override)
        }

        function makeTest(test) {
          if (typeof test === "string") {
            return function (type) {
              return type === test
            }
          } else if (!test) {
            return function () {
              return true
            }
          } else {
            return test
          }
        }

        var Found = function Found(node, state) {
          this.node = node
          this.state = state
        }

        // A full walk triggers the callback on each node
        function full(node, callback, baseVisitor, state, override) {
          if (!baseVisitor) {
            baseVisitor = base
          }
          var last
          ;(function c(node, st, override) {
            var type = override || node.type
            baseVisitor[type](node, st, c)
            if (last !== node) {
              callback(node, st, type)
              last = node
            }
          })(node, state, override)
        }

        // An fullAncestor walk is like an ancestor walk, but triggers
        // the callback on each node
        function fullAncestor(node, callback, baseVisitor, state) {
          if (!baseVisitor) {
            baseVisitor = base
          }
          var ancestors = [],
            last
          ;(function c(node, st, override) {
            var type = override || node.type
            var isNew = node !== ancestors[ancestors.length - 1]
            if (isNew) {
              ancestors.push(node)
            }
            baseVisitor[type](node, st, c)
            if (last !== node) {
              callback(node, st || ancestors, ancestors, type)
              last = node
            }
            if (isNew) {
              ancestors.pop()
            }
          })(node, state)
        }

        // Find a node with a given start, end, and type (all are optional,
        // null can be used as wildcard). Returns a {node, state} object, or
        // undefined when it doesn't find a matching node.
        function findNodeAt(node, start, end, test, baseVisitor, state) {
          if (!baseVisitor) {
            baseVisitor = base
          }
          test = makeTest(test)
          try {
            ;(function c(node, st, override) {
              var type = override || node.type
              if ((start == null || node.start <= start) && (end == null || node.end >= end)) {
                baseVisitor[type](node, st, c)
              }
              if (
                (start == null || node.start === start) &&
                (end == null || node.end === end) &&
                test(type, node)
              ) {
                throw new Found(node, st)
              }
            })(node, state)
          } catch (e) {
            if (e instanceof Found) {
              return e
            }
            throw e
          }
        }

        // Find the innermost node of a given type that contains the given
        // position. Interface similar to findNodeAt.
        function findNodeAround(node, pos, test, baseVisitor, state) {
          test = makeTest(test)
          if (!baseVisitor) {
            baseVisitor = base
          }
          try {
            ;(function c(node, st, override) {
              var type = override || node.type
              if (node.start > pos || node.end < pos) {
                return
              }
              baseVisitor[type](node, st, c)
              if (test(type, node)) {
                throw new Found(node, st)
              }
            })(node, state)
          } catch (e) {
            if (e instanceof Found) {
              return e
            }
            throw e
          }
        }

        // Find the outermost matching node after a given position.
        function findNodeAfter(node, pos, test, baseVisitor, state) {
          test = makeTest(test)
          if (!baseVisitor) {
            baseVisitor = base
          }
          try {
            ;(function c(node, st, override) {
              if (node.end < pos) {
                return
              }
              var type = override || node.type
              if (node.start >= pos && test(type, node)) {
                throw new Found(node, st)
              }
              baseVisitor[type](node, st, c)
            })(node, state)
          } catch (e) {
            if (e instanceof Found) {
              return e
            }
            throw e
          }
        }

        // Find the outermost matching node before a given position.
        function findNodeBefore(node, pos, test, baseVisitor, state) {
          test = makeTest(test)
          if (!baseVisitor) {
            baseVisitor = base
          }
          var max
          ;(function c(node, st, override) {
            if (node.start > pos) {
              return
            }
            var type = override || node.type
            if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) {
              max = new Found(node, st)
            }
            baseVisitor[type](node, st, c)
          })(node, state)
          return max
        }

        // Used to create a custom walker. Will fill in all missing node
        // type properties with the defaults.
        function make(funcs, baseVisitor) {
          var visitor = Object.create(baseVisitor || base)
          for (var type in funcs) {
            visitor[type] = funcs[type]
          }
          return visitor
        }

        function skipThrough(node, st, c) {
          c(node, st)
        }
        function ignore(_node, _st, _c) {}

        // Node walkers.

        var base = {}

        base.Program =
          base.BlockStatement =
          base.StaticBlock =
            function (node, st, c) {
              for (var i = 0, list = node.body; i < list.length; i += 1) {
                var stmt = list[i]

                c(stmt, st, "Statement")
              }
            }
        base.Statement = skipThrough
        base.EmptyStatement = ignore
        base.ExpressionStatement =
          base.ParenthesizedExpression =
          base.ChainExpression =
            function (node, st, c) {
              return c(node.expression, st, "Expression")
            }
        base.IfStatement = function (node, st, c) {
          c(node.test, st, "Expression")
          c(node.consequent, st, "Statement")
          if (node.alternate) {
            c(node.alternate, st, "Statement")
          }
        }
        base.LabeledStatement = function (node, st, c) {
          return c(node.body, st, "Statement")
        }
        base.BreakStatement = base.ContinueStatement = ignore
        base.WithStatement = function (node, st, c) {
          c(node.object, st, "Expression")
          c(node.body, st, "Statement")
        }
        base.SwitchStatement = function (node, st, c) {
          c(node.discriminant, st, "Expression")
          for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {
            var cs = list$1[i$1]

            if (cs.test) {
              c(cs.test, st, "Expression")
            }
            for (var i = 0, list = cs.consequent; i < list.length; i += 1) {
              var cons = list[i]

              c(cons, st, "Statement")
            }
          }
        }
        base.SwitchCase = function (node, st, c) {
          if (node.test) {
            c(node.test, st, "Expression")
          }
          for (var i = 0, list = node.consequent; i < list.length; i += 1) {
            var cons = list[i]

            c(cons, st, "Statement")
          }
        }
        base.ReturnStatement =
          base.YieldExpression =
          base.AwaitExpression =
            function (node, st, c) {
              if (node.argument) {
                c(node.argument, st, "Expression")
              }
            }
        base.ThrowStatement = base.SpreadElement = function (node, st, c) {
          return c(node.argument, st, "Expression")
        }
        base.TryStatement = function (node, st, c) {
          c(node.block, st, "Statement")
          if (node.handler) {
            c(node.handler, st)
          }
          if (node.finalizer) {
            c(node.finalizer, st, "Statement")
          }
        }
        base.CatchClause = function (node, st, c) {
          if (node.param) {
            c(node.param, st, "Pattern")
          }
          c(node.body, st, "Statement")
        }
        base.WhileStatement = base.DoWhileStatement = function (node, st, c) {
          c(node.test, st, "Expression")
          c(node.body, st, "Statement")
        }
        base.ForStatement = function (node, st, c) {
          if (node.init) {
            c(node.init, st, "ForInit")
          }
          if (node.test) {
            c(node.test, st, "Expression")
          }
          if (node.update) {
            c(node.update, st, "Expression")
          }
          c(node.body, st, "Statement")
        }
        base.ForInStatement = base.ForOfStatement = function (node, st, c) {
          c(node.left, st, "ForInit")
          c(node.right, st, "Expression")
          c(node.body, st, "Statement")
        }
        base.ForInit = function (node, st, c) {
          if (node.type === "VariableDeclaration") {
            c(node, st)
          } else {
            c(node, st, "Expression")
          }
        }
        base.DebuggerStatement = ignore

        base.FunctionDeclaration = function (node, st, c) {
          return c(node, st, "Function")
        }
        base.VariableDeclaration = function (node, st, c) {
          for (var i = 0, list = node.declarations; i < list.length; i += 1) {
            var decl = list[i]

            c(decl, st)
          }
        }
        base.VariableDeclarator = function (node, st, c) {
          c(node.id, st, "Pattern")
          if (node.init) {
            c(node.init, st, "Expression")
          }
        }

        base.Function = function (node, st, c) {
          if (node.id) {
            c(node.id, st, "Pattern")
          }
          for (var i = 0, list = node.params; i < list.length; i += 1) {
            var param = list[i]

            c(param, st, "Pattern")
          }
          c(node.body, st, node.expression ? "Expression" : "Statement")
        }

        base.Pattern = function (node, st, c) {
          if (node.type === "Identifier") {
            c(node, st, "VariablePattern")
          } else if (node.type === "MemberExpression") {
            c(node, st, "MemberPattern")
          } else {
            c(node, st)
          }
        }
        base.VariablePattern = ignore
        base.MemberPattern = skipThrough
        base.RestElement = function (node, st, c) {
          return c(node.argument, st, "Pattern")
        }
        base.ArrayPattern = function (node, st, c) {
          for (var i = 0, list = node.elements; i < list.length; i += 1) {
            var elt = list[i]

            if (elt) {
              c(elt, st, "Pattern")
            }
          }
        }
        base.ObjectPattern = function (node, st, c) {
          for (var i = 0, list = node.properties; i < list.length; i += 1) {
            var prop = list[i]

            if (prop.type === "Property") {
              if (prop.computed) {
                c(prop.key, st, "Expression")
              }
              c(prop.value, st, "Pattern")
            } else if (prop.type === "RestElement") {
              c(prop.argument, st, "Pattern")
            }
          }
        }

        base.Expression = skipThrough
        base.ThisExpression = base.Super = base.MetaProperty = ignore
        base.ArrayExpression = function (node, st, c) {
          for (var i = 0, list = node.elements; i < list.length; i += 1) {
            var elt = list[i]

            if (elt) {
              c(elt, st, "Expression")
            }
          }
        }
        base.ObjectExpression = function (node, st, c) {
          for (var i = 0, list = node.properties; i < list.length; i += 1) {
            var prop = list[i]

            c(prop, st)
          }
        }
        base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration
        base.SequenceExpression = function (node, st, c) {
          for (var i = 0, list = node.expressions; i < list.length; i += 1) {
            var expr = list[i]

            c(expr, st, "Expression")
          }
        }
        base.TemplateLiteral = function (node, st, c) {
          for (var i = 0, list = node.quasis; i < list.length; i += 1) {
            var quasi = list[i]

            c(quasi, st)
          }

          for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1) {
            var expr = list$1[i$1]

            c(expr, st, "Expression")
          }
        }
        base.TemplateElement = ignore
        base.UnaryExpression = base.UpdateExpression = function (node, st, c) {
          c(node.argument, st, "Expression")
        }
        base.BinaryExpression = base.LogicalExpression = function (node, st, c) {
          c(node.left, st, "Expression")
          c(node.right, st, "Expression")
        }
        base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {
          c(node.left, st, "Pattern")
          c(node.right, st, "Expression")
        }
        base.ConditionalExpression = function (node, st, c) {
          c(node.test, st, "Expression")
          c(node.consequent, st, "Expression")
          c(node.alternate, st, "Expression")
        }
        base.NewExpression = base.CallExpression = function (node, st, c) {
          c(node.callee, st, "Expression")
          if (node.arguments) {
            for (var i = 0, list = node.arguments; i < list.length; i += 1) {
              var arg = list[i]

              c(arg, st, "Expression")
            }
          }
        }
        base.MemberExpression = function (node, st, c) {
          c(node.object, st, "Expression")
          if (node.computed) {
            c(node.property, st, "Expression")
          }
        }
        base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {
          if (node.declaration) {
            c(
              node.declaration,
              st,
              node.type === "ExportNamedDeclaration" || node.declaration.id
                ? "Statement"
                : "Expression"
            )
          }
          if (node.source) {
            c(node.source, st, "Expression")
          }
        }
        base.ExportAllDeclaration = function (node, st, c) {
          if (node.exported) {
            c(node.exported, st)
          }
          c(node.source, st, "Expression")
        }
        base.ImportDeclaration = function (node, st, c) {
          for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
            var spec = list[i]

            c(spec, st)
          }
          c(node.source, st, "Expression")
        }
        base.ImportExpression = function (node, st, c) {
          c(node.source, st, "Expression")
        }
        base.ImportSpecifier =
          base.ImportDefaultSpecifier =
          base.ImportNamespaceSpecifier =
          base.Identifier =
          base.PrivateIdentifier =
          base.Literal =
            ignore

        base.TaggedTemplateExpression = function (node, st, c) {
          c(node.tag, st, "Expression")
          c(node.quasi, st, "Expression")
        }
        base.ClassDeclaration = base.ClassExpression = function (node, st, c) {
          return c(node, st, "Class")
        }
        base.Class = function (node, st, c) {
          if (node.id) {
            c(node.id, st, "Pattern")
          }
          if (node.superClass) {
            c(node.superClass, st, "Expression")
          }
          c(node.body, st)
        }
        base.ClassBody = function (node, st, c) {
          for (var i = 0, list = node.body; i < list.length; i += 1) {
            var elt = list[i]

            c(elt, st)
          }
        }
        base.MethodDefinition =
          base.PropertyDefinition =
          base.Property =
            function (node, st, c) {
              if (node.computed) {
                c(node.key, st, "Expression")
              }
              if (node.value) {
                c(node.value, st, "Expression")
              }
            }

        exports.ancestor = ancestor
        exports.base = base
        exports.findNodeAfter = findNodeAfter
        exports.findNodeAround = findNodeAround
        exports.findNodeAt = findNodeAt
        exports.findNodeBefore = findNodeBefore
        exports.full = full
        exports.fullAncestor = fullAncestor
        exports.make = make
        exports.recursive = recursive
        exports.simple = simple

        Object.defineProperty(exports, "__esModule", { value: true })
      })

      /***/
    },

    /***/ 74294: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      module.exports = __nccwpck_require__(54219)

      /***/
    },

    /***/ 54219: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var net = __nccwpck_require__(41808)
      var tls = __nccwpck_require__(24404)
      var http = __nccwpck_require__(13685)
      var https = __nccwpck_require__(95687)
      var events = __nccwpck_require__(82361)
      var assert = __nccwpck_require__(39491)
      var util = __nccwpck_require__(73837)

      exports.httpOverHttp = httpOverHttp
      exports.httpsOverHttp = httpsOverHttp
      exports.httpOverHttps = httpOverHttps
      exports.httpsOverHttps = httpsOverHttps

      function httpOverHttp(options) {
        var agent = new TunnelingAgent(options)
        agent.request = http.request
        return agent
      }

      function httpsOverHttp(options) {
        var agent = new TunnelingAgent(options)
        agent.request = http.request
        agent.createSocket = createSecureSocket
        agent.defaultPort = 443
        return agent
      }

      function httpOverHttps(options) {
        var agent = new TunnelingAgent(options)
        agent.request = https.request
        return agent
      }

      function httpsOverHttps(options) {
        var agent = new TunnelingAgent(options)
        agent.request = https.request
        agent.createSocket = createSecureSocket
        agent.defaultPort = 443
        return agent
      }

      function TunnelingAgent(options) {
        var self = this
        self.options = options || {}
        self.proxyOptions = self.options.proxy || {}
        self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets
        self.requests = []
        self.sockets = []

        self.on("free", function onFree(socket, host, port, localAddress) {
          var options = toOptions(host, port, localAddress)
          for (var i = 0, len = self.requests.length; i < len; ++i) {
            var pending = self.requests[i]
            if (pending.host === options.host && pending.port === options.port) {
              // Detect the request to connect same origin server,
              // reuse the connection.
              self.requests.splice(i, 1)
              pending.request.onSocket(socket)
              return
            }
          }
          socket.destroy()
          self.removeSocket(socket)
        })
      }
      util.inherits(TunnelingAgent, events.EventEmitter)

      TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
        var self = this
        var options = mergeOptions(
          { request: req },
          self.options,
          toOptions(host, port, localAddress)
        )

        if (self.sockets.length >= this.maxSockets) {
          // We are over limit so we'll add it to the queue.
          self.requests.push(options)
          return
        }

        // If we are under maxSockets create a new one.
        self.createSocket(options, function (socket) {
          socket.on("free", onFree)
          socket.on("close", onCloseOrRemove)
          socket.on("agentRemove", onCloseOrRemove)
          req.onSocket(socket)

          function onFree() {
            self.emit("free", socket, options)
          }

          function onCloseOrRemove(err) {
            self.removeSocket(socket)
            socket.removeListener("free", onFree)
            socket.removeListener("close", onCloseOrRemove)
            socket.removeListener("agentRemove", onCloseOrRemove)
          }
        })
      }

      TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
        var self = this
        var placeholder = {}
        self.sockets.push(placeholder)

        var connectOptions = mergeOptions({}, self.proxyOptions, {
          method: "CONNECT",
          path: options.host + ":" + options.port,
          agent: false,
          headers: {
            host: options.host + ":" + options.port
          }
        })
        if (options.localAddress) {
          connectOptions.localAddress = options.localAddress
        }
        if (connectOptions.proxyAuth) {
          connectOptions.headers = connectOptions.headers || {}
          connectOptions.headers["Proxy-Authorization"] =
            "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64")
        }

        debug("making CONNECT request")
        var connectReq = self.request(connectOptions)
        connectReq.useChunkedEncodingByDefault = false // for v0.6
        connectReq.once("response", onResponse) // for v0.6
        connectReq.once("upgrade", onUpgrade) // for v0.6
        connectReq.once("connect", onConnect) // for v0.7 or later
        connectReq.once("error", onError)
        connectReq.end()

        function onResponse(res) {
          // Very hacky. This is necessary to avoid http-parser leaks.
          res.upgrade = true
        }

        function onUpgrade(res, socket, head) {
          // Hacky.
          process.nextTick(function () {
            onConnect(res, socket, head)
          })
        }

        function onConnect(res, socket, head) {
          connectReq.removeAllListeners()
          socket.removeAllListeners()

          if (res.statusCode !== 200) {
            debug("tunneling socket could not be established, statusCode=%d", res.statusCode)
            socket.destroy()
            var error = new Error(
              "tunneling socket could not be established, " + "statusCode=" + res.statusCode
            )
            error.code = "ECONNRESET"
            options.request.emit("error", error)
            self.removeSocket(placeholder)
            return
          }
          if (head.length > 0) {
            debug("got illegal response body from proxy")
            socket.destroy()
            var error = new Error("got illegal response body from proxy")
            error.code = "ECONNRESET"
            options.request.emit("error", error)
            self.removeSocket(placeholder)
            return
          }
          debug("tunneling connection has established")
          self.sockets[self.sockets.indexOf(placeholder)] = socket
          return cb(socket)
        }

        function onError(cause) {
          connectReq.removeAllListeners()

          debug("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack)
          var error = new Error(
            "tunneling socket could not be established, " + "cause=" + cause.message
          )
          error.code = "ECONNRESET"
          options.request.emit("error", error)
          self.removeSocket(placeholder)
        }
      }

      TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
        var pos = this.sockets.indexOf(socket)
        if (pos === -1) {
          return
        }
        this.sockets.splice(pos, 1)

        var pending = this.requests.shift()
        if (pending) {
          // If we have pending requests and a socket gets closed a new one
          // needs to be created to take over in the pool for the one that closed.
          this.createSocket(pending, function (socket) {
            pending.request.onSocket(socket)
          })
        }
      }

      function createSecureSocket(options, cb) {
        var self = this
        TunnelingAgent.prototype.createSocket.call(self, options, function (socket) {
          var hostHeader = options.request.getHeader("host")
          var tlsOptions = mergeOptions({}, self.options, {
            socket: socket,
            servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
          })

          // 0 is dummy port for v0.6
          var secureSocket = tls.connect(0, tlsOptions)
          self.sockets[self.sockets.indexOf(socket)] = secureSocket
          cb(secureSocket)
        })
      }

      function toOptions(host, port, localAddress) {
        if (typeof host === "string") {
          // since v0.10
          return {
            host: host,
            port: port,
            localAddress: localAddress
          }
        }
        return host // for v0.11 or later
      }

      function mergeOptions(target) {
        for (var i = 1, len = arguments.length; i < len; ++i) {
          var overrides = arguments[i]
          if (typeof overrides === "object") {
            var keys = Object.keys(overrides)
            for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
              var k = keys[j]
              if (overrides[k] !== undefined) {
                target[k] = overrides[k]
              }
            }
          }
        }
        return target
      }

      var debug
      if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
        debug = function () {
          var args = Array.prototype.slice.call(arguments)
          if (typeof args[0] === "string") {
            args[0] = "TUNNEL: " + args[0]
          } else {
            args.unshift("TUNNEL:")
          }
          console.error.apply(console, args)
        }
      } else {
        debug = function () {}
      }
      exports.debug = debug // for test

      /***/
    },

    /***/ 45030: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })

      function getUserAgent() {
        if (typeof navigator === "object" && "userAgent" in navigator) {
          return navigator.userAgent
        }

        if (typeof process === "object" && "version" in process) {
          return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`
        }

        return "<environment undetectable>"
      }

      exports.getUserAgent = getUserAgent
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 70020: /***/ function (__unused_webpack_module, exports) {
      /** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
      ;(function (global, factory) {
        true ? factory(exports) : 0
      })(this, function (exports) {
        "use strict"

        function merge() {
          for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key]
          }

          if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1)
            var xl = sets.length - 1
            for (var x = 1; x < xl; ++x) {
              sets[x] = sets[x].slice(1, -1)
            }
            sets[xl] = sets[xl].slice(1)
            return sets.join("")
          } else {
            return sets[0]
          }
        }
        function subexp(str) {
          return "(?:" + str + ")"
        }
        function typeOf(o) {
          return o === undefined
            ? "undefined"
            : o === null
            ? "null"
            : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase()
        }
        function toUpperCase(str) {
          return str.toUpperCase()
        }
        function toArray(obj) {
          return obj !== undefined && obj !== null
            ? obj instanceof Array
              ? obj
              : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call
              ? [obj]
              : Array.prototype.slice.call(obj)
            : []
        }
        function assign(target, source) {
          var obj = target
          if (source) {
            for (var key in source) {
              obj[key] = source[key]
            }
          }
          return obj
        }

        function buildExps(isIRI) {
          var ALPHA$$ = "[A-Za-z]",
            CR$ = "[\\x0D]",
            DIGIT$$ = "[0-9]",
            DQUOTE$$ = "[\\x22]",
            HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
            //case-insensitive
            LF$$ = "[\\x0A]",
            SP$$ = "[\\x20]",
            PCT_ENCODED$ = subexp(
              subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) +
                "|" +
                subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) +
                "|" +
                subexp("%" + HEXDIG$$ + HEXDIG$$)
            ),
            //expanded
            GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
            SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
            RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
            UCSCHAR$$ = isIRI
              ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]"
              : "[]",
            //subset, excludes bidi control characters
            IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
            //subset
            UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
            SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
            USERINFO$ = subexp(
              subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"
            ),
            DEC_OCTET$ = subexp(
              subexp("25[0-5]") +
                "|" +
                subexp("2[0-4]" + DIGIT$$) +
                "|" +
                subexp("1" + DIGIT$$ + DIGIT$$) +
                "|" +
                subexp("[1-9]" + DIGIT$$) +
                "|" +
                DIGIT$$
            ),
            DEC_OCTET_RELAXED$ = subexp(
              subexp("25[0-5]") +
                "|" +
                subexp("2[0-4]" + DIGIT$$) +
                "|" +
                subexp("1" + DIGIT$$ + DIGIT$$) +
                "|" +
                subexp("0?[1-9]" + DIGIT$$) +
                "|0?0?" +
                DIGIT$$
            ),
            //relaxed parsing rules
            IPV4ADDRESS$ = subexp(
              DEC_OCTET_RELAXED$ +
                "\\." +
                DEC_OCTET_RELAXED$ +
                "\\." +
                DEC_OCTET_RELAXED$ +
                "\\." +
                DEC_OCTET_RELAXED$
            ),
            H16$ = subexp(HEXDIG$$ + "{1,4}"),
            LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
            IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
            //                           6( h16 ":" ) ls32
            IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
            //                      "::" 5( h16 ":" ) ls32
            IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
            //[               h16 ] "::" 4( h16 ":" ) ls32
            IPV6ADDRESS4$ = subexp(
              subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) +
                "?\\:\\:" +
                subexp(H16$ + "\\:") +
                "{3}" +
                LS32$
            ),
            //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
            IPV6ADDRESS5$ = subexp(
              subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) +
                "?\\:\\:" +
                subexp(H16$ + "\\:") +
                "{2}" +
                LS32$
            ),
            //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
            IPV6ADDRESS6$ = subexp(
              subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$
            ),
            //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
            IPV6ADDRESS7$ = subexp(
              subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$
            ),
            //[ *4( h16 ":" ) h16 ] "::"              ls32
            IPV6ADDRESS8$ = subexp(
              subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$
            ),
            //[ *5( h16 ":" ) h16 ] "::"              h16
            IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
            //[ *6( h16 ":" ) h16 ] "::"
            IPV6ADDRESS$ = subexp(
              [
                IPV6ADDRESS1$,
                IPV6ADDRESS2$,
                IPV6ADDRESS3$,
                IPV6ADDRESS4$,
                IPV6ADDRESS5$,
                IPV6ADDRESS6$,
                IPV6ADDRESS7$,
                IPV6ADDRESS8$,
                IPV6ADDRESS9$
              ].join("|")
            ),
            ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
            //RFC 6874
            IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),
            //RFC 6874
            IPV6ADDRZ_RELAXED$ = subexp(
              IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$
            ),
            //RFC 6874, with relaxed parsing rules
            IPVFUTURE$ = subexp(
              "[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"
            ),
            IP_LITERAL$ = subexp(
              "\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"
            ),
            //RFC 6874
            REG_NAME$ = subexp(
              subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"
            ),
            HOST$ = subexp(
              IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$
            ),
            PORT$ = subexp(DIGIT$$ + "*"),
            AUTHORITY$ = subexp(
              subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"
            ),
            PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
            SEGMENT$ = subexp(PCHAR$ + "*"),
            SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
            SEGMENT_NZ_NC$ = subexp(
              subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"
            ),
            PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
            PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
            //simplified
            PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
            //simplified
            PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
            //simplified
            PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
            PATH$ = subexp(
              PATH_ABEMPTY$ +
                "|" +
                PATH_ABSOLUTE$ +
                "|" +
                PATH_NOSCHEME$ +
                "|" +
                PATH_ROOTLESS$ +
                "|" +
                PATH_EMPTY$
            ),
            QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
            FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
            HIER_PART$ = subexp(
              subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) +
                "|" +
                PATH_ABSOLUTE$ +
                "|" +
                PATH_ROOTLESS$ +
                "|" +
                PATH_EMPTY$
            ),
            URI$ = subexp(
              SCHEME$ +
                "\\:" +
                HIER_PART$ +
                subexp("\\?" + QUERY$) +
                "?" +
                subexp("\\#" + FRAGMENT$) +
                "?"
            ),
            RELATIVE_PART$ = subexp(
              subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) +
                "|" +
                PATH_ABSOLUTE$ +
                "|" +
                PATH_NOSCHEME$ +
                "|" +
                PATH_EMPTY$
            ),
            RELATIVE$ = subexp(
              RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"
            ),
            URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
            ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
            GENERIC_REF$ =
              "^(" +
              SCHEME$ +
              ")\\:" +
              subexp(
                subexp(
                  "\\/\\/(" +
                    subexp("(" + USERINFO$ + ")@") +
                    "?(" +
                    HOST$ +
                    ")" +
                    subexp("\\:(" + PORT$ + ")") +
                    "?)"
                ) +
                  "?(" +
                  PATH_ABEMPTY$ +
                  "|" +
                  PATH_ABSOLUTE$ +
                  "|" +
                  PATH_ROOTLESS$ +
                  "|" +
                  PATH_EMPTY$ +
                  ")"
              ) +
              subexp("\\?(" + QUERY$ + ")") +
              "?" +
              subexp("\\#(" + FRAGMENT$ + ")") +
              "?$",
            RELATIVE_REF$ =
              "^(){0}" +
              subexp(
                subexp(
                  "\\/\\/(" +
                    subexp("(" + USERINFO$ + ")@") +
                    "?(" +
                    HOST$ +
                    ")" +
                    subexp("\\:(" + PORT$ + ")") +
                    "?)"
                ) +
                  "?(" +
                  PATH_ABEMPTY$ +
                  "|" +
                  PATH_ABSOLUTE$ +
                  "|" +
                  PATH_NOSCHEME$ +
                  "|" +
                  PATH_EMPTY$ +
                  ")"
              ) +
              subexp("\\?(" + QUERY$ + ")") +
              "?" +
              subexp("\\#(" + FRAGMENT$ + ")") +
              "?$",
            ABSOLUTE_REF$ =
              "^(" +
              SCHEME$ +
              ")\\:" +
              subexp(
                subexp(
                  "\\/\\/(" +
                    subexp("(" + USERINFO$ + ")@") +
                    "?(" +
                    HOST$ +
                    ")" +
                    subexp("\\:(" + PORT$ + ")") +
                    "?)"
                ) +
                  "?(" +
                  PATH_ABEMPTY$ +
                  "|" +
                  PATH_ABSOLUTE$ +
                  "|" +
                  PATH_ROOTLESS$ +
                  "|" +
                  PATH_EMPTY$ +
                  ")"
              ) +
              subexp("\\?(" + QUERY$ + ")") +
              "?$",
            SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
            AUTHORITY_REF$ =
              "^" +
              subexp("(" + USERINFO$ + ")@") +
              "?(" +
              HOST$ +
              ")" +
              subexp("\\:(" + PORT$ + ")") +
              "?$"
          return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(
              merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$),
              "g"
            ),
            NOT_FRAGMENT: new RegExp(
              merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"),
              "g"
            ),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp(
              "^\\[?(" +
                IPV6ADDRESS$ +
                ")" +
                subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") +
                "?\\]?$"
            ) //RFC 6874, with relaxed parsing rules
          }
        }
        var URI_PROTOCOL = buildExps(false)

        var IRI_PROTOCOL = buildExps(true)

        var slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = []
            var _n = true
            var _d = false
            var _e = undefined

            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value)

                if (i && _arr.length === i) break
              }
            } catch (err) {
              _d = true
              _e = err
            } finally {
              try {
                if (!_n && _i["return"]) _i["return"]()
              } finally {
                if (_d) throw _e
              }
            }

            return _arr
          }

          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i)
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance")
            }
          }
        })()

        var toConsumableArray = function (arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]

            return arr2
          } else {
            return Array.from(arr)
          }
        }

        /** Highest positive signed 32-bit float value */

        var maxInt = 2147483647 // aka. 0x7FFFFFFF or 2^31-1

        /** Bootstring parameters */
        var base = 36
        var tMin = 1
        var tMax = 26
        var skew = 38
        var damp = 700
        var initialBias = 72
        var initialN = 128 // 0x80
        var delimiter = "-" // '\x2D'

        /** Regular expressions */
        var regexPunycode = /^xn--/
        var regexNonASCII = /[^\0-\x7E]/ // non-ASCII chars
        var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g // RFC 3490 separators

        /** Error messages */
        var errors = {
          overflow: "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        }

        /** Convenience shortcuts */
        var baseMinusTMin = base - tMin
        var floor = Math.floor
        var stringFromCharCode = String.fromCharCode

        /*--------------------------------------------------------------------------*/

        /**
         * A generic error utility function.
         * @private
         * @param {String} type The error type.
         * @returns {Error} Throws a `RangeError` with the applicable error message.
         */
        function error$1(type) {
          throw new RangeError(errors[type])
        }

        /**
         * A generic `Array#map` utility function.
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} callback The function that gets called for every array
         * item.
         * @returns {Array} A new array of values returned by the callback function.
         */
        function map(array, fn) {
          var result = []
          var length = array.length
          while (length--) {
            result[length] = fn(array[length])
          }
          return result
        }

        /**
         * A simple `Array#map`-like wrapper to work with domain name strings or email
         * addresses.
         * @private
         * @param {String} domain The domain name or email address.
         * @param {Function} callback The function that gets called for every
         * character.
         * @returns {Array} A new string of characters returned by the callback
         * function.
         */
        function mapDomain(string, fn) {
          var parts = string.split("@")
          var result = ""
          if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@"
            string = parts[1]
          }
          // Avoid `split(regex)` for IE8 compatibility. See #17.
          string = string.replace(regexSeparators, "\x2E")
          var labels = string.split(".")
          var encoded = map(labels, fn).join(".")
          return result + encoded
        }

        /**
         * Creates an array containing the numeric code points of each Unicode
         * character in the string. While JavaScript uses UCS-2 internally,
         * this function will convert a pair of surrogate halves (each of which
         * UCS-2 exposes as separate characters) into a single code point,
         * matching UTF-16.
         * @see `punycode.ucs2.encode`
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode.ucs2
         * @name decode
         * @param {String} string The Unicode input string (UCS-2).
         * @returns {Array} The new array of code points.
         */
        function ucs2decode(string) {
          var output = []
          var counter = 0
          var length = string.length
          while (counter < length) {
            var value = string.charCodeAt(counter++)
            if (value >= 0xd800 && value <= 0xdbff && counter < length) {
              // It's a high surrogate, and there is a next character.
              var extra = string.charCodeAt(counter++)
              if ((extra & 0xfc00) == 0xdc00) {
                // Low surrogate.
                output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000)
              } else {
                // It's an unmatched surrogate; only append this code unit, in case the
                // next code unit is the high surrogate of a surrogate pair.
                output.push(value)
                counter--
              }
            } else {
              output.push(value)
            }
          }
          return output
        }

        /**
         * Creates a string based on an array of numeric code points.
         * @see `punycode.ucs2.decode`
         * @memberOf punycode.ucs2
         * @name encode
         * @param {Array} codePoints The array of numeric code points.
         * @returns {String} The new Unicode string (UCS-2).
         */
        var ucs2encode = function ucs2encode(array) {
          return String.fromCodePoint.apply(String, toConsumableArray(array))
        }

        /**
         * Converts a basic code point into a digit/integer.
         * @see `digitToBasic()`
         * @private
         * @param {Number} codePoint The basic numeric code point value.
         * @returns {Number} The numeric value of a basic code point (for use in
         * representing integers) in the range `0` to `base - 1`, or `base` if
         * the code point does not represent a value.
         */
        var basicToDigit = function basicToDigit(codePoint) {
          if (codePoint - 0x30 < 0x0a) {
            return codePoint - 0x16
          }
          if (codePoint - 0x41 < 0x1a) {
            return codePoint - 0x41
          }
          if (codePoint - 0x61 < 0x1a) {
            return codePoint - 0x61
          }
          return base
        }

        /**
         * Converts a digit/integer into a basic code point.
         * @see `basicToDigit()`
         * @private
         * @param {Number} digit The numeric value of a basic code point.
         * @returns {Number} The basic code point whose value (when used for
         * representing integers) is `digit`, which needs to be in the range
         * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
         * used; else, the lowercase form is used. The behavior is undefined
         * if `flag` is non-zero and `digit` has no uppercase form.
         */
        var digitToBasic = function digitToBasic(digit, flag) {
          //  0..25 map to ASCII a..z or A..Z
          // 26..35 map to ASCII 0..9
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5)
        }

        /**
         * Bias adaptation function as per section 3.4 of RFC 3492.
         * https://tools.ietf.org/html/rfc3492#section-3.4
         * @private
         */
        var adapt = function adapt(delta, numPoints, firstTime) {
          var k = 0
          delta = firstTime ? floor(delta / damp) : delta >> 1
          delta += floor(delta / numPoints)
          for (; /* no initialization */ delta > (baseMinusTMin * tMax) >> 1; k += base) {
            delta = floor(delta / baseMinusTMin)
          }
          return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew))
        }

        /**
         * Converts a Punycode string of ASCII-only symbols to a string of Unicode
         * symbols.
         * @memberOf punycode
         * @param {String} input The Punycode string of ASCII-only symbols.
         * @returns {String} The resulting string of Unicode symbols.
         */
        var decode = function decode(input) {
          // Don't use UCS-2.
          var output = []
          var inputLength = input.length
          var i = 0
          var n = initialN
          var bias = initialBias

          // Handle the basic code points: let `basic` be the number of input code
          // points before the last delimiter, or `0` if there is none, then copy
          // the first basic code points to the output.

          var basic = input.lastIndexOf(delimiter)
          if (basic < 0) {
            basic = 0
          }

          for (var j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
              error$1("not-basic")
            }
            output.push(input.charCodeAt(j))
          }

          // Main decoding loop: start just after the last delimiter if any basic code
          // points were copied; start at the beginning otherwise.

          for (
            var index = basic > 0 ? basic + 1 : 0;
            index < inputLength;

          ) /* no final expression */ {
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            var oldi = i
            for (var w = 1, k = base; ; /* no condition */ k += base) {
              if (index >= inputLength) {
                error$1("invalid-input")
              }

              var digit = basicToDigit(input.charCodeAt(index++))

              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error$1("overflow")
              }

              i += digit * w
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias

              if (digit < t) {
                break
              }

              var baseMinusT = base - t
              if (w > floor(maxInt / baseMinusT)) {
                error$1("overflow")
              }

              w *= baseMinusT
            }

            var out = output.length + 1
            bias = adapt(i - oldi, out, oldi == 0)

            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) {
              error$1("overflow")
            }

            n += floor(i / out)
            i %= out

            // Insert `n` at position `i` of the output.
            output.splice(i++, 0, n)
          }

          return String.fromCodePoint.apply(String, output)
        }

        /**
         * Converts a string of Unicode symbols (e.g. a domain name label) to a
         * Punycode string of ASCII-only symbols.
         * @memberOf punycode
         * @param {String} input The string of Unicode symbols.
         * @returns {String} The resulting Punycode string of ASCII-only symbols.
         */
        var encode = function encode(input) {
          var output = []

          // Convert the input in UCS-2 to an array of Unicode code points.
          input = ucs2decode(input)

          // Cache the length.
          var inputLength = input.length

          // Initialize the state.
          var n = initialN
          var delta = 0
          var bias = initialBias

          // Handle the basic code points.
          var _iteratorNormalCompletion = true
          var _didIteratorError = false
          var _iteratorError = undefined

          try {
            for (
              var _iterator = input[Symbol.iterator](), _step;
              !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
              _iteratorNormalCompletion = true
            ) {
              var _currentValue2 = _step.value

              if (_currentValue2 < 0x80) {
                output.push(stringFromCharCode(_currentValue2))
              }
            }
          } catch (err) {
            _didIteratorError = true
            _iteratorError = err
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return()
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError
              }
            }
          }

          var basicLength = output.length
          var handledCPCount = basicLength

          // `handledCPCount` is the number of code points that have been handled;
          // `basicLength` is the number of basic code points.

          // Finish the basic string with a delimiter unless it's empty.
          if (basicLength) {
            output.push(delimiter)
          }

          // Main encoding loop:
          while (handledCPCount < inputLength) {
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            var m = maxInt
            var _iteratorNormalCompletion2 = true
            var _didIteratorError2 = false
            var _iteratorError2 = undefined

            try {
              for (
                var _iterator2 = input[Symbol.iterator](), _step2;
                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);
                _iteratorNormalCompletion2 = true
              ) {
                var currentValue = _step2.value

                if (currentValue >= n && currentValue < m) {
                  m = currentValue
                }
              }

              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
              // but guard against overflow.
            } catch (err) {
              _didIteratorError2 = true
              _iteratorError2 = err
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return()
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2
                }
              }
            }

            var handledCPCountPlusOne = handledCPCount + 1
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error$1("overflow")
            }

            delta += (m - n) * handledCPCountPlusOne
            n = m

            var _iteratorNormalCompletion3 = true
            var _didIteratorError3 = false
            var _iteratorError3 = undefined

            try {
              for (
                var _iterator3 = input[Symbol.iterator](), _step3;
                !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);
                _iteratorNormalCompletion3 = true
              ) {
                var _currentValue = _step3.value

                if (_currentValue < n && ++delta > maxInt) {
                  error$1("overflow")
                }
                if (_currentValue == n) {
                  // Represent delta as a generalized variable-length integer.
                  var q = delta
                  for (var k = base; ; /* no condition */ k += base) {
                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias
                    if (q < t) {
                      break
                    }
                    var qMinusT = q - t
                    var baseMinusT = base - t
                    output.push(stringFromCharCode(digitToBasic(t + (qMinusT % baseMinusT), 0)))
                    q = floor(qMinusT / baseMinusT)
                  }

                  output.push(stringFromCharCode(digitToBasic(q, 0)))
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength)
                  delta = 0
                  ++handledCPCount
                }
              }
            } catch (err) {
              _didIteratorError3 = true
              _iteratorError3 = err
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return()
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3
                }
              }
            }

            ++delta
            ++n
          }
          return output.join("")
        }

        /**
         * Converts a Punycode string representing a domain name or an email address
         * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
         * it doesn't matter if you call it on a string that has already been
         * converted to Unicode.
         * @memberOf punycode
         * @param {String} input The Punycoded domain name or email address to
         * convert to Unicode.
         * @returns {String} The Unicode representation of the given Punycode
         * string.
         */
        var toUnicode = function toUnicode(input) {
          return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string
          })
        }

        /**
         * Converts a Unicode string representing a domain name or an email address to
         * Punycode. Only the non-ASCII parts of the domain name will be converted,
         * i.e. it doesn't matter if you call it with a domain that's already in
         * ASCII.
         * @memberOf punycode
         * @param {String} input The domain name or email address to convert, as a
         * Unicode string.
         * @returns {String} The Punycode representation of the given domain name or
         * email address.
         */
        var toASCII = function toASCII(input) {
          return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string
          })
        }

        /*--------------------------------------------------------------------------*/

        /** Define the public API */
        var punycode = {
          /**
           * A string representing the current Punycode.js version number.
           * @memberOf punycode
           * @type String
           */
          version: "2.1.0",
          /**
           * An object of methods to convert from JavaScript's internal character
           * representation (UCS-2) to Unicode code points, and back.
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode
           * @type Object
           */
          ucs2: {
            decode: ucs2decode,
            encode: ucs2encode
          },
          decode: decode,
          encode: encode,
          toASCII: toASCII,
          toUnicode: toUnicode
        }

        /**
         * URI.js
         *
         * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
         * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
         * @see http://github.com/garycourt/uri-js
         */
        /**
         * Copyright 2011 Gary Court. All rights reserved.
         *
         * Redistribution and use in source and binary forms, with or without modification, are
         * permitted provided that the following conditions are met:
         *
         *    1. Redistributions of source code must retain the above copyright notice, this list of
         *       conditions and the following disclaimer.
         *
         *    2. Redistributions in binary form must reproduce the above copyright notice, this list
         *       of conditions and the following disclaimer in the documentation and/or other materials
         *       provided with the distribution.
         *
         * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
         * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
         * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
         * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
         * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
         * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
         * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
         * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
         * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
         *
         * The views and conclusions contained in the software and documentation are those of the
         * authors and should not be interpreted as representing official policies, either expressed
         * or implied, of Gary Court.
         */
        var SCHEMES = {}
        function pctEncChar(chr) {
          var c = chr.charCodeAt(0)
          var e = void 0
          if (c < 16) e = "%0" + c.toString(16).toUpperCase()
          else if (c < 128) e = "%" + c.toString(16).toUpperCase()
          else if (c < 2048)
            e =
              "%" +
              ((c >> 6) | 192).toString(16).toUpperCase() +
              "%" +
              ((c & 63) | 128).toString(16).toUpperCase()
          else
            e =
              "%" +
              ((c >> 12) | 224).toString(16).toUpperCase() +
              "%" +
              (((c >> 6) & 63) | 128).toString(16).toUpperCase() +
              "%" +
              ((c & 63) | 128).toString(16).toUpperCase()
          return e
        }
        function pctDecChars(str) {
          var newStr = ""
          var i = 0
          var il = str.length
          while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16)
            if (c < 128) {
              newStr += String.fromCharCode(c)
              i += 3
            } else if (c >= 194 && c < 224) {
              if (il - i >= 6) {
                var c2 = parseInt(str.substr(i + 4, 2), 16)
                newStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63))
              } else {
                newStr += str.substr(i, 6)
              }
              i += 6
            } else if (c >= 224) {
              if (il - i >= 9) {
                var _c = parseInt(str.substr(i + 4, 2), 16)
                var c3 = parseInt(str.substr(i + 7, 2), 16)
                newStr += String.fromCharCode(((c & 15) << 12) | ((_c & 63) << 6) | (c3 & 63))
              } else {
                newStr += str.substr(i, 9)
              }
              i += 9
            } else {
              newStr += str.substr(i, 3)
              i += 3
            }
          }
          return newStr
        }
        function _normalizeComponentEncoding(components, protocol) {
          function decodeUnreserved(str) {
            var decStr = pctDecChars(str)
            return !decStr.match(protocol.UNRESERVED) ? str : decStr
          }
          if (components.scheme)
            components.scheme = String(components.scheme)
              .replace(protocol.PCT_ENCODED, decodeUnreserved)
              .toLowerCase()
              .replace(protocol.NOT_SCHEME, "")
          if (components.userinfo !== undefined)
            components.userinfo = String(components.userinfo)
              .replace(protocol.PCT_ENCODED, decodeUnreserved)
              .replace(protocol.NOT_USERINFO, pctEncChar)
              .replace(protocol.PCT_ENCODED, toUpperCase)
          if (components.host !== undefined)
            components.host = String(components.host)
              .replace(protocol.PCT_ENCODED, decodeUnreserved)
              .toLowerCase()
              .replace(protocol.NOT_HOST, pctEncChar)
              .replace(protocol.PCT_ENCODED, toUpperCase)
          if (components.path !== undefined)
            components.path = String(components.path)
              .replace(protocol.PCT_ENCODED, decodeUnreserved)
              .replace(
                components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME,
                pctEncChar
              )
              .replace(protocol.PCT_ENCODED, toUpperCase)
          if (components.query !== undefined)
            components.query = String(components.query)
              .replace(protocol.PCT_ENCODED, decodeUnreserved)
              .replace(protocol.NOT_QUERY, pctEncChar)
              .replace(protocol.PCT_ENCODED, toUpperCase)
          if (components.fragment !== undefined)
            components.fragment = String(components.fragment)
              .replace(protocol.PCT_ENCODED, decodeUnreserved)
              .replace(protocol.NOT_FRAGMENT, pctEncChar)
              .replace(protocol.PCT_ENCODED, toUpperCase)
          return components
        }

        function _stripLeadingZeros(str) {
          return str.replace(/^0*(.*)/, "$1") || "0"
        }
        function _normalizeIPv4(host, protocol) {
          var matches = host.match(protocol.IPV4ADDRESS) || []

          var _matches = slicedToArray(matches, 2),
            address = _matches[1]

          if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".")
          } else {
            return host
          }
        }
        function _normalizeIPv6(host, protocol) {
          var matches = host.match(protocol.IPV6ADDRESS) || []

          var _matches2 = slicedToArray(matches, 3),
            address = _matches2[1],
            zone = _matches2[2]

          if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(),
              _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
              last = _address$toLowerCase$2[0],
              first = _address$toLowerCase$2[1]

            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : []
            var lastFields = last.split(":").map(_stripLeadingZeros)
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(
              lastFields[lastFields.length - 1]
            )
            var fieldCount = isLastFieldIPv4Address ? 7 : 8
            var lastFieldsStart = lastFields.length - fieldCount
            var fields = Array(fieldCount)
            for (var x = 0; x < fieldCount; ++x) {
              fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || ""
            }
            if (isLastFieldIPv4Address) {
              fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol)
            }
            var allZeroFields = fields.reduce(function (acc, field, index) {
              if (!field || field === "0") {
                var lastLongest = acc[acc.length - 1]
                if (lastLongest && lastLongest.index + lastLongest.length === index) {
                  lastLongest.length++
                } else {
                  acc.push({ index: index, length: 1 })
                }
              }
              return acc
            }, [])
            var longestZeroFields = allZeroFields.sort(function (a, b) {
              return b.length - a.length
            })[0]
            var newHost = void 0
            if (longestZeroFields && longestZeroFields.length > 1) {
              var newFirst = fields.slice(0, longestZeroFields.index)
              var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length)
              newHost = newFirst.join(":") + "::" + newLast.join(":")
            } else {
              newHost = fields.join(":")
            }
            if (zone) {
              newHost += "%" + zone
            }
            return newHost
          } else {
            return host
          }
        }
        var URI_PARSE =
          /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i
        var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined
        function parse(uriString) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}

          var components = {}
          var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL
          if (options.reference === "suffix")
            uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString
          var matches = uriString.match(URI_PARSE)
          if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
              //store each component
              components.scheme = matches[1]
              components.userinfo = matches[3]
              components.host = matches[4]
              components.port = parseInt(matches[5], 10)
              components.path = matches[6] || ""
              components.query = matches[7]
              components.fragment = matches[8]
              //fix port number
              if (isNaN(components.port)) {
                components.port = matches[5]
              }
            } else {
              //IE FIX for improper RegExp matching
              //store each component
              components.scheme = matches[1] || undefined
              components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined
              components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined
              components.port = parseInt(matches[5], 10)
              components.path = matches[6] || ""
              components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined
              components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined
              //fix port number
              if (isNaN(components.port)) {
                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)
                  ? matches[4]
                  : undefined
              }
            }
            if (components.host) {
              //normalize IP hosts
              components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol)
            }
            //determine reference type
            if (
              components.scheme === undefined &&
              components.userinfo === undefined &&
              components.host === undefined &&
              components.port === undefined &&
              !components.path &&
              components.query === undefined
            ) {
              components.reference = "same-document"
            } else if (components.scheme === undefined) {
              components.reference = "relative"
            } else if (components.fragment === undefined) {
              components.reference = "absolute"
            } else {
              components.reference = "uri"
            }
            //check for reference errors
            if (
              options.reference &&
              options.reference !== "suffix" &&
              options.reference !== components.reference
            ) {
              components.error =
                components.error || "URI is not a " + options.reference + " reference."
            }
            //find scheme handler
            var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]
            //check if scheme can't handle IRIs
            if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
              //if host component is a domain name
              if (
                components.host &&
                (options.domainHost || (schemeHandler && schemeHandler.domainHost))
              ) {
                //convert Unicode IDN -> ASCII IDN
                try {
                  components.host = punycode.toASCII(
                    components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()
                  )
                } catch (e) {
                  components.error =
                    components.error ||
                    "Host's domain name can not be converted to ASCII via punycode: " + e
                }
              }
              //convert IRI -> URI
              _normalizeComponentEncoding(components, URI_PROTOCOL)
            } else {
              //normalize encodings
              _normalizeComponentEncoding(components, protocol)
            }
            //perform scheme specific parsing
            if (schemeHandler && schemeHandler.parse) {
              schemeHandler.parse(components, options)
            }
          } else {
            components.error = components.error || "URI can not be parsed."
          }
          return components
        }

        function _recomposeAuthority(components, options) {
          var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL
          var uriTokens = []
          if (components.userinfo !== undefined) {
            uriTokens.push(components.userinfo)
            uriTokens.push("@")
          }
          if (components.host !== undefined) {
            //normalize IP hosts, add brackets and escape zone separator for IPv6
            uriTokens.push(
              _normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(
                protocol.IPV6ADDRESS,
                function (_, $1, $2) {
                  return "[" + $1 + ($2 ? "%25" + $2 : "") + "]"
                }
              )
            )
          }
          if (typeof components.port === "number" || typeof components.port === "string") {
            uriTokens.push(":")
            uriTokens.push(String(components.port))
          }
          return uriTokens.length ? uriTokens.join("") : undefined
        }

        var RDS1 = /^\.\.?\//
        var RDS2 = /^\/\.(\/|$)/
        var RDS3 = /^\/\.\.(\/|$)/
        var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/
        function removeDotSegments(input) {
          var output = []
          while (input.length) {
            if (input.match(RDS1)) {
              input = input.replace(RDS1, "")
            } else if (input.match(RDS2)) {
              input = input.replace(RDS2, "/")
            } else if (input.match(RDS3)) {
              input = input.replace(RDS3, "/")
              output.pop()
            } else if (input === "." || input === "..") {
              input = ""
            } else {
              var im = input.match(RDS5)
              if (im) {
                var s = im[0]
                input = input.slice(s.length)
                output.push(s)
              } else {
                throw new Error("Unexpected dot segment condition")
              }
            }
          }
          return output.join("")
        }

        function serialize(components) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}

          var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL
          var uriTokens = []
          //find scheme handler
          var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]
          //perform scheme specific serialization
          if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options)
          if (components.host) {
            //if host component is an IPv6 address
            if (protocol.IPV6ADDRESS.test(components.host)) {
            }
            //TODO: normalize IPv6 address as per RFC 5952

            //if host component is a domain name
            else if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {
              //convert IDN via punycode
              try {
                components.host = !options.iri
                  ? punycode.toASCII(
                      components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()
                    )
                  : punycode.toUnicode(components.host)
              } catch (e) {
                components.error =
                  components.error ||
                  "Host's domain name can not be converted to " +
                    (!options.iri ? "ASCII" : "Unicode") +
                    " via punycode: " +
                    e
              }
            }
          }
          //normalize encoding
          _normalizeComponentEncoding(components, protocol)
          if (options.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme)
            uriTokens.push(":")
          }
          var authority = _recomposeAuthority(components, options)
          if (authority !== undefined) {
            if (options.reference !== "suffix") {
              uriTokens.push("//")
            }
            uriTokens.push(authority)
            if (components.path && components.path.charAt(0) !== "/") {
              uriTokens.push("/")
            }
          }
          if (components.path !== undefined) {
            var s = components.path
            if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
              s = removeDotSegments(s)
            }
            if (authority === undefined) {
              s = s.replace(/^\/\//, "/%2F") //don't allow the path to start with "//"
            }
            uriTokens.push(s)
          }
          if (components.query !== undefined) {
            uriTokens.push("?")
            uriTokens.push(components.query)
          }
          if (components.fragment !== undefined) {
            uriTokens.push("#")
            uriTokens.push(components.fragment)
          }
          return uriTokens.join("") //merge tokens into a string
        }

        function resolveComponents(base, relative) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}
          var skipNormalization = arguments[3]

          var target = {}
          if (!skipNormalization) {
            base = parse(serialize(base, options), options) //normalize base components
            relative = parse(serialize(relative, options), options) //normalize relative components
          }
          options = options || {}
          if (!options.tolerant && relative.scheme) {
            target.scheme = relative.scheme
            //target.authority = relative.authority;
            target.userinfo = relative.userinfo
            target.host = relative.host
            target.port = relative.port
            target.path = removeDotSegments(relative.path || "")
            target.query = relative.query
          } else {
            if (
              relative.userinfo !== undefined ||
              relative.host !== undefined ||
              relative.port !== undefined
            ) {
              //target.authority = relative.authority;
              target.userinfo = relative.userinfo
              target.host = relative.host
              target.port = relative.port
              target.path = removeDotSegments(relative.path || "")
              target.query = relative.query
            } else {
              if (!relative.path) {
                target.path = base.path
                if (relative.query !== undefined) {
                  target.query = relative.query
                } else {
                  target.query = base.query
                }
              } else {
                if (relative.path.charAt(0) === "/") {
                  target.path = removeDotSegments(relative.path)
                } else {
                  if (
                    (base.userinfo !== undefined ||
                      base.host !== undefined ||
                      base.port !== undefined) &&
                    !base.path
                  ) {
                    target.path = "/" + relative.path
                  } else if (!base.path) {
                    target.path = relative.path
                  } else {
                    target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path
                  }
                  target.path = removeDotSegments(target.path)
                }
                target.query = relative.query
              }
              //target.authority = base.authority;
              target.userinfo = base.userinfo
              target.host = base.host
              target.port = base.port
            }
            target.scheme = base.scheme
          }
          target.fragment = relative.fragment
          return target
        }

        function resolve(baseURI, relativeURI, options) {
          var schemelessOptions = assign({ scheme: "null" }, options)
          return serialize(
            resolveComponents(
              parse(baseURI, schemelessOptions),
              parse(relativeURI, schemelessOptions),
              schemelessOptions,
              true
            ),
            schemelessOptions
          )
        }

        function normalize(uri, options) {
          if (typeof uri === "string") {
            uri = serialize(parse(uri, options), options)
          } else if (typeOf(uri) === "object") {
            uri = parse(serialize(uri, options), options)
          }
          return uri
        }

        function equal(uriA, uriB, options) {
          if (typeof uriA === "string") {
            uriA = serialize(parse(uriA, options), options)
          } else if (typeOf(uriA) === "object") {
            uriA = serialize(uriA, options)
          }
          if (typeof uriB === "string") {
            uriB = serialize(parse(uriB, options), options)
          } else if (typeOf(uriB) === "object") {
            uriB = serialize(uriB, options)
          }
          return uriA === uriB
        }

        function escapeComponent(str, options) {
          return (
            str &&
            str
              .toString()
              .replace(
                !options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE,
                pctEncChar
              )
          )
        }

        function unescapeComponent(str, options) {
          return (
            str &&
            str
              .toString()
              .replace(
                !options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED,
                pctDecChars
              )
          )
        }

        var handler = {
          scheme: "http",
          domainHost: true,
          parse: function parse(components, options) {
            //report missing host
            if (!components.host) {
              components.error = components.error || "HTTP URIs must have a host."
            }
            return components
          },
          serialize: function serialize(components, options) {
            var secure = String(components.scheme).toLowerCase() === "https"
            //normalize the default port
            if (components.port === (secure ? 443 : 80) || components.port === "") {
              components.port = undefined
            }
            //normalize the empty path
            if (!components.path) {
              components.path = "/"
            }
            //NOTE: We do not parse query strings for HTTP URIs
            //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
            //and not the HTTP spec.
            return components
          }
        }

        var handler$1 = {
          scheme: "https",
          domainHost: handler.domainHost,
          parse: handler.parse,
          serialize: handler.serialize
        }

        function isSecure(wsComponents) {
          return typeof wsComponents.secure === "boolean"
            ? wsComponents.secure
            : String(wsComponents.scheme).toLowerCase() === "wss"
        }
        //RFC 6455
        var handler$2 = {
          scheme: "ws",
          domainHost: true,
          parse: function parse(components, options) {
            var wsComponents = components
            //indicate if the secure flag is set
            wsComponents.secure = isSecure(wsComponents)
            //construct resouce name
            wsComponents.resourceName =
              (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "")
            wsComponents.path = undefined
            wsComponents.query = undefined
            return wsComponents
          },
          serialize: function serialize(wsComponents, options) {
            //normalize the default port
            if (
              wsComponents.port === (isSecure(wsComponents) ? 443 : 80) ||
              wsComponents.port === ""
            ) {
              wsComponents.port = undefined
            }
            //ensure scheme matches secure flag
            if (typeof wsComponents.secure === "boolean") {
              wsComponents.scheme = wsComponents.secure ? "wss" : "ws"
              wsComponents.secure = undefined
            }
            //reconstruct path from resource name
            if (wsComponents.resourceName) {
              var _wsComponents$resourc = wsComponents.resourceName.split("?"),
                _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
                path = _wsComponents$resourc2[0],
                query = _wsComponents$resourc2[1]

              wsComponents.path = path && path !== "/" ? path : undefined
              wsComponents.query = query
              wsComponents.resourceName = undefined
            }
            //forbid fragment component
            wsComponents.fragment = undefined
            return wsComponents
          }
        }

        var handler$3 = {
          scheme: "wss",
          domainHost: handler$2.domainHost,
          parse: handler$2.parse,
          serialize: handler$2.serialize
        }

        var O = {}
        var isIRI = true
        //RFC 3986
        var UNRESERVED$$ =
          "[A-Za-z0-9\\-\\.\\_\\~" +
          (isIRI
            ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF"
            : "") +
          "]"
        var HEXDIG$$ = "[0-9A-Fa-f]" //case-insensitive
        var PCT_ENCODED$ = subexp(
          subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) +
            "|" +
            subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) +
            "|" +
            subexp("%" + HEXDIG$$ + HEXDIG$$)
        ) //expanded
        //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
        //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
        //const WSP$$ = "[\\x20\\x09]";
        //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
        //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
        //const VCHAR$$ = "[\\x21-\\x7E]";
        //const WSP$$ = "[\\x20\\x09]";
        //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
        //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
        //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
        //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
        var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]"
        var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]"
        var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]')
        var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"
        var UNRESERVED = new RegExp(UNRESERVED$$, "g")
        var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g")
        var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g")
        var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g")
        var NOT_HFVALUE = NOT_HFNAME
        function decodeUnreserved(str) {
          var decStr = pctDecChars(str)
          return !decStr.match(UNRESERVED) ? str : decStr
        }
        var handler$4 = {
          scheme: "mailto",
          parse: function parse$$1(components, options) {
            var mailtoComponents = components
            var to = (mailtoComponents.to = mailtoComponents.path
              ? mailtoComponents.path.split(",")
              : [])
            mailtoComponents.path = undefined
            if (mailtoComponents.query) {
              var unknownHeaders = false
              var headers = {}
              var hfields = mailtoComponents.query.split("&")
              for (var x = 0, xl = hfields.length; x < xl; ++x) {
                var hfield = hfields[x].split("=")
                switch (hfield[0]) {
                  case "to":
                    var toAddrs = hfield[1].split(",")
                    for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                      to.push(toAddrs[_x])
                    }
                    break
                  case "subject":
                    mailtoComponents.subject = unescapeComponent(hfield[1], options)
                    break
                  case "body":
                    mailtoComponents.body = unescapeComponent(hfield[1], options)
                    break
                  default:
                    unknownHeaders = true
                    headers[unescapeComponent(hfield[0], options)] = unescapeComponent(
                      hfield[1],
                      options
                    )
                    break
                }
              }
              if (unknownHeaders) mailtoComponents.headers = headers
            }
            mailtoComponents.query = undefined
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
              var addr = to[_x2].split("@")
              addr[0] = unescapeComponent(addr[0])
              if (!options.unicodeSupport) {
                //convert Unicode IDN -> ASCII IDN
                try {
                  addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase())
                } catch (e) {
                  mailtoComponents.error =
                    mailtoComponents.error ||
                    "Email address's domain name can not be converted to ASCII via punycode: " + e
                }
              } else {
                addr[1] = unescapeComponent(addr[1], options).toLowerCase()
              }
              to[_x2] = addr.join("@")
            }
            return mailtoComponents
          },
          serialize: function serialize$$1(mailtoComponents, options) {
            var components = mailtoComponents
            var to = toArray(mailtoComponents.to)
            if (to) {
              for (var x = 0, xl = to.length; x < xl; ++x) {
                var toAddr = String(to[x])
                var atIdx = toAddr.lastIndexOf("@")
                var localPart = toAddr
                  .slice(0, atIdx)
                  .replace(PCT_ENCODED, decodeUnreserved)
                  .replace(PCT_ENCODED, toUpperCase)
                  .replace(NOT_LOCAL_PART, pctEncChar)
                var domain = toAddr.slice(atIdx + 1)
                //convert IDN via punycode
                try {
                  domain = !options.iri
                    ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase())
                    : punycode.toUnicode(domain)
                } catch (e) {
                  components.error =
                    components.error ||
                    "Email address's domain name can not be converted to " +
                      (!options.iri ? "ASCII" : "Unicode") +
                      " via punycode: " +
                      e
                }
                to[x] = localPart + "@" + domain
              }
              components.path = to.join(",")
            }
            var headers = (mailtoComponents.headers = mailtoComponents.headers || {})
            if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject
            if (mailtoComponents.body) headers["body"] = mailtoComponents.body
            var fields = []
            for (var name in headers) {
              if (headers[name] !== O[name]) {
                fields.push(
                  name
                    .replace(PCT_ENCODED, decodeUnreserved)
                    .replace(PCT_ENCODED, toUpperCase)
                    .replace(NOT_HFNAME, pctEncChar) +
                    "=" +
                    headers[name]
                      .replace(PCT_ENCODED, decodeUnreserved)
                      .replace(PCT_ENCODED, toUpperCase)
                      .replace(NOT_HFVALUE, pctEncChar)
                )
              }
            }
            if (fields.length) {
              components.query = fields.join("&")
            }
            return components
          }
        }

        var URN_PARSE = /^([^\:]+)\:(.*)/
        //RFC 2141
        var handler$5 = {
          scheme: "urn",
          parse: function parse$$1(components, options) {
            var matches = components.path && components.path.match(URN_PARSE)
            var urnComponents = components
            if (matches) {
              var scheme = options.scheme || urnComponents.scheme || "urn"
              var nid = matches[1].toLowerCase()
              var nss = matches[2]
              var urnScheme = scheme + ":" + (options.nid || nid)
              var schemeHandler = SCHEMES[urnScheme]
              urnComponents.nid = nid
              urnComponents.nss = nss
              urnComponents.path = undefined
              if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options)
              }
            } else {
              urnComponents.error = urnComponents.error || "URN can not be parsed."
            }
            return urnComponents
          },
          serialize: function serialize$$1(urnComponents, options) {
            var scheme = options.scheme || urnComponents.scheme || "urn"
            var nid = urnComponents.nid
            var urnScheme = scheme + ":" + (options.nid || nid)
            var schemeHandler = SCHEMES[urnScheme]
            if (schemeHandler) {
              urnComponents = schemeHandler.serialize(urnComponents, options)
            }
            var uriComponents = urnComponents
            var nss = urnComponents.nss
            uriComponents.path = (nid || options.nid) + ":" + nss
            return uriComponents
          }
        }

        var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/
        //RFC 4122
        var handler$6 = {
          scheme: "urn:uuid",
          parse: function parse(urnComponents, options) {
            var uuidComponents = urnComponents
            uuidComponents.uuid = uuidComponents.nss
            uuidComponents.nss = undefined
            if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
              uuidComponents.error = uuidComponents.error || "UUID is not valid."
            }
            return uuidComponents
          },
          serialize: function serialize(uuidComponents, options) {
            var urnComponents = uuidComponents
            //normalize UUID
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase()
            return urnComponents
          }
        }

        SCHEMES[handler.scheme] = handler
        SCHEMES[handler$1.scheme] = handler$1
        SCHEMES[handler$2.scheme] = handler$2
        SCHEMES[handler$3.scheme] = handler$3
        SCHEMES[handler$4.scheme] = handler$4
        SCHEMES[handler$5.scheme] = handler$5
        SCHEMES[handler$6.scheme] = handler$6

        exports.SCHEMES = SCHEMES
        exports.pctEncChar = pctEncChar
        exports.pctDecChars = pctDecChars
        exports.parse = parse
        exports.removeDotSegments = removeDotSegments
        exports.serialize = serialize
        exports.resolveComponents = resolveComponents
        exports.resolve = resolve
        exports.normalize = normalize
        exports.equal = equal
        exports.escapeComponent = escapeComponent
        exports.unescapeComponent = unescapeComponent

        Object.defineProperty(exports, "__esModule", { value: true })
      })
      //# sourceMappingURL=uri.all.js.map

      /***/
    },

    /***/ 65278: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      /**
       * For Node.js, simply re-export the core `util.deprecate` function.
       */

      module.exports = __nccwpck_require__(73837).deprecate

      /***/
    },

    /***/ 34207: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      const isWindows =
        process.platform === "win32" ||
        process.env.OSTYPE === "cygwin" ||
        process.env.OSTYPE === "msys"

      const path = __nccwpck_require__(71017)
      const COLON = isWindows ? ";" : ":"
      const isexe = __nccwpck_require__(97126)

      const getNotFoundError = (cmd) =>
        Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" })

      const getPathInfo = (cmd, opt) => {
        const colon = opt.colon || COLON

        // If it has a slash, then we don't bother searching the pathenv.
        // just check the file itself, and that's it.
        const pathEnv =
          cmd.match(/\//) || (isWindows && cmd.match(/\\/))
            ? [""]
            : [
                // windows always checks the cwd first
                ...(isWindows ? [process.cwd()] : []),
                ...(
                  opt.path ||
                  process.env.PATH ||
                  /* istanbul ignore next: very unusual */ ""
                ).split(colon)
              ]
        const pathExtExe = isWindows
          ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM"
          : ""
        const pathExt = isWindows ? pathExtExe.split(colon) : [""]

        if (isWindows) {
          if (cmd.indexOf(".") !== -1 && pathExt[0] !== "") pathExt.unshift("")
        }

        return {
          pathEnv,
          pathExt,
          pathExtExe
        }
      }

      const which = (cmd, opt, cb) => {
        if (typeof opt === "function") {
          cb = opt
          opt = {}
        }
        if (!opt) opt = {}

        const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)
        const found = []

        const step = (i) =>
          new Promise((resolve, reject) => {
            if (i === pathEnv.length)
              return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd))

            const ppRaw = pathEnv[i]
            const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw

            const pCmd = path.join(pathPart, cmd)
            const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd

            resolve(subStep(p, i, 0))
          })

        const subStep = (p, i, ii) =>
          new Promise((resolve, reject) => {
            if (ii === pathExt.length) return resolve(step(i + 1))
            const ext = pathExt[ii]
            isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
              if (!er && is) {
                if (opt.all) found.push(p + ext)
                else return resolve(p + ext)
              }
              return resolve(subStep(p, i, ii + 1))
            })
          })

        return cb ? step(0).then((res) => cb(null, res), cb) : step(0)
      }

      const whichSync = (cmd, opt) => {
        opt = opt || {}

        const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)
        const found = []

        for (let i = 0; i < pathEnv.length; i++) {
          const ppRaw = pathEnv[i]
          const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw

          const pCmd = path.join(pathPart, cmd)
          const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd

          for (let j = 0; j < pathExt.length; j++) {
            const cur = p + pathExt[j]
            try {
              const is = isexe.sync(cur, { pathExt: pathExtExe })
              if (is) {
                if (opt.all) found.push(cur)
                else return cur
              }
            } catch (ex) {}
          }
        }

        if (opt.all && found.length) return found

        if (opt.nothrow) return null

        throw getNotFoundError(cmd)
      }

      module.exports = which
      which.sync = whichSync

      /***/
    },

    /***/ 62940: /***/ (module) => {
      // Returns a wrapper function that returns a wrapped callback
      // The wrapper function should do some stuff, and return a
      // presumably different callback function.
      // This makes sure that own properties are retained, so that
      // decorations and such are not lost along the way.
      module.exports = wrappy
      function wrappy(fn, cb) {
        if (fn && cb) return wrappy(fn)(cb)

        if (typeof fn !== "function") throw new TypeError("need wrapper function")

        Object.keys(fn).forEach(function (k) {
          wrapper[k] = fn[k]
        })

        return wrapper

        function wrapper() {
          var args = new Array(arguments.length)
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i]
          }
          var ret = fn.apply(this, args)
          var cb = args[args.length - 1]
          if (typeof ret === "function" && ret !== cb) {
            Object.keys(cb).forEach(function (k) {
              ret[k] = cb[k]
            })
          }
          return ret
        }
      }

      /***/
    },

    /***/ 4091: /***/ (module) => {
      "use strict"

      module.exports = function (Yallist) {
        Yallist.prototype[Symbol.iterator] = function* () {
          for (let walker = this.head; walker; walker = walker.next) {
            yield walker.value
          }
        }
      }

      /***/
    },

    /***/ 40665: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      module.exports = Yallist

      Yallist.Node = Node
      Yallist.create = Yallist

      function Yallist(list) {
        var self = this
        if (!(self instanceof Yallist)) {
          self = new Yallist()
        }

        self.tail = null
        self.head = null
        self.length = 0

        if (list && typeof list.forEach === "function") {
          list.forEach(function (item) {
            self.push(item)
          })
        } else if (arguments.length > 0) {
          for (var i = 0, l = arguments.length; i < l; i++) {
            self.push(arguments[i])
          }
        }

        return self
      }

      Yallist.prototype.removeNode = function (node) {
        if (node.list !== this) {
          throw new Error("removing node which does not belong to this list")
        }

        var next = node.next
        var prev = node.prev

        if (next) {
          next.prev = prev
        }

        if (prev) {
          prev.next = next
        }

        if (node === this.head) {
          this.head = next
        }
        if (node === this.tail) {
          this.tail = prev
        }

        node.list.length--
        node.next = null
        node.prev = null
        node.list = null

        return next
      }

      Yallist.prototype.unshiftNode = function (node) {
        if (node === this.head) {
          return
        }

        if (node.list) {
          node.list.removeNode(node)
        }

        var head = this.head
        node.list = this
        node.next = head
        if (head) {
          head.prev = node
        }

        this.head = node
        if (!this.tail) {
          this.tail = node
        }
        this.length++
      }

      Yallist.prototype.pushNode = function (node) {
        if (node === this.tail) {
          return
        }

        if (node.list) {
          node.list.removeNode(node)
        }

        var tail = this.tail
        node.list = this
        node.prev = tail
        if (tail) {
          tail.next = node
        }

        this.tail = node
        if (!this.head) {
          this.head = node
        }
        this.length++
      }

      Yallist.prototype.push = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          push(this, arguments[i])
        }
        return this.length
      }

      Yallist.prototype.unshift = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          unshift(this, arguments[i])
        }
        return this.length
      }

      Yallist.prototype.pop = function () {
        if (!this.tail) {
          return undefined
        }

        var res = this.tail.value
        this.tail = this.tail.prev
        if (this.tail) {
          this.tail.next = null
        } else {
          this.head = null
        }
        this.length--
        return res
      }

      Yallist.prototype.shift = function () {
        if (!this.head) {
          return undefined
        }

        var res = this.head.value
        this.head = this.head.next
        if (this.head) {
          this.head.prev = null
        } else {
          this.tail = null
        }
        this.length--
        return res
      }

      Yallist.prototype.forEach = function (fn, thisp) {
        thisp = thisp || this
        for (var walker = this.head, i = 0; walker !== null; i++) {
          fn.call(thisp, walker.value, i, this)
          walker = walker.next
        }
      }

      Yallist.prototype.forEachReverse = function (fn, thisp) {
        thisp = thisp || this
        for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
          fn.call(thisp, walker.value, i, this)
          walker = walker.prev
        }
      }

      Yallist.prototype.get = function (n) {
        for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
          // abort out of the list early if we hit a cycle
          walker = walker.next
        }
        if (i === n && walker !== null) {
          return walker.value
        }
      }

      Yallist.prototype.getReverse = function (n) {
        for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
          // abort out of the list early if we hit a cycle
          walker = walker.prev
        }
        if (i === n && walker !== null) {
          return walker.value
        }
      }

      Yallist.prototype.map = function (fn, thisp) {
        thisp = thisp || this
        var res = new Yallist()
        for (var walker = this.head; walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this))
          walker = walker.next
        }
        return res
      }

      Yallist.prototype.mapReverse = function (fn, thisp) {
        thisp = thisp || this
        var res = new Yallist()
        for (var walker = this.tail; walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this))
          walker = walker.prev
        }
        return res
      }

      Yallist.prototype.reduce = function (fn, initial) {
        var acc
        var walker = this.head
        if (arguments.length > 1) {
          acc = initial
        } else if (this.head) {
          walker = this.head.next
          acc = this.head.value
        } else {
          throw new TypeError("Reduce of empty list with no initial value")
        }

        for (var i = 0; walker !== null; i++) {
          acc = fn(acc, walker.value, i)
          walker = walker.next
        }

        return acc
      }

      Yallist.prototype.reduceReverse = function (fn, initial) {
        var acc
        var walker = this.tail
        if (arguments.length > 1) {
          acc = initial
        } else if (this.tail) {
          walker = this.tail.prev
          acc = this.tail.value
        } else {
          throw new TypeError("Reduce of empty list with no initial value")
        }

        for (var i = this.length - 1; walker !== null; i--) {
          acc = fn(acc, walker.value, i)
          walker = walker.prev
        }

        return acc
      }

      Yallist.prototype.toArray = function () {
        var arr = new Array(this.length)
        for (var i = 0, walker = this.head; walker !== null; i++) {
          arr[i] = walker.value
          walker = walker.next
        }
        return arr
      }

      Yallist.prototype.toArrayReverse = function () {
        var arr = new Array(this.length)
        for (var i = 0, walker = this.tail; walker !== null; i++) {
          arr[i] = walker.value
          walker = walker.prev
        }
        return arr
      }

      Yallist.prototype.slice = function (from, to) {
        to = to || this.length
        if (to < 0) {
          to += this.length
        }
        from = from || 0
        if (from < 0) {
          from += this.length
        }
        var ret = new Yallist()
        if (to < from || to < 0) {
          return ret
        }
        if (from < 0) {
          from = 0
        }
        if (to > this.length) {
          to = this.length
        }
        for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
          walker = walker.next
        }
        for (; walker !== null && i < to; i++, walker = walker.next) {
          ret.push(walker.value)
        }
        return ret
      }

      Yallist.prototype.sliceReverse = function (from, to) {
        to = to || this.length
        if (to < 0) {
          to += this.length
        }
        from = from || 0
        if (from < 0) {
          from += this.length
        }
        var ret = new Yallist()
        if (to < from || to < 0) {
          return ret
        }
        if (from < 0) {
          from = 0
        }
        if (to > this.length) {
          to = this.length
        }
        for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
          walker = walker.prev
        }
        for (; walker !== null && i > from; i--, walker = walker.prev) {
          ret.push(walker.value)
        }
        return ret
      }

      Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
        if (start > this.length) {
          start = this.length - 1
        }
        if (start < 0) {
          start = this.length + start
        }

        for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
          walker = walker.next
        }

        var ret = []
        for (var i = 0; walker && i < deleteCount; i++) {
          ret.push(walker.value)
          walker = this.removeNode(walker)
        }
        if (walker === null) {
          walker = this.tail
        }

        if (walker !== this.head && walker !== this.tail) {
          walker = walker.prev
        }

        for (var i = 0; i < nodes.length; i++) {
          walker = insert(this, walker, nodes[i])
        }
        return ret
      }

      Yallist.prototype.reverse = function () {
        var head = this.head
        var tail = this.tail
        for (var walker = head; walker !== null; walker = walker.prev) {
          var p = walker.prev
          walker.prev = walker.next
          walker.next = p
        }
        this.head = tail
        this.tail = head
        return this
      }

      function insert(self, node, value) {
        var inserted =
          node === self.head
            ? new Node(value, null, node, self)
            : new Node(value, node, node.next, self)

        if (inserted.next === null) {
          self.tail = inserted
        }
        if (inserted.prev === null) {
          self.head = inserted
        }

        self.length++

        return inserted
      }

      function push(self, item) {
        self.tail = new Node(item, self.tail, null, self)
        if (!self.head) {
          self.head = self.tail
        }
        self.length++
      }

      function unshift(self, item) {
        self.head = new Node(item, null, self.head, self)
        if (!self.tail) {
          self.tail = self.head
        }
        self.length++
      }

      function Node(value, prev, next, list) {
        if (!(this instanceof Node)) {
          return new Node(value, prev, next, list)
        }

        this.list = list
        this.value = value

        if (prev) {
          prev.next = this
          this.prev = prev
        } else {
          this.prev = null
        }

        if (next) {
          next.prev = this
          this.next = next
        } else {
          this.next = null
        }
      }

      try {
        // add if support for Symbol.iterator is present
        __nccwpck_require__(4091)(Yallist)
      } catch (er) {}

      /***/
    },

    /***/ 79647: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      "use strict"

      const lenient = __nccwpck_require__(40266)

      const yn = (input, options) => {
        input = String(input).trim()

        options = Object.assign(
          {
            lenient: false,
            default: null
          },
          options
        )

        if (options.default !== null && typeof options.default !== "boolean") {
          throw new TypeError(
            `Expected the \`default\` option to be of type \`boolean\`, got \`${typeof options.default}\``
          )
        }

        if (/^(?:y|yes|true|1)$/i.test(input)) {
          return true
        }

        if (/^(?:n|no|false|0)$/i.test(input)) {
          return false
        }

        if (options.lenient === true) {
          return lenient(input, options)
        }

        return options.default
      }

      module.exports = yn
      // TODO: Remove this for the next major release
      module.exports["default"] = yn

      /***/
    },

    /***/ 40266: /***/ (module) => {
      "use strict"

      const YES_MATCH_SCORE_THRESHOLD = 2
      const NO_MATCH_SCORE_THRESHOLD = 1.25

      const yMatch = new Map([
        [5, 0.25],
        [6, 0.25],
        [7, 0.25],
        ["t", 0.75],
        ["y", 1],
        ["u", 0.75],
        ["g", 0.25],
        ["h", 0.25],
        ["j", 0.25]
      ])

      const eMatch = new Map([
        [2, 0.25],
        [3, 0.25],
        [4, 0.25],
        ["w", 0.75],
        ["e", 1],
        ["r", 0.75],
        ["s", 0.25],
        ["d", 0.25],
        ["f", 0.25]
      ])

      const sMatch = new Map([
        ["q", 0.25],
        ["w", 0.25],
        ["e", 0.25],
        ["a", 0.75],
        ["s", 1],
        ["d", 0.75],
        ["z", 0.25],
        ["x", 0.25],
        ["c", 0.25]
      ])

      const nMatch = new Map([
        ["h", 0.25],
        ["j", 0.25],
        ["k", 0.25],
        ["b", 0.75],
        ["n", 1],
        ["m", 0.75]
      ])

      const oMatch = new Map([
        [9, 0.25],
        [0, 0.25],
        ["i", 0.75],
        ["o", 1],
        ["p", 0.75],
        ["k", 0.25],
        ["l", 0.25]
      ])

      function getYesMatchScore(value) {
        const [y, e, s] = value
        let score = 0

        if (yMatch.has(y)) {
          score += yMatch.get(y)
        }

        if (eMatch.has(e)) {
          score += eMatch.get(e)
        }

        if (sMatch.has(s)) {
          score += sMatch.get(s)
        }

        return score
      }

      function getNoMatchScore(value) {
        const [n, o] = value
        let score = 0

        if (nMatch.has(n)) {
          score += nMatch.get(n)
        }

        if (oMatch.has(o)) {
          score += oMatch.get(o)
        }

        return score
      }

      module.exports = (input, options) => {
        if (getYesMatchScore(input) >= YES_MATCH_SCORE_THRESHOLD) {
          return true
        }

        if (getNoMatchScore(input) >= NO_MATCH_SCORE_THRESHOLD) {
          return false
        }

        return options.default
      }

      /***/
    },

    /***/ 30717: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      Object.defineProperty(exports, "__esModule", { value: true })
      exports.terminate = void 0
      const core_1 = __nccwpck_require__(42186)
      const process_1 = __nccwpck_require__(77282)
      const terminate = (failure) => {
        if (failure) {
          ;(0, core_1.setFailed)(failure)
        } else {
          ;(0, process_1.exit)(core_1.ExitCode.Success)
        }
      }
      exports.terminate = terminate

      /***/
    },

    /***/ 2961: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getCommitTypeNotAllowedInBranchMessage =
        exports.getValidPrTitleMessage =
        exports.getInvalidPrTitleHelp =
          void 0
      const fs_1 = __nccwpck_require__(57147)
      const path_1 = __importDefault(__nccwpck_require__(71017))
      const string_format_1 = __importDefault(__nccwpck_require__(13259))
      const getMessage = (args, relativeFilePath) => {
        const fileTemplate = (0, fs_1.readFileSync)(
          path_1.default.join(__dirname, relativeFilePath),
          { encoding: "utf-8" }
        )
        return (0, string_format_1.default)(fileTemplate, args)
      }
      const getInvalidPrTitleHelp = (args, options) => {
        const filePath = options?.filePath || "assets/invalid_pr_title_help.md"
        return getMessage(args, filePath)
      }
      exports.getInvalidPrTitleHelp = getInvalidPrTitleHelp
      const getValidPrTitleMessage = (args, options) => {
        const filePath = options?.filePath || "assets/valid_pr_title.md"
        let nextReleaseExample = "1.0.0"
        if (args.nextReleaseType == "major") nextReleaseExample = "2.0.0"
        else if (args.nextReleaseType == "minor") nextReleaseExample = "1.1.0"
        else if (args.nextReleaseType == "patch") nextReleaseExample = "1.0.1"
        const templateArgs = {
          willCauseReleaseDescription: args.willCauseRelease ? "cause" : "not cause",
          nextReleaseExample,
          ...args
        }
        return getMessage(templateArgs, filePath)
      }
      exports.getValidPrTitleMessage = getValidPrTitleMessage
      const getCommitTypeNotAllowedInBranchMessage = (args, options) => {
        const filePath = options?.filePath || "assets/commit_type_not_allowed_branch.md"
        return getMessage(args, filePath)
      }
      exports.getCommitTypeNotAllowedInBranchMessage = getCommitTypeNotAllowedInBranchMessage

      /***/
    },

    /***/ 7965: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      const input_1 = __nccwpck_require__(56911)
      const lint_1 = __nccwpck_require__(38903)
      const github_1 = __nccwpck_require__(95438)
      const env_1 = __nccwpck_require__(30717)
      const log = __importStar(__nccwpck_require__(77873))
      const cathy = __importStar(__nccwpck_require__(65378))
      const helper_messages_1 = __nccwpck_require__(2961)
      ;(async () => {
        log.debug("Checking if action was triggered by a PR")
        if (github_1.context.eventName != "pull_request") {
          log.info(
            "GitHub Action workflow trigger is not a pull_request. Nothing for me to do. I'll just exit."
          )
          return (0, env_1.terminate)()
        }
        log.debug("Getting input and context from action")
        const input = (0, input_1.getInput)()
        const prNumber = github_1.context.payload.pull_request?.number
        if (!prNumber) {
          log.info(
            "GitHub Action must not have triggered by a pull_request because I cannot find a pull request number. Nothing for me to do. I'll just exit."
          )
          return (0, env_1.terminate)()
        }
        log.debug(`Action running against PR ${prNumber}`)
        const octokit = (0, github_1.getOctokit)(input.token)
        const pullRequest = await octokit.rest.pulls.get({
          owner: github_1.context.repo.owner,
          repo: github_1.context.repo.repo,
          pull_number: prNumber
        })
        log.debug(`GitHub pull request: ${JSON.stringify(pullRequest.data)}`)
        const prTitle = pullRequest.data.title
        const prToBrach = pullRequest.data.base.ref // name of branch that you're trying to merge into
        const prAuthor = pullRequest.data.user?.login || ""
        const isTitleValid = await (0, lint_1.lintPrTitle)(
          prTitle,
          "@commitlint/config-conventional"
        )
        if (!isTitleValid) {
          await cathy.speak(
            (0, helper_messages_1.getInvalidPrTitleHelp)({
              author: prAuthor
            }),
            {
              githubToken: input.token,
              githubRepo: `${github_1.context.repo.owner}/${github_1.context.repo.repo}`,
              githubIssue: prNumber,
              updateExisting: true,
              updateID: "action-semantic-pr_help-pr-title"
            }
          )
          return (0, env_1.terminate)(new Error("Pull request title is not valid."))
        }
        const nextReleaseType = await (0, lint_1.getNextReleaseType)(prTitle)
        const willCauseRelease = nextReleaseType != undefined
        await cathy.speak(
          (0, helper_messages_1.getValidPrTitleMessage)({
            author: prAuthor,
            willCauseRelease,
            nextReleaseType
          }),
          {
            githubToken: input.token,
            githubRepo: `${github_1.context.repo.owner}/${github_1.context.repo.repo}`,
            githubIssue: prNumber,
            updateExisting: true,
            updateID: "action-semantic-pr_help-pr-title"
          }
        )
        log.info("Looks like the PR title is valid!")
        // Check if we should warn about the PR not being in the correct branch
        const parsedPrTitle = await (0, lint_1.parseTitle)(prTitle)
        log.debug(`parsed PR title: ${JSON.stringify(parsedPrTitle)}`)
        const allowedTypesForBranch = (input.branchTypeWarning[prToBrach] || "")
          // by default, .split() makes ['']. we want to remove empty strings
          .split(",")
          .filter((item) => item.length > 0)
        log.debug(`allowed types for PR branch: ${prToBrach}, ${allowedTypesForBranch}`)
        if (
          allowedTypesForBranch.length > 0 &&
          !allowedTypesForBranch.includes(parsedPrTitle.type)
        ) {
          log.info(
            `pull request type is not allowed to go into this branch. Going to make a warning.`
          )
          await cathy.speak(
            (0, helper_messages_1.getCommitTypeNotAllowedInBranchMessage)({
              author: prAuthor,
              branchName: prToBrach,
              allowedTypes: allowedTypesForBranch,
              givenType: parsedPrTitle.type
            }),
            {
              githubToken: input.token,
              githubRepo: `${github_1.context.repo.owner}/${github_1.context.repo.repo}`,
              githubIssue: prNumber,
              updateExisting: true,
              updateID: "action-semantic-pr_commit-type-help"
            }
          )
          // Do not terminate as the message of invalid type is just a warning. We can still try to merge it.
        }
        // time to merge if we determine it's ready.
        if (pullRequest.data.merged || pullRequest.data.closed_at) {
          log.info("Pull request is not open. Nothing else for me to do, existing.")
          return (0, env_1.terminate)()
        }
        // check labels to see if it's ready to be merged
        let isReadyToMerge = false
        pullRequest.data.labels.forEach((label) => {
          if (label.name == "Ready to merge") {
            isReadyToMerge = true
          }
        })
        if (!isReadyToMerge) {
          log.info("PR title valid, but not ready to merge. Nothing else for me to do, exiting.")
          return (0, env_1.terminate)()
        }
        log.info("Merging PR")
        await octokit.rest.pulls.merge({
          owner: github_1.context.repo.owner,
          repo: github_1.context.repo.repo,
          pull_number: prNumber,
          commit_title: prTitle,
          commit_message: "",
          merge_method: "squash"
        })
        await octokit.rest.issues.removeLabel({
          owner: github_1.context.repo.owner,
          repo: github_1.context.repo.repo,
          issue_number: prNumber,
          name: "Ready to merge"
        })
        ;(0, env_1.terminate)()
      })()
      // const output: Output = {
      //   text: getOutputText(input.text)
      // }
      // setOutput(output)

      /***/
    },

    /***/ 56911: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.getInput = void 0
      const core = __importStar(__nccwpck_require__(42186))
      const getInput = () => {
        const rawInput = {
          token: core.getInput("token"),
          branchTypeWarning: JSON.parse(core.getInput("branchTypeWarning"))
        }
        const branchTypeWarningObject = rawInput.branchTypeWarning || {}
        // Try to filter out keys of object where value is not a string
        rawInput.branchTypeWarning = Object.fromEntries(
          Object.entries(branchTypeWarningObject).filter(
            ([key]) => typeof branchTypeWarningObject[key] == "string"
          )
        )
        return rawInput
      }
      exports.getInput = getInput

      /***/
    },

    /***/ 38903: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.parseTitle = exports.getNextReleaseType = exports.lintPrTitle = void 0
      const lint_1 = __importDefault(__nccwpck_require__(9152))
      const load_1 = __importDefault(__nccwpck_require__(36791))
      const log = __importStar(__nccwpck_require__(77873))
      const commit_analyzer_1 = __importDefault(__nccwpck_require__(60156))
      const conventional_changelog_conventionalcommits_1 = __importDefault(
        __nccwpck_require__(88761)
      )
      const conventional_commits_parser_1 = __importDefault(__nccwpck_require__(41655))
      __nccwpck_require__(55635) // make sure that the rules are loaded into the compiled JS.
      __nccwpck_require__(88761)
      const lintPrTitle = async (title, rulesName) => {
        title = title.trim()
        rulesName = rulesName || "@commitlint/config-conventional"
        if (title == "") return false
        log.debug(`Linting PR ${title} with rules: ${rulesName}`)
        // Using load() to get more accurate rules sets such as ! for breaking changes.
        // https://github.com/conventional-changelog/commitlint/issues/2226#issuecomment-777207848
        let loadedRules
        try {
          // load throws if can't find the rules to load
          loadedRules = await (0, load_1.default)({
            extends: [rulesName]
          })
        } catch {
          return false
        }
        if (!loadedRules || !loadedRules.parserPreset) {
          log.error(
            `Rules set ${rulesName} not able to be loaded. Not able to lint PR title without it.`
          )
          return false
        }
        const opts = {
          parserOpts: loadedRules.parserPreset.parserOpts
        }
        const lintResult = await (0, lint_1.default)(title, loadedRules.rules, opts)
        log.debug(`Linting result: ${JSON.stringify(lintResult)}`)
        return lintResult.valid
      }
      exports.lintPrTitle = lintPrTitle
      const getNextReleaseType = async (prTitle) => {
        const result = await commit_analyzer_1.default.analyzeCommits(
          {
            preset: "conventionalcommits"
          },
          {
            commits: [{ message: prTitle, hash: "XXX" }],
            logger: console
          }
        )
        return result
      }
      exports.getNextReleaseType = getNextReleaseType
      const parseTitle = async (prTitle) => {
        const preset = await (0, conventional_changelog_conventionalcommits_1.default)()
        const rules = preset.parserOpts
        return conventional_commits_parser_1.default.sync(prTitle, rules)
      }
      exports.parseTitle = parseTitle

      /***/
    },

    /***/ 77873: /***/ function (__unused_webpack_module, exports, __nccwpck_require__) {
      "use strict"

      var __createBinding =
        (this && this.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k]
                }
              })
            }
          : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k
              o[k2] = m[k]
            })
      var __setModuleDefault =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v })
            }
          : function (o, v) {
              o["default"] = v
            })
      var __importStar =
        (this && this.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null)
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k)
          __setModuleDefault(result, mod)
          return result
        }
      Object.defineProperty(exports, "__esModule", { value: true })
      exports.error = exports.info = exports.warning = exports.debug = void 0
      const core = __importStar(__nccwpck_require__(42186))
      const debug = (message) => {
        core.debug(message)
      }
      exports.debug = debug
      const warning = (message) => {
        core.warning(message)
      }
      exports.warning = warning
      const info = (message) => {
        core.info(message)
      }
      exports.info = info
      const error = (message) => {
        core.error(message)
      }
      exports.error = error

      /***/
    },

    /***/ 22877: /***/ (module) => {
      module.exports = eval("require")("encoding")

      /***/
    },

    /***/ 3833: /***/ (module) => {
      function webpackEmptyContext(req) {
        var e = new Error("Cannot find module '" + req + "'")
        e.code = "MODULE_NOT_FOUND"
        throw e
      }
      webpackEmptyContext.keys = () => []
      webpackEmptyContext.resolve = webpackEmptyContext
      webpackEmptyContext.id = 3833
      module.exports = webpackEmptyContext

      /***/
    },

    /***/ 39491: /***/ (module) => {
      "use strict"
      module.exports = require("assert")

      /***/
    },

    /***/ 14300: /***/ (module) => {
      "use strict"
      module.exports = require("buffer")

      /***/
    },

    /***/ 32081: /***/ (module) => {
      "use strict"
      module.exports = require("child_process")

      /***/
    },

    /***/ 96206: /***/ (module) => {
      "use strict"
      module.exports = require("console")

      /***/
    },

    /***/ 82361: /***/ (module) => {
      "use strict"
      module.exports = require("events")

      /***/
    },

    /***/ 57147: /***/ (module) => {
      "use strict"
      module.exports = require("fs")

      /***/
    },

    /***/ 13685: /***/ (module) => {
      "use strict"
      module.exports = require("http")

      /***/
    },

    /***/ 95687: /***/ (module) => {
      "use strict"
      module.exports = require("https")

      /***/
    },

    /***/ 98188: /***/ (module) => {
      "use strict"
      module.exports = require("module")

      /***/
    },

    /***/ 41808: /***/ (module) => {
      "use strict"
      module.exports = require("net")

      /***/
    },

    /***/ 22037: /***/ (module) => {
      "use strict"
      module.exports = require("os")

      /***/
    },

    /***/ 71017: /***/ (module) => {
      "use strict"
      module.exports = require("path")

      /***/
    },

    /***/ 77282: /***/ (module) => {
      "use strict"
      module.exports = require("process")

      /***/
    },

    /***/ 85477: /***/ (module) => {
      "use strict"
      module.exports = require("punycode")

      /***/
    },

    /***/ 38102: /***/ (module) => {
      "use strict"
      module.exports = require("repl")

      /***/
    },

    /***/ 12781: /***/ (module) => {
      "use strict"
      module.exports = require("stream")

      /***/
    },

    /***/ 24404: /***/ (module) => {
      "use strict"
      module.exports = require("tls")

      /***/
    },

    /***/ 76224: /***/ (module) => {
      "use strict"
      module.exports = require("tty")

      /***/
    },

    /***/ 57310: /***/ (module) => {
      "use strict"
      module.exports = require("url")

      /***/
    },

    /***/ 73837: /***/ (module) => {
      "use strict"
      module.exports = require("util")

      /***/
    },

    /***/ 26144: /***/ (module) => {
      "use strict"
      module.exports = require("vm")

      /***/
    },

    /***/ 59796: /***/ (module) => {
      "use strict"
      module.exports = require("zlib")

      /***/
    },

    /***/ 60525: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var PlainValue = __nccwpck_require__(24941)
      var resolveSeq = __nccwpck_require__(39914)
      var Schema = __nccwpck_require__(51387)

      const defaultOptions = {
        anchorPrefix: "a",
        customTags: null,
        indent: 2,
        indentSeq: true,
        keepCstNodes: false,
        keepNodeTypes: true,
        keepBlobsInJSON: true,
        mapAsMap: false,
        maxAliasCount: 100,
        prettyErrors: false,
        // TODO Set true in v2
        simpleKeys: false,
        version: "1.2"
      }
      const scalarOptions = {
        get binary() {
          return resolveSeq.binaryOptions
        },

        set binary(opt) {
          Object.assign(resolveSeq.binaryOptions, opt)
        },

        get bool() {
          return resolveSeq.boolOptions
        },

        set bool(opt) {
          Object.assign(resolveSeq.boolOptions, opt)
        },

        get int() {
          return resolveSeq.intOptions
        },

        set int(opt) {
          Object.assign(resolveSeq.intOptions, opt)
        },

        get null() {
          return resolveSeq.nullOptions
        },

        set null(opt) {
          Object.assign(resolveSeq.nullOptions, opt)
        },

        get str() {
          return resolveSeq.strOptions
        },

        set str(opt) {
          Object.assign(resolveSeq.strOptions, opt)
        }
      }
      const documentOptions = {
        "1.0": {
          schema: "yaml-1.1",
          merge: true,
          tagPrefixes: [
            {
              handle: "!",
              prefix: PlainValue.defaultTagPrefix
            },
            {
              handle: "!!",
              prefix: "tag:private.yaml.org,2002:"
            }
          ]
        },
        1.1: {
          schema: "yaml-1.1",
          merge: true,
          tagPrefixes: [
            {
              handle: "!",
              prefix: "!"
            },
            {
              handle: "!!",
              prefix: PlainValue.defaultTagPrefix
            }
          ]
        },
        1.2: {
          schema: "core",
          merge: false,
          tagPrefixes: [
            {
              handle: "!",
              prefix: "!"
            },
            {
              handle: "!!",
              prefix: PlainValue.defaultTagPrefix
            }
          ]
        }
      }

      function stringifyTag(doc, tag) {
        if ((doc.version || doc.options.version) === "1.0") {
          const priv = tag.match(/^tag:private\.yaml\.org,2002:([^:/]+)$/)
          if (priv) return "!" + priv[1]
          const vocab = tag.match(/^tag:([a-zA-Z0-9-]+)\.yaml\.org,2002:(.*)/)
          return vocab ? `!${vocab[1]}/${vocab[2]}` : `!${tag.replace(/^tag:/, "")}`
        }

        let p = doc.tagPrefixes.find((p) => tag.indexOf(p.prefix) === 0)

        if (!p) {
          const dtp = doc.getDefaults().tagPrefixes
          p = dtp && dtp.find((p) => tag.indexOf(p.prefix) === 0)
        }

        if (!p) return tag[0] === "!" ? tag : `!<${tag}>`
        const suffix = tag.substr(p.prefix.length).replace(
          /[!,[\]{}]/g,
          (ch) =>
            ({
              "!": "%21",
              ",": "%2C",
              "[": "%5B",
              "]": "%5D",
              "{": "%7B",
              "}": "%7D"
            }[ch])
        )
        return p.handle + suffix
      }

      function getTagObject(tags, item) {
        if (item instanceof resolveSeq.Alias) return resolveSeq.Alias

        if (item.tag) {
          const match = tags.filter((t) => t.tag === item.tag)
          if (match.length > 0) return match.find((t) => t.format === item.format) || match[0]
        }

        let tagObj, obj

        if (item instanceof resolveSeq.Scalar) {
          obj = item.value // TODO: deprecate/remove class check

          const match = tags.filter(
            (t) => (t.identify && t.identify(obj)) || (t.class && obj instanceof t.class)
          )
          tagObj = match.find((t) => t.format === item.format) || match.find((t) => !t.format)
        } else {
          obj = item
          tagObj = tags.find((t) => t.nodeClass && obj instanceof t.nodeClass)
        }

        if (!tagObj) {
          const name = obj && obj.constructor ? obj.constructor.name : typeof obj
          throw new Error(`Tag not resolved for ${name} value`)
        }

        return tagObj
      } // needs to be called before value stringifier to allow for circular anchor refs

      function stringifyProps(node, tagObj, { anchors, doc }) {
        const props = []
        const anchor = doc.anchors.getName(node)

        if (anchor) {
          anchors[anchor] = node
          props.push(`&${anchor}`)
        }

        if (node.tag) {
          props.push(stringifyTag(doc, node.tag))
        } else if (!tagObj.default) {
          props.push(stringifyTag(doc, tagObj.tag))
        }

        return props.join(" ")
      }

      function stringify(item, ctx, onComment, onChompKeep) {
        const { anchors, schema } = ctx.doc
        let tagObj

        if (!(item instanceof resolveSeq.Node)) {
          const createCtx = {
            aliasNodes: [],
            onTagObj: (o) => (tagObj = o),
            prevObjects: new Map()
          }
          item = schema.createNode(item, true, null, createCtx)

          for (const alias of createCtx.aliasNodes) {
            alias.source = alias.source.node
            let name = anchors.getName(alias.source)

            if (!name) {
              name = anchors.newName()
              anchors.map[name] = alias.source
            }
          }
        }

        if (item instanceof resolveSeq.Pair) return item.toString(ctx, onComment, onChompKeep)
        if (!tagObj) tagObj = getTagObject(schema.tags, item)
        const props = stringifyProps(item, tagObj, ctx)
        if (props.length > 0) ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1
        const str =
          typeof tagObj.stringify === "function"
            ? tagObj.stringify(item, ctx, onComment, onChompKeep)
            : item instanceof resolveSeq.Scalar
            ? resolveSeq.stringifyString(item, ctx, onComment, onChompKeep)
            : item.toString(ctx, onComment, onChompKeep)
        if (!props) return str
        return item instanceof resolveSeq.Scalar || str[0] === "{" || str[0] === "["
          ? `${props} ${str}`
          : `${props}\n${ctx.indent}${str}`
      }

      class Anchors {
        static validAnchorNode(node) {
          return (
            node instanceof resolveSeq.Scalar ||
            node instanceof resolveSeq.YAMLSeq ||
            node instanceof resolveSeq.YAMLMap
          )
        }

        constructor(prefix) {
          PlainValue._defineProperty(this, "map", Object.create(null))

          this.prefix = prefix
        }

        createAlias(node, name) {
          this.setAnchor(node, name)
          return new resolveSeq.Alias(node)
        }

        createMergePair(...sources) {
          const merge = new resolveSeq.Merge()
          merge.value.items = sources.map((s) => {
            if (s instanceof resolveSeq.Alias) {
              if (s.source instanceof resolveSeq.YAMLMap) return s
            } else if (s instanceof resolveSeq.YAMLMap) {
              return this.createAlias(s)
            }

            throw new Error("Merge sources must be Map nodes or their Aliases")
          })
          return merge
        }

        getName(node) {
          const { map } = this
          return Object.keys(map).find((a) => map[a] === node)
        }

        getNames() {
          return Object.keys(this.map)
        }

        getNode(name) {
          return this.map[name]
        }

        newName(prefix) {
          if (!prefix) prefix = this.prefix
          const names = Object.keys(this.map)

          for (let i = 1; true; ++i) {
            const name = `${prefix}${i}`
            if (!names.includes(name)) return name
          }
        } // During parsing, map & aliases contain CST nodes

        resolveNodes() {
          const { map, _cstAliases } = this
          Object.keys(map).forEach((a) => {
            map[a] = map[a].resolved
          })

          _cstAliases.forEach((a) => {
            a.source = a.source.resolved
          })

          delete this._cstAliases
        }

        setAnchor(node, name) {
          if (node != null && !Anchors.validAnchorNode(node)) {
            throw new Error("Anchors may only be set for Scalar, Seq and Map nodes")
          }

          if (name && /[\x00-\x19\s,[\]{}]/.test(name)) {
            throw new Error("Anchor names must not contain whitespace or control characters")
          }

          const { map } = this
          const prev = node && Object.keys(map).find((a) => map[a] === node)

          if (prev) {
            if (!name) {
              return prev
            } else if (prev !== name) {
              delete map[prev]
              map[name] = node
            }
          } else {
            if (!name) {
              if (!node) return null
              name = this.newName()
            }

            map[name] = node
          }

          return name
        }
      }

      const visit = (node, tags) => {
        if (node && typeof node === "object") {
          const { tag } = node

          if (node instanceof resolveSeq.Collection) {
            if (tag) tags[tag] = true
            node.items.forEach((n) => visit(n, tags))
          } else if (node instanceof resolveSeq.Pair) {
            visit(node.key, tags)
            visit(node.value, tags)
          } else if (node instanceof resolveSeq.Scalar) {
            if (tag) tags[tag] = true
          }
        }

        return tags
      }

      const listTagNames = (node) => Object.keys(visit(node, {}))

      function parseContents(doc, contents) {
        const comments = {
          before: [],
          after: []
        }
        let body = undefined
        let spaceBefore = false

        for (const node of contents) {
          if (node.valueRange) {
            if (body !== undefined) {
              const msg = "Document contains trailing content not separated by a ... or --- line"
              doc.errors.push(new PlainValue.YAMLSyntaxError(node, msg))
              break
            }

            const res = resolveSeq.resolveNode(doc, node)

            if (spaceBefore) {
              res.spaceBefore = true
              spaceBefore = false
            }

            body = res
          } else if (node.comment !== null) {
            const cc = body === undefined ? comments.before : comments.after
            cc.push(node.comment)
          } else if (node.type === PlainValue.Type.BLANK_LINE) {
            spaceBefore = true

            if (body === undefined && comments.before.length > 0 && !doc.commentBefore) {
              // space-separated comments at start are parsed as document comments
              doc.commentBefore = comments.before.join("\n")
              comments.before = []
            }
          }
        }

        doc.contents = body || null

        if (!body) {
          doc.comment = comments.before.concat(comments.after).join("\n") || null
        } else {
          const cb = comments.before.join("\n")

          if (cb) {
            const cbNode =
              body instanceof resolveSeq.Collection && body.items[0] ? body.items[0] : body
            cbNode.commentBefore = cbNode.commentBefore ? `${cb}\n${cbNode.commentBefore}` : cb
          }

          doc.comment = comments.after.join("\n") || null
        }
      }

      function resolveTagDirective({ tagPrefixes }, directive) {
        const [handle, prefix] = directive.parameters

        if (!handle || !prefix) {
          const msg = "Insufficient parameters given for %TAG directive"
          throw new PlainValue.YAMLSemanticError(directive, msg)
        }

        if (tagPrefixes.some((p) => p.handle === handle)) {
          const msg =
            "The %TAG directive must only be given at most once per handle in the same document."
          throw new PlainValue.YAMLSemanticError(directive, msg)
        }

        return {
          handle,
          prefix
        }
      }

      function resolveYamlDirective(doc, directive) {
        let [version] = directive.parameters
        if (directive.name === "YAML:1.0") version = "1.0"

        if (!version) {
          const msg = "Insufficient parameters given for %YAML directive"
          throw new PlainValue.YAMLSemanticError(directive, msg)
        }

        if (!documentOptions[version]) {
          const v0 = doc.version || doc.options.version
          const msg = `Document will be parsed as YAML ${v0} rather than YAML ${version}`
          doc.warnings.push(new PlainValue.YAMLWarning(directive, msg))
        }

        return version
      }

      function parseDirectives(doc, directives, prevDoc) {
        const directiveComments = []
        let hasDirectives = false

        for (const directive of directives) {
          const { comment, name } = directive

          switch (name) {
            case "TAG":
              try {
                doc.tagPrefixes.push(resolveTagDirective(doc, directive))
              } catch (error) {
                doc.errors.push(error)
              }

              hasDirectives = true
              break

            case "YAML":
            case "YAML:1.0":
              if (doc.version) {
                const msg = "The %YAML directive must only be given at most once per document."
                doc.errors.push(new PlainValue.YAMLSemanticError(directive, msg))
              }

              try {
                doc.version = resolveYamlDirective(doc, directive)
              } catch (error) {
                doc.errors.push(error)
              }

              hasDirectives = true
              break

            default:
              if (name) {
                const msg = `YAML only supports %TAG and %YAML directives, and not %${name}`
                doc.warnings.push(new PlainValue.YAMLWarning(directive, msg))
              }
          }

          if (comment) directiveComments.push(comment)
        }

        if (
          prevDoc &&
          !hasDirectives &&
          "1.1" === (doc.version || prevDoc.version || doc.options.version)
        ) {
          const copyTagPrefix = ({ handle, prefix }) => ({
            handle,
            prefix
          })

          doc.tagPrefixes = prevDoc.tagPrefixes.map(copyTagPrefix)
          doc.version = prevDoc.version
        }

        doc.commentBefore = directiveComments.join("\n") || null
      }

      function assertCollection(contents) {
        if (contents instanceof resolveSeq.Collection) return true
        throw new Error("Expected a YAML collection as document contents")
      }

      class Document {
        constructor(options) {
          this.anchors = new Anchors(options.anchorPrefix)
          this.commentBefore = null
          this.comment = null
          this.contents = null
          this.directivesEndMarker = null
          this.errors = []
          this.options = options
          this.schema = null
          this.tagPrefixes = []
          this.version = null
          this.warnings = []
        }

        add(value) {
          assertCollection(this.contents)
          return this.contents.add(value)
        }

        addIn(path, value) {
          assertCollection(this.contents)
          this.contents.addIn(path, value)
        }

        delete(key) {
          assertCollection(this.contents)
          return this.contents.delete(key)
        }

        deleteIn(path) {
          if (resolveSeq.isEmptyPath(path)) {
            if (this.contents == null) return false
            this.contents = null
            return true
          }

          assertCollection(this.contents)
          return this.contents.deleteIn(path)
        }

        getDefaults() {
          return Document.defaults[this.version] || Document.defaults[this.options.version] || {}
        }

        get(key, keepScalar) {
          return this.contents instanceof resolveSeq.Collection
            ? this.contents.get(key, keepScalar)
            : undefined
        }

        getIn(path, keepScalar) {
          if (resolveSeq.isEmptyPath(path))
            return !keepScalar && this.contents instanceof resolveSeq.Scalar
              ? this.contents.value
              : this.contents
          return this.contents instanceof resolveSeq.Collection
            ? this.contents.getIn(path, keepScalar)
            : undefined
        }

        has(key) {
          return this.contents instanceof resolveSeq.Collection ? this.contents.has(key) : false
        }

        hasIn(path) {
          if (resolveSeq.isEmptyPath(path)) return this.contents !== undefined
          return this.contents instanceof resolveSeq.Collection ? this.contents.hasIn(path) : false
        }

        set(key, value) {
          assertCollection(this.contents)
          this.contents.set(key, value)
        }

        setIn(path, value) {
          if (resolveSeq.isEmptyPath(path)) this.contents = value
          else {
            assertCollection(this.contents)
            this.contents.setIn(path, value)
          }
        }

        setSchema(id, customTags) {
          if (!id && !customTags && this.schema) return
          if (typeof id === "number") id = id.toFixed(1)

          if (id === "1.0" || id === "1.1" || id === "1.2") {
            if (this.version) this.version = id
            else this.options.version = id
            delete this.options.schema
          } else if (id && typeof id === "string") {
            this.options.schema = id
          }

          if (Array.isArray(customTags)) this.options.customTags = customTags
          const opt = Object.assign({}, this.getDefaults(), this.options)
          this.schema = new Schema.Schema(opt)
        }

        parse(node, prevDoc) {
          if (this.options.keepCstNodes) this.cstNode = node
          if (this.options.keepNodeTypes) this.type = "DOCUMENT"
          const { directives = [], contents = [], directivesEndMarker, error, valueRange } = node

          if (error) {
            if (!error.source) error.source = this
            this.errors.push(error)
          }

          parseDirectives(this, directives, prevDoc)
          if (directivesEndMarker) this.directivesEndMarker = true
          this.range = valueRange ? [valueRange.start, valueRange.end] : null
          this.setSchema()
          this.anchors._cstAliases = []
          parseContents(this, contents)
          this.anchors.resolveNodes()

          if (this.options.prettyErrors) {
            for (const error of this.errors)
              if (error instanceof PlainValue.YAMLError) error.makePretty()

            for (const warn of this.warnings)
              if (warn instanceof PlainValue.YAMLError) warn.makePretty()
          }

          return this
        }

        listNonDefaultTags() {
          return listTagNames(this.contents).filter(
            (t) => t.indexOf(Schema.Schema.defaultPrefix) !== 0
          )
        }

        setTagPrefix(handle, prefix) {
          if (handle[0] !== "!" || handle[handle.length - 1] !== "!")
            throw new Error("Handle must start and end with !")

          if (prefix) {
            const prev = this.tagPrefixes.find((p) => p.handle === handle)
            if (prev) prev.prefix = prefix
            else
              this.tagPrefixes.push({
                handle,
                prefix
              })
          } else {
            this.tagPrefixes = this.tagPrefixes.filter((p) => p.handle !== handle)
          }
        }

        toJSON(arg, onAnchor) {
          const { keepBlobsInJSON, mapAsMap, maxAliasCount } = this.options
          const keep =
            keepBlobsInJSON &&
            (typeof arg !== "string" || !(this.contents instanceof resolveSeq.Scalar))
          const ctx = {
            doc: this,
            indentStep: "  ",
            keep,
            mapAsMap: keep && !!mapAsMap,
            maxAliasCount,
            stringify // Requiring directly in Pair would create circular dependencies
          }
          const anchorNames = Object.keys(this.anchors.map)
          if (anchorNames.length > 0)
            ctx.anchors = new Map(
              anchorNames.map((name) => [
                this.anchors.map[name],
                {
                  alias: [],
                  aliasCount: 0,
                  count: 1
                }
              ])
            )
          const res = resolveSeq.toJSON(this.contents, arg, ctx)
          if (typeof onAnchor === "function" && ctx.anchors)
            for (const { count, res } of ctx.anchors.values()) onAnchor(res, count)
          return res
        }

        toString() {
          if (this.errors.length > 0) throw new Error("Document with errors cannot be stringified")
          const indentSize = this.options.indent

          if (!Number.isInteger(indentSize) || indentSize <= 0) {
            const s = JSON.stringify(indentSize)
            throw new Error(`"indent" option must be a positive integer, not ${s}`)
          }

          this.setSchema()
          const lines = []
          let hasDirectives = false

          if (this.version) {
            let vd = "%YAML 1.2"

            if (this.schema.name === "yaml-1.1") {
              if (this.version === "1.0") vd = "%YAML:1.0"
              else if (this.version === "1.1") vd = "%YAML 1.1"
            }

            lines.push(vd)
            hasDirectives = true
          }

          const tagNames = this.listNonDefaultTags()
          this.tagPrefixes.forEach(({ handle, prefix }) => {
            if (tagNames.some((t) => t.indexOf(prefix) === 0)) {
              lines.push(`%TAG ${handle} ${prefix}`)
              hasDirectives = true
            }
          })
          if (hasDirectives || this.directivesEndMarker) lines.push("---")

          if (this.commentBefore) {
            if (hasDirectives || !this.directivesEndMarker) lines.unshift("")
            lines.unshift(this.commentBefore.replace(/^/gm, "#"))
          }

          const ctx = {
            anchors: Object.create(null),
            doc: this,
            indent: "",
            indentStep: " ".repeat(indentSize),
            stringify // Requiring directly in nodes would create circular dependencies
          }
          let chompKeep = false
          let contentComment = null

          if (this.contents) {
            if (this.contents instanceof resolveSeq.Node) {
              if (this.contents.spaceBefore && (hasDirectives || this.directivesEndMarker))
                lines.push("")
              if (this.contents.commentBefore)
                lines.push(this.contents.commentBefore.replace(/^/gm, "#")) // top-level block scalars need to be indented if followed by a comment

              ctx.forceBlockIndent = !!this.comment
              contentComment = this.contents.comment
            }

            const onChompKeep = contentComment ? null : () => (chompKeep = true)
            const body = stringify(this.contents, ctx, () => (contentComment = null), onChompKeep)
            lines.push(resolveSeq.addComment(body, "", contentComment))
          } else if (this.contents !== undefined) {
            lines.push(stringify(this.contents, ctx))
          }

          if (this.comment) {
            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "") lines.push("")
            lines.push(this.comment.replace(/^/gm, "#"))
          }

          return lines.join("\n") + "\n"
        }
      }

      PlainValue._defineProperty(Document, "defaults", documentOptions)

      exports.Document = Document
      exports.defaultOptions = defaultOptions
      exports.scalarOptions = scalarOptions

      /***/
    },

    /***/ 24941: /***/ (__unused_webpack_module, exports) => {
      "use strict"

      const Char = {
        ANCHOR: "&",
        COMMENT: "#",
        TAG: "!",
        DIRECTIVES_END: "-",
        DOCUMENT_END: "."
      }
      const Type = {
        ALIAS: "ALIAS",
        BLANK_LINE: "BLANK_LINE",
        BLOCK_FOLDED: "BLOCK_FOLDED",
        BLOCK_LITERAL: "BLOCK_LITERAL",
        COMMENT: "COMMENT",
        DIRECTIVE: "DIRECTIVE",
        DOCUMENT: "DOCUMENT",
        FLOW_MAP: "FLOW_MAP",
        FLOW_SEQ: "FLOW_SEQ",
        MAP: "MAP",
        MAP_KEY: "MAP_KEY",
        MAP_VALUE: "MAP_VALUE",
        PLAIN: "PLAIN",
        QUOTE_DOUBLE: "QUOTE_DOUBLE",
        QUOTE_SINGLE: "QUOTE_SINGLE",
        SEQ: "SEQ",
        SEQ_ITEM: "SEQ_ITEM"
      }
      const defaultTagPrefix = "tag:yaml.org,2002:"
      const defaultTags = {
        MAP: "tag:yaml.org,2002:map",
        SEQ: "tag:yaml.org,2002:seq",
        STR: "tag:yaml.org,2002:str"
      }

      function findLineStarts(src) {
        const ls = [0]
        let offset = src.indexOf("\n")

        while (offset !== -1) {
          offset += 1
          ls.push(offset)
          offset = src.indexOf("\n", offset)
        }

        return ls
      }

      function getSrcInfo(cst) {
        let lineStarts, src

        if (typeof cst === "string") {
          lineStarts = findLineStarts(cst)
          src = cst
        } else {
          if (Array.isArray(cst)) cst = cst[0]

          if (cst && cst.context) {
            if (!cst.lineStarts) cst.lineStarts = findLineStarts(cst.context.src)
            lineStarts = cst.lineStarts
            src = cst.context.src
          }
        }

        return {
          lineStarts,
          src
        }
      }
      /**
       * @typedef {Object} LinePos - One-indexed position in the source
       * @property {number} line
       * @property {number} col
       */

      /**
       * Determine the line/col position matching a character offset.
       *
       * Accepts a source string or a CST document as the second parameter. With
       * the latter, starting indices for lines are cached in the document as
       * `lineStarts: number[]`.
       *
       * Returns a one-indexed `{ line, col }` location if found, or
       * `undefined` otherwise.
       *
       * @param {number} offset
       * @param {string|Document|Document[]} cst
       * @returns {?LinePos}
       */

      function getLinePos(offset, cst) {
        if (typeof offset !== "number" || offset < 0) return null
        const { lineStarts, src } = getSrcInfo(cst)
        if (!lineStarts || !src || offset > src.length) return null

        for (let i = 0; i < lineStarts.length; ++i) {
          const start = lineStarts[i]

          if (offset < start) {
            return {
              line: i,
              col: offset - lineStarts[i - 1] + 1
            }
          }

          if (offset === start)
            return {
              line: i + 1,
              col: 1
            }
        }

        const line = lineStarts.length
        return {
          line,
          col: offset - lineStarts[line - 1] + 1
        }
      }
      /**
       * Get a specified line from the source.
       *
       * Accepts a source string or a CST document as the second parameter. With
       * the latter, starting indices for lines are cached in the document as
       * `lineStarts: number[]`.
       *
       * Returns the line as a string if found, or `null` otherwise.
       *
       * @param {number} line One-indexed line number
       * @param {string|Document|Document[]} cst
       * @returns {?string}
       */

      function getLine(line, cst) {
        const { lineStarts, src } = getSrcInfo(cst)
        if (!lineStarts || !(line >= 1) || line > lineStarts.length) return null
        const start = lineStarts[line - 1]
        let end = lineStarts[line] // undefined for last line; that's ok for slice()

        while (end && end > start && src[end - 1] === "\n") --end

        return src.slice(start, end)
      }
      /**
       * Pretty-print the starting line from the source indicated by the range `pos`
       *
       * Trims output to `maxWidth` chars while keeping the starting column visible,
       * using `…` at either end to indicate dropped characters.
       *
       * Returns a two-line string (or `null`) with `\n` as separator; the second line
       * will hold appropriately indented `^` marks indicating the column range.
       *
       * @param {Object} pos
       * @param {LinePos} pos.start
       * @param {LinePos} [pos.end]
       * @param {string|Document|Document[]*} cst
       * @param {number} [maxWidth=80]
       * @returns {?string}
       */

      function getPrettyContext({ start, end }, cst, maxWidth = 80) {
        let src = getLine(start.line, cst)
        if (!src) return null
        let { col } = start

        if (src.length > maxWidth) {
          if (col <= maxWidth - 10) {
            src = src.substr(0, maxWidth - 1) + "…"
          } else {
            const halfWidth = Math.round(maxWidth / 2)
            if (src.length > col + halfWidth) src = src.substr(0, col + halfWidth - 1) + "…"
            col -= src.length - maxWidth
            src = "…" + src.substr(1 - maxWidth)
          }
        }

        let errLen = 1
        let errEnd = ""

        if (end) {
          if (end.line === start.line && col + (end.col - start.col) <= maxWidth + 1) {
            errLen = end.col - start.col
          } else {
            errLen = Math.min(src.length + 1, maxWidth) - col
            errEnd = "…"
          }
        }

        const offset = col > 1 ? " ".repeat(col - 1) : ""
        const err = "^".repeat(errLen)
        return `${src}\n${offset}${err}${errEnd}`
      }

      class Range {
        static copy(orig) {
          return new Range(orig.start, orig.end)
        }

        constructor(start, end) {
          this.start = start
          this.end = end || start
        }

        isEmpty() {
          return typeof this.start !== "number" || !this.end || this.end <= this.start
        }
        /**
         * Set `origStart` and `origEnd` to point to the original source range for
         * this node, which may differ due to dropped CR characters.
         *
         * @param {number[]} cr - Positions of dropped CR characters
         * @param {number} offset - Starting index of `cr` from the last call
         * @returns {number} - The next offset, matching the one found for `origStart`
         */

        setOrigRange(cr, offset) {
          const { start, end } = this

          if (cr.length === 0 || end <= cr[0]) {
            this.origStart = start
            this.origEnd = end
            return offset
          }

          let i = offset

          while (i < cr.length) {
            if (cr[i] > start) break
            else ++i
          }

          this.origStart = start + i
          const nextOffset = i

          while (i < cr.length) {
            // if end was at \n, it should now be at \r
            if (cr[i] >= end) break
            else ++i
          }

          this.origEnd = end + i
          return nextOffset
        }
      }

      /** Root class of all nodes */

      class Node {
        static addStringTerminator(src, offset, str) {
          if (str[str.length - 1] === "\n") return str
          const next = Node.endOfWhiteSpace(src, offset)
          return next >= src.length || src[next] === "\n" ? str + "\n" : str
        } // ^(---|...)

        static atDocumentBoundary(src, offset, sep) {
          const ch0 = src[offset]
          if (!ch0) return true
          const prev = src[offset - 1]
          if (prev && prev !== "\n") return false

          if (sep) {
            if (ch0 !== sep) return false
          } else {
            if (ch0 !== Char.DIRECTIVES_END && ch0 !== Char.DOCUMENT_END) return false
          }

          const ch1 = src[offset + 1]
          const ch2 = src[offset + 2]
          if (ch1 !== ch0 || ch2 !== ch0) return false
          const ch3 = src[offset + 3]
          return !ch3 || ch3 === "\n" || ch3 === "\t" || ch3 === " "
        }

        static endOfIdentifier(src, offset) {
          let ch = src[offset]
          const isVerbatim = ch === "<"
          const notOk = isVerbatim
            ? ["\n", "\t", " ", ">"]
            : ["\n", "\t", " ", "[", "]", "{", "}", ","]

          while (ch && notOk.indexOf(ch) === -1) ch = src[(offset += 1)]

          if (isVerbatim && ch === ">") offset += 1
          return offset
        }

        static endOfIndent(src, offset) {
          let ch = src[offset]

          while (ch === " ") ch = src[(offset += 1)]

          return offset
        }

        static endOfLine(src, offset) {
          let ch = src[offset]

          while (ch && ch !== "\n") ch = src[(offset += 1)]

          return offset
        }

        static endOfWhiteSpace(src, offset) {
          let ch = src[offset]

          while (ch === "\t" || ch === " ") ch = src[(offset += 1)]

          return offset
        }

        static startOfLine(src, offset) {
          let ch = src[offset - 1]
          if (ch === "\n") return offset

          while (ch && ch !== "\n") ch = src[(offset -= 1)]

          return offset + 1
        }
        /**
         * End of indentation, or null if the line's indent level is not more
         * than `indent`
         *
         * @param {string} src
         * @param {number} indent
         * @param {number} lineStart
         * @returns {?number}
         */

        static endOfBlockIndent(src, indent, lineStart) {
          const inEnd = Node.endOfIndent(src, lineStart)

          if (inEnd > lineStart + indent) {
            return inEnd
          } else {
            const wsEnd = Node.endOfWhiteSpace(src, inEnd)
            const ch = src[wsEnd]
            if (!ch || ch === "\n") return wsEnd
          }

          return null
        }

        static atBlank(src, offset, endAsBlank) {
          const ch = src[offset]
          return ch === "\n" || ch === "\t" || ch === " " || (endAsBlank && !ch)
        }

        static nextNodeIsIndented(ch, indentDiff, indicatorAsIndent) {
          if (!ch || indentDiff < 0) return false
          if (indentDiff > 0) return true
          return indicatorAsIndent && ch === "-"
        } // should be at line or string end, or at next non-whitespace char

        static normalizeOffset(src, offset) {
          const ch = src[offset]
          return !ch
            ? offset
            : ch !== "\n" && src[offset - 1] === "\n"
            ? offset - 1
            : Node.endOfWhiteSpace(src, offset)
        } // fold single newline into space, multiple newlines to N - 1 newlines
        // presumes src[offset] === '\n'

        static foldNewline(src, offset, indent) {
          let inCount = 0
          let error = false
          let fold = ""
          let ch = src[offset + 1]

          while (ch === " " || ch === "\t" || ch === "\n") {
            switch (ch) {
              case "\n":
                inCount = 0
                offset += 1
                fold += "\n"
                break

              case "\t":
                if (inCount <= indent) error = true
                offset = Node.endOfWhiteSpace(src, offset + 2) - 1
                break

              case " ":
                inCount += 1
                offset += 1
                break
            }

            ch = src[offset + 1]
          }

          if (!fold) fold = " "
          if (ch && inCount <= indent) error = true
          return {
            fold,
            offset,
            error
          }
        }

        constructor(type, props, context) {
          Object.defineProperty(this, "context", {
            value: context || null,
            writable: true
          })
          this.error = null
          this.range = null
          this.valueRange = null
          this.props = props || []
          this.type = type
          this.value = null
        }

        getPropValue(idx, key, skipKey) {
          if (!this.context) return null
          const { src } = this.context
          const prop = this.props[idx]
          return prop && src[prop.start] === key
            ? src.slice(prop.start + (skipKey ? 1 : 0), prop.end)
            : null
        }

        get anchor() {
          for (let i = 0; i < this.props.length; ++i) {
            const anchor = this.getPropValue(i, Char.ANCHOR, true)
            if (anchor != null) return anchor
          }

          return null
        }

        get comment() {
          const comments = []

          for (let i = 0; i < this.props.length; ++i) {
            const comment = this.getPropValue(i, Char.COMMENT, true)
            if (comment != null) comments.push(comment)
          }

          return comments.length > 0 ? comments.join("\n") : null
        }

        commentHasRequiredWhitespace(start) {
          const { src } = this.context
          if (this.header && start === this.header.end) return false
          if (!this.valueRange) return false
          const { end } = this.valueRange
          return start !== end || Node.atBlank(src, end - 1)
        }

        get hasComment() {
          if (this.context) {
            const { src } = this.context

            for (let i = 0; i < this.props.length; ++i) {
              if (src[this.props[i].start] === Char.COMMENT) return true
            }
          }

          return false
        }

        get hasProps() {
          if (this.context) {
            const { src } = this.context

            for (let i = 0; i < this.props.length; ++i) {
              if (src[this.props[i].start] !== Char.COMMENT) return true
            }
          }

          return false
        }

        get includesTrailingLines() {
          return false
        }

        get jsonLike() {
          const jsonLikeTypes = [Type.FLOW_MAP, Type.FLOW_SEQ, Type.QUOTE_DOUBLE, Type.QUOTE_SINGLE]
          return jsonLikeTypes.indexOf(this.type) !== -1
        }

        get rangeAsLinePos() {
          if (!this.range || !this.context) return undefined
          const start = getLinePos(this.range.start, this.context.root)
          if (!start) return undefined
          const end = getLinePos(this.range.end, this.context.root)
          return {
            start,
            end
          }
        }

        get rawValue() {
          if (!this.valueRange || !this.context) return null
          const { start, end } = this.valueRange
          return this.context.src.slice(start, end)
        }

        get tag() {
          for (let i = 0; i < this.props.length; ++i) {
            const tag = this.getPropValue(i, Char.TAG, false)

            if (tag != null) {
              if (tag[1] === "<") {
                return {
                  verbatim: tag.slice(2, -1)
                }
              } else {
                // eslint-disable-next-line no-unused-vars
                const [_, handle, suffix] = tag.match(/^(.*!)([^!]*)$/)
                return {
                  handle,
                  suffix
                }
              }
            }
          }

          return null
        }

        get valueRangeContainsNewline() {
          if (!this.valueRange || !this.context) return false
          const { start, end } = this.valueRange
          const { src } = this.context

          for (let i = start; i < end; ++i) {
            if (src[i] === "\n") return true
          }

          return false
        }

        parseComment(start) {
          const { src } = this.context

          if (src[start] === Char.COMMENT) {
            const end = Node.endOfLine(src, start + 1)
            const commentRange = new Range(start, end)
            this.props.push(commentRange)
            return end
          }

          return start
        }
        /**
         * Populates the `origStart` and `origEnd` values of all ranges for this
         * node. Extended by child classes to handle descendant nodes.
         *
         * @param {number[]} cr - Positions of dropped CR characters
         * @param {number} offset - Starting index of `cr` from the last call
         * @returns {number} - The next offset, matching the one found for `origStart`
         */

        setOrigRanges(cr, offset) {
          if (this.range) offset = this.range.setOrigRange(cr, offset)
          if (this.valueRange) this.valueRange.setOrigRange(cr, offset)
          this.props.forEach((prop) => prop.setOrigRange(cr, offset))
          return offset
        }

        toString() {
          const {
            context: { src },
            range,
            value
          } = this
          if (value != null) return value
          const str = src.slice(range.start, range.end)
          return Node.addStringTerminator(src, range.end, str)
        }
      }

      class YAMLError extends Error {
        constructor(name, source, message) {
          if (!message || !(source instanceof Node))
            throw new Error(`Invalid arguments for new ${name}`)
          super()
          this.name = name
          this.message = message
          this.source = source
        }

        makePretty() {
          if (!this.source) return
          this.nodeType = this.source.type
          const cst = this.source.context && this.source.context.root

          if (typeof this.offset === "number") {
            this.range = new Range(this.offset, this.offset + 1)
            const start = cst && getLinePos(this.offset, cst)

            if (start) {
              const end = {
                line: start.line,
                col: start.col + 1
              }
              this.linePos = {
                start,
                end
              }
            }

            delete this.offset
          } else {
            this.range = this.source.range
            this.linePos = this.source.rangeAsLinePos
          }

          if (this.linePos) {
            const { line, col } = this.linePos.start
            this.message += ` at line ${line}, column ${col}`
            const ctx = cst && getPrettyContext(this.linePos, cst)
            if (ctx) this.message += `:\n\n${ctx}\n`
          }

          delete this.source
        }
      }
      class YAMLReferenceError extends YAMLError {
        constructor(source, message) {
          super("YAMLReferenceError", source, message)
        }
      }
      class YAMLSemanticError extends YAMLError {
        constructor(source, message) {
          super("YAMLSemanticError", source, message)
        }
      }
      class YAMLSyntaxError extends YAMLError {
        constructor(source, message) {
          super("YAMLSyntaxError", source, message)
        }
      }
      class YAMLWarning extends YAMLError {
        constructor(source, message) {
          super("YAMLWarning", source, message)
        }
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          })
        } else {
          obj[key] = value
        }

        return obj
      }

      class PlainValue extends Node {
        static endOfLine(src, start, inFlow) {
          let ch = src[start]
          let offset = start

          while (ch && ch !== "\n") {
            if (inFlow && (ch === "[" || ch === "]" || ch === "{" || ch === "}" || ch === ","))
              break
            const next = src[offset + 1]
            if (
              ch === ":" &&
              (!next || next === "\n" || next === "\t" || next === " " || (inFlow && next === ","))
            )
              break
            if ((ch === " " || ch === "\t") && next === "#") break
            offset += 1
            ch = next
          }

          return offset
        }

        get strValue() {
          if (!this.valueRange || !this.context) return null
          let { start, end } = this.valueRange
          const { src } = this.context
          let ch = src[end - 1]

          while (start < end && (ch === "\n" || ch === "\t" || ch === " ")) ch = src[--end - 1]

          let str = ""

          for (let i = start; i < end; ++i) {
            const ch = src[i]

            if (ch === "\n") {
              const { fold, offset } = Node.foldNewline(src, i, -1)
              str += fold
              i = offset
            } else if (ch === " " || ch === "\t") {
              // trim trailing whitespace
              const wsStart = i
              let next = src[i + 1]

              while (i < end && (next === " " || next === "\t")) {
                i += 1
                next = src[i + 1]
              }

              if (next !== "\n") str += i > wsStart ? src.slice(wsStart, i + 1) : ch
            } else {
              str += ch
            }
          }

          const ch0 = src[start]

          switch (ch0) {
            case "\t": {
              const msg = "Plain value cannot start with a tab character"
              const errors = [new YAMLSemanticError(this, msg)]
              return {
                errors,
                str
              }
            }

            case "@":
            case "`": {
              const msg = `Plain value cannot start with reserved character ${ch0}`
              const errors = [new YAMLSemanticError(this, msg)]
              return {
                errors,
                str
              }
            }

            default:
              return str
          }
        }

        parseBlockValue(start) {
          const { indent, inFlow, src } = this.context
          let offset = start
          let valueEnd = start

          for (let ch = src[offset]; ch === "\n"; ch = src[offset]) {
            if (Node.atDocumentBoundary(src, offset + 1)) break
            const end = Node.endOfBlockIndent(src, indent, offset + 1)
            if (end === null || src[end] === "#") break

            if (src[end] === "\n") {
              offset = end
            } else {
              valueEnd = PlainValue.endOfLine(src, end, inFlow)
              offset = valueEnd
            }
          }

          if (this.valueRange.isEmpty()) this.valueRange.start = start
          this.valueRange.end = valueEnd
          return valueEnd
        }
        /**
         * Parses a plain value from the source
         *
         * Accepted forms are:
         * ```
         * #comment
         *
         * first line
         *
         * first line #comment
         *
         * first line
         * block
         * lines
         *
         * #comment
         * block
         * lines
         * ```
         * where block lines are empty or have an indent level greater than `indent`.
         *
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this scalar, may be `\n`
         */

        parse(context, start) {
          this.context = context
          const { inFlow, src } = context
          let offset = start
          const ch = src[offset]

          if (ch && ch !== "#" && ch !== "\n") {
            offset = PlainValue.endOfLine(src, start, inFlow)
          }

          this.valueRange = new Range(start, offset)
          offset = Node.endOfWhiteSpace(src, offset)
          offset = this.parseComment(offset)

          if (!this.hasComment || this.valueRange.isEmpty()) {
            offset = this.parseBlockValue(offset)
          }

          return offset
        }
      }

      exports.Char = Char
      exports.Node = Node
      exports.PlainValue = PlainValue
      exports.Range = Range
      exports.Type = Type
      exports.YAMLError = YAMLError
      exports.YAMLReferenceError = YAMLReferenceError
      exports.YAMLSemanticError = YAMLSemanticError
      exports.YAMLSyntaxError = YAMLSyntaxError
      exports.YAMLWarning = YAMLWarning
      exports._defineProperty = _defineProperty
      exports.defaultTagPrefix = defaultTagPrefix
      exports.defaultTags = defaultTags

      /***/
    },

    /***/ 51387: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var PlainValue = __nccwpck_require__(24941)
      var resolveSeq = __nccwpck_require__(39914)
      var warnings = __nccwpck_require__(95130)

      function createMap(schema, obj, ctx) {
        const map = new resolveSeq.YAMLMap(schema)

        if (obj instanceof Map) {
          for (const [key, value] of obj) map.items.push(schema.createPair(key, value, ctx))
        } else if (obj && typeof obj === "object") {
          for (const key of Object.keys(obj)) map.items.push(schema.createPair(key, obj[key], ctx))
        }

        if (typeof schema.sortMapEntries === "function") {
          map.items.sort(schema.sortMapEntries)
        }

        return map
      }

      const map = {
        createNode: createMap,
        default: true,
        nodeClass: resolveSeq.YAMLMap,
        tag: "tag:yaml.org,2002:map",
        resolve: resolveSeq.resolveMap
      }

      function createSeq(schema, obj, ctx) {
        const seq = new resolveSeq.YAMLSeq(schema)

        if (obj && obj[Symbol.iterator]) {
          for (const it of obj) {
            const v = schema.createNode(it, ctx.wrapScalars, null, ctx)
            seq.items.push(v)
          }
        }

        return seq
      }

      const seq = {
        createNode: createSeq,
        default: true,
        nodeClass: resolveSeq.YAMLSeq,
        tag: "tag:yaml.org,2002:seq",
        resolve: resolveSeq.resolveSeq
      }

      const string = {
        identify: (value) => typeof value === "string",
        default: true,
        tag: "tag:yaml.org,2002:str",
        resolve: resolveSeq.resolveString,

        stringify(item, ctx, onComment, onChompKeep) {
          ctx = Object.assign(
            {
              actualString: true
            },
            ctx
          )
          return resolveSeq.stringifyString(item, ctx, onComment, onChompKeep)
        },

        options: resolveSeq.strOptions
      }

      const failsafe = [map, seq, string]

      /* global BigInt */

      const intIdentify$2 = (value) => typeof value === "bigint" || Number.isInteger(value)

      const intResolve$1 = (src, part, radix) =>
        resolveSeq.intOptions.asBigInt ? BigInt(src) : parseInt(part, radix)

      function intStringify$1(node, radix, prefix) {
        const { value } = node
        if (intIdentify$2(value) && value >= 0) return prefix + value.toString(radix)
        return resolveSeq.stringifyNumber(node)
      }

      const nullObj = {
        identify: (value) => value == null,
        createNode: (schema, value, ctx) => (ctx.wrapScalars ? new resolveSeq.Scalar(null) : null),
        default: true,
        tag: "tag:yaml.org,2002:null",
        test: /^(?:~|[Nn]ull|NULL)?$/,
        resolve: () => null,
        options: resolveSeq.nullOptions,
        stringify: () => resolveSeq.nullOptions.nullStr
      }
      const boolObj = {
        identify: (value) => typeof value === "boolean",
        default: true,
        tag: "tag:yaml.org,2002:bool",
        test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
        resolve: (str) => str[0] === "t" || str[0] === "T",
        options: resolveSeq.boolOptions,
        stringify: ({ value }) =>
          value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr
      }
      const octObj = {
        identify: (value) => intIdentify$2(value) && value >= 0,
        default: true,
        tag: "tag:yaml.org,2002:int",
        format: "OCT",
        test: /^0o([0-7]+)$/,
        resolve: (str, oct) => intResolve$1(str, oct, 8),
        options: resolveSeq.intOptions,
        stringify: (node) => intStringify$1(node, 8, "0o")
      }
      const intObj = {
        identify: intIdentify$2,
        default: true,
        tag: "tag:yaml.org,2002:int",
        test: /^[-+]?[0-9]+$/,
        resolve: (str) => intResolve$1(str, str, 10),
        options: resolveSeq.intOptions,
        stringify: resolveSeq.stringifyNumber
      }
      const hexObj = {
        identify: (value) => intIdentify$2(value) && value >= 0,
        default: true,
        tag: "tag:yaml.org,2002:int",
        format: "HEX",
        test: /^0x([0-9a-fA-F]+)$/,
        resolve: (str, hex) => intResolve$1(str, hex, 16),
        options: resolveSeq.intOptions,
        stringify: (node) => intStringify$1(node, 16, "0x")
      }
      const nanObj = {
        identify: (value) => typeof value === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        test: /^(?:[-+]?\.inf|(\.nan))$/i,
        resolve: (str, nan) =>
          nan ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        stringify: resolveSeq.stringifyNumber
      }
      const expObj = {
        identify: (value) => typeof value === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        format: "EXP",
        test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
        resolve: (str) => parseFloat(str),
        stringify: ({ value }) => Number(value).toExponential()
      }
      const floatObj = {
        identify: (value) => typeof value === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        test: /^[-+]?(?:\.([0-9]+)|[0-9]+\.([0-9]*))$/,

        resolve(str, frac1, frac2) {
          const frac = frac1 || frac2
          const node = new resolveSeq.Scalar(parseFloat(str))
          if (frac && frac[frac.length - 1] === "0") node.minFractionDigits = frac.length
          return node
        },

        stringify: resolveSeq.stringifyNumber
      }
      const core = failsafe.concat([
        nullObj,
        boolObj,
        octObj,
        intObj,
        hexObj,
        nanObj,
        expObj,
        floatObj
      ])

      /* global BigInt */

      const intIdentify$1 = (value) => typeof value === "bigint" || Number.isInteger(value)

      const stringifyJSON = ({ value }) => JSON.stringify(value)

      const json = [
        map,
        seq,
        {
          identify: (value) => typeof value === "string",
          default: true,
          tag: "tag:yaml.org,2002:str",
          resolve: resolveSeq.resolveString,
          stringify: stringifyJSON
        },
        {
          identify: (value) => value == null,
          createNode: (schema, value, ctx) =>
            ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,
          default: true,
          tag: "tag:yaml.org,2002:null",
          test: /^null$/,
          resolve: () => null,
          stringify: stringifyJSON
        },
        {
          identify: (value) => typeof value === "boolean",
          default: true,
          tag: "tag:yaml.org,2002:bool",
          test: /^true|false$/,
          resolve: (str) => str === "true",
          stringify: stringifyJSON
        },
        {
          identify: intIdentify$1,
          default: true,
          tag: "tag:yaml.org,2002:int",
          test: /^-?(?:0|[1-9][0-9]*)$/,
          resolve: (str) => (resolveSeq.intOptions.asBigInt ? BigInt(str) : parseInt(str, 10)),
          stringify: ({ value }) =>
            intIdentify$1(value) ? value.toString() : JSON.stringify(value)
        },
        {
          identify: (value) => typeof value === "number",
          default: true,
          tag: "tag:yaml.org,2002:float",
          test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
          resolve: (str) => parseFloat(str),
          stringify: stringifyJSON
        }
      ]

      json.scalarFallback = (str) => {
        throw new SyntaxError(`Unresolved plain scalar ${JSON.stringify(str)}`)
      }

      /* global BigInt */

      const boolStringify = ({ value }) =>
        value ? resolveSeq.boolOptions.trueStr : resolveSeq.boolOptions.falseStr

      const intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value)

      function intResolve(sign, src, radix) {
        let str = src.replace(/_/g, "")

        if (resolveSeq.intOptions.asBigInt) {
          switch (radix) {
            case 2:
              str = `0b${str}`
              break

            case 8:
              str = `0o${str}`
              break

            case 16:
              str = `0x${str}`
              break
          }

          const n = BigInt(str)
          return sign === "-" ? BigInt(-1) * n : n
        }

        const n = parseInt(str, radix)
        return sign === "-" ? -1 * n : n
      }

      function intStringify(node, radix, prefix) {
        const { value } = node

        if (intIdentify(value)) {
          const str = value.toString(radix)
          return value < 0 ? "-" + prefix + str.substr(1) : prefix + str
        }

        return resolveSeq.stringifyNumber(node)
      }

      const yaml11 = failsafe.concat(
        [
          {
            identify: (value) => value == null,
            createNode: (schema, value, ctx) =>
              ctx.wrapScalars ? new resolveSeq.Scalar(null) : null,
            default: true,
            tag: "tag:yaml.org,2002:null",
            test: /^(?:~|[Nn]ull|NULL)?$/,
            resolve: () => null,
            options: resolveSeq.nullOptions,
            stringify: () => resolveSeq.nullOptions.nullStr
          },
          {
            identify: (value) => typeof value === "boolean",
            default: true,
            tag: "tag:yaml.org,2002:bool",
            test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
            resolve: () => true,
            options: resolveSeq.boolOptions,
            stringify: boolStringify
          },
          {
            identify: (value) => typeof value === "boolean",
            default: true,
            tag: "tag:yaml.org,2002:bool",
            test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
            resolve: () => false,
            options: resolveSeq.boolOptions,
            stringify: boolStringify
          },
          {
            identify: intIdentify,
            default: true,
            tag: "tag:yaml.org,2002:int",
            format: "BIN",
            test: /^([-+]?)0b([0-1_]+)$/,
            resolve: (str, sign, bin) => intResolve(sign, bin, 2),
            stringify: (node) => intStringify(node, 2, "0b")
          },
          {
            identify: intIdentify,
            default: true,
            tag: "tag:yaml.org,2002:int",
            format: "OCT",
            test: /^([-+]?)0([0-7_]+)$/,
            resolve: (str, sign, oct) => intResolve(sign, oct, 8),
            stringify: (node) => intStringify(node, 8, "0")
          },
          {
            identify: intIdentify,
            default: true,
            tag: "tag:yaml.org,2002:int",
            test: /^([-+]?)([0-9][0-9_]*)$/,
            resolve: (str, sign, abs) => intResolve(sign, abs, 10),
            stringify: resolveSeq.stringifyNumber
          },
          {
            identify: intIdentify,
            default: true,
            tag: "tag:yaml.org,2002:int",
            format: "HEX",
            test: /^([-+]?)0x([0-9a-fA-F_]+)$/,
            resolve: (str, sign, hex) => intResolve(sign, hex, 16),
            stringify: (node) => intStringify(node, 16, "0x")
          },
          {
            identify: (value) => typeof value === "number",
            default: true,
            tag: "tag:yaml.org,2002:float",
            test: /^(?:[-+]?\.inf|(\.nan))$/i,
            resolve: (str, nan) =>
              nan ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
            stringify: resolveSeq.stringifyNumber
          },
          {
            identify: (value) => typeof value === "number",
            default: true,
            tag: "tag:yaml.org,2002:float",
            format: "EXP",
            test: /^[-+]?([0-9][0-9_]*)?(\.[0-9_]*)?[eE][-+]?[0-9]+$/,
            resolve: (str) => parseFloat(str.replace(/_/g, "")),
            stringify: ({ value }) => Number(value).toExponential()
          },
          {
            identify: (value) => typeof value === "number",
            default: true,
            tag: "tag:yaml.org,2002:float",
            test: /^[-+]?(?:[0-9][0-9_]*)?\.([0-9_]*)$/,

            resolve(str, frac) {
              const node = new resolveSeq.Scalar(parseFloat(str.replace(/_/g, "")))

              if (frac) {
                const f = frac.replace(/_/g, "")
                if (f[f.length - 1] === "0") node.minFractionDigits = f.length
              }

              return node
            },

            stringify: resolveSeq.stringifyNumber
          }
        ],
        warnings.binary,
        warnings.omap,
        warnings.pairs,
        warnings.set,
        warnings.intTime,
        warnings.floatTime,
        warnings.timestamp
      )

      const schemas = {
        core,
        failsafe,
        json,
        yaml11
      }
      const tags = {
        binary: warnings.binary,
        bool: boolObj,
        float: floatObj,
        floatExp: expObj,
        floatNaN: nanObj,
        floatTime: warnings.floatTime,
        int: intObj,
        intHex: hexObj,
        intOct: octObj,
        intTime: warnings.intTime,
        map,
        null: nullObj,
        omap: warnings.omap,
        pairs: warnings.pairs,
        seq,
        set: warnings.set,
        timestamp: warnings.timestamp
      }

      function findTagObject(value, tagName, tags) {
        if (tagName) {
          const match = tags.filter((t) => t.tag === tagName)
          const tagObj = match.find((t) => !t.format) || match[0]
          if (!tagObj) throw new Error(`Tag ${tagName} not found`)
          return tagObj
        } // TODO: deprecate/remove class check

        return tags.find(
          (t) =>
            ((t.identify && t.identify(value)) || (t.class && value instanceof t.class)) &&
            !t.format
        )
      }

      function createNode(value, tagName, ctx) {
        if (value instanceof resolveSeq.Node) return value
        const { defaultPrefix, onTagObj, prevObjects, schema, wrapScalars } = ctx
        if (tagName && tagName.startsWith("!!")) tagName = defaultPrefix + tagName.slice(2)
        let tagObj = findTagObject(value, tagName, schema.tags)

        if (!tagObj) {
          if (typeof value.toJSON === "function") value = value.toJSON()
          if (!value || typeof value !== "object")
            return wrapScalars ? new resolveSeq.Scalar(value) : value
          tagObj = value instanceof Map ? map : value[Symbol.iterator] ? seq : map
        }

        if (onTagObj) {
          onTagObj(tagObj)
          delete ctx.onTagObj
        } // Detect duplicate references to the same object & use Alias nodes for all
        // after first. The `obj` wrapper allows for circular references to resolve.

        const obj = {
          value: undefined,
          node: undefined
        }

        if (value && typeof value === "object" && prevObjects) {
          const prev = prevObjects.get(value)

          if (prev) {
            const alias = new resolveSeq.Alias(prev) // leaves source dirty; must be cleaned by caller

            ctx.aliasNodes.push(alias) // defined along with prevObjects

            return alias
          }

          obj.value = value
          prevObjects.set(value, obj)
        }

        obj.node = tagObj.createNode
          ? tagObj.createNode(ctx.schema, value, ctx)
          : wrapScalars
          ? new resolveSeq.Scalar(value)
          : value
        if (tagName && obj.node instanceof resolveSeq.Node) obj.node.tag = tagName
        return obj.node
      }

      function getSchemaTags(schemas, knownTags, customTags, schemaId) {
        let tags = schemas[schemaId.replace(/\W/g, "")] // 'yaml-1.1' -> 'yaml11'

        if (!tags) {
          const keys = Object.keys(schemas)
            .map((key) => JSON.stringify(key))
            .join(", ")
          throw new Error(`Unknown schema "${schemaId}"; use one of ${keys}`)
        }

        if (Array.isArray(customTags)) {
          for (const tag of customTags) tags = tags.concat(tag)
        } else if (typeof customTags === "function") {
          tags = customTags(tags.slice())
        }

        for (let i = 0; i < tags.length; ++i) {
          const tag = tags[i]

          if (typeof tag === "string") {
            const tagObj = knownTags[tag]

            if (!tagObj) {
              const keys = Object.keys(knownTags)
                .map((key) => JSON.stringify(key))
                .join(", ")
              throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`)
            }

            tags[i] = tagObj
          }
        }

        return tags
      }

      const sortMapEntriesByKey = (a, b) => (a.key < b.key ? -1 : a.key > b.key ? 1 : 0)

      class Schema {
        // TODO: remove in v2
        // TODO: remove in v2
        constructor({ customTags, merge, schema, sortMapEntries, tags: deprecatedCustomTags }) {
          this.merge = !!merge
          this.name = schema
          this.sortMapEntries =
            sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null
          if (!customTags && deprecatedCustomTags)
            warnings.warnOptionDeprecation("tags", "customTags")
          this.tags = getSchemaTags(schemas, tags, customTags || deprecatedCustomTags, schema)
        }

        createNode(value, wrapScalars, tagName, ctx) {
          const baseCtx = {
            defaultPrefix: Schema.defaultPrefix,
            schema: this,
            wrapScalars
          }
          const createCtx = ctx ? Object.assign(ctx, baseCtx) : baseCtx
          return createNode(value, tagName, createCtx)
        }

        createPair(key, value, ctx) {
          if (!ctx)
            ctx = {
              wrapScalars: true
            }
          const k = this.createNode(key, ctx.wrapScalars, null, ctx)
          const v = this.createNode(value, ctx.wrapScalars, null, ctx)
          return new resolveSeq.Pair(k, v)
        }
      }

      PlainValue._defineProperty(Schema, "defaultPrefix", PlainValue.defaultTagPrefix)

      PlainValue._defineProperty(Schema, "defaultTags", PlainValue.defaultTags)

      exports.Schema = Schema

      /***/
    },

    /***/ 44083: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var parseCst = __nccwpck_require__(94611)
      var Document$1 = __nccwpck_require__(60525)
      var Schema = __nccwpck_require__(51387)
      var PlainValue = __nccwpck_require__(24941)
      var warnings = __nccwpck_require__(95130)
      __nccwpck_require__(39914)

      function createNode(value, wrapScalars = true, tag) {
        if (tag === undefined && typeof wrapScalars === "string") {
          tag = wrapScalars
          wrapScalars = true
        }

        const options = Object.assign(
          {},
          Document$1.Document.defaults[Document$1.defaultOptions.version],
          Document$1.defaultOptions
        )
        const schema = new Schema.Schema(options)
        return schema.createNode(value, wrapScalars, tag)
      }

      class Document extends Document$1.Document {
        constructor(options) {
          super(Object.assign({}, Document$1.defaultOptions, options))
        }
      }

      function parseAllDocuments(src, options) {
        const stream = []
        let prev

        for (const cstDoc of parseCst.parse(src)) {
          const doc = new Document(options)
          doc.parse(cstDoc, prev)
          stream.push(doc)
          prev = doc
        }

        return stream
      }

      function parseDocument(src, options) {
        const cst = parseCst.parse(src)
        const doc = new Document(options).parse(cst[0])

        if (cst.length > 1) {
          const errMsg = "Source contains multiple documents; please use YAML.parseAllDocuments()"
          doc.errors.unshift(new PlainValue.YAMLSemanticError(cst[1], errMsg))
        }

        return doc
      }

      function parse(src, options) {
        const doc = parseDocument(src, options)
        doc.warnings.forEach((warning) => warnings.warn(warning))
        if (doc.errors.length > 0) throw doc.errors[0]
        return doc.toJSON()
      }

      function stringify(value, options) {
        const doc = new Document(options)
        doc.contents = value
        return String(doc)
      }

      const YAML = {
        createNode,
        defaultOptions: Document$1.defaultOptions,
        Document,
        parse,
        parseAllDocuments,
        parseCST: parseCst.parse,
        parseDocument,
        scalarOptions: Document$1.scalarOptions,
        stringify
      }

      exports.YAML = YAML

      /***/
    },

    /***/ 94611: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var PlainValue = __nccwpck_require__(24941)

      class BlankLine extends PlainValue.Node {
        constructor() {
          super(PlainValue.Type.BLANK_LINE)
        }
        /* istanbul ignore next */

        get includesTrailingLines() {
          // This is never called from anywhere, but if it were,
          // this is the value it should return.
          return true
        }
        /**
         * Parses a blank line from the source
         *
         * @param {ParseContext} context
         * @param {number} start - Index of first \n character
         * @returns {number} - Index of the character after this
         */

        parse(context, start) {
          this.context = context
          this.range = new PlainValue.Range(start, start + 1)
          return start + 1
        }
      }

      class CollectionItem extends PlainValue.Node {
        constructor(type, props) {
          super(type, props)
          this.node = null
        }

        get includesTrailingLines() {
          return !!this.node && this.node.includesTrailingLines
        }
        /**
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this
         */

        parse(context, start) {
          this.context = context
          const { parseNode, src } = context
          let { atLineStart, lineStart } = context
          if (!atLineStart && this.type === PlainValue.Type.SEQ_ITEM)
            this.error = new PlainValue.YAMLSemanticError(
              this,
              "Sequence items must not have preceding content on the same line"
            )
          const indent = atLineStart ? start - lineStart : context.indent
          let offset = PlainValue.Node.endOfWhiteSpace(src, start + 1)
          let ch = src[offset]
          const inlineComment = ch === "#"
          const comments = []
          let blankLine = null

          while (ch === "\n" || ch === "#") {
            if (ch === "#") {
              const end = PlainValue.Node.endOfLine(src, offset + 1)
              comments.push(new PlainValue.Range(offset, end))
              offset = end
            } else {
              atLineStart = true
              lineStart = offset + 1
              const wsEnd = PlainValue.Node.endOfWhiteSpace(src, lineStart)

              if (src[wsEnd] === "\n" && comments.length === 0) {
                blankLine = new BlankLine()
                lineStart = blankLine.parse(
                  {
                    src
                  },
                  lineStart
                )
              }

              offset = PlainValue.Node.endOfIndent(src, lineStart)
            }

            ch = src[offset]
          }

          if (
            PlainValue.Node.nextNodeIsIndented(
              ch,
              offset - (lineStart + indent),
              this.type !== PlainValue.Type.SEQ_ITEM
            )
          ) {
            this.node = parseNode(
              {
                atLineStart,
                inCollection: false,
                indent,
                lineStart,
                parent: this
              },
              offset
            )
          } else if (ch && lineStart > start + 1) {
            offset = lineStart - 1
          }

          if (this.node) {
            if (blankLine) {
              // Only blank lines preceding non-empty nodes are captured. Note that
              // this means that collection item range start indices do not always
              // increase monotonically. -- eemeli/yaml#126
              const items = context.parent.items || context.parent.contents
              if (items) items.push(blankLine)
            }

            if (comments.length) Array.prototype.push.apply(this.props, comments)
            offset = this.node.range.end
          } else {
            if (inlineComment) {
              const c = comments[0]
              this.props.push(c)
              offset = c.end
            } else {
              offset = PlainValue.Node.endOfLine(src, start + 1)
            }
          }

          const end = this.node ? this.node.valueRange.end : offset
          this.valueRange = new PlainValue.Range(start, end)
          return offset
        }

        setOrigRanges(cr, offset) {
          offset = super.setOrigRanges(cr, offset)
          return this.node ? this.node.setOrigRanges(cr, offset) : offset
        }

        toString() {
          const {
            context: { src },
            node,
            range,
            value
          } = this
          if (value != null) return value
          const str = node
            ? src.slice(range.start, node.range.start) + String(node)
            : src.slice(range.start, range.end)
          return PlainValue.Node.addStringTerminator(src, range.end, str)
        }
      }

      class Comment extends PlainValue.Node {
        constructor() {
          super(PlainValue.Type.COMMENT)
        }
        /**
         * Parses a comment line from the source
         *
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this scalar
         */

        parse(context, start) {
          this.context = context
          const offset = this.parseComment(start)
          this.range = new PlainValue.Range(start, offset)
          return offset
        }
      }

      function grabCollectionEndComments(node) {
        let cnode = node

        while (cnode instanceof CollectionItem) cnode = cnode.node

        if (!(cnode instanceof Collection)) return null
        const len = cnode.items.length
        let ci = -1

        for (let i = len - 1; i >= 0; --i) {
          const n = cnode.items[i]

          if (n.type === PlainValue.Type.COMMENT) {
            // Keep sufficiently indented comments with preceding node
            const { indent, lineStart } = n.context
            if (indent > 0 && n.range.start >= lineStart + indent) break
            ci = i
          } else if (n.type === PlainValue.Type.BLANK_LINE) ci = i
          else break
        }

        if (ci === -1) return null
        const ca = cnode.items.splice(ci, len - ci)
        const prevEnd = ca[0].range.start

        while (true) {
          cnode.range.end = prevEnd
          if (cnode.valueRange && cnode.valueRange.end > prevEnd) cnode.valueRange.end = prevEnd
          if (cnode === node) break
          cnode = cnode.context.parent
        }

        return ca
      }
      class Collection extends PlainValue.Node {
        static nextContentHasIndent(src, offset, indent) {
          const lineStart = PlainValue.Node.endOfLine(src, offset) + 1
          offset = PlainValue.Node.endOfWhiteSpace(src, lineStart)
          const ch = src[offset]
          if (!ch) return false
          if (offset >= lineStart + indent) return true
          if (ch !== "#" && ch !== "\n") return false
          return Collection.nextContentHasIndent(src, offset, indent)
        }

        constructor(firstItem) {
          super(
            firstItem.type === PlainValue.Type.SEQ_ITEM ? PlainValue.Type.SEQ : PlainValue.Type.MAP
          )

          for (let i = firstItem.props.length - 1; i >= 0; --i) {
            if (firstItem.props[i].start < firstItem.context.lineStart) {
              // props on previous line are assumed by the collection
              this.props = firstItem.props.slice(0, i + 1)
              firstItem.props = firstItem.props.slice(i + 1)
              const itemRange = firstItem.props[0] || firstItem.valueRange
              firstItem.range.start = itemRange.start
              break
            }
          }

          this.items = [firstItem]
          const ec = grabCollectionEndComments(firstItem)
          if (ec) Array.prototype.push.apply(this.items, ec)
        }

        get includesTrailingLines() {
          return this.items.length > 0
        }
        /**
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this
         */

        parse(context, start) {
          this.context = context
          const { parseNode, src } = context // It's easier to recalculate lineStart here rather than tracking down the
          // last context from which to read it -- eemeli/yaml#2

          let lineStart = PlainValue.Node.startOfLine(src, start)
          const firstItem = this.items[0] // First-item context needs to be correct for later comment handling
          // -- eemeli/yaml#17

          firstItem.context.parent = this
          this.valueRange = PlainValue.Range.copy(firstItem.valueRange)
          const indent = firstItem.range.start - firstItem.context.lineStart
          let offset = start
          offset = PlainValue.Node.normalizeOffset(src, offset)
          let ch = src[offset]
          let atLineStart = PlainValue.Node.endOfWhiteSpace(src, lineStart) === offset
          let prevIncludesTrailingLines = false

          while (ch) {
            while (ch === "\n" || ch === "#") {
              if (atLineStart && ch === "\n" && !prevIncludesTrailingLines) {
                const blankLine = new BlankLine()
                offset = blankLine.parse(
                  {
                    src
                  },
                  offset
                )
                this.valueRange.end = offset

                if (offset >= src.length) {
                  ch = null
                  break
                }

                this.items.push(blankLine)
                offset -= 1 // blankLine.parse() consumes terminal newline
              } else if (ch === "#") {
                if (
                  offset < lineStart + indent &&
                  !Collection.nextContentHasIndent(src, offset, indent)
                ) {
                  return offset
                }

                const comment = new Comment()
                offset = comment.parse(
                  {
                    indent,
                    lineStart,
                    src
                  },
                  offset
                )
                this.items.push(comment)
                this.valueRange.end = offset

                if (offset >= src.length) {
                  ch = null
                  break
                }
              }

              lineStart = offset + 1
              offset = PlainValue.Node.endOfIndent(src, lineStart)

              if (PlainValue.Node.atBlank(src, offset)) {
                const wsEnd = PlainValue.Node.endOfWhiteSpace(src, offset)
                const next = src[wsEnd]

                if (!next || next === "\n" || next === "#") {
                  offset = wsEnd
                }
              }

              ch = src[offset]
              atLineStart = true
            }

            if (!ch) {
              break
            }

            if (offset !== lineStart + indent && (atLineStart || ch !== ":")) {
              if (offset < lineStart + indent) {
                if (lineStart > start) offset = lineStart
                break
              } else if (!this.error) {
                const msg = "All collection items must start at the same column"
                this.error = new PlainValue.YAMLSyntaxError(this, msg)
              }
            }

            if (firstItem.type === PlainValue.Type.SEQ_ITEM) {
              if (ch !== "-") {
                if (lineStart > start) offset = lineStart
                break
              }
            } else if (ch === "-" && !this.error) {
              // map key may start with -, as long as it's followed by a non-whitespace char
              const next = src[offset + 1]

              if (!next || next === "\n" || next === "\t" || next === " ") {
                const msg = "A collection cannot be both a mapping and a sequence"
                this.error = new PlainValue.YAMLSyntaxError(this, msg)
              }
            }

            const node = parseNode(
              {
                atLineStart,
                inCollection: true,
                indent,
                lineStart,
                parent: this
              },
              offset
            )
            if (!node) return offset // at next document start

            this.items.push(node)
            this.valueRange.end = node.valueRange.end
            offset = PlainValue.Node.normalizeOffset(src, node.range.end)
            ch = src[offset]
            atLineStart = false
            prevIncludesTrailingLines = node.includesTrailingLines // Need to reset lineStart and atLineStart here if preceding node's range
            // has advanced to check the current line's indentation level
            // -- eemeli/yaml#10 & eemeli/yaml#38

            if (ch) {
              let ls = offset - 1
              let prev = src[ls]

              while (prev === " " || prev === "\t") prev = src[--ls]

              if (prev === "\n") {
                lineStart = ls + 1
                atLineStart = true
              }
            }

            const ec = grabCollectionEndComments(node)
            if (ec) Array.prototype.push.apply(this.items, ec)
          }

          return offset
        }

        setOrigRanges(cr, offset) {
          offset = super.setOrigRanges(cr, offset)
          this.items.forEach((node) => {
            offset = node.setOrigRanges(cr, offset)
          })
          return offset
        }

        toString() {
          const {
            context: { src },
            items,
            range,
            value
          } = this
          if (value != null) return value
          let str = src.slice(range.start, items[0].range.start) + String(items[0])

          for (let i = 1; i < items.length; ++i) {
            const item = items[i]
            const { atLineStart, indent } = item.context
            if (atLineStart) for (let i = 0; i < indent; ++i) str += " "
            str += String(item)
          }

          return PlainValue.Node.addStringTerminator(src, range.end, str)
        }
      }

      class Directive extends PlainValue.Node {
        constructor() {
          super(PlainValue.Type.DIRECTIVE)
          this.name = null
        }

        get parameters() {
          const raw = this.rawValue
          return raw ? raw.trim().split(/[ \t]+/) : []
        }

        parseName(start) {
          const { src } = this.context
          let offset = start
          let ch = src[offset]

          while (ch && ch !== "\n" && ch !== "\t" && ch !== " ") ch = src[(offset += 1)]

          this.name = src.slice(start, offset)
          return offset
        }

        parseParameters(start) {
          const { src } = this.context
          let offset = start
          let ch = src[offset]

          while (ch && ch !== "\n" && ch !== "#") ch = src[(offset += 1)]

          this.valueRange = new PlainValue.Range(start, offset)
          return offset
        }

        parse(context, start) {
          this.context = context
          let offset = this.parseName(start + 1)
          offset = this.parseParameters(offset)
          offset = this.parseComment(offset)
          this.range = new PlainValue.Range(start, offset)
          return offset
        }
      }

      class Document extends PlainValue.Node {
        static startCommentOrEndBlankLine(src, start) {
          const offset = PlainValue.Node.endOfWhiteSpace(src, start)
          const ch = src[offset]
          return ch === "#" || ch === "\n" ? offset : start
        }

        constructor() {
          super(PlainValue.Type.DOCUMENT)
          this.directives = null
          this.contents = null
          this.directivesEndMarker = null
          this.documentEndMarker = null
        }

        parseDirectives(start) {
          const { src } = this.context
          this.directives = []
          let atLineStart = true
          let hasDirectives = false
          let offset = start

          while (!PlainValue.Node.atDocumentBoundary(src, offset, PlainValue.Char.DIRECTIVES_END)) {
            offset = Document.startCommentOrEndBlankLine(src, offset)

            switch (src[offset]) {
              case "\n":
                if (atLineStart) {
                  const blankLine = new BlankLine()
                  offset = blankLine.parse(
                    {
                      src
                    },
                    offset
                  )

                  if (offset < src.length) {
                    this.directives.push(blankLine)
                  }
                } else {
                  offset += 1
                  atLineStart = true
                }

                break

              case "#":
                {
                  const comment = new Comment()
                  offset = comment.parse(
                    {
                      src
                    },
                    offset
                  )
                  this.directives.push(comment)
                  atLineStart = false
                }
                break

              case "%":
                {
                  const directive = new Directive()
                  offset = directive.parse(
                    {
                      parent: this,
                      src
                    },
                    offset
                  )
                  this.directives.push(directive)
                  hasDirectives = true
                  atLineStart = false
                }
                break

              default:
                if (hasDirectives) {
                  this.error = new PlainValue.YAMLSemanticError(
                    this,
                    "Missing directives-end indicator line"
                  )
                } else if (this.directives.length > 0) {
                  this.contents = this.directives
                  this.directives = []
                }

                return offset
            }
          }

          if (src[offset]) {
            this.directivesEndMarker = new PlainValue.Range(offset, offset + 3)
            return offset + 3
          }

          if (hasDirectives) {
            this.error = new PlainValue.YAMLSemanticError(
              this,
              "Missing directives-end indicator line"
            )
          } else if (this.directives.length > 0) {
            this.contents = this.directives
            this.directives = []
          }

          return offset
        }

        parseContents(start) {
          const { parseNode, src } = this.context
          if (!this.contents) this.contents = []
          let lineStart = start

          while (src[lineStart - 1] === "-") lineStart -= 1

          let offset = PlainValue.Node.endOfWhiteSpace(src, start)
          let atLineStart = lineStart === start
          this.valueRange = new PlainValue.Range(offset)

          while (!PlainValue.Node.atDocumentBoundary(src, offset, PlainValue.Char.DOCUMENT_END)) {
            switch (src[offset]) {
              case "\n":
                if (atLineStart) {
                  const blankLine = new BlankLine()
                  offset = blankLine.parse(
                    {
                      src
                    },
                    offset
                  )

                  if (offset < src.length) {
                    this.contents.push(blankLine)
                  }
                } else {
                  offset += 1
                  atLineStart = true
                }

                lineStart = offset
                break

              case "#":
                {
                  const comment = new Comment()
                  offset = comment.parse(
                    {
                      src
                    },
                    offset
                  )
                  this.contents.push(comment)
                  atLineStart = false
                }
                break

              default: {
                const iEnd = PlainValue.Node.endOfIndent(src, offset)
                const context = {
                  atLineStart,
                  indent: -1,
                  inFlow: false,
                  inCollection: false,
                  lineStart,
                  parent: this
                }
                const node = parseNode(context, iEnd)
                if (!node) return (this.valueRange.end = iEnd) // at next document start

                this.contents.push(node)
                offset = node.range.end
                atLineStart = false
                const ec = grabCollectionEndComments(node)
                if (ec) Array.prototype.push.apply(this.contents, ec)
              }
            }

            offset = Document.startCommentOrEndBlankLine(src, offset)
          }

          this.valueRange.end = offset

          if (src[offset]) {
            this.documentEndMarker = new PlainValue.Range(offset, offset + 3)
            offset += 3

            if (src[offset]) {
              offset = PlainValue.Node.endOfWhiteSpace(src, offset)

              if (src[offset] === "#") {
                const comment = new Comment()
                offset = comment.parse(
                  {
                    src
                  },
                  offset
                )
                this.contents.push(comment)
              }

              switch (src[offset]) {
                case "\n":
                  offset += 1
                  break

                case undefined:
                  break

                default:
                  this.error = new PlainValue.YAMLSyntaxError(
                    this,
                    "Document end marker line cannot have a non-comment suffix"
                  )
              }
            }
          }

          return offset
        }
        /**
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this
         */

        parse(context, start) {
          context.root = this
          this.context = context
          const { src } = context
          let offset = src.charCodeAt(start) === 0xfeff ? start + 1 : start // skip BOM

          offset = this.parseDirectives(offset)
          offset = this.parseContents(offset)
          return offset
        }

        setOrigRanges(cr, offset) {
          offset = super.setOrigRanges(cr, offset)
          this.directives.forEach((node) => {
            offset = node.setOrigRanges(cr, offset)
          })
          if (this.directivesEndMarker) offset = this.directivesEndMarker.setOrigRange(cr, offset)
          this.contents.forEach((node) => {
            offset = node.setOrigRanges(cr, offset)
          })
          if (this.documentEndMarker) offset = this.documentEndMarker.setOrigRange(cr, offset)
          return offset
        }

        toString() {
          const { contents, directives, value } = this
          if (value != null) return value
          let str = directives.join("")

          if (contents.length > 0) {
            if (directives.length > 0 || contents[0].type === PlainValue.Type.COMMENT)
              str += "---\n"
            str += contents.join("")
          }

          if (str[str.length - 1] !== "\n") str += "\n"
          return str
        }
      }

      class Alias extends PlainValue.Node {
        /**
         * Parses an *alias from the source
         *
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this scalar
         */
        parse(context, start) {
          this.context = context
          const { src } = context
          let offset = PlainValue.Node.endOfIdentifier(src, start + 1)
          this.valueRange = new PlainValue.Range(start + 1, offset)
          offset = PlainValue.Node.endOfWhiteSpace(src, offset)
          offset = this.parseComment(offset)
          return offset
        }
      }

      const Chomp = {
        CLIP: "CLIP",
        KEEP: "KEEP",
        STRIP: "STRIP"
      }
      class BlockValue extends PlainValue.Node {
        constructor(type, props) {
          super(type, props)
          this.blockIndent = null
          this.chomping = Chomp.CLIP
          this.header = null
        }

        get includesTrailingLines() {
          return this.chomping === Chomp.KEEP
        }

        get strValue() {
          if (!this.valueRange || !this.context) return null
          let { start, end } = this.valueRange
          const { indent, src } = this.context
          if (this.valueRange.isEmpty()) return ""
          let lastNewLine = null
          let ch = src[end - 1]

          while (ch === "\n" || ch === "\t" || ch === " ") {
            end -= 1

            if (end <= start) {
              if (this.chomping === Chomp.KEEP) break
              else return "" // probably never happens
            }

            if (ch === "\n") lastNewLine = end
            ch = src[end - 1]
          }

          let keepStart = end + 1

          if (lastNewLine) {
            if (this.chomping === Chomp.KEEP) {
              keepStart = lastNewLine
              end = this.valueRange.end
            } else {
              end = lastNewLine
            }
          }

          const bi = indent + this.blockIndent
          const folded = this.type === PlainValue.Type.BLOCK_FOLDED
          let atStart = true
          let str = ""
          let sep = ""
          let prevMoreIndented = false

          for (let i = start; i < end; ++i) {
            for (let j = 0; j < bi; ++j) {
              if (src[i] !== " ") break
              i += 1
            }

            const ch = src[i]

            if (ch === "\n") {
              if (sep === "\n") str += "\n"
              else sep = "\n"
            } else {
              const lineEnd = PlainValue.Node.endOfLine(src, i)
              const line = src.slice(i, lineEnd)
              i = lineEnd

              if (folded && (ch === " " || ch === "\t") && i < keepStart) {
                if (sep === " ") sep = "\n"
                else if (!prevMoreIndented && !atStart && sep === "\n") sep = "\n\n"
                str += sep + line //+ ((lineEnd < end && src[lineEnd]) || '')

                sep = (lineEnd < end && src[lineEnd]) || ""
                prevMoreIndented = true
              } else {
                str += sep + line
                sep = folded && i < keepStart ? " " : "\n"
                prevMoreIndented = false
              }

              if (atStart && line !== "") atStart = false
            }
          }

          return this.chomping === Chomp.STRIP ? str : str + "\n"
        }

        parseBlockHeader(start) {
          const { src } = this.context
          let offset = start + 1
          let bi = ""

          while (true) {
            const ch = src[offset]

            switch (ch) {
              case "-":
                this.chomping = Chomp.STRIP
                break

              case "+":
                this.chomping = Chomp.KEEP
                break

              case "0":
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9":
                bi += ch
                break

              default:
                this.blockIndent = Number(bi) || null
                this.header = new PlainValue.Range(start, offset)
                return offset
            }

            offset += 1
          }
        }

        parseBlockValue(start) {
          const { indent, src } = this.context
          const explicit = !!this.blockIndent
          let offset = start
          let valueEnd = start
          let minBlockIndent = 1

          for (let ch = src[offset]; ch === "\n"; ch = src[offset]) {
            offset += 1
            if (PlainValue.Node.atDocumentBoundary(src, offset)) break
            const end = PlainValue.Node.endOfBlockIndent(src, indent, offset) // should not include tab?

            if (end === null) break
            const ch = src[end]
            const lineIndent = end - (offset + indent)

            if (!this.blockIndent) {
              // no explicit block indent, none yet detected
              if (src[end] !== "\n") {
                // first line with non-whitespace content
                if (lineIndent < minBlockIndent) {
                  const msg =
                    "Block scalars with more-indented leading empty lines must use an explicit indentation indicator"
                  this.error = new PlainValue.YAMLSemanticError(this, msg)
                }

                this.blockIndent = lineIndent
              } else if (lineIndent > minBlockIndent) {
                // empty line with more whitespace
                minBlockIndent = lineIndent
              }
            } else if (ch && ch !== "\n" && lineIndent < this.blockIndent) {
              if (src[end] === "#") break

              if (!this.error) {
                const src = explicit ? "explicit indentation indicator" : "first line"
                const msg = `Block scalars must not be less indented than their ${src}`
                this.error = new PlainValue.YAMLSemanticError(this, msg)
              }
            }

            if (src[end] === "\n") {
              offset = end
            } else {
              offset = valueEnd = PlainValue.Node.endOfLine(src, end)
            }
          }

          if (this.chomping !== Chomp.KEEP) {
            offset = src[valueEnd] ? valueEnd + 1 : valueEnd
          }

          this.valueRange = new PlainValue.Range(start + 1, offset)
          return offset
        }
        /**
         * Parses a block value from the source
         *
         * Accepted forms are:
         * ```
         * BS
         * block
         * lines
         *
         * BS #comment
         * block
         * lines
         * ```
         * where the block style BS matches the regexp `[|>][-+1-9]*` and block lines
         * are empty or have an indent level greater than `indent`.
         *
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this block
         */

        parse(context, start) {
          this.context = context
          const { src } = context
          let offset = this.parseBlockHeader(start)
          offset = PlainValue.Node.endOfWhiteSpace(src, offset)
          offset = this.parseComment(offset)
          offset = this.parseBlockValue(offset)
          return offset
        }

        setOrigRanges(cr, offset) {
          offset = super.setOrigRanges(cr, offset)
          return this.header ? this.header.setOrigRange(cr, offset) : offset
        }
      }

      class FlowCollection extends PlainValue.Node {
        constructor(type, props) {
          super(type, props)
          this.items = null
        }

        prevNodeIsJsonLike(idx = this.items.length) {
          const node = this.items[idx - 1]
          return (
            !!node &&
            (node.jsonLike ||
              (node.type === PlainValue.Type.COMMENT && this.prevNodeIsJsonLike(idx - 1)))
          )
        }
        /**
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this
         */

        parse(context, start) {
          this.context = context
          const { parseNode, src } = context
          let { indent, lineStart } = context
          let char = src[start] // { or [

          this.items = [
            {
              char,
              offset: start
            }
          ]
          let offset = PlainValue.Node.endOfWhiteSpace(src, start + 1)
          char = src[offset]

          while (char && char !== "]" && char !== "}") {
            switch (char) {
              case "\n":
                {
                  lineStart = offset + 1
                  const wsEnd = PlainValue.Node.endOfWhiteSpace(src, lineStart)

                  if (src[wsEnd] === "\n") {
                    const blankLine = new BlankLine()
                    lineStart = blankLine.parse(
                      {
                        src
                      },
                      lineStart
                    )
                    this.items.push(blankLine)
                  }

                  offset = PlainValue.Node.endOfIndent(src, lineStart)

                  if (offset <= lineStart + indent) {
                    char = src[offset]

                    if (offset < lineStart + indent || (char !== "]" && char !== "}")) {
                      const msg = "Insufficient indentation in flow collection"
                      this.error = new PlainValue.YAMLSemanticError(this, msg)
                    }
                  }
                }
                break

              case ",":
                {
                  this.items.push({
                    char,
                    offset
                  })
                  offset += 1
                }
                break

              case "#":
                {
                  const comment = new Comment()
                  offset = comment.parse(
                    {
                      src
                    },
                    offset
                  )
                  this.items.push(comment)
                }
                break

              case "?":
              case ":": {
                const next = src[offset + 1]

                if (
                  next === "\n" ||
                  next === "\t" ||
                  next === " " ||
                  next === "," || // in-flow : after JSON-like key does not need to be followed by whitespace
                  (char === ":" && this.prevNodeIsJsonLike())
                ) {
                  this.items.push({
                    char,
                    offset
                  })
                  offset += 1
                  break
                }
              }
              // fallthrough

              default: {
                const node = parseNode(
                  {
                    atLineStart: false,
                    inCollection: false,
                    inFlow: true,
                    indent: -1,
                    lineStart,
                    parent: this
                  },
                  offset
                )

                if (!node) {
                  // at next document start
                  this.valueRange = new PlainValue.Range(start, offset)
                  return offset
                }

                this.items.push(node)
                offset = PlainValue.Node.normalizeOffset(src, node.range.end)
              }
            }

            offset = PlainValue.Node.endOfWhiteSpace(src, offset)
            char = src[offset]
          }

          this.valueRange = new PlainValue.Range(start, offset + 1)

          if (char) {
            this.items.push({
              char,
              offset
            })
            offset = PlainValue.Node.endOfWhiteSpace(src, offset + 1)
            offset = this.parseComment(offset)
          }

          return offset
        }

        setOrigRanges(cr, offset) {
          offset = super.setOrigRanges(cr, offset)
          this.items.forEach((node) => {
            if (node instanceof PlainValue.Node) {
              offset = node.setOrigRanges(cr, offset)
            } else if (cr.length === 0) {
              node.origOffset = node.offset
            } else {
              let i = offset

              while (i < cr.length) {
                if (cr[i] > node.offset) break
                else ++i
              }

              node.origOffset = node.offset + i
              offset = i
            }
          })
          return offset
        }

        toString() {
          const {
            context: { src },
            items,
            range,
            value
          } = this
          if (value != null) return value
          const nodes = items.filter((item) => item instanceof PlainValue.Node)
          let str = ""
          let prevEnd = range.start
          nodes.forEach((node) => {
            const prefix = src.slice(prevEnd, node.range.start)
            prevEnd = node.range.end
            str += prefix + String(node)

            if (
              str[str.length - 1] === "\n" &&
              src[prevEnd - 1] !== "\n" &&
              src[prevEnd] === "\n"
            ) {
              // Comment range does not include the terminal newline, but its
              // stringified value does. Without this fix, newlines at comment ends
              // get duplicated.
              prevEnd += 1
            }
          })
          str += src.slice(prevEnd, range.end)
          return PlainValue.Node.addStringTerminator(src, range.end, str)
        }
      }

      class QuoteDouble extends PlainValue.Node {
        static endOfQuote(src, offset) {
          let ch = src[offset]

          while (ch && ch !== '"') {
            offset += ch === "\\" ? 2 : 1
            ch = src[offset]
          }

          return offset + 1
        }
        /**
         * @returns {string | { str: string, errors: YAMLSyntaxError[] }}
         */

        get strValue() {
          if (!this.valueRange || !this.context) return null
          const errors = []
          const { start, end } = this.valueRange
          const { indent, src } = this.context
          if (src[end - 1] !== '"')
            errors.push(new PlainValue.YAMLSyntaxError(this, 'Missing closing "quote')) // Using String#replace is too painful with escaped newlines preceded by
          // escaped backslashes; also, this should be faster.

          let str = ""

          for (let i = start + 1; i < end - 1; ++i) {
            const ch = src[i]

            if (ch === "\n") {
              if (PlainValue.Node.atDocumentBoundary(src, i + 1))
                errors.push(
                  new PlainValue.YAMLSemanticError(
                    this,
                    "Document boundary indicators are not allowed within string values"
                  )
                )
              const { fold, offset, error } = PlainValue.Node.foldNewline(src, i, indent)
              str += fold
              i = offset
              if (error)
                errors.push(
                  new PlainValue.YAMLSemanticError(
                    this,
                    "Multi-line double-quoted string needs to be sufficiently indented"
                  )
                )
            } else if (ch === "\\") {
              i += 1

              switch (src[i]) {
                case "0":
                  str += "\0"
                  break
                // null character

                case "a":
                  str += "\x07"
                  break
                // bell character

                case "b":
                  str += "\b"
                  break
                // backspace

                case "e":
                  str += "\x1b"
                  break
                // escape character

                case "f":
                  str += "\f"
                  break
                // form feed

                case "n":
                  str += "\n"
                  break
                // line feed

                case "r":
                  str += "\r"
                  break
                // carriage return

                case "t":
                  str += "\t"
                  break
                // horizontal tab

                case "v":
                  str += "\v"
                  break
                // vertical tab

                case "N":
                  str += "\u0085"
                  break
                // Unicode next line

                case "_":
                  str += "\u00a0"
                  break
                // Unicode non-breaking space

                case "L":
                  str += "\u2028"
                  break
                // Unicode line separator

                case "P":
                  str += "\u2029"
                  break
                // Unicode paragraph separator

                case " ":
                  str += " "
                  break

                case '"':
                  str += '"'
                  break

                case "/":
                  str += "/"
                  break

                case "\\":
                  str += "\\"
                  break

                case "\t":
                  str += "\t"
                  break

                case "x":
                  str += this.parseCharCode(i + 1, 2, errors)
                  i += 2
                  break

                case "u":
                  str += this.parseCharCode(i + 1, 4, errors)
                  i += 4
                  break

                case "U":
                  str += this.parseCharCode(i + 1, 8, errors)
                  i += 8
                  break

                case "\n":
                  // skip escaped newlines, but still trim the following line
                  while (src[i + 1] === " " || src[i + 1] === "\t") i += 1

                  break

                default:
                  errors.push(
                    new PlainValue.YAMLSyntaxError(
                      this,
                      `Invalid escape sequence ${src.substr(i - 1, 2)}`
                    )
                  )
                  str += "\\" + src[i]
              }
            } else if (ch === " " || ch === "\t") {
              // trim trailing whitespace
              const wsStart = i
              let next = src[i + 1]

              while (next === " " || next === "\t") {
                i += 1
                next = src[i + 1]
              }

              if (next !== "\n") str += i > wsStart ? src.slice(wsStart, i + 1) : ch
            } else {
              str += ch
            }
          }

          return errors.length > 0
            ? {
                errors,
                str
              }
            : str
        }

        parseCharCode(offset, length, errors) {
          const { src } = this.context
          const cc = src.substr(offset, length)
          const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc)
          const code = ok ? parseInt(cc, 16) : NaN

          if (isNaN(code)) {
            errors.push(
              new PlainValue.YAMLSyntaxError(
                this,
                `Invalid escape sequence ${src.substr(offset - 2, length + 2)}`
              )
            )
            return src.substr(offset - 2, length + 2)
          }

          return String.fromCodePoint(code)
        }
        /**
         * Parses a "double quoted" value from the source
         *
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this scalar
         */

        parse(context, start) {
          this.context = context
          const { src } = context
          let offset = QuoteDouble.endOfQuote(src, start + 1)
          this.valueRange = new PlainValue.Range(start, offset)
          offset = PlainValue.Node.endOfWhiteSpace(src, offset)
          offset = this.parseComment(offset)
          return offset
        }
      }

      class QuoteSingle extends PlainValue.Node {
        static endOfQuote(src, offset) {
          let ch = src[offset]

          while (ch) {
            if (ch === "'") {
              if (src[offset + 1] !== "'") break
              ch = src[(offset += 2)]
            } else {
              ch = src[(offset += 1)]
            }
          }

          return offset + 1
        }
        /**
         * @returns {string | { str: string, errors: YAMLSyntaxError[] }}
         */

        get strValue() {
          if (!this.valueRange || !this.context) return null
          const errors = []
          const { start, end } = this.valueRange
          const { indent, src } = this.context
          if (src[end - 1] !== "'")
            errors.push(new PlainValue.YAMLSyntaxError(this, "Missing closing 'quote"))
          let str = ""

          for (let i = start + 1; i < end - 1; ++i) {
            const ch = src[i]

            if (ch === "\n") {
              if (PlainValue.Node.atDocumentBoundary(src, i + 1))
                errors.push(
                  new PlainValue.YAMLSemanticError(
                    this,
                    "Document boundary indicators are not allowed within string values"
                  )
                )
              const { fold, offset, error } = PlainValue.Node.foldNewline(src, i, indent)
              str += fold
              i = offset
              if (error)
                errors.push(
                  new PlainValue.YAMLSemanticError(
                    this,
                    "Multi-line single-quoted string needs to be sufficiently indented"
                  )
                )
            } else if (ch === "'") {
              str += ch
              i += 1
              if (src[i] !== "'")
                errors.push(
                  new PlainValue.YAMLSyntaxError(
                    this,
                    "Unescaped single quote? This should not happen."
                  )
                )
            } else if (ch === " " || ch === "\t") {
              // trim trailing whitespace
              const wsStart = i
              let next = src[i + 1]

              while (next === " " || next === "\t") {
                i += 1
                next = src[i + 1]
              }

              if (next !== "\n") str += i > wsStart ? src.slice(wsStart, i + 1) : ch
            } else {
              str += ch
            }
          }

          return errors.length > 0
            ? {
                errors,
                str
              }
            : str
        }
        /**
         * Parses a 'single quoted' value from the source
         *
         * @param {ParseContext} context
         * @param {number} start - Index of first character
         * @returns {number} - Index of the character after this scalar
         */

        parse(context, start) {
          this.context = context
          const { src } = context
          let offset = QuoteSingle.endOfQuote(src, start + 1)
          this.valueRange = new PlainValue.Range(start, offset)
          offset = PlainValue.Node.endOfWhiteSpace(src, offset)
          offset = this.parseComment(offset)
          return offset
        }
      }

      function createNewNode(type, props) {
        switch (type) {
          case PlainValue.Type.ALIAS:
            return new Alias(type, props)

          case PlainValue.Type.BLOCK_FOLDED:
          case PlainValue.Type.BLOCK_LITERAL:
            return new BlockValue(type, props)

          case PlainValue.Type.FLOW_MAP:
          case PlainValue.Type.FLOW_SEQ:
            return new FlowCollection(type, props)

          case PlainValue.Type.MAP_KEY:
          case PlainValue.Type.MAP_VALUE:
          case PlainValue.Type.SEQ_ITEM:
            return new CollectionItem(type, props)

          case PlainValue.Type.COMMENT:
          case PlainValue.Type.PLAIN:
            return new PlainValue.PlainValue(type, props)

          case PlainValue.Type.QUOTE_DOUBLE:
            return new QuoteDouble(type, props)

          case PlainValue.Type.QUOTE_SINGLE:
            return new QuoteSingle(type, props)

          /* istanbul ignore next */

          default:
            return null
          // should never happen
        }
      }
      /**
       * @param {boolean} atLineStart - Node starts at beginning of line
       * @param {boolean} inFlow - true if currently in a flow context
       * @param {boolean} inCollection - true if currently in a collection context
       * @param {number} indent - Current level of indentation
       * @param {number} lineStart - Start of the current line
       * @param {Node} parent - The parent of the node
       * @param {string} src - Source of the YAML document
       */

      class ParseContext {
        static parseType(src, offset, inFlow) {
          switch (src[offset]) {
            case "*":
              return PlainValue.Type.ALIAS

            case ">":
              return PlainValue.Type.BLOCK_FOLDED

            case "|":
              return PlainValue.Type.BLOCK_LITERAL

            case "{":
              return PlainValue.Type.FLOW_MAP

            case "[":
              return PlainValue.Type.FLOW_SEQ

            case "?":
              return !inFlow && PlainValue.Node.atBlank(src, offset + 1, true)
                ? PlainValue.Type.MAP_KEY
                : PlainValue.Type.PLAIN

            case ":":
              return !inFlow && PlainValue.Node.atBlank(src, offset + 1, true)
                ? PlainValue.Type.MAP_VALUE
                : PlainValue.Type.PLAIN

            case "-":
              return !inFlow && PlainValue.Node.atBlank(src, offset + 1, true)
                ? PlainValue.Type.SEQ_ITEM
                : PlainValue.Type.PLAIN

            case '"':
              return PlainValue.Type.QUOTE_DOUBLE

            case "'":
              return PlainValue.Type.QUOTE_SINGLE

            default:
              return PlainValue.Type.PLAIN
          }
        }

        constructor(
          orig = {},
          { atLineStart, inCollection, inFlow, indent, lineStart, parent } = {}
        ) {
          PlainValue._defineProperty(this, "parseNode", (overlay, start) => {
            if (PlainValue.Node.atDocumentBoundary(this.src, start)) return null
            const context = new ParseContext(this, overlay)
            const { props, type, valueStart } = context.parseProps(start)
            const node = createNewNode(type, props)
            let offset = node.parse(context, valueStart)
            node.range = new PlainValue.Range(start, offset)
            /* istanbul ignore if */

            if (offset <= start) {
              // This should never happen, but if it does, let's make sure to at least
              // step one character forward to avoid a busy loop.
              node.error = new Error(`Node#parse consumed no characters`)
              node.error.parseEnd = offset
              node.error.source = node
              node.range.end = start + 1
            }

            if (context.nodeStartsCollection(node)) {
              if (
                !node.error &&
                !context.atLineStart &&
                context.parent.type === PlainValue.Type.DOCUMENT
              ) {
                node.error = new PlainValue.YAMLSyntaxError(
                  node,
                  "Block collection must not have preceding content here (e.g. directives-end indicator)"
                )
              }

              const collection = new Collection(node)
              offset = collection.parse(new ParseContext(context), offset)
              collection.range = new PlainValue.Range(start, offset)
              return collection
            }

            return node
          })

          this.atLineStart = atLineStart != null ? atLineStart : orig.atLineStart || false
          this.inCollection = inCollection != null ? inCollection : orig.inCollection || false
          this.inFlow = inFlow != null ? inFlow : orig.inFlow || false
          this.indent = indent != null ? indent : orig.indent
          this.lineStart = lineStart != null ? lineStart : orig.lineStart
          this.parent = parent != null ? parent : orig.parent || {}
          this.root = orig.root
          this.src = orig.src
        }

        nodeStartsCollection(node) {
          const { inCollection, inFlow, src } = this
          if (inCollection || inFlow) return false
          if (node instanceof CollectionItem) return true // check for implicit key

          let offset = node.range.end
          if (src[offset] === "\n" || src[offset - 1] === "\n") return false
          offset = PlainValue.Node.endOfWhiteSpace(src, offset)
          return src[offset] === ":"
        } // Anchor and tag are before type, which determines the node implementation
        // class; hence this intermediate step.

        parseProps(offset) {
          const { inFlow, parent, src } = this
          const props = []
          let lineHasProps = false
          offset = this.atLineStart
            ? PlainValue.Node.endOfIndent(src, offset)
            : PlainValue.Node.endOfWhiteSpace(src, offset)
          let ch = src[offset]

          while (
            ch === PlainValue.Char.ANCHOR ||
            ch === PlainValue.Char.COMMENT ||
            ch === PlainValue.Char.TAG ||
            ch === "\n"
          ) {
            if (ch === "\n") {
              let inEnd = offset
              let lineStart

              do {
                lineStart = inEnd + 1
                inEnd = PlainValue.Node.endOfIndent(src, lineStart)
              } while (src[inEnd] === "\n")

              const indentDiff = inEnd - (lineStart + this.indent)
              const noIndicatorAsIndent =
                parent.type === PlainValue.Type.SEQ_ITEM && parent.context.atLineStart
              if (
                src[inEnd] !== "#" &&
                !PlainValue.Node.nextNodeIsIndented(src[inEnd], indentDiff, !noIndicatorAsIndent)
              )
                break
              this.atLineStart = true
              this.lineStart = lineStart
              lineHasProps = false
              offset = inEnd
            } else if (ch === PlainValue.Char.COMMENT) {
              const end = PlainValue.Node.endOfLine(src, offset + 1)
              props.push(new PlainValue.Range(offset, end))
              offset = end
            } else {
              let end = PlainValue.Node.endOfIdentifier(src, offset + 1)

              if (
                ch === PlainValue.Char.TAG &&
                src[end] === "," &&
                /^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+,\d\d\d\d(-\d\d){0,2}\/\S/.test(
                  src.slice(offset + 1, end + 13)
                )
              ) {
                // Let's presume we're dealing with a YAML 1.0 domain tag here, rather
                // than an empty but 'foo.bar' private-tagged node in a flow collection
                // followed without whitespace by a plain string starting with a year
                // or date divided by something.
                end = PlainValue.Node.endOfIdentifier(src, end + 5)
              }

              props.push(new PlainValue.Range(offset, end))
              lineHasProps = true
              offset = PlainValue.Node.endOfWhiteSpace(src, end)
            }

            ch = src[offset]
          } // '- &a : b' has an anchor on an empty node

          if (lineHasProps && ch === ":" && PlainValue.Node.atBlank(src, offset + 1, true))
            offset -= 1
          const type = ParseContext.parseType(src, offset, inFlow)
          return {
            props,
            type,
            valueStart: offset
          }
        }
        /**
         * Parses a node from the source
         * @param {ParseContext} overlay
         * @param {number} start - Index of first non-whitespace character for the node
         * @returns {?Node} - null if at a document boundary
         */
      }

      // Published as 'yaml/parse-cst'
      function parse(src) {
        const cr = []

        if (src.indexOf("\r") !== -1) {
          src = src.replace(/\r\n?/g, (match, offset) => {
            if (match.length > 1) cr.push(offset)
            return "\n"
          })
        }

        const documents = []
        let offset = 0

        do {
          const doc = new Document()
          const context = new ParseContext({
            src
          })
          offset = doc.parse(context, offset)
          documents.push(doc)
        } while (offset < src.length)

        documents.setOrigRanges = () => {
          if (cr.length === 0) return false

          for (let i = 1; i < cr.length; ++i) cr[i] -= i

          let crOffset = 0

          for (let i = 0; i < documents.length; ++i) {
            crOffset = documents[i].setOrigRanges(cr, crOffset)
          }

          cr.splice(0, cr.length)
          return true
        }

        documents.toString = () => documents.join("...\n")

        return documents
      }

      exports.parse = parse

      /***/
    },

    /***/ 39914: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var PlainValue = __nccwpck_require__(24941)

      function addCommentBefore(str, indent, comment) {
        if (!comment) return str
        const cc = comment.replace(/[\s\S]^/gm, `$&${indent}#`)
        return `#${cc}\n${indent}${str}`
      }
      function addComment(str, indent, comment) {
        return !comment
          ? str
          : comment.indexOf("\n") === -1
          ? `${str} #${comment}`
          : `${str}\n` + comment.replace(/^/gm, `${indent || ""}#`)
      }

      class Node {}

      function toJSON(value, arg, ctx) {
        if (Array.isArray(value)) return value.map((v, i) => toJSON(v, String(i), ctx))

        if (value && typeof value.toJSON === "function") {
          const anchor = ctx && ctx.anchors && ctx.anchors.get(value)
          if (anchor)
            ctx.onCreate = (res) => {
              anchor.res = res
              delete ctx.onCreate
            }
          const res = value.toJSON(arg, ctx)
          if (anchor && ctx.onCreate) ctx.onCreate(res)
          return res
        }

        if ((!ctx || !ctx.keep) && typeof value === "bigint") return Number(value)
        return value
      }

      class Scalar extends Node {
        constructor(value) {
          super()
          this.value = value
        }

        toJSON(arg, ctx) {
          return ctx && ctx.keep ? this.value : toJSON(this.value, arg, ctx)
        }

        toString() {
          return String(this.value)
        }
      }

      function collectionFromPath(schema, path, value) {
        let v = value

        for (let i = path.length - 1; i >= 0; --i) {
          const k = path[i]

          if (Number.isInteger(k) && k >= 0) {
            const a = []
            a[k] = v
            v = a
          } else {
            const o = {}
            Object.defineProperty(o, k, {
              value: v,
              writable: true,
              enumerable: true,
              configurable: true
            })
            v = o
          }
        }

        return schema.createNode(v, false)
      } // null, undefined, or an empty non-string iterable (e.g. [])

      const isEmptyPath = (path) =>
        path == null || (typeof path === "object" && path[Symbol.iterator]().next().done)
      class Collection extends Node {
        constructor(schema) {
          super()

          PlainValue._defineProperty(this, "items", [])

          this.schema = schema
        }

        addIn(path, value) {
          if (isEmptyPath(path)) this.add(value)
          else {
            const [key, ...rest] = path
            const node = this.get(key, true)
            if (node instanceof Collection) node.addIn(rest, value)
            else if (node === undefined && this.schema)
              this.set(key, collectionFromPath(this.schema, rest, value))
            else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`)
          }
        }

        deleteIn([key, ...rest]) {
          if (rest.length === 0) return this.delete(key)
          const node = this.get(key, true)
          if (node instanceof Collection) return node.deleteIn(rest)
          else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`)
        }

        getIn([key, ...rest], keepScalar) {
          const node = this.get(key, true)
          if (rest.length === 0) return !keepScalar && node instanceof Scalar ? node.value : node
          else return node instanceof Collection ? node.getIn(rest, keepScalar) : undefined
        }

        hasAllNullValues() {
          return this.items.every((node) => {
            if (!node || node.type !== "PAIR") return false
            const n = node.value
            return (
              n == null ||
              (n instanceof Scalar && n.value == null && !n.commentBefore && !n.comment && !n.tag)
            )
          })
        }

        hasIn([key, ...rest]) {
          if (rest.length === 0) return this.has(key)
          const node = this.get(key, true)
          return node instanceof Collection ? node.hasIn(rest) : false
        }

        setIn([key, ...rest], value) {
          if (rest.length === 0) {
            this.set(key, value)
          } else {
            const node = this.get(key, true)
            if (node instanceof Collection) node.setIn(rest, value)
            else if (node === undefined && this.schema)
              this.set(key, collectionFromPath(this.schema, rest, value))
            else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`)
          }
        } // overridden in implementations

        /* istanbul ignore next */

        toJSON() {
          return null
        }

        toString(ctx, { blockItem, flowChars, isMap, itemIndent }, onComment, onChompKeep) {
          const { indent, indentStep, stringify } = ctx
          const inFlow =
            this.type === PlainValue.Type.FLOW_MAP ||
            this.type === PlainValue.Type.FLOW_SEQ ||
            ctx.inFlow
          if (inFlow) itemIndent += indentStep
          const allNullValues = isMap && this.hasAllNullValues()
          ctx = Object.assign({}, ctx, {
            allNullValues,
            indent: itemIndent,
            inFlow,
            type: null
          })
          let chompKeep = false
          let hasItemWithNewLine = false
          const nodes = this.items.reduce((nodes, item, i) => {
            let comment

            if (item) {
              if (!chompKeep && item.spaceBefore)
                nodes.push({
                  type: "comment",
                  str: ""
                })
              if (item.commentBefore)
                item.commentBefore.match(/^.*$/gm).forEach((line) => {
                  nodes.push({
                    type: "comment",
                    str: `#${line}`
                  })
                })
              if (item.comment) comment = item.comment
              if (
                inFlow &&
                ((!chompKeep && item.spaceBefore) ||
                  item.commentBefore ||
                  item.comment ||
                  (item.key && (item.key.commentBefore || item.key.comment)) ||
                  (item.value && (item.value.commentBefore || item.value.comment)))
              )
                hasItemWithNewLine = true
            }

            chompKeep = false
            let str = stringify(
              item,
              ctx,
              () => (comment = null),
              () => (chompKeep = true)
            )
            if (inFlow && !hasItemWithNewLine && str.includes("\n")) hasItemWithNewLine = true
            if (inFlow && i < this.items.length - 1) str += ","
            str = addComment(str, itemIndent, comment)
            if (chompKeep && (comment || inFlow)) chompKeep = false
            nodes.push({
              type: "item",
              str
            })
            return nodes
          }, [])
          let str

          if (nodes.length === 0) {
            str = flowChars.start + flowChars.end
          } else if (inFlow) {
            const { start, end } = flowChars
            const strings = nodes.map((n) => n.str)

            if (
              hasItemWithNewLine ||
              strings.reduce((sum, str) => sum + str.length + 2, 2) >
                Collection.maxFlowStringSingleLineLength
            ) {
              str = start

              for (const s of strings) {
                str += s ? `\n${indentStep}${indent}${s}` : "\n"
              }

              str += `\n${indent}${end}`
            } else {
              str = `${start} ${strings.join(" ")} ${end}`
            }
          } else {
            const strings = nodes.map(blockItem)
            str = strings.shift()

            for (const s of strings) str += s ? `\n${indent}${s}` : "\n"
          }

          if (this.comment) {
            str += "\n" + this.comment.replace(/^/gm, `${indent}#`)
            if (onComment) onComment()
          } else if (chompKeep && onChompKeep) onChompKeep()

          return str
        }
      }

      PlainValue._defineProperty(Collection, "maxFlowStringSingleLineLength", 60)

      function asItemIndex(key) {
        let idx = key instanceof Scalar ? key.value : key
        if (idx && typeof idx === "string") idx = Number(idx)
        return Number.isInteger(idx) && idx >= 0 ? idx : null
      }

      class YAMLSeq extends Collection {
        add(value) {
          this.items.push(value)
        }

        delete(key) {
          const idx = asItemIndex(key)
          if (typeof idx !== "number") return false
          const del = this.items.splice(idx, 1)
          return del.length > 0
        }

        get(key, keepScalar) {
          const idx = asItemIndex(key)
          if (typeof idx !== "number") return undefined
          const it = this.items[idx]
          return !keepScalar && it instanceof Scalar ? it.value : it
        }

        has(key) {
          const idx = asItemIndex(key)
          return typeof idx === "number" && idx < this.items.length
        }

        set(key, value) {
          const idx = asItemIndex(key)
          if (typeof idx !== "number") throw new Error(`Expected a valid index, not ${key}.`)
          this.items[idx] = value
        }

        toJSON(_, ctx) {
          const seq = []
          if (ctx && ctx.onCreate) ctx.onCreate(seq)
          let i = 0

          for (const item of this.items) seq.push(toJSON(item, String(i++), ctx))

          return seq
        }

        toString(ctx, onComment, onChompKeep) {
          if (!ctx) return JSON.stringify(this)
          return super.toString(
            ctx,
            {
              blockItem: (n) => (n.type === "comment" ? n.str : `- ${n.str}`),
              flowChars: {
                start: "[",
                end: "]"
              },
              isMap: false,
              itemIndent: (ctx.indent || "") + "  "
            },
            onComment,
            onChompKeep
          )
        }
      }

      const stringifyKey = (key, jsKey, ctx) => {
        if (jsKey === null) return ""
        if (typeof jsKey !== "object") return String(jsKey)
        if (key instanceof Node && ctx && ctx.doc)
          return key.toString({
            anchors: Object.create(null),
            doc: ctx.doc,
            indent: "",
            indentStep: ctx.indentStep,
            inFlow: true,
            inStringifyKey: true,
            stringify: ctx.stringify
          })
        return JSON.stringify(jsKey)
      }

      class Pair extends Node {
        constructor(key, value = null) {
          super()
          this.key = key
          this.value = value
          this.type = Pair.Type.PAIR
        }

        get commentBefore() {
          return this.key instanceof Node ? this.key.commentBefore : undefined
        }

        set commentBefore(cb) {
          if (this.key == null) this.key = new Scalar(null)
          if (this.key instanceof Node) this.key.commentBefore = cb
          else {
            const msg =
              "Pair.commentBefore is an alias for Pair.key.commentBefore. To set it, the key must be a Node."
            throw new Error(msg)
          }
        }

        addToJSMap(ctx, map) {
          const key = toJSON(this.key, "", ctx)

          if (map instanceof Map) {
            const value = toJSON(this.value, key, ctx)
            map.set(key, value)
          } else if (map instanceof Set) {
            map.add(key)
          } else {
            const stringKey = stringifyKey(this.key, key, ctx)
            const value = toJSON(this.value, stringKey, ctx)
            if (stringKey in map)
              Object.defineProperty(map, stringKey, {
                value,
                writable: true,
                enumerable: true,
                configurable: true
              })
            else map[stringKey] = value
          }

          return map
        }

        toJSON(_, ctx) {
          const pair = ctx && ctx.mapAsMap ? new Map() : {}
          return this.addToJSMap(ctx, pair)
        }

        toString(ctx, onComment, onChompKeep) {
          if (!ctx || !ctx.doc) return JSON.stringify(this)
          const { indent: indentSize, indentSeq, simpleKeys } = ctx.doc.options
          let { key, value } = this
          let keyComment = key instanceof Node && key.comment

          if (simpleKeys) {
            if (keyComment) {
              throw new Error("With simple keys, key nodes cannot have comments")
            }

            if (key instanceof Collection) {
              const msg = "With simple keys, collection cannot be used as a key value"
              throw new Error(msg)
            }
          }

          let explicitKey =
            !simpleKeys &&
            (!key ||
              keyComment ||
              (key instanceof Node
                ? key instanceof Collection ||
                  key.type === PlainValue.Type.BLOCK_FOLDED ||
                  key.type === PlainValue.Type.BLOCK_LITERAL
                : typeof key === "object"))
          const { doc, indent, indentStep, stringify } = ctx
          ctx = Object.assign({}, ctx, {
            implicitKey: !explicitKey,
            indent: indent + indentStep
          })
          let chompKeep = false
          let str = stringify(
            key,
            ctx,
            () => (keyComment = null),
            () => (chompKeep = true)
          )
          str = addComment(str, ctx.indent, keyComment)

          if (!explicitKey && str.length > 1024) {
            if (simpleKeys)
              throw new Error(
                "With simple keys, single line scalar must not span more than 1024 characters"
              )
            explicitKey = true
          }

          if (ctx.allNullValues && !simpleKeys) {
            if (this.comment) {
              str = addComment(str, ctx.indent, this.comment)
              if (onComment) onComment()
            } else if (chompKeep && !keyComment && onChompKeep) onChompKeep()

            return ctx.inFlow && !explicitKey ? str : `? ${str}`
          }

          str = explicitKey ? `? ${str}\n${indent}:` : `${str}:`

          if (this.comment) {
            // expected (but not strictly required) to be a single-line comment
            str = addComment(str, ctx.indent, this.comment)
            if (onComment) onComment()
          }

          let vcb = ""
          let valueComment = null

          if (value instanceof Node) {
            if (value.spaceBefore) vcb = "\n"

            if (value.commentBefore) {
              const cs = value.commentBefore.replace(/^/gm, `${ctx.indent}#`)
              vcb += `\n${cs}`
            }

            valueComment = value.comment
          } else if (value && typeof value === "object") {
            value = doc.schema.createNode(value, true)
          }

          ctx.implicitKey = false
          if (!explicitKey && !this.comment && value instanceof Scalar)
            ctx.indentAtStart = str.length + 1
          chompKeep = false

          if (
            !indentSeq &&
            indentSize >= 2 &&
            !ctx.inFlow &&
            !explicitKey &&
            value instanceof YAMLSeq &&
            value.type !== PlainValue.Type.FLOW_SEQ &&
            !value.tag &&
            !doc.anchors.getName(value)
          ) {
            // If indentSeq === false, consider '- ' as part of indentation where possible
            ctx.indent = ctx.indent.substr(2)
          }

          const valueStr = stringify(
            value,
            ctx,
            () => (valueComment = null),
            () => (chompKeep = true)
          )
          let ws = " "

          if (vcb || this.comment) {
            ws = `${vcb}\n${ctx.indent}`
          } else if (!explicitKey && value instanceof Collection) {
            const flow = valueStr[0] === "[" || valueStr[0] === "{"
            if (!flow || valueStr.includes("\n")) ws = `\n${ctx.indent}`
          } else if (valueStr[0] === "\n") ws = ""

          if (chompKeep && !valueComment && onChompKeep) onChompKeep()
          return addComment(str + ws + valueStr, ctx.indent, valueComment)
        }
      }

      PlainValue._defineProperty(Pair, "Type", {
        PAIR: "PAIR",
        MERGE_PAIR: "MERGE_PAIR"
      })

      const getAliasCount = (node, anchors) => {
        if (node instanceof Alias) {
          const anchor = anchors.get(node.source)
          return anchor.count * anchor.aliasCount
        } else if (node instanceof Collection) {
          let count = 0

          for (const item of node.items) {
            const c = getAliasCount(item, anchors)
            if (c > count) count = c
          }

          return count
        } else if (node instanceof Pair) {
          const kc = getAliasCount(node.key, anchors)
          const vc = getAliasCount(node.value, anchors)
          return Math.max(kc, vc)
        }

        return 1
      }

      class Alias extends Node {
        static stringify({ range, source }, { anchors, doc, implicitKey, inStringifyKey }) {
          let anchor = Object.keys(anchors).find((a) => anchors[a] === source)
          if (!anchor && inStringifyKey)
            anchor = doc.anchors.getName(source) || doc.anchors.newName()
          if (anchor) return `*${anchor}${implicitKey ? " " : ""}`
          const msg = doc.anchors.getName(source)
            ? "Alias node must be after source node"
            : "Source node not found for alias node"
          throw new Error(`${msg} [${range}]`)
        }

        constructor(source) {
          super()
          this.source = source
          this.type = PlainValue.Type.ALIAS
        }

        set tag(t) {
          throw new Error("Alias nodes cannot have tags")
        }

        toJSON(arg, ctx) {
          if (!ctx) return toJSON(this.source, arg, ctx)
          const { anchors, maxAliasCount } = ctx
          const anchor = anchors.get(this.source)
          /* istanbul ignore if */

          if (!anchor || anchor.res === undefined) {
            const msg = "This should not happen: Alias anchor was not resolved?"
            if (this.cstNode) throw new PlainValue.YAMLReferenceError(this.cstNode, msg)
            else throw new ReferenceError(msg)
          }

          if (maxAliasCount >= 0) {
            anchor.count += 1
            if (anchor.aliasCount === 0) anchor.aliasCount = getAliasCount(this.source, anchors)

            if (anchor.count * anchor.aliasCount > maxAliasCount) {
              const msg = "Excessive alias count indicates a resource exhaustion attack"
              if (this.cstNode) throw new PlainValue.YAMLReferenceError(this.cstNode, msg)
              else throw new ReferenceError(msg)
            }
          }

          return anchor.res
        } // Only called when stringifying an alias mapping key while constructing
        // Object output.

        toString(ctx) {
          return Alias.stringify(this, ctx)
        }
      }

      PlainValue._defineProperty(Alias, "default", true)

      function findPair(items, key) {
        const k = key instanceof Scalar ? key.value : key

        for (const it of items) {
          if (it instanceof Pair) {
            if (it.key === key || it.key === k) return it
            if (it.key && it.key.value === k) return it
          }
        }

        return undefined
      }
      class YAMLMap extends Collection {
        add(pair, overwrite) {
          if (!pair) pair = new Pair(pair)
          else if (!(pair instanceof Pair)) pair = new Pair(pair.key || pair, pair.value)
          const prev = findPair(this.items, pair.key)
          const sortEntries = this.schema && this.schema.sortMapEntries

          if (prev) {
            if (overwrite) prev.value = pair.value
            else throw new Error(`Key ${pair.key} already set`)
          } else if (sortEntries) {
            const i = this.items.findIndex((item) => sortEntries(pair, item) < 0)
            if (i === -1) this.items.push(pair)
            else this.items.splice(i, 0, pair)
          } else {
            this.items.push(pair)
          }
        }

        delete(key) {
          const it = findPair(this.items, key)
          if (!it) return false
          const del = this.items.splice(this.items.indexOf(it), 1)
          return del.length > 0
        }

        get(key, keepScalar) {
          const it = findPair(this.items, key)
          const node = it && it.value
          return !keepScalar && node instanceof Scalar ? node.value : node
        }

        has(key) {
          return !!findPair(this.items, key)
        }

        set(key, value) {
          this.add(new Pair(key, value), true)
        }
        /**
         * @param {*} arg ignored
         * @param {*} ctx Conversion context, originally set in Document#toJSON()
         * @param {Class} Type If set, forces the returned collection type
         * @returns {*} Instance of Type, Map, or Object
         */

        toJSON(_, ctx, Type) {
          const map = Type ? new Type() : ctx && ctx.mapAsMap ? new Map() : {}
          if (ctx && ctx.onCreate) ctx.onCreate(map)

          for (const item of this.items) item.addToJSMap(ctx, map)

          return map
        }

        toString(ctx, onComment, onChompKeep) {
          if (!ctx) return JSON.stringify(this)

          for (const item of this.items) {
            if (!(item instanceof Pair))
              throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`)
          }

          return super.toString(
            ctx,
            {
              blockItem: (n) => n.str,
              flowChars: {
                start: "{",
                end: "}"
              },
              isMap: true,
              itemIndent: ctx.indent || ""
            },
            onComment,
            onChompKeep
          )
        }
      }

      const MERGE_KEY = "<<"
      class Merge extends Pair {
        constructor(pair) {
          if (pair instanceof Pair) {
            let seq = pair.value

            if (!(seq instanceof YAMLSeq)) {
              seq = new YAMLSeq()
              seq.items.push(pair.value)
              seq.range = pair.value.range
            }

            super(pair.key, seq)
            this.range = pair.range
          } else {
            super(new Scalar(MERGE_KEY), new YAMLSeq())
          }

          this.type = Pair.Type.MERGE_PAIR
        } // If the value associated with a merge key is a single mapping node, each of
        // its key/value pairs is inserted into the current mapping, unless the key
        // already exists in it. If the value associated with the merge key is a
        // sequence, then this sequence is expected to contain mapping nodes and each
        // of these nodes is merged in turn according to its order in the sequence.
        // Keys in mapping nodes earlier in the sequence override keys specified in
        // later mapping nodes. -- http://yaml.org/type/merge.html

        addToJSMap(ctx, map) {
          for (const { source } of this.value.items) {
            if (!(source instanceof YAMLMap)) throw new Error("Merge sources must be maps")
            const srcMap = source.toJSON(null, ctx, Map)

            for (const [key, value] of srcMap) {
              if (map instanceof Map) {
                if (!map.has(key)) map.set(key, value)
              } else if (map instanceof Set) {
                map.add(key)
              } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
                Object.defineProperty(map, key, {
                  value,
                  writable: true,
                  enumerable: true,
                  configurable: true
                })
              }
            }
          }

          return map
        }

        toString(ctx, onComment) {
          const seq = this.value
          if (seq.items.length > 1) return super.toString(ctx, onComment)
          this.value = seq.items[0]
          const str = super.toString(ctx, onComment)
          this.value = seq
          return str
        }
      }

      const binaryOptions = {
        defaultType: PlainValue.Type.BLOCK_LITERAL,
        lineWidth: 76
      }
      const boolOptions = {
        trueStr: "true",
        falseStr: "false"
      }
      const intOptions = {
        asBigInt: false
      }
      const nullOptions = {
        nullStr: "null"
      }
      const strOptions = {
        defaultType: PlainValue.Type.PLAIN,
        doubleQuoted: {
          jsonEncoding: false,
          minMultiLineLength: 40
        },
        fold: {
          lineWidth: 80,
          minContentWidth: 20
        }
      }

      function resolveScalar(str, tags, scalarFallback) {
        for (const { format, test, resolve } of tags) {
          if (test) {
            const match = str.match(test)

            if (match) {
              let res = resolve.apply(null, match)
              if (!(res instanceof Scalar)) res = new Scalar(res)
              if (format) res.format = format
              return res
            }
          }
        }

        if (scalarFallback) str = scalarFallback(str)
        return new Scalar(str)
      }

      const FOLD_FLOW = "flow"
      const FOLD_BLOCK = "block"
      const FOLD_QUOTED = "quoted" // presumes i+1 is at the start of a line
      // returns index of last newline in more-indented block

      const consumeMoreIndentedLines = (text, i) => {
        let ch = text[i + 1]

        while (ch === " " || ch === "\t") {
          do {
            ch = text[(i += 1)]
          } while (ch && ch !== "\n")

          ch = text[i + 1]
        }

        return i
      }
      /**
       * Tries to keep input at up to `lineWidth` characters, splitting only on spaces
       * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are
       * terminated with `\n` and started with `indent`.
       *
       * @param {string} text
       * @param {string} indent
       * @param {string} [mode='flow'] `'block'` prevents more-indented lines
       *   from being folded; `'quoted'` allows for `\` escapes, including escaped
       *   newlines
       * @param {Object} options
       * @param {number} [options.indentAtStart] Accounts for leading contents on
       *   the first line, defaulting to `indent.length`
       * @param {number} [options.lineWidth=80]
       * @param {number} [options.minContentWidth=20] Allow highly indented lines to
       *   stretch the line width or indent content from the start
       * @param {function} options.onFold Called once if the text is folded
       * @param {function} options.onFold Called once if any line of text exceeds
       *   lineWidth characters
       */

      function foldFlowLines(
        text,
        indent,
        mode,
        { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow }
      ) {
        if (!lineWidth || lineWidth < 0) return text
        const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length)
        if (text.length <= endStep) return text
        const folds = []
        const escapedFolds = {}
        let end = lineWidth - indent.length

        if (typeof indentAtStart === "number") {
          if (indentAtStart > lineWidth - Math.max(2, minContentWidth)) folds.push(0)
          else end = lineWidth - indentAtStart
        }

        let split = undefined
        let prev = undefined
        let overflow = false
        let i = -1
        let escStart = -1
        let escEnd = -1

        if (mode === FOLD_BLOCK) {
          i = consumeMoreIndentedLines(text, i)
          if (i !== -1) end = i + endStep
        }

        for (let ch; (ch = text[(i += 1)]); ) {
          if (mode === FOLD_QUOTED && ch === "\\") {
            escStart = i

            switch (text[i + 1]) {
              case "x":
                i += 3
                break

              case "u":
                i += 5
                break

              case "U":
                i += 9
                break

              default:
                i += 1
            }

            escEnd = i
          }

          if (ch === "\n") {
            if (mode === FOLD_BLOCK) i = consumeMoreIndentedLines(text, i)
            end = i + endStep
            split = undefined
          } else {
            if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "\t") {
              // space surrounded by non-space can be replaced with newline + indent
              const next = text[i + 1]
              if (next && next !== " " && next !== "\n" && next !== "\t") split = i
            }

            if (i >= end) {
              if (split) {
                folds.push(split)
                end = split + endStep
                split = undefined
              } else if (mode === FOLD_QUOTED) {
                // white-space collected at end may stretch past lineWidth
                while (prev === " " || prev === "\t") {
                  prev = ch
                  ch = text[(i += 1)]
                  overflow = true
                } // Account for newline escape, but don't break preceding escape

                const j = i > escEnd + 1 ? i - 2 : escStart - 1 // Bail out if lineWidth & minContentWidth are shorter than an escape string

                if (escapedFolds[j]) return text
                folds.push(j)
                escapedFolds[j] = true
                end = j + endStep
                split = undefined
              } else {
                overflow = true
              }
            }
          }

          prev = ch
        }

        if (overflow && onOverflow) onOverflow()
        if (folds.length === 0) return text
        if (onFold) onFold()
        let res = text.slice(0, folds[0])

        for (let i = 0; i < folds.length; ++i) {
          const fold = folds[i]
          const end = folds[i + 1] || text.length
          if (fold === 0) res = `\n${indent}${text.slice(0, end)}`
          else {
            if (mode === FOLD_QUOTED && escapedFolds[fold]) res += `${text[fold]}\\`
            res += `\n${indent}${text.slice(fold + 1, end)}`
          }
        }

        return res
      }

      const getFoldOptions = ({ indentAtStart }) =>
        indentAtStart
          ? Object.assign(
              {
                indentAtStart
              },
              strOptions.fold
            )
          : strOptions.fold // Also checks for lines starting with %, as parsing the output as YAML 1.1 will
      // presume that's starting a new document.

      const containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str)

      function lineLengthOverLimit(str, lineWidth, indentLength) {
        if (!lineWidth || lineWidth < 0) return false
        const limit = lineWidth - indentLength
        const strLen = str.length
        if (strLen <= limit) return false

        for (let i = 0, start = 0; i < strLen; ++i) {
          if (str[i] === "\n") {
            if (i - start > limit) return true
            start = i + 1
            if (strLen - start <= limit) return false
          }
        }

        return true
      }

      function doubleQuotedString(value, ctx) {
        const { implicitKey } = ctx
        const { jsonEncoding, minMultiLineLength } = strOptions.doubleQuoted
        const json = JSON.stringify(value)
        if (jsonEncoding) return json
        const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "")
        let str = ""
        let start = 0

        for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
          if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
            // space before newline needs to be escaped to not be folded
            str += json.slice(start, i) + "\\ "
            i += 1
            start = i
            ch = "\\"
          }

          if (ch === "\\")
            switch (json[i + 1]) {
              case "u":
                {
                  str += json.slice(start, i)
                  const code = json.substr(i + 2, 4)

                  switch (code) {
                    case "0000":
                      str += "\\0"
                      break

                    case "0007":
                      str += "\\a"
                      break

                    case "000b":
                      str += "\\v"
                      break

                    case "001b":
                      str += "\\e"
                      break

                    case "0085":
                      str += "\\N"
                      break

                    case "00a0":
                      str += "\\_"
                      break

                    case "2028":
                      str += "\\L"
                      break

                    case "2029":
                      str += "\\P"
                      break

                    default:
                      if (code.substr(0, 2) === "00") str += "\\x" + code.substr(2)
                      else str += json.substr(i, 6)
                  }

                  i += 5
                  start = i + 1
                }
                break

              case "n":
                if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
                  i += 1
                } else {
                  // folding will eat first newline
                  str += json.slice(start, i) + "\n\n"

                  while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                    str += "\n"
                    i += 2
                  }

                  str += indent // space after newline needs to be escaped to not be folded

                  if (json[i + 2] === " ") str += "\\"
                  i += 1
                  start = i + 1
                }

                break

              default:
                i += 1
            }
        }

        str = start ? str + json.slice(start) : json
        return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx))
      }

      function singleQuotedString(value, ctx) {
        if (ctx.implicitKey) {
          if (/\n/.test(value)) return doubleQuotedString(value, ctx)
        } else {
          // single quoted string can't have leading or trailing whitespace around newline
          if (/[ \t]\n|\n[ \t]/.test(value)) return doubleQuotedString(value, ctx)
        }

        const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "")
        const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&\n${indent}`) + "'"
        return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx))
      }

      function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
        // 1. Block can't end in whitespace unless the last line is non-empty.
        // 2. Strings consisting of only whitespace are best rendered explicitly.
        if (/\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
          return doubleQuotedString(value, ctx)
        }

        const indent =
          ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "")
        const indentSize = indent ? "2" : "1" // root is at -1

        const literal =
          type === PlainValue.Type.BLOCK_FOLDED
            ? false
            : type === PlainValue.Type.BLOCK_LITERAL
            ? true
            : !lineLengthOverLimit(value, strOptions.fold.lineWidth, indent.length)
        let header = literal ? "|" : ">"
        if (!value) return header + "\n"
        let wsStart = ""
        let wsEnd = ""
        value = value
          .replace(/[\n\t ]*$/, (ws) => {
            const n = ws.indexOf("\n")

            if (n === -1) {
              header += "-" // strip
            } else if (value === ws || n !== ws.length - 1) {
              header += "+" // keep

              if (onChompKeep) onChompKeep()
            }

            wsEnd = ws.replace(/\n$/, "")
            return ""
          })
          .replace(/^[\n ]*/, (ws) => {
            if (ws.indexOf(" ") !== -1) header += indentSize
            const m = ws.match(/ +$/)

            if (m) {
              wsStart = ws.slice(0, -m[0].length)
              return m[0]
            } else {
              wsStart = ws
              return ""
            }
          })
        if (wsEnd) wsEnd = wsEnd.replace(/\n+(?!\n|$)/g, `$&${indent}`)
        if (wsStart) wsStart = wsStart.replace(/\n+/g, `$&${indent}`)

        if (comment) {
          header += " #" + comment.replace(/ ?[\r\n]+/g, " ")
          if (onComment) onComment()
        }

        if (!value) return `${header}${indentSize}\n${indent}${wsEnd}`

        if (literal) {
          value = value.replace(/\n+/g, `$&${indent}`)
          return `${header}\n${indent}${wsStart}${value}${wsEnd}`
        }

        value = value
          .replace(/\n+/g, "\n$&")
          .replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2") // more-indented lines aren't folded
          //         ^ ind.line  ^ empty     ^ capture next empty lines only at end of indent
          .replace(/\n+/g, `$&${indent}`)
        const body = foldFlowLines(
          `${wsStart}${value}${wsEnd}`,
          indent,
          FOLD_BLOCK,
          strOptions.fold
        )
        return `${header}\n${indent}${body}`
      }

      function plainString(item, ctx, onComment, onChompKeep) {
        const { comment, type, value } = item
        const { actualString, implicitKey, indent, inFlow } = ctx

        if ((implicitKey && /[\n[\]{},]/.test(value)) || (inFlow && /[[\]{},]/.test(value))) {
          return doubleQuotedString(value, ctx)
        }

        if (
          !value ||
          /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(
            value
          )
        ) {
          // not allowed:
          // - empty string, '-' or '?'
          // - start with an indicator character (except [?:-]) or /[?-] /
          // - '\n ', ': ' or ' \n' anywhere
          // - '#' not preceded by a non-space char
          // - end with ' ' or ':'
          return implicitKey || inFlow || value.indexOf("\n") === -1
            ? value.indexOf('"') !== -1 && value.indexOf("'") === -1
              ? singleQuotedString(value, ctx)
              : doubleQuotedString(value, ctx)
            : blockString(item, ctx, onComment, onChompKeep)
        }

        if (
          !implicitKey &&
          !inFlow &&
          type !== PlainValue.Type.PLAIN &&
          value.indexOf("\n") !== -1
        ) {
          // Where allowed & type not set explicitly, prefer block style for multiline strings
          return blockString(item, ctx, onComment, onChompKeep)
        }

        if (indent === "" && containsDocumentMarker(value)) {
          ctx.forceBlockIndent = true
          return blockString(item, ctx, onComment, onChompKeep)
        }

        const str = value.replace(/\n+/g, `$&\n${indent}`) // Verify that output will be parsed as a string, as e.g. plain numbers and
        // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),
        // and others in v1.1.

        if (actualString) {
          const { tags } = ctx.doc.schema
          const resolved = resolveScalar(str, tags, tags.scalarFallback).value
          if (typeof resolved !== "string") return doubleQuotedString(value, ctx)
        }

        const body = implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx))

        if (comment && !inFlow && (body.indexOf("\n") !== -1 || comment.indexOf("\n") !== -1)) {
          if (onComment) onComment()
          return addCommentBefore(body, indent, comment)
        }

        return body
      }

      function stringifyString(item, ctx, onComment, onChompKeep) {
        const { defaultType } = strOptions
        const { implicitKey, inFlow } = ctx
        let { type, value } = item

        if (typeof value !== "string") {
          value = String(value)
          item = Object.assign({}, item, {
            value
          })
        }

        const _stringify = (_type) => {
          switch (_type) {
            case PlainValue.Type.BLOCK_FOLDED:
            case PlainValue.Type.BLOCK_LITERAL:
              return blockString(item, ctx, onComment, onChompKeep)

            case PlainValue.Type.QUOTE_DOUBLE:
              return doubleQuotedString(value, ctx)

            case PlainValue.Type.QUOTE_SINGLE:
              return singleQuotedString(value, ctx)

            case PlainValue.Type.PLAIN:
              return plainString(item, ctx, onComment, onChompKeep)

            default:
              return null
          }
        }

        if (type !== PlainValue.Type.QUOTE_DOUBLE && /[\x00-\x08\x0b-\x1f\x7f-\x9f]/.test(value)) {
          // force double quotes on control characters
          type = PlainValue.Type.QUOTE_DOUBLE
        } else if (
          (implicitKey || inFlow) &&
          (type === PlainValue.Type.BLOCK_FOLDED || type === PlainValue.Type.BLOCK_LITERAL)
        ) {
          // should not happen; blocks are not valid inside flow containers
          type = PlainValue.Type.QUOTE_DOUBLE
        }

        let res = _stringify(type)

        if (res === null) {
          res = _stringify(defaultType)
          if (res === null) throw new Error(`Unsupported default string type ${defaultType}`)
        }

        return res
      }

      function stringifyNumber({ format, minFractionDigits, tag, value }) {
        if (typeof value === "bigint") return String(value)
        if (!isFinite(value)) return isNaN(value) ? ".nan" : value < 0 ? "-.inf" : ".inf"
        let n = JSON.stringify(value)

        if (
          !format &&
          minFractionDigits &&
          (!tag || tag === "tag:yaml.org,2002:float") &&
          /^\d/.test(n)
        ) {
          let i = n.indexOf(".")

          if (i < 0) {
            i = n.length
            n += "."
          }

          let d = minFractionDigits - (n.length - i - 1)

          while (d-- > 0) n += "0"
        }

        return n
      }

      function checkFlowCollectionEnd(errors, cst) {
        let char, name

        switch (cst.type) {
          case PlainValue.Type.FLOW_MAP:
            char = "}"
            name = "flow map"
            break

          case PlainValue.Type.FLOW_SEQ:
            char = "]"
            name = "flow sequence"
            break

          default:
            errors.push(new PlainValue.YAMLSemanticError(cst, "Not a flow collection!?"))
            return
        }

        let lastItem

        for (let i = cst.items.length - 1; i >= 0; --i) {
          const item = cst.items[i]

          if (!item || item.type !== PlainValue.Type.COMMENT) {
            lastItem = item
            break
          }
        }

        if (lastItem && lastItem.char !== char) {
          const msg = `Expected ${name} to end with ${char}`
          let err

          if (typeof lastItem.offset === "number") {
            err = new PlainValue.YAMLSemanticError(cst, msg)
            err.offset = lastItem.offset + 1
          } else {
            err = new PlainValue.YAMLSemanticError(lastItem, msg)
            if (lastItem.range && lastItem.range.end)
              err.offset = lastItem.range.end - lastItem.range.start
          }

          errors.push(err)
        }
      }
      function checkFlowCommentSpace(errors, comment) {
        const prev = comment.context.src[comment.range.start - 1]

        if (prev !== "\n" && prev !== "\t" && prev !== " ") {
          const msg = "Comments must be separated from other tokens by white space characters"
          errors.push(new PlainValue.YAMLSemanticError(comment, msg))
        }
      }
      function getLongKeyError(source, key) {
        const sk = String(key)
        const k = sk.substr(0, 8) + "..." + sk.substr(-8)
        return new PlainValue.YAMLSemanticError(source, `The "${k}" key is too long`)
      }
      function resolveComments(collection, comments) {
        for (const { afterKey, before, comment } of comments) {
          let item = collection.items[before]

          if (!item) {
            if (comment !== undefined) {
              if (collection.comment) collection.comment += "\n" + comment
              else collection.comment = comment
            }
          } else {
            if (afterKey && item.value) item = item.value

            if (comment === undefined) {
              if (afterKey || !item.commentBefore) item.spaceBefore = true
            } else {
              if (item.commentBefore) item.commentBefore += "\n" + comment
              else item.commentBefore = comment
            }
          }
        }
      }

      // on error, will return { str: string, errors: Error[] }
      function resolveString(doc, node) {
        const res = node.strValue
        if (!res) return ""
        if (typeof res === "string") return res
        res.errors.forEach((error) => {
          if (!error.source) error.source = node
          doc.errors.push(error)
        })
        return res.str
      }

      function resolveTagHandle(doc, node) {
        const { handle, suffix } = node.tag
        let prefix = doc.tagPrefixes.find((p) => p.handle === handle)

        if (!prefix) {
          const dtp = doc.getDefaults().tagPrefixes
          if (dtp) prefix = dtp.find((p) => p.handle === handle)
          if (!prefix)
            throw new PlainValue.YAMLSemanticError(
              node,
              `The ${handle} tag handle is non-default and was not declared.`
            )
        }

        if (!suffix)
          throw new PlainValue.YAMLSemanticError(node, `The ${handle} tag has no suffix.`)

        if (handle === "!" && (doc.version || doc.options.version) === "1.0") {
          if (suffix[0] === "^") {
            doc.warnings.push(
              new PlainValue.YAMLWarning(node, "YAML 1.0 ^ tag expansion is not supported")
            )
            return suffix
          }

          if (/[:/]/.test(suffix)) {
            // word/foo -> tag:word.yaml.org,2002:foo
            const vocab = suffix.match(/^([a-z0-9-]+)\/(.*)/i)
            return vocab ? `tag:${vocab[1]}.yaml.org,2002:${vocab[2]}` : `tag:${suffix}`
          }
        }

        return prefix.prefix + decodeURIComponent(suffix)
      }

      function resolveTagName(doc, node) {
        const { tag, type } = node
        let nonSpecific = false

        if (tag) {
          const { handle, suffix, verbatim } = tag

          if (verbatim) {
            if (verbatim !== "!" && verbatim !== "!!") return verbatim
            const msg = `Verbatim tags aren't resolved, so ${verbatim} is invalid.`
            doc.errors.push(new PlainValue.YAMLSemanticError(node, msg))
          } else if (handle === "!" && !suffix) {
            nonSpecific = true
          } else {
            try {
              return resolveTagHandle(doc, node)
            } catch (error) {
              doc.errors.push(error)
            }
          }
        }

        switch (type) {
          case PlainValue.Type.BLOCK_FOLDED:
          case PlainValue.Type.BLOCK_LITERAL:
          case PlainValue.Type.QUOTE_DOUBLE:
          case PlainValue.Type.QUOTE_SINGLE:
            return PlainValue.defaultTags.STR

          case PlainValue.Type.FLOW_MAP:
          case PlainValue.Type.MAP:
            return PlainValue.defaultTags.MAP

          case PlainValue.Type.FLOW_SEQ:
          case PlainValue.Type.SEQ:
            return PlainValue.defaultTags.SEQ

          case PlainValue.Type.PLAIN:
            return nonSpecific ? PlainValue.defaultTags.STR : null

          default:
            return null
        }
      }

      function resolveByTagName(doc, node, tagName) {
        const { tags } = doc.schema
        const matchWithTest = []

        for (const tag of tags) {
          if (tag.tag === tagName) {
            if (tag.test) matchWithTest.push(tag)
            else {
              const res = tag.resolve(doc, node)
              return res instanceof Collection ? res : new Scalar(res)
            }
          }
        }

        const str = resolveString(doc, node)
        if (typeof str === "string" && matchWithTest.length > 0)
          return resolveScalar(str, matchWithTest, tags.scalarFallback)
        return null
      }

      function getFallbackTagName({ type }) {
        switch (type) {
          case PlainValue.Type.FLOW_MAP:
          case PlainValue.Type.MAP:
            return PlainValue.defaultTags.MAP

          case PlainValue.Type.FLOW_SEQ:
          case PlainValue.Type.SEQ:
            return PlainValue.defaultTags.SEQ

          default:
            return PlainValue.defaultTags.STR
        }
      }

      function resolveTag(doc, node, tagName) {
        try {
          const res = resolveByTagName(doc, node, tagName)

          if (res) {
            if (tagName && node.tag) res.tag = tagName
            return res
          }
        } catch (error) {
          /* istanbul ignore if */
          if (!error.source) error.source = node
          doc.errors.push(error)
          return null
        }

        try {
          const fallback = getFallbackTagName(node)
          if (!fallback) throw new Error(`The tag ${tagName} is unavailable`)
          const msg = `The tag ${tagName} is unavailable, falling back to ${fallback}`
          doc.warnings.push(new PlainValue.YAMLWarning(node, msg))
          const res = resolveByTagName(doc, node, fallback)
          res.tag = tagName
          return res
        } catch (error) {
          const refError = new PlainValue.YAMLReferenceError(node, error.message)
          refError.stack = error.stack
          doc.errors.push(refError)
          return null
        }
      }

      const isCollectionItem = (node) => {
        if (!node) return false
        const { type } = node
        return (
          type === PlainValue.Type.MAP_KEY ||
          type === PlainValue.Type.MAP_VALUE ||
          type === PlainValue.Type.SEQ_ITEM
        )
      }

      function resolveNodeProps(errors, node) {
        const comments = {
          before: [],
          after: []
        }
        let hasAnchor = false
        let hasTag = false
        const props = isCollectionItem(node.context.parent)
          ? node.context.parent.props.concat(node.props)
          : node.props

        for (const { start, end } of props) {
          switch (node.context.src[start]) {
            case PlainValue.Char.COMMENT: {
              if (!node.commentHasRequiredWhitespace(start)) {
                const msg = "Comments must be separated from other tokens by white space characters"
                errors.push(new PlainValue.YAMLSemanticError(node, msg))
              }

              const { header, valueRange } = node
              const cc =
                valueRange && (start > valueRange.start || (header && start > header.start))
                  ? comments.after
                  : comments.before
              cc.push(node.context.src.slice(start + 1, end))
              break
            }
            // Actual anchor & tag resolution is handled by schema, here we just complain

            case PlainValue.Char.ANCHOR:
              if (hasAnchor) {
                const msg = "A node can have at most one anchor"
                errors.push(new PlainValue.YAMLSemanticError(node, msg))
              }

              hasAnchor = true
              break

            case PlainValue.Char.TAG:
              if (hasTag) {
                const msg = "A node can have at most one tag"
                errors.push(new PlainValue.YAMLSemanticError(node, msg))
              }

              hasTag = true
              break
          }
        }

        return {
          comments,
          hasAnchor,
          hasTag
        }
      }

      function resolveNodeValue(doc, node) {
        const { anchors, errors, schema } = doc

        if (node.type === PlainValue.Type.ALIAS) {
          const name = node.rawValue
          const src = anchors.getNode(name)

          if (!src) {
            const msg = `Aliased anchor not found: ${name}`
            errors.push(new PlainValue.YAMLReferenceError(node, msg))
            return null
          } // Lazy resolution for circular references

          const res = new Alias(src)

          anchors._cstAliases.push(res)

          return res
        }

        const tagName = resolveTagName(doc, node)
        if (tagName) return resolveTag(doc, node, tagName)

        if (node.type !== PlainValue.Type.PLAIN) {
          const msg = `Failed to resolve ${node.type} node here`
          errors.push(new PlainValue.YAMLSyntaxError(node, msg))
          return null
        }

        try {
          const str = resolveString(doc, node)
          return resolveScalar(str, schema.tags, schema.tags.scalarFallback)
        } catch (error) {
          if (!error.source) error.source = node
          errors.push(error)
          return null
        }
      } // sets node.resolved on success

      function resolveNode(doc, node) {
        if (!node) return null
        if (node.error) doc.errors.push(node.error)
        const { comments, hasAnchor, hasTag } = resolveNodeProps(doc.errors, node)

        if (hasAnchor) {
          const { anchors } = doc
          const name = node.anchor
          const prev = anchors.getNode(name) // At this point, aliases for any preceding node with the same anchor
          // name have already been resolved, so it may safely be renamed.

          if (prev) anchors.map[anchors.newName(name)] = prev // During parsing, we need to store the CST node in anchors.map as
          // anchors need to be available during resolution to allow for
          // circular references.

          anchors.map[name] = node
        }

        if (node.type === PlainValue.Type.ALIAS && (hasAnchor || hasTag)) {
          const msg = "An alias node must not specify any properties"
          doc.errors.push(new PlainValue.YAMLSemanticError(node, msg))
        }

        const res = resolveNodeValue(doc, node)

        if (res) {
          res.range = [node.range.start, node.range.end]
          if (doc.options.keepCstNodes) res.cstNode = node
          if (doc.options.keepNodeTypes) res.type = node.type
          const cb = comments.before.join("\n")

          if (cb) {
            res.commentBefore = res.commentBefore ? `${res.commentBefore}\n${cb}` : cb
          }

          const ca = comments.after.join("\n")
          if (ca) res.comment = res.comment ? `${res.comment}\n${ca}` : ca
        }

        return (node.resolved = res)
      }

      function resolveMap(doc, cst) {
        if (cst.type !== PlainValue.Type.MAP && cst.type !== PlainValue.Type.FLOW_MAP) {
          const msg = `A ${cst.type} node cannot be resolved as a mapping`
          doc.errors.push(new PlainValue.YAMLSyntaxError(cst, msg))
          return null
        }

        const { comments, items } =
          cst.type === PlainValue.Type.FLOW_MAP
            ? resolveFlowMapItems(doc, cst)
            : resolveBlockMapItems(doc, cst)
        const map = new YAMLMap()
        map.items = items
        resolveComments(map, comments)
        let hasCollectionKey = false

        for (let i = 0; i < items.length; ++i) {
          const { key: iKey } = items[i]
          if (iKey instanceof Collection) hasCollectionKey = true

          if (doc.schema.merge && iKey && iKey.value === MERGE_KEY) {
            items[i] = new Merge(items[i])
            const sources = items[i].value.items
            let error = null
            sources.some((node) => {
              if (node instanceof Alias) {
                // During parsing, alias sources are CST nodes; to account for
                // circular references their resolved values can't be used here.
                const { type } = node.source
                if (type === PlainValue.Type.MAP || type === PlainValue.Type.FLOW_MAP) return false
                return (error = "Merge nodes aliases can only point to maps")
              }

              return (error = "Merge nodes can only have Alias nodes as values")
            })
            if (error) doc.errors.push(new PlainValue.YAMLSemanticError(cst, error))
          } else {
            for (let j = i + 1; j < items.length; ++j) {
              const { key: jKey } = items[j]

              if (
                iKey === jKey ||
                (iKey &&
                  jKey &&
                  Object.prototype.hasOwnProperty.call(iKey, "value") &&
                  iKey.value === jKey.value)
              ) {
                const msg = `Map keys must be unique; "${iKey}" is repeated`
                doc.errors.push(new PlainValue.YAMLSemanticError(cst, msg))
                break
              }
            }
          }
        }

        if (hasCollectionKey && !doc.options.mapAsMap) {
          const warn =
            "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this."
          doc.warnings.push(new PlainValue.YAMLWarning(cst, warn))
        }

        cst.resolved = map
        return map
      }

      const valueHasPairComment = ({ context: { lineStart, node, src }, props }) => {
        if (props.length === 0) return false
        const { start } = props[0]
        if (node && start > node.valueRange.start) return false
        if (src[start] !== PlainValue.Char.COMMENT) return false

        for (let i = lineStart; i < start; ++i) if (src[i] === "\n") return false

        return true
      }

      function resolvePairComment(item, pair) {
        if (!valueHasPairComment(item)) return
        const comment = item.getPropValue(0, PlainValue.Char.COMMENT, true)
        let found = false
        const cb = pair.value.commentBefore

        if (cb && cb.startsWith(comment)) {
          pair.value.commentBefore = cb.substr(comment.length + 1)
          found = true
        } else {
          const cc = pair.value.comment

          if (!item.node && cc && cc.startsWith(comment)) {
            pair.value.comment = cc.substr(comment.length + 1)
            found = true
          }
        }

        if (found) pair.comment = comment
      }

      function resolveBlockMapItems(doc, cst) {
        const comments = []
        const items = []
        let key = undefined
        let keyStart = null

        for (let i = 0; i < cst.items.length; ++i) {
          const item = cst.items[i]

          switch (item.type) {
            case PlainValue.Type.BLANK_LINE:
              comments.push({
                afterKey: !!key,
                before: items.length
              })
              break

            case PlainValue.Type.COMMENT:
              comments.push({
                afterKey: !!key,
                before: items.length,
                comment: item.comment
              })
              break

            case PlainValue.Type.MAP_KEY:
              if (key !== undefined) items.push(new Pair(key))
              if (item.error) doc.errors.push(item.error)
              key = resolveNode(doc, item.node)
              keyStart = null
              break

            case PlainValue.Type.MAP_VALUE:
              {
                if (key === undefined) key = null
                if (item.error) doc.errors.push(item.error)

                if (
                  !item.context.atLineStart &&
                  item.node &&
                  item.node.type === PlainValue.Type.MAP &&
                  !item.node.context.atLineStart
                ) {
                  const msg = "Nested mappings are not allowed in compact mappings"
                  doc.errors.push(new PlainValue.YAMLSemanticError(item.node, msg))
                }

                let valueNode = item.node

                if (!valueNode && item.props.length > 0) {
                  // Comments on an empty mapping value need to be preserved, so we
                  // need to construct a minimal empty node here to use instead of the
                  // missing `item.node`. -- eemeli/yaml#19
                  valueNode = new PlainValue.PlainValue(PlainValue.Type.PLAIN, [])
                  valueNode.context = {
                    parent: item,
                    src: item.context.src
                  }
                  const pos = item.range.start + 1
                  valueNode.range = {
                    start: pos,
                    end: pos
                  }
                  valueNode.valueRange = {
                    start: pos,
                    end: pos
                  }

                  if (typeof item.range.origStart === "number") {
                    const origPos = item.range.origStart + 1
                    valueNode.range.origStart = valueNode.range.origEnd = origPos
                    valueNode.valueRange.origStart = valueNode.valueRange.origEnd = origPos
                  }
                }

                const pair = new Pair(key, resolveNode(doc, valueNode))
                resolvePairComment(item, pair)
                items.push(pair)

                if (key && typeof keyStart === "number") {
                  if (item.range.start > keyStart + 1024) doc.errors.push(getLongKeyError(cst, key))
                }

                key = undefined
                keyStart = null
              }
              break

            default:
              if (key !== undefined) items.push(new Pair(key))
              key = resolveNode(doc, item)
              keyStart = item.range.start
              if (item.error) doc.errors.push(item.error)

              next: for (let j = i + 1; ; ++j) {
                const nextItem = cst.items[j]

                switch (nextItem && nextItem.type) {
                  case PlainValue.Type.BLANK_LINE:
                  case PlainValue.Type.COMMENT:
                    continue next

                  case PlainValue.Type.MAP_VALUE:
                    break next

                  default: {
                    const msg = "Implicit map keys need to be followed by map values"
                    doc.errors.push(new PlainValue.YAMLSemanticError(item, msg))
                    break next
                  }
                }
              }

              if (item.valueRangeContainsNewline) {
                const msg = "Implicit map keys need to be on a single line"
                doc.errors.push(new PlainValue.YAMLSemanticError(item, msg))
              }
          }
        }

        if (key !== undefined) items.push(new Pair(key))
        return {
          comments,
          items
        }
      }

      function resolveFlowMapItems(doc, cst) {
        const comments = []
        const items = []
        let key = undefined
        let explicitKey = false
        let next = "{"

        for (let i = 0; i < cst.items.length; ++i) {
          const item = cst.items[i]

          if (typeof item.char === "string") {
            const { char, offset } = item

            if (char === "?" && key === undefined && !explicitKey) {
              explicitKey = true
              next = ":"
              continue
            }

            if (char === ":") {
              if (key === undefined) key = null

              if (next === ":") {
                next = ","
                continue
              }
            } else {
              if (explicitKey) {
                if (key === undefined && char !== ",") key = null
                explicitKey = false
              }

              if (key !== undefined) {
                items.push(new Pair(key))
                key = undefined

                if (char === ",") {
                  next = ":"
                  continue
                }
              }
            }

            if (char === "}") {
              if (i === cst.items.length - 1) continue
            } else if (char === next) {
              next = ":"
              continue
            }

            const msg = `Flow map contains an unexpected ${char}`
            const err = new PlainValue.YAMLSyntaxError(cst, msg)
            err.offset = offset
            doc.errors.push(err)
          } else if (item.type === PlainValue.Type.BLANK_LINE) {
            comments.push({
              afterKey: !!key,
              before: items.length
            })
          } else if (item.type === PlainValue.Type.COMMENT) {
            checkFlowCommentSpace(doc.errors, item)
            comments.push({
              afterKey: !!key,
              before: items.length,
              comment: item.comment
            })
          } else if (key === undefined) {
            if (next === ",")
              doc.errors.push(
                new PlainValue.YAMLSemanticError(item, "Separator , missing in flow map")
              )
            key = resolveNode(doc, item)
          } else {
            if (next !== ",")
              doc.errors.push(
                new PlainValue.YAMLSemanticError(item, "Indicator : missing in flow map entry")
              )
            items.push(new Pair(key, resolveNode(doc, item)))
            key = undefined
            explicitKey = false
          }
        }

        checkFlowCollectionEnd(doc.errors, cst)
        if (key !== undefined) items.push(new Pair(key))
        return {
          comments,
          items
        }
      }

      function resolveSeq(doc, cst) {
        if (cst.type !== PlainValue.Type.SEQ && cst.type !== PlainValue.Type.FLOW_SEQ) {
          const msg = `A ${cst.type} node cannot be resolved as a sequence`
          doc.errors.push(new PlainValue.YAMLSyntaxError(cst, msg))
          return null
        }

        const { comments, items } =
          cst.type === PlainValue.Type.FLOW_SEQ
            ? resolveFlowSeqItems(doc, cst)
            : resolveBlockSeqItems(doc, cst)
        const seq = new YAMLSeq()
        seq.items = items
        resolveComments(seq, comments)

        if (
          !doc.options.mapAsMap &&
          items.some((it) => it instanceof Pair && it.key instanceof Collection)
        ) {
          const warn =
            "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this."
          doc.warnings.push(new PlainValue.YAMLWarning(cst, warn))
        }

        cst.resolved = seq
        return seq
      }

      function resolveBlockSeqItems(doc, cst) {
        const comments = []
        const items = []

        for (let i = 0; i < cst.items.length; ++i) {
          const item = cst.items[i]

          switch (item.type) {
            case PlainValue.Type.BLANK_LINE:
              comments.push({
                before: items.length
              })
              break

            case PlainValue.Type.COMMENT:
              comments.push({
                comment: item.comment,
                before: items.length
              })
              break

            case PlainValue.Type.SEQ_ITEM:
              if (item.error) doc.errors.push(item.error)
              items.push(resolveNode(doc, item.node))

              if (item.hasProps) {
                const msg = "Sequence items cannot have tags or anchors before the - indicator"
                doc.errors.push(new PlainValue.YAMLSemanticError(item, msg))
              }

              break

            default:
              if (item.error) doc.errors.push(item.error)
              doc.errors.push(
                new PlainValue.YAMLSyntaxError(item, `Unexpected ${item.type} node in sequence`)
              )
          }
        }

        return {
          comments,
          items
        }
      }

      function resolveFlowSeqItems(doc, cst) {
        const comments = []
        const items = []
        let explicitKey = false
        let key = undefined
        let keyStart = null
        let next = "["
        let prevItem = null

        for (let i = 0; i < cst.items.length; ++i) {
          const item = cst.items[i]

          if (typeof item.char === "string") {
            const { char, offset } = item

            if (char !== ":" && (explicitKey || key !== undefined)) {
              if (explicitKey && key === undefined) key = next ? items.pop() : null
              items.push(new Pair(key))
              explicitKey = false
              key = undefined
              keyStart = null
            }

            if (char === next) {
              next = null
            } else if (!next && char === "?") {
              explicitKey = true
            } else if (next !== "[" && char === ":" && key === undefined) {
              if (next === ",") {
                key = items.pop()

                if (key instanceof Pair) {
                  const msg = "Chaining flow sequence pairs is invalid"
                  const err = new PlainValue.YAMLSemanticError(cst, msg)
                  err.offset = offset
                  doc.errors.push(err)
                }

                if (!explicitKey && typeof keyStart === "number") {
                  const keyEnd = item.range ? item.range.start : item.offset
                  if (keyEnd > keyStart + 1024) doc.errors.push(getLongKeyError(cst, key))
                  const { src } = prevItem.context

                  for (let i = keyStart; i < keyEnd; ++i)
                    if (src[i] === "\n") {
                      const msg = "Implicit keys of flow sequence pairs need to be on a single line"
                      doc.errors.push(new PlainValue.YAMLSemanticError(prevItem, msg))
                      break
                    }
                }
              } else {
                key = null
              }

              keyStart = null
              explicitKey = false
              next = null
            } else if (next === "[" || char !== "]" || i < cst.items.length - 1) {
              const msg = `Flow sequence contains an unexpected ${char}`
              const err = new PlainValue.YAMLSyntaxError(cst, msg)
              err.offset = offset
              doc.errors.push(err)
            }
          } else if (item.type === PlainValue.Type.BLANK_LINE) {
            comments.push({
              before: items.length
            })
          } else if (item.type === PlainValue.Type.COMMENT) {
            checkFlowCommentSpace(doc.errors, item)
            comments.push({
              comment: item.comment,
              before: items.length
            })
          } else {
            if (next) {
              const msg = `Expected a ${next} in flow sequence`
              doc.errors.push(new PlainValue.YAMLSemanticError(item, msg))
            }

            const value = resolveNode(doc, item)

            if (key === undefined) {
              items.push(value)
              prevItem = item
            } else {
              items.push(new Pair(key, value))
              key = undefined
            }

            keyStart = item.range.start
            next = ","
          }
        }

        checkFlowCollectionEnd(doc.errors, cst)
        if (key !== undefined) items.push(new Pair(key))
        return {
          comments,
          items
        }
      }

      exports.Alias = Alias
      exports.Collection = Collection
      exports.Merge = Merge
      exports.Node = Node
      exports.Pair = Pair
      exports.Scalar = Scalar
      exports.YAMLMap = YAMLMap
      exports.YAMLSeq = YAMLSeq
      exports.addComment = addComment
      exports.binaryOptions = binaryOptions
      exports.boolOptions = boolOptions
      exports.findPair = findPair
      exports.intOptions = intOptions
      exports.isEmptyPath = isEmptyPath
      exports.nullOptions = nullOptions
      exports.resolveMap = resolveMap
      exports.resolveNode = resolveNode
      exports.resolveSeq = resolveSeq
      exports.resolveString = resolveString
      exports.strOptions = strOptions
      exports.stringifyNumber = stringifyNumber
      exports.stringifyString = stringifyString
      exports.toJSON = toJSON

      /***/
    },

    /***/ 95130: /***/ (__unused_webpack_module, exports, __nccwpck_require__) => {
      "use strict"

      var PlainValue = __nccwpck_require__(24941)
      var resolveSeq = __nccwpck_require__(39914)

      /* global atob, btoa, Buffer */
      const binary = {
        identify: (value) => value instanceof Uint8Array,
        // Buffer inherits from Uint8Array
        default: false,
        tag: "tag:yaml.org,2002:binary",

        /**
         * Returns a Buffer in node and an Uint8Array in browsers
         *
         * To use the resulting buffer as an image, you'll want to do something like:
         *
         *   const blob = new Blob([buffer], { type: 'image/jpeg' })
         *   document.querySelector('#photo').src = URL.createObjectURL(blob)
         */
        resolve: (doc, node) => {
          const src = resolveSeq.resolveString(doc, node)

          if (typeof Buffer === "function") {
            return Buffer.from(src, "base64")
          } else if (typeof atob === "function") {
            // On IE 11, atob() can't handle newlines
            const str = atob(src.replace(/[\n\r]/g, ""))
            const buffer = new Uint8Array(str.length)

            for (let i = 0; i < str.length; ++i) buffer[i] = str.charCodeAt(i)

            return buffer
          } else {
            const msg =
              "This environment does not support reading binary tags; either Buffer or atob is required"
            doc.errors.push(new PlainValue.YAMLReferenceError(node, msg))
            return null
          }
        },
        options: resolveSeq.binaryOptions,
        stringify: ({ comment, type, value }, ctx, onComment, onChompKeep) => {
          let src

          if (typeof Buffer === "function") {
            src =
              value instanceof Buffer
                ? value.toString("base64")
                : Buffer.from(value.buffer).toString("base64")
          } else if (typeof btoa === "function") {
            let s = ""

            for (let i = 0; i < value.length; ++i) s += String.fromCharCode(value[i])

            src = btoa(s)
          } else {
            throw new Error(
              "This environment does not support writing binary tags; either Buffer or btoa is required"
            )
          }

          if (!type) type = resolveSeq.binaryOptions.defaultType

          if (type === PlainValue.Type.QUOTE_DOUBLE) {
            value = src
          } else {
            const { lineWidth } = resolveSeq.binaryOptions
            const n = Math.ceil(src.length / lineWidth)
            const lines = new Array(n)

            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
              lines[i] = src.substr(o, lineWidth)
            }

            value = lines.join(type === PlainValue.Type.BLOCK_LITERAL ? "\n" : " ")
          }

          return resolveSeq.stringifyString(
            {
              comment,
              type,
              value
            },
            ctx,
            onComment,
            onChompKeep
          )
        }
      }

      function parsePairs(doc, cst) {
        const seq = resolveSeq.resolveSeq(doc, cst)

        for (let i = 0; i < seq.items.length; ++i) {
          let item = seq.items[i]
          if (item instanceof resolveSeq.Pair) continue
          else if (item instanceof resolveSeq.YAMLMap) {
            if (item.items.length > 1) {
              const msg = "Each pair must have its own sequence indicator"
              throw new PlainValue.YAMLSemanticError(cst, msg)
            }

            const pair = item.items[0] || new resolveSeq.Pair()
            if (item.commentBefore)
              pair.commentBefore = pair.commentBefore
                ? `${item.commentBefore}\n${pair.commentBefore}`
                : item.commentBefore
            if (item.comment)
              pair.comment = pair.comment ? `${item.comment}\n${pair.comment}` : item.comment
            item = pair
          }
          seq.items[i] = item instanceof resolveSeq.Pair ? item : new resolveSeq.Pair(item)
        }

        return seq
      }
      function createPairs(schema, iterable, ctx) {
        const pairs = new resolveSeq.YAMLSeq(schema)
        pairs.tag = "tag:yaml.org,2002:pairs"

        for (const it of iterable) {
          let key, value

          if (Array.isArray(it)) {
            if (it.length === 2) {
              key = it[0]
              value = it[1]
            } else throw new TypeError(`Expected [key, value] tuple: ${it}`)
          } else if (it && it instanceof Object) {
            const keys = Object.keys(it)

            if (keys.length === 1) {
              key = keys[0]
              value = it[key]
            } else throw new TypeError(`Expected { key: value } tuple: ${it}`)
          } else {
            key = it
          }

          const pair = schema.createPair(key, value, ctx)
          pairs.items.push(pair)
        }

        return pairs
      }
      const pairs = {
        default: false,
        tag: "tag:yaml.org,2002:pairs",
        resolve: parsePairs,
        createNode: createPairs
      }

      class YAMLOMap extends resolveSeq.YAMLSeq {
        constructor() {
          super()

          PlainValue._defineProperty(this, "add", resolveSeq.YAMLMap.prototype.add.bind(this))

          PlainValue._defineProperty(this, "delete", resolveSeq.YAMLMap.prototype.delete.bind(this))

          PlainValue._defineProperty(this, "get", resolveSeq.YAMLMap.prototype.get.bind(this))

          PlainValue._defineProperty(this, "has", resolveSeq.YAMLMap.prototype.has.bind(this))

          PlainValue._defineProperty(this, "set", resolveSeq.YAMLMap.prototype.set.bind(this))

          this.tag = YAMLOMap.tag
        }

        toJSON(_, ctx) {
          const map = new Map()
          if (ctx && ctx.onCreate) ctx.onCreate(map)

          for (const pair of this.items) {
            let key, value

            if (pair instanceof resolveSeq.Pair) {
              key = resolveSeq.toJSON(pair.key, "", ctx)
              value = resolveSeq.toJSON(pair.value, key, ctx)
            } else {
              key = resolveSeq.toJSON(pair, "", ctx)
            }

            if (map.has(key)) throw new Error("Ordered maps must not include duplicate keys")
            map.set(key, value)
          }

          return map
        }
      }

      PlainValue._defineProperty(YAMLOMap, "tag", "tag:yaml.org,2002:omap")

      function parseOMap(doc, cst) {
        const pairs = parsePairs(doc, cst)
        const seenKeys = []

        for (const { key } of pairs.items) {
          if (key instanceof resolveSeq.Scalar) {
            if (seenKeys.includes(key.value)) {
              const msg = "Ordered maps must not include duplicate keys"
              throw new PlainValue.YAMLSemanticError(cst, msg)
            } else {
              seenKeys.push(key.value)
            }
          }
        }

        return Object.assign(new YAMLOMap(), pairs)
      }

      function createOMap(schema, iterable, ctx) {
        const pairs = createPairs(schema, iterable, ctx)
        const omap = new YAMLOMap()
        omap.items = pairs.items
        return omap
      }

      const omap = {
        identify: (value) => value instanceof Map,
        nodeClass: YAMLOMap,
        default: false,
        tag: "tag:yaml.org,2002:omap",
        resolve: parseOMap,
        createNode: createOMap
      }

      class YAMLSet extends resolveSeq.YAMLMap {
        constructor() {
          super()
          this.tag = YAMLSet.tag
        }

        add(key) {
          const pair = key instanceof resolveSeq.Pair ? key : new resolveSeq.Pair(key)
          const prev = resolveSeq.findPair(this.items, pair.key)
          if (!prev) this.items.push(pair)
        }

        get(key, keepPair) {
          const pair = resolveSeq.findPair(this.items, key)
          return !keepPair && pair instanceof resolveSeq.Pair
            ? pair.key instanceof resolveSeq.Scalar
              ? pair.key.value
              : pair.key
            : pair
        }

        set(key, value) {
          if (typeof value !== "boolean")
            throw new Error(
              `Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`
            )
          const prev = resolveSeq.findPair(this.items, key)

          if (prev && !value) {
            this.items.splice(this.items.indexOf(prev), 1)
          } else if (!prev && value) {
            this.items.push(new resolveSeq.Pair(key))
          }
        }

        toJSON(_, ctx) {
          return super.toJSON(_, ctx, Set)
        }

        toString(ctx, onComment, onChompKeep) {
          if (!ctx) return JSON.stringify(this)
          if (this.hasAllNullValues()) return super.toString(ctx, onComment, onChompKeep)
          else throw new Error("Set items must all have null values")
        }
      }

      PlainValue._defineProperty(YAMLSet, "tag", "tag:yaml.org,2002:set")

      function parseSet(doc, cst) {
        const map = resolveSeq.resolveMap(doc, cst)
        if (!map.hasAllNullValues())
          throw new PlainValue.YAMLSemanticError(cst, "Set items must all have null values")
        return Object.assign(new YAMLSet(), map)
      }

      function createSet(schema, iterable, ctx) {
        const set = new YAMLSet()

        for (const value of iterable) set.items.push(schema.createPair(value, null, ctx))

        return set
      }

      const set = {
        identify: (value) => value instanceof Set,
        nodeClass: YAMLSet,
        default: false,
        tag: "tag:yaml.org,2002:set",
        resolve: parseSet,
        createNode: createSet
      }

      const parseSexagesimal = (sign, parts) => {
        const n = parts.split(":").reduce((n, p) => n * 60 + Number(p), 0)
        return sign === "-" ? -n : n
      } // hhhh:mm:ss.sss

      const stringifySexagesimal = ({ value }) => {
        if (isNaN(value) || !isFinite(value)) return resolveSeq.stringifyNumber(value)
        let sign = ""

        if (value < 0) {
          sign = "-"
          value = Math.abs(value)
        }

        const parts = [value % 60] // seconds, including ms

        if (value < 60) {
          parts.unshift(0) // at least one : is required
        } else {
          value = Math.round((value - parts[0]) / 60)
          parts.unshift(value % 60) // minutes

          if (value >= 60) {
            value = Math.round((value - parts[0]) / 60)
            parts.unshift(value) // hours
          }
        }

        return (
          sign +
          parts
            .map((n) => (n < 10 ? "0" + String(n) : String(n)))
            .join(":")
            .replace(/000000\d*$/, "") // % 60 may introduce error
        )
      }

      const intTime = {
        identify: (value) => typeof value === "number",
        default: true,
        tag: "tag:yaml.org,2002:int",
        format: "TIME",
        test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,
        resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, "")),
        stringify: stringifySexagesimal
      }
      const floatTime = {
        identify: (value) => typeof value === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        format: "TIME",
        test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)$/,
        resolve: (str, sign, parts) => parseSexagesimal(sign, parts.replace(/_/g, "")),
        stringify: stringifySexagesimal
      }
      const timestamp = {
        identify: (value) => value instanceof Date,
        default: true,
        tag: "tag:yaml.org,2002:timestamp",
        // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
        // may be omitted altogether, resulting in a date format. In such a case, the time part is
        // assumed to be 00:00:00Z (start of day, UTC).
        test: RegExp(
          "^(?:" +
            "([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})" + // YYYY-Mm-Dd
            "(?:(?:t|T|[ \\t]+)" + // t | T | whitespace
            "([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)" + // Hh:Mm:Ss(.ss)?
            "(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?" + // Z | +5 | -03:30
            ")?" +
            ")$"
        ),
        resolve: (str, year, month, day, hour, minute, second, millisec, tz) => {
          if (millisec) millisec = (millisec + "00").substr(1, 3)
          let date = Date.UTC(
            year,
            month - 1,
            day,
            hour || 0,
            minute || 0,
            second || 0,
            millisec || 0
          )

          if (tz && tz !== "Z") {
            let d = parseSexagesimal(tz[0], tz.slice(1))
            if (Math.abs(d) < 30) d *= 60
            date -= 60000 * d
          }

          return new Date(date)
        },
        stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
      }

      /* global console, process, YAML_SILENCE_DEPRECATION_WARNINGS, YAML_SILENCE_WARNINGS */
      function shouldWarn(deprecation) {
        const env = (typeof process !== "undefined" && process.env) || {}

        if (deprecation) {
          if (typeof YAML_SILENCE_DEPRECATION_WARNINGS !== "undefined")
            return !YAML_SILENCE_DEPRECATION_WARNINGS
          return !env.YAML_SILENCE_DEPRECATION_WARNINGS
        }

        if (typeof YAML_SILENCE_WARNINGS !== "undefined") return !YAML_SILENCE_WARNINGS
        return !env.YAML_SILENCE_WARNINGS
      }

      function warn(warning, type) {
        if (shouldWarn(false)) {
          const emit = typeof process !== "undefined" && process.emitWarning // This will throw in Jest if `warning` is an Error instance due to
          // https://github.com/facebook/jest/issues/2549

          if (emit) emit(warning, type)
          else {
            // eslint-disable-next-line no-console
            console.warn(type ? `${type}: ${warning}` : warning)
          }
        }
      }
      function warnFileDeprecation(filename) {
        if (shouldWarn(true)) {
          const path = filename
            .replace(/.*yaml[/\\]/i, "")
            .replace(/\.js$/, "")
            .replace(/\\/g, "/")
          warn(
            `The endpoint 'yaml/${path}' will be removed in a future release.`,
            "DeprecationWarning"
          )
        }
      }
      const warned = {}
      function warnOptionDeprecation(name, alternative) {
        if (!warned[name] && shouldWarn(true)) {
          warned[name] = true
          let msg = `The option '${name}' will be removed in a future release`
          msg += alternative ? `, use '${alternative}' instead.` : "."
          warn(msg, "DeprecationWarning")
        }
      }

      exports.binary = binary
      exports.floatTime = floatTime
      exports.intTime = intTime
      exports.omap = omap
      exports.pairs = pairs
      exports.set = set
      exports.timestamp = timestamp
      exports.warn = warn
      exports.warnFileDeprecation = warnFileDeprecation
      exports.warnOptionDeprecation = warnOptionDeprecation

      /***/
    },

    /***/ 44603: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      module.exports = __nccwpck_require__(44083).YAML

      /***/
    },

    /***/ 19706: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '{"$schema":"http://json-schema.org/draft-07/schema","default":{},"type":"object","definitions":{"rule":{"oneOf":[{"description":"A rule","type":"array","items":[{"description":"Level: 0 disables the rule. For 1 it will be considered a warning, for 2 an error","type":"number","enum":[0,1,2]},{"description":"Applicable: always|never: never inverts the rule","type":"string","enum":["always","never"]},{"description":"Value: the value for this rule"}],"minItems":1,"maxItems":3,"additionalItems":false},{"description":"A rule","typeof":"function"}]}},"properties":{"extends":{"description":"Resolveable ids to commitlint configurations to extend","oneOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"parserPreset":{"description":"Resolveable id to conventional-changelog parser preset to import and use","oneOf":[{"type":"string"},{"type":"object","properties":{"name":{"type":"string"},"path":{"type":"string"},"parserOpts":{}},"additionalProperties":true},{"typeof":"function"}]},"helpUrl":{"description":"Custom URL to show upon failure","type":"string"},"formatter":{"description":"Resolveable id to package, from node_modules, which formats the output","type":"string"},"rules":{"description":"Rules to check against","type":"object","propertyNames":{"type":"string"},"additionalProperties":{"$ref":"#/definitions/rule"}},"plugins":{"description":"Resolveable ids of commitlint plugins from node_modules","type":"array","items":{"anyOf":[{"type":"string"},{"required":["rules"],"rules":{}}]}},"ignores":{"type":"array","items":{"typeof":"function"},"description":"Additional commits to ignore, defined by ignore matchers"},"defaultIgnores":{"description":"Whether commitlint uses the default ignore rules","type":"boolean"}}}'
      )

      /***/
    },

    /***/ 78250: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '{"$schema":"https://json.schemastore.org/tsconfig","display":"Node 10","compilerOptions":{"lib":["es2018"],"module":"commonjs","target":"es2018","strict":true,"esModuleInterop":true,"skipLibCheck":true,"forceConsistentCasingInFileNames":true}}'
      )

      /***/
    },

    /***/ 56049: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '{"$schema":"https://json.schemastore.org/tsconfig","display":"Node 12","compilerOptions":{"lib":["es2019","es2020.promise","es2020.bigint","es2020.string"],"module":"commonjs","target":"es2019","strict":true,"esModuleInterop":true,"skipLibCheck":true,"forceConsistentCasingInFileNames":true}}'
      )

      /***/
    },

    /***/ 83754: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '{"$schema":"https://json.schemastore.org/tsconfig","display":"Node 14","compilerOptions":{"lib":["es2020"],"module":"commonjs","target":"es2020","strict":true,"esModuleInterop":true,"skipLibCheck":true,"forceConsistentCasingInFileNames":true}}'
      )

      /***/
    },

    /***/ 39777: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '{"$schema":"https://json.schemastore.org/tsconfig","display":"Node 16","compilerOptions":{"lib":["es2021"],"module":"commonjs","target":"es2021","strict":true,"esModuleInterop":true,"skipLibCheck":true,"forceConsistentCasingInFileNames":true}}'
      )

      /***/
    },

    /***/ 894: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '{"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON Schema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}'
      )

      /***/
    },

    /***/ 6680: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}'
      )

      /***/
    },

    /***/ 1907: /***/ (module) => {
      "use strict"
      module.exports = JSON.parse(
        '[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1000,1000],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6000],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8000,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8000]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9000],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[30000]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13000,13000],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43000,43000],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64000,64000],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66000,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[120000,120000],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128000,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23000]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149000]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32000]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195000,195000],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[40000]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918000,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]'
      )

      /***/
    },

    /***/ 46686: /***/ (module) => {
      "use strict"
      module.exports = { version: "10.4.0" }

      /***/
    }

    /******/
  }
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {}
  /******/
  /******/ // The require function
  /******/ function __nccwpck_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId]
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ id: moduleId,
      /******/ loaded: false,
      /******/ exports: {}
      /******/
    })
    /******/
    /******/ // Execute the module function
    /******/ var threw = true
    /******/ try {
      /******/ __webpack_modules__[moduleId].call(
        module.exports,
        module,
        module.exports,
        __nccwpck_require__
      )
      /******/ threw = false
      /******/
    } finally {
      /******/ if (threw) delete __webpack_module_cache__[moduleId]
      /******/
    }
    /******/
    /******/ // Flag the module as loaded
    /******/ module.loaded = true
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports
    /******/
  }
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ ;(() => {
    /******/ __nccwpck_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
    /******/
  })()
  /******/
  /******/ /* webpack/runtime/node module decorator */
  /******/ ;(() => {
    /******/ __nccwpck_require__.nmd = (module) => {
      /******/ module.paths = []
      /******/ if (!module.children) module.children = []
      /******/ return module
      /******/
    }
    /******/
  })()
  /******/
  /******/ /* webpack/runtime/compat */
  /******/
  /******/ if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/"
  /******/
  /************************************************************************/
  /******/
  /******/ // startup
  /******/ // Load entry module and return exports
  /******/ // This entry module is referenced by other modules so it can't be inlined
  /******/ var __webpack_exports__ = __nccwpck_require__(7965)
  /******/ module.exports = __webpack_exports__
  /******/
  /******/
})()
//# sourceMappingURL=index.js.map
